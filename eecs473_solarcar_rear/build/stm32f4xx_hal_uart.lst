ARM GAS  /tmp/ccnvFOuI.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"stm32f4xx_hal_uart.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.HAL_UART_Init,"ax",%progbits
  21              		.align	2
  22              		.global	HAL_UART_Init
  23              		.thumb
  24              		.thumb_func
  26              	HAL_UART_Init:
  27              	.LFB123:
  28              		.file 1 "Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c"
   1:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
   2:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ******************************************************************************
   3:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @file    stm32f4xx_hal_uart.c
   4:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @author  MCD Application Team
   5:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief   UART HAL module driver.
   6:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *          This file provides firmware functions to manage the following 
   7:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *          functionalities of the Universal Asynchronous Receiver Transmitter (UART) peripheral:
   8:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           + IO operation functions
  10:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           + Peripheral Control functions  
  11:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           + Peripheral State and Errors functions  
  12:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           
  13:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   @verbatim       
  14:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ==============================================================================
  15:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****                         ##### How to use this driver #####
  16:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ==============================================================================
  17:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   [..]
  18:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     The UART HAL driver can be used as follows:
  19:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
  20:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (#) Declare a UART_HandleTypeDef handle structure.
  21:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
  22:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (#) Initialize the UART low level resources by implementing the HAL_UART_MspInit() API:
  23:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (##) Enable the USARTx interface clock.
  24:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (##) UART pins configuration:
  25:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             (+++) Enable the clock for the UART GPIOs.
  26:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             (+++) Configure these UART pins as alternate function pull-up.
  27:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (##) NVIC configuration if you need to use interrupt process (HAL_UART_Transmit_IT()
  28:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****              and HAL_UART_Receive_IT() APIs):
  29:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             (+++) Configure the USARTx interrupt priority.
  30:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             (+++) Enable the NVIC USART IRQ handle.
ARM GAS  /tmp/ccnvFOuI.s 			page 2


  31:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (##) DMA Configuration if you need to use DMA process (HAL_UART_Transmit_DMA()
  32:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****              and HAL_UART_Receive_DMA() APIs):
  33:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             (+++) Declare a DMA handle structure for the Tx/Rx stream.
  34:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             (+++) Enable the DMAx interface clock.
  35:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             (+++) Configure the declared DMA handle structure with the required 
  36:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****                   Tx/Rx parameters.                
  37:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             (+++) Configure the DMA Tx/Rx Stream.
  38:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             (+++) Associate the initialized DMA handle to the UART DMA Tx/Rx handle.
  39:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             (+++) Configure the priority and enable the NVIC for the transfer complete 
  40:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****                   interrupt on the DMA Tx/Rx Stream.
  41:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
  42:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (#) Program the Baud Rate, Word Length, Stop Bit, Parity, Hardware 
  43:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         flow control and Mode(Receiver/Transmitter) in the Init structure.
  44:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
  45:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (#) For the UART asynchronous mode, initialize the UART registers by calling
  46:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         the HAL_UART_Init() API.
  47:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
  48:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (#) For the UART Half duplex mode, initialize the UART registers by calling 
  49:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         the HAL_HalfDuplex_Init() API.
  50:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
  51:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (#) For the LIN mode, initialize the UART registers by calling the HAL_LIN_Init() API.
  52:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
  53:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (#) For the Multi-Processor mode, initialize the UART registers by calling 
  54:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         the HAL_MultiProcessor_Init() API.
  55:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         
  56:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      [..] 
  57:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (@) The specific UART interrupts (Transmission complete interrupt, 
  58:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             RXNE interrupt and Error Interrupts) will be managed using the macros
  59:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             __HAL_UART_ENABLE_IT() and __HAL_UART_DISABLE_IT() inside the transmit 
  60:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             and receive process.
  61:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           
  62:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      [..] 
  63:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (@) These APIs (HAL_UART_Init() and HAL_HalfDuplex_Init()) configure also the 
  64:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             low level Hardware GPIO, CLOCK, CORTEX...etc) by calling the customized 
  65:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             HAL_UART_MspInit() API.
  66:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           
  67:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      [..] 
  68:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         Three operation modes are available within this driver :     
  69:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
  70:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      *** Polling mode IO operation ***
  71:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      =================================
  72:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      [..]    
  73:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) Send an amount of data in blocking mode using HAL_UART_Transmit() 
  74:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) Receive an amount of data in blocking mode using HAL_UART_Receive()
  75:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        
  76:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      *** Interrupt mode IO operation ***    
  77:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      ===================================
  78:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      [..]    
  79:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) Send an amount of data in non blocking mode using HAL_UART_Transmit_IT() 
  80:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) At transmission end of transfer HAL_UART_TxCpltCallback is executed and user can 
  81:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxCpltCallback
  82:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) Receive an amount of data in non blocking mode using HAL_UART_Receive_IT() 
  83:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) At reception end of transfer HAL_UART_RxCpltCallback is executed and user can 
  84:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxCpltCallback
  85:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) In case of transfer Error, HAL_UART_ErrorCallback() function is executed and user can 
  86:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_ErrorCallback
  87:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
ARM GAS  /tmp/ccnvFOuI.s 			page 3


  88:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      *** DMA mode IO operation ***    
  89:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      ==============================
  90:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      [..] 
  91:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) Send an amount of data in non blocking mode (DMA) using HAL_UART_Transmit_DMA() 
  92:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) At transmission end of half transfer HAL_UART_TxHalfCpltCallback is executed and user ca
  93:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxHalfCpltCallback 
  94:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) At transmission end of transfer HAL_UART_TxCpltCallback is executed and user can 
  95:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxCpltCallback
  96:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) Receive an amount of data in non blocking mode (DMA) using HAL_UART_Receive_DMA() 
  97:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) At reception end of half transfer HAL_UART_RxHalfCpltCallback is executed and user can 
  98:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxHalfCpltCallback 
  99:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) At reception end of transfer HAL_UART_RxCpltCallback is executed and user can 
 100:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxCpltCallback
 101:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) In case of transfer Error, HAL_UART_ErrorCallback() function is executed and user can 
 102:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_ErrorCallback
 103:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) Pause the DMA Transfer using HAL_UART_DMAPause()      
 104:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) Resume the DMA Transfer using HAL_UART_DMAResume()  
 105:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) Stop the DMA Transfer using HAL_UART_DMAStop()      
 106:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 107:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      *** UART HAL driver macros list ***
 108:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      ============================================= 
 109:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      [..]
 110:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        Below the list of most used macros in UART HAL driver.
 111:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        
 112:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       (+) __HAL_UART_ENABLE: Enable the UART peripheral 
 113:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       (+) __HAL_UART_DISABLE: Disable the UART peripheral     
 114:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       (+) __HAL_UART_GET_FLAG : Check whether the specified UART flag is set or not
 115:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       (+) __HAL_UART_CLEAR_FLAG : Clear the specified UART pending flag
 116:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       (+) __HAL_UART_ENABLE_IT: Enable the specified UART interrupt
 117:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       (+) __HAL_UART_DISABLE_IT: Disable the specified UART interrupt
 118:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       (+) __HAL_UART_GET_IT_SOURCE: Check whether the specified UART interrupt has occurred or not
 119:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       
 120:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      [..] 
 121:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (@) You can refer to the UART HAL driver header file for more useful macros 
 122:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       
 123:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   @endverbatim
 124:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ******************************************************************************
 125:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @attention
 126:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *
 127:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
 128:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *
 129:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * Redistribution and use in source and binary forms, with or without modification,
 130:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * are permitted provided that the following conditions are met:
 131:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 132:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *      this list of conditions and the following disclaimer.
 133:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 134:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *      this list of conditions and the following disclaimer in the documentation
 135:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *      and/or other materials provided with the distribution.
 136:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 137:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *      may be used to endorse or promote products derived from this software
 138:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *      without specific prior written permission.
 139:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *
 140:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 141:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 142:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 143:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 144:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
ARM GAS  /tmp/ccnvFOuI.s 			page 4


 145:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 146:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 147:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 148:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 149:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 150:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *
 151:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ******************************************************************************
 152:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */ 
 153:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 154:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /* Includes ------------------------------------------------------------------*/
 155:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #include "stm32f4xx_hal.h"
 156:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 157:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /** @addtogroup STM32F4xx_HAL_Driver
 158:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @{
 159:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 160:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 161:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /** @defgroup UART UART
 162:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief HAL UART module driver
 163:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @{
 164:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 165:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #ifdef HAL_UART_MODULE_ENABLED
 166:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 167:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /* Private typedef -----------------------------------------------------------*/
 168:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /* Private define ------------------------------------------------------------*/
 169:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /** @addtogroup UART_Private_Constants
 170:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @{
 171:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 172:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
 173:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @}
 174:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 175:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /* Private macro -------------------------------------------------------------*/
 176:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /* Private variables ---------------------------------------------------------*/
 177:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /* Private function prototypes -----------------------------------------------*/
 178:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /** @addtogroup UART_Private_Functions   UART Private Functions
 179:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @{
 180:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 181:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_EndTxTransfer(UART_HandleTypeDef *huart);
 182:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_EndRxTransfer(UART_HandleTypeDef *huart);
 183:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma);
 184:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma);
 185:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma);
 186:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma);
 187:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMAError(DMA_HandleTypeDef *hdma); 
 188:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma);
 189:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma);
 190:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma);
 191:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 192:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 193:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart);
 194:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart);
 195:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart);
 196:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, Flag
 197:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_SetConfig (UART_HandleTypeDef *huart);
 198:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
 199:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @}
 200:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 201:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
ARM GAS  /tmp/ccnvFOuI.s 			page 5


 202:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /* Exported functions ---------------------------------------------------------*/
 203:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /** @defgroup UART_Exported_Functions UART Exported Functions
 204:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @{
 205:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 206:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 207:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group1 Initialization and de-initialization functions 
 208:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *  @brief    Initialization and Configuration functions 
 209:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *
 210:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** @verbatim    
 211:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** ===============================================================================
 212:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             ##### Initialization and Configuration functions #####
 213:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****  ===============================================================================  
 214:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     [..]
 215:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     This subsection provides a set of functions allowing to initialize the USARTx or the UARTy 
 216:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     in asynchronous mode.
 217:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       (+) For the asynchronous mode only these parameters can be configured: 
 218:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (++) Baud Rate
 219:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (++) Word Length 
 220:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (++) Stop Bit
 221:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (++) Parity: If the parity is enabled, then the MSB bit of the data written
 222:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****              in the data register is transmitted but is changed by the parity bit.
 223:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****              Depending on the frame length defined by the M bit (8-bits or 9-bits),
 224:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****              please refer to Reference manual for possible UART frame formats.           
 225:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (++) Hardware flow control
 226:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (++) Receiver/transmitter modes
 227:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (++) Over Sampling Method
 228:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     [..]
 229:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     The HAL_UART_Init(), HAL_HalfDuplex_Init(), HAL_LIN_Init() and HAL_MultiProcessor_Init() APIs 
 230:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     follow respectively the UART asynchronous, UART Half duplex, LIN and Multi-Processor
 231:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     configuration procedures (details for the procedures are available in reference manual (RM0329)
 232:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 233:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** @endverbatim
 234:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @{
 235:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 236:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 237:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
 238:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Initializes the UART mode according to the specified parameters in
 239:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         the UART_InitTypeDef and create the associated handle.
 240:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
 241:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 242:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
 243:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 244:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
 245:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
  29              		.loc 1 245 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 8
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 80B5     		push	{r7, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 82B0     		sub	sp, sp, #8
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 16
  41 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccnvFOuI.s 			page 6


  42              	.LCFI2:
  43              		.cfi_def_cfa_register 7
  44 0006 7860     		str	r0, [r7, #4]
 246:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check the UART handle allocation */
 247:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart == NULL)
  45              		.loc 1 247 0
  46 0008 7B68     		ldr	r3, [r7, #4]
  47 000a 002B     		cmp	r3, #0
  48 000c 01D1     		bne	.L2
 248:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 249:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_ERROR;
  49              		.loc 1 249 0
  50 000e 0123     		movs	r3, #1
  51 0010 3FE0     		b	.L3
  52              	.L2:
 250:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 251:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 252:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check the parameters */
 253:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 254:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   { 
 255:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
 256:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 257:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 258:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 259:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
 260:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 261:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     assert_param(IS_UART_INSTANCE(huart->Instance));
 262:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 263:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 264:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 265:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 266:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_RESET)
  53              		.loc 1 266 0
  54 0012 7B68     		ldr	r3, [r7, #4]
  55 0014 93F83930 		ldrb	r3, [r3, #57]
  56 0018 DBB2     		uxtb	r3, r3
  57 001a 002B     		cmp	r3, #0
  58 001c 06D1     		bne	.L4
 267:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {  
 268:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 269:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
  59              		.loc 1 269 0
  60 001e 7B68     		ldr	r3, [r7, #4]
  61 0020 0022     		movs	r2, #0
  62 0022 83F83820 		strb	r2, [r3, #56]
 270:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Init the low level hardware */
 271:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     HAL_UART_MspInit(huart);
  63              		.loc 1 271 0
  64 0026 7868     		ldr	r0, [r7, #4]
  65 0028 FFF7FEFF 		bl	HAL_UART_MspInit
  66              	.L4:
 272:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 273:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 274:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
  67              		.loc 1 274 0
  68 002c 7B68     		ldr	r3, [r7, #4]
  69 002e 2422     		movs	r2, #36
ARM GAS  /tmp/ccnvFOuI.s 			page 7


  70 0030 83F83920 		strb	r2, [r3, #57]
 275:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 276:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable the peripheral */
 277:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
  71              		.loc 1 277 0
  72 0034 7B68     		ldr	r3, [r7, #4]
  73 0036 1B68     		ldr	r3, [r3]
  74 0038 7A68     		ldr	r2, [r7, #4]
  75 003a 1268     		ldr	r2, [r2]
  76 003c D268     		ldr	r2, [r2, #12]
  77 003e 22F40052 		bic	r2, r2, #8192
  78 0042 DA60     		str	r2, [r3, #12]
 278:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 279:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Set the UART Communication parameters */
 280:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UART_SetConfig(huart);
  79              		.loc 1 280 0
  80 0044 7868     		ldr	r0, [r7, #4]
  81 0046 FFF7FEFF 		bl	UART_SetConfig
 281:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 282:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* In asynchronous mode, the following bits must be kept cleared: 
 283:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      - LINEN and CLKEN bits in the USART_CR2 register,
 284:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
 285:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
  82              		.loc 1 285 0
  83 004a 7B68     		ldr	r3, [r7, #4]
  84 004c 1B68     		ldr	r3, [r3]
  85 004e 7A68     		ldr	r2, [r7, #4]
  86 0050 1268     		ldr	r2, [r2]
  87 0052 1269     		ldr	r2, [r2, #16]
  88 0054 22F49042 		bic	r2, r2, #18432
  89 0058 1A61     		str	r2, [r3, #16]
 286:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
  90              		.loc 1 286 0
  91 005a 7B68     		ldr	r3, [r7, #4]
  92 005c 1B68     		ldr	r3, [r3]
  93 005e 7A68     		ldr	r2, [r7, #4]
  94 0060 1268     		ldr	r2, [r2]
  95 0062 5269     		ldr	r2, [r2, #20]
  96 0064 22F02A02 		bic	r2, r2, #42
  97 0068 5A61     		str	r2, [r3, #20]
 287:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 288:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Enable the peripheral */
 289:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
  98              		.loc 1 289 0
  99 006a 7B68     		ldr	r3, [r7, #4]
 100 006c 1B68     		ldr	r3, [r3]
 101 006e 7A68     		ldr	r2, [r7, #4]
 102 0070 1268     		ldr	r2, [r2]
 103 0072 D268     		ldr	r2, [r2, #12]
 104 0074 42F40052 		orr	r2, r2, #8192
 105 0078 DA60     		str	r2, [r3, #12]
 290:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 291:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Initialize the UART state */
 292:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 106              		.loc 1 292 0
 107 007a 7B68     		ldr	r3, [r7, #4]
 108 007c 0022     		movs	r2, #0
ARM GAS  /tmp/ccnvFOuI.s 			page 8


 109 007e DA63     		str	r2, [r3, #60]
 293:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState= HAL_UART_STATE_READY;
 110              		.loc 1 293 0
 111 0080 7B68     		ldr	r3, [r7, #4]
 112 0082 2022     		movs	r2, #32
 113 0084 83F83920 		strb	r2, [r3, #57]
 294:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxState= HAL_UART_STATE_READY;
 114              		.loc 1 294 0
 115 0088 7B68     		ldr	r3, [r7, #4]
 116 008a 2022     		movs	r2, #32
 117 008c 83F83A20 		strb	r2, [r3, #58]
 295:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 296:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 118              		.loc 1 296 0
 119 0090 0023     		movs	r3, #0
 120              	.L3:
 297:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 121              		.loc 1 297 0
 122 0092 1846     		mov	r0, r3
 123 0094 0837     		adds	r7, r7, #8
 124              	.LCFI3:
 125              		.cfi_def_cfa_offset 8
 126 0096 BD46     		mov	sp, r7
 127              	.LCFI4:
 128              		.cfi_def_cfa_register 13
 129              		@ sp needed
 130 0098 80BD     		pop	{r7, pc}
 131              		.cfi_endproc
 132              	.LFE123:
 134 009a 00BF     		.section	.text.HAL_HalfDuplex_Init,"ax",%progbits
 135              		.align	2
 136              		.global	HAL_HalfDuplex_Init
 137              		.thumb
 138              		.thumb_func
 140              	HAL_HalfDuplex_Init:
 141              	.LFB124:
 298:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 299:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
 300:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Initializes the half-duplex mode according to the specified
 301:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         parameters in the UART_InitTypeDef and create the associated handle.
 302:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
 303:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 304:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
 305:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 306:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
 307:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 142              		.loc 1 307 0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 8
 145              		@ frame_needed = 1, uses_anonymous_args = 0
 146 0000 80B5     		push	{r7, lr}
 147              	.LCFI5:
 148              		.cfi_def_cfa_offset 8
 149              		.cfi_offset 7, -8
 150              		.cfi_offset 14, -4
 151 0002 82B0     		sub	sp, sp, #8
 152              	.LCFI6:
ARM GAS  /tmp/ccnvFOuI.s 			page 9


 153              		.cfi_def_cfa_offset 16
 154 0004 00AF     		add	r7, sp, #0
 155              	.LCFI7:
 156              		.cfi_def_cfa_register 7
 157 0006 7860     		str	r0, [r7, #4]
 308:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check the UART handle allocation */
 309:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart == NULL)
 158              		.loc 1 309 0
 159 0008 7B68     		ldr	r3, [r7, #4]
 160 000a 002B     		cmp	r3, #0
 161 000c 01D1     		bne	.L6
 310:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 311:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_ERROR;
 162              		.loc 1 311 0
 163 000e 0123     		movs	r3, #1
 164 0010 47E0     		b	.L7
 165              	.L6:
 312:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 313:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****  
 314:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check the parameters */ 
 315:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
 316:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 317:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 318:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 319:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_RESET)
 166              		.loc 1 319 0
 167 0012 7B68     		ldr	r3, [r7, #4]
 168 0014 93F83930 		ldrb	r3, [r3, #57]
 169 0018 DBB2     		uxtb	r3, r3
 170 001a 002B     		cmp	r3, #0
 171 001c 06D1     		bne	.L8
 320:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   { 
 321:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 322:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 172              		.loc 1 322 0
 173 001e 7B68     		ldr	r3, [r7, #4]
 174 0020 0022     		movs	r2, #0
 175 0022 83F83820 		strb	r2, [r3, #56]
 323:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Init the low level hardware */
 324:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 176              		.loc 1 324 0
 177 0026 7868     		ldr	r0, [r7, #4]
 178 0028 FFF7FEFF 		bl	HAL_UART_MspInit
 179              	.L8:
 325:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 326:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 327:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 180              		.loc 1 327 0
 181 002c 7B68     		ldr	r3, [r7, #4]
 182 002e 2422     		movs	r2, #36
 183 0030 83F83920 		strb	r2, [r3, #57]
 328:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 329:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable the peripheral */
 330:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 184              		.loc 1 330 0
 185 0034 7B68     		ldr	r3, [r7, #4]
 186 0036 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccnvFOuI.s 			page 10


 187 0038 7A68     		ldr	r2, [r7, #4]
 188 003a 1268     		ldr	r2, [r2]
 189 003c D268     		ldr	r2, [r2, #12]
 190 003e 22F40052 		bic	r2, r2, #8192
 191 0042 DA60     		str	r2, [r3, #12]
 331:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 332:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Set the UART Communication parameters */
 333:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UART_SetConfig(huart);
 192              		.loc 1 333 0
 193 0044 7868     		ldr	r0, [r7, #4]
 194 0046 FFF7FEFF 		bl	UART_SetConfig
 334:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 335:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* In half-duplex mode, the following bits must be kept cleared: 
 336:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      - LINEN and CLKEN bits in the USART_CR2 register,
 337:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      - SCEN and IREN bits in the USART_CR3 register.*/
 338:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 195              		.loc 1 338 0
 196 004a 7B68     		ldr	r3, [r7, #4]
 197 004c 1B68     		ldr	r3, [r3]
 198 004e 7A68     		ldr	r2, [r7, #4]
 199 0050 1268     		ldr	r2, [r2]
 200 0052 1269     		ldr	r2, [r2, #16]
 201 0054 22F49042 		bic	r2, r2, #18432
 202 0058 1A61     		str	r2, [r3, #16]
 339:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 203              		.loc 1 339 0
 204 005a 7B68     		ldr	r3, [r7, #4]
 205 005c 1B68     		ldr	r3, [r3]
 206 005e 7A68     		ldr	r2, [r7, #4]
 207 0060 1268     		ldr	r2, [r2]
 208 0062 5269     		ldr	r2, [r2, #20]
 209 0064 22F02202 		bic	r2, r2, #34
 210 0068 5A61     		str	r2, [r3, #20]
 340:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 341:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
 342:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 211              		.loc 1 342 0
 212 006a 7B68     		ldr	r3, [r7, #4]
 213 006c 1B68     		ldr	r3, [r3]
 214 006e 7A68     		ldr	r2, [r7, #4]
 215 0070 1268     		ldr	r2, [r2]
 216 0072 5269     		ldr	r2, [r2, #20]
 217 0074 42F00802 		orr	r2, r2, #8
 218 0078 5A61     		str	r2, [r3, #20]
 343:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****  
 344:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Enable the peripheral */
 345:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 219              		.loc 1 345 0
 220 007a 7B68     		ldr	r3, [r7, #4]
 221 007c 1B68     		ldr	r3, [r3]
 222 007e 7A68     		ldr	r2, [r7, #4]
 223 0080 1268     		ldr	r2, [r2]
 224 0082 D268     		ldr	r2, [r2, #12]
 225 0084 42F40052 		orr	r2, r2, #8192
 226 0088 DA60     		str	r2, [r3, #12]
 346:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 347:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Initialize the UART state*/
ARM GAS  /tmp/ccnvFOuI.s 			page 11


 348:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 227              		.loc 1 348 0
 228 008a 7B68     		ldr	r3, [r7, #4]
 229 008c 0022     		movs	r2, #0
 230 008e DA63     		str	r2, [r3, #60]
 349:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState= HAL_UART_STATE_READY;
 231              		.loc 1 349 0
 232 0090 7B68     		ldr	r3, [r7, #4]
 233 0092 2022     		movs	r2, #32
 234 0094 83F83920 		strb	r2, [r3, #57]
 350:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxState= HAL_UART_STATE_READY;
 235              		.loc 1 350 0
 236 0098 7B68     		ldr	r3, [r7, #4]
 237 009a 2022     		movs	r2, #32
 238 009c 83F83A20 		strb	r2, [r3, #58]
 351:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 352:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 239              		.loc 1 352 0
 240 00a0 0023     		movs	r3, #0
 241              	.L7:
 353:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 242              		.loc 1 353 0
 243 00a2 1846     		mov	r0, r3
 244 00a4 0837     		adds	r7, r7, #8
 245              	.LCFI8:
 246              		.cfi_def_cfa_offset 8
 247 00a6 BD46     		mov	sp, r7
 248              	.LCFI9:
 249              		.cfi_def_cfa_register 13
 250              		@ sp needed
 251 00a8 80BD     		pop	{r7, pc}
 252              		.cfi_endproc
 253              	.LFE124:
 255              		.section	.text.HAL_LIN_Init,"ax",%progbits
 256              		.align	2
 257              		.global	HAL_LIN_Init
 258              		.thumb
 259              		.thumb_func
 261              	HAL_LIN_Init:
 262              	.LFB125:
 354:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 355:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
 356:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Initializes the LIN mode according to the specified
 357:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         parameters in the UART_InitTypeDef and create the associated handle.
 358:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
 359:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 360:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  BreakDetectLength Specifies the LIN break detection length.
 361:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         This parameter can be one of the following values:
 362:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
 363:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
 364:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
 365:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 366:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
 367:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 263              		.loc 1 367 0
 264              		.cfi_startproc
 265              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccnvFOuI.s 			page 12


 266              		@ frame_needed = 1, uses_anonymous_args = 0
 267 0000 80B5     		push	{r7, lr}
 268              	.LCFI10:
 269              		.cfi_def_cfa_offset 8
 270              		.cfi_offset 7, -8
 271              		.cfi_offset 14, -4
 272 0002 82B0     		sub	sp, sp, #8
 273              	.LCFI11:
 274              		.cfi_def_cfa_offset 16
 275 0004 00AF     		add	r7, sp, #0
 276              	.LCFI12:
 277              		.cfi_def_cfa_register 7
 278 0006 7860     		str	r0, [r7, #4]
 279 0008 3960     		str	r1, [r7]
 368:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check the UART handle allocation */
 369:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart == NULL)
 280              		.loc 1 369 0
 281 000a 7B68     		ldr	r3, [r7, #4]
 282 000c 002B     		cmp	r3, #0
 283 000e 01D1     		bne	.L10
 370:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 371:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_ERROR;
 284              		.loc 1 371 0
 285 0010 0123     		movs	r3, #1
 286 0012 57E0     		b	.L11
 287              	.L10:
 372:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 373:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    
 374:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check the parameters */
 375:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
 376:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
 377:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
 378:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));
 379:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 380:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_RESET)
 288              		.loc 1 380 0
 289 0014 7B68     		ldr	r3, [r7, #4]
 290 0016 93F83930 		ldrb	r3, [r3, #57]
 291 001a DBB2     		uxtb	r3, r3
 292 001c 002B     		cmp	r3, #0
 293 001e 06D1     		bne	.L12
 381:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 382:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 383:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 294              		.loc 1 383 0
 295 0020 7B68     		ldr	r3, [r7, #4]
 296 0022 0022     		movs	r2, #0
 297 0024 83F83820 		strb	r2, [r3, #56]
 384:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Init the low level hardware */
 385:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 298              		.loc 1 385 0
 299 0028 7868     		ldr	r0, [r7, #4]
 300 002a FFF7FEFF 		bl	HAL_UART_MspInit
 301              	.L12:
 386:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 387:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 388:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
ARM GAS  /tmp/ccnvFOuI.s 			page 13


 302              		.loc 1 388 0
 303 002e 7B68     		ldr	r3, [r7, #4]
 304 0030 2422     		movs	r2, #36
 305 0032 83F83920 		strb	r2, [r3, #57]
 389:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 390:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable the peripheral */
 391:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 306              		.loc 1 391 0
 307 0036 7B68     		ldr	r3, [r7, #4]
 308 0038 1B68     		ldr	r3, [r3]
 309 003a 7A68     		ldr	r2, [r7, #4]
 310 003c 1268     		ldr	r2, [r2]
 311 003e D268     		ldr	r2, [r2, #12]
 312 0040 22F40052 		bic	r2, r2, #8192
 313 0044 DA60     		str	r2, [r3, #12]
 392:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 393:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Set the UART Communication parameters */
 394:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UART_SetConfig(huart);
 314              		.loc 1 394 0
 315 0046 7868     		ldr	r0, [r7, #4]
 316 0048 FFF7FEFF 		bl	UART_SetConfig
 395:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 396:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* In LIN mode, the following bits must be kept cleared: 
 397:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      - LINEN and CLKEN bits in the USART_CR2 register,
 398:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      - SCEN and IREN bits in the USART_CR3 register.*/
 399:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 317              		.loc 1 399 0
 318 004c 7B68     		ldr	r3, [r7, #4]
 319 004e 1B68     		ldr	r3, [r3]
 320 0050 7A68     		ldr	r2, [r7, #4]
 321 0052 1268     		ldr	r2, [r2]
 322 0054 1269     		ldr	r2, [r2, #16]
 323 0056 22F40062 		bic	r2, r2, #2048
 324 005a 1A61     		str	r2, [r3, #16]
 400:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 325              		.loc 1 400 0
 326 005c 7B68     		ldr	r3, [r7, #4]
 327 005e 1B68     		ldr	r3, [r3]
 328 0060 7A68     		ldr	r2, [r7, #4]
 329 0062 1268     		ldr	r2, [r2]
 330 0064 5269     		ldr	r2, [r2, #20]
 331 0066 22F02A02 		bic	r2, r2, #42
 332 006a 5A61     		str	r2, [r3, #20]
 401:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 402:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
 403:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 333              		.loc 1 403 0
 334 006c 7B68     		ldr	r3, [r7, #4]
 335 006e 1B68     		ldr	r3, [r3]
 336 0070 7A68     		ldr	r2, [r7, #4]
 337 0072 1268     		ldr	r2, [r2]
 338 0074 1269     		ldr	r2, [r2, #16]
 339 0076 42F48042 		orr	r2, r2, #16384
 340 007a 1A61     		str	r2, [r3, #16]
 404:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 405:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Set the USART LIN Break detection length. */
 406:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
ARM GAS  /tmp/ccnvFOuI.s 			page 14


 341              		.loc 1 406 0
 342 007c 7B68     		ldr	r3, [r7, #4]
 343 007e 1B68     		ldr	r3, [r3]
 344 0080 7A68     		ldr	r2, [r7, #4]
 345 0082 1268     		ldr	r2, [r2]
 346 0084 1269     		ldr	r2, [r2, #16]
 347 0086 22F02002 		bic	r2, r2, #32
 348 008a 1A61     		str	r2, [r3, #16]
 407:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   SET_BIT(huart->Instance->CR2, BreakDetectLength);
 349              		.loc 1 407 0
 350 008c 7B68     		ldr	r3, [r7, #4]
 351 008e 1B68     		ldr	r3, [r3]
 352 0090 7A68     		ldr	r2, [r7, #4]
 353 0092 1268     		ldr	r2, [r2]
 354 0094 1169     		ldr	r1, [r2, #16]
 355 0096 3A68     		ldr	r2, [r7]
 356 0098 0A43     		orrs	r2, r2, r1
 357 009a 1A61     		str	r2, [r3, #16]
 408:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 409:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Enable the peripheral */
 410:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 358              		.loc 1 410 0
 359 009c 7B68     		ldr	r3, [r7, #4]
 360 009e 1B68     		ldr	r3, [r3]
 361 00a0 7A68     		ldr	r2, [r7, #4]
 362 00a2 1268     		ldr	r2, [r2]
 363 00a4 D268     		ldr	r2, [r2, #12]
 364 00a6 42F40052 		orr	r2, r2, #8192
 365 00aa DA60     		str	r2, [r3, #12]
 411:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 412:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Initialize the UART state*/
 413:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 366              		.loc 1 413 0
 367 00ac 7B68     		ldr	r3, [r7, #4]
 368 00ae 0022     		movs	r2, #0
 369 00b0 DA63     		str	r2, [r3, #60]
 414:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState= HAL_UART_STATE_READY;
 370              		.loc 1 414 0
 371 00b2 7B68     		ldr	r3, [r7, #4]
 372 00b4 2022     		movs	r2, #32
 373 00b6 83F83920 		strb	r2, [r3, #57]
 415:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxState= HAL_UART_STATE_READY;
 374              		.loc 1 415 0
 375 00ba 7B68     		ldr	r3, [r7, #4]
 376 00bc 2022     		movs	r2, #32
 377 00be 83F83A20 		strb	r2, [r3, #58]
 416:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 417:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 378              		.loc 1 417 0
 379 00c2 0023     		movs	r3, #0
 380              	.L11:
 418:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 381              		.loc 1 418 0
 382 00c4 1846     		mov	r0, r3
 383 00c6 0837     		adds	r7, r7, #8
 384              	.LCFI13:
 385              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccnvFOuI.s 			page 15


 386 00c8 BD46     		mov	sp, r7
 387              	.LCFI14:
 388              		.cfi_def_cfa_register 13
 389              		@ sp needed
 390 00ca 80BD     		pop	{r7, pc}
 391              		.cfi_endproc
 392              	.LFE125:
 394              		.section	.text.HAL_MultiProcessor_Init,"ax",%progbits
 395              		.align	2
 396              		.global	HAL_MultiProcessor_Init
 397              		.thumb
 398              		.thumb_func
 400              	HAL_MultiProcessor_Init:
 401              	.LFB126:
 419:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 420:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
 421:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Initializes the Multi-Processor mode according to the specified
 422:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         parameters in the UART_InitTypeDef and create the associated handle.
 423:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
 424:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 425:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  Address USART address
 426:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  WakeUpMethod specifies the USART wake-up method.
 427:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *          This parameter can be one of the following values:
 428:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
 429:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
 430:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
 431:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 432:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t Wake
 433:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 402              		.loc 1 433 0
 403              		.cfi_startproc
 404              		@ args = 0, pretend = 0, frame = 16
 405              		@ frame_needed = 1, uses_anonymous_args = 0
 406 0000 80B5     		push	{r7, lr}
 407              	.LCFI15:
 408              		.cfi_def_cfa_offset 8
 409              		.cfi_offset 7, -8
 410              		.cfi_offset 14, -4
 411 0002 84B0     		sub	sp, sp, #16
 412              	.LCFI16:
 413              		.cfi_def_cfa_offset 24
 414 0004 00AF     		add	r7, sp, #0
 415              	.LCFI17:
 416              		.cfi_def_cfa_register 7
 417 0006 F860     		str	r0, [r7, #12]
 418 0008 0B46     		mov	r3, r1
 419 000a 7A60     		str	r2, [r7, #4]
 420 000c FB72     		strb	r3, [r7, #11]
 434:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check the UART handle allocation */
 435:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart == NULL)
 421              		.loc 1 435 0
 422 000e FB68     		ldr	r3, [r7, #12]
 423 0010 002B     		cmp	r3, #0
 424 0012 01D1     		bne	.L14
 436:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 437:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_ERROR;
 425              		.loc 1 437 0
ARM GAS  /tmp/ccnvFOuI.s 			page 16


 426 0014 0123     		movs	r3, #1
 427 0016 5FE0     		b	.L15
 428              	.L14:
 438:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 439:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 440:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check the parameters */
 441:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
 442:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 443:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_ADDRESS(Address));
 444:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 445:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 446:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 447:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_RESET)
 429              		.loc 1 447 0
 430 0018 FB68     		ldr	r3, [r7, #12]
 431 001a 93F83930 		ldrb	r3, [r3, #57]
 432 001e DBB2     		uxtb	r3, r3
 433 0020 002B     		cmp	r3, #0
 434 0022 06D1     		bne	.L16
 448:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 449:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 450:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 435              		.loc 1 450 0
 436 0024 FB68     		ldr	r3, [r7, #12]
 437 0026 0022     		movs	r2, #0
 438 0028 83F83820 		strb	r2, [r3, #56]
 451:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Init the low level hardware */
 452:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 439              		.loc 1 452 0
 440 002c F868     		ldr	r0, [r7, #12]
 441 002e FFF7FEFF 		bl	HAL_UART_MspInit
 442              	.L16:
 453:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 454:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 455:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 443              		.loc 1 455 0
 444 0032 FB68     		ldr	r3, [r7, #12]
 445 0034 2422     		movs	r2, #36
 446 0036 83F83920 		strb	r2, [r3, #57]
 456:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 457:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable the peripheral */
 458:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 447              		.loc 1 458 0
 448 003a FB68     		ldr	r3, [r7, #12]
 449 003c 1B68     		ldr	r3, [r3]
 450 003e FA68     		ldr	r2, [r7, #12]
 451 0040 1268     		ldr	r2, [r2]
 452 0042 D268     		ldr	r2, [r2, #12]
 453 0044 22F40052 		bic	r2, r2, #8192
 454 0048 DA60     		str	r2, [r3, #12]
 459:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 460:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Set the UART Communication parameters */
 461:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UART_SetConfig(huart);
 455              		.loc 1 461 0
 456 004a F868     		ldr	r0, [r7, #12]
 457 004c FFF7FEFF 		bl	UART_SetConfig
 462:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
ARM GAS  /tmp/ccnvFOuI.s 			page 17


 463:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* In Multi-Processor mode, the following bits must be kept cleared: 
 464:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      - LINEN and CLKEN bits in the USART_CR2 register,
 465:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
 466:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 458              		.loc 1 466 0
 459 0050 FB68     		ldr	r3, [r7, #12]
 460 0052 1B68     		ldr	r3, [r3]
 461 0054 FA68     		ldr	r2, [r7, #12]
 462 0056 1268     		ldr	r2, [r2]
 463 0058 1269     		ldr	r2, [r2, #16]
 464 005a 22F49042 		bic	r2, r2, #18432
 465 005e 1A61     		str	r2, [r3, #16]
 467:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 466              		.loc 1 467 0
 467 0060 FB68     		ldr	r3, [r7, #12]
 468 0062 1B68     		ldr	r3, [r3]
 469 0064 FA68     		ldr	r2, [r7, #12]
 470 0066 1268     		ldr	r2, [r2]
 471 0068 5269     		ldr	r2, [r2, #20]
 472 006a 22F02A02 		bic	r2, r2, #42
 473 006e 5A61     		str	r2, [r3, #20]
 468:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 469:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Clear the USART address */
 470:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 474              		.loc 1 470 0
 475 0070 FB68     		ldr	r3, [r7, #12]
 476 0072 1B68     		ldr	r3, [r3]
 477 0074 FA68     		ldr	r2, [r7, #12]
 478 0076 1268     		ldr	r2, [r2]
 479 0078 1269     		ldr	r2, [r2, #16]
 480 007a 22F00F02 		bic	r2, r2, #15
 481 007e 1A61     		str	r2, [r3, #16]
 471:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Set the USART address node */
 472:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   SET_BIT(huart->Instance->CR2, Address);
 482              		.loc 1 472 0
 483 0080 FB68     		ldr	r3, [r7, #12]
 484 0082 1B68     		ldr	r3, [r3]
 485 0084 FA68     		ldr	r2, [r7, #12]
 486 0086 1268     		ldr	r2, [r2]
 487 0088 1169     		ldr	r1, [r2, #16]
 488 008a FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 489 008c 0A43     		orrs	r2, r2, r1
 490 008e 1A61     		str	r2, [r3, #16]
 473:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 474:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Set the wake up method by setting the WAKE bit in the CR1 register */
 475:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 491              		.loc 1 475 0
 492 0090 FB68     		ldr	r3, [r7, #12]
 493 0092 1B68     		ldr	r3, [r3]
 494 0094 FA68     		ldr	r2, [r7, #12]
 495 0096 1268     		ldr	r2, [r2]
 496 0098 D268     		ldr	r2, [r2, #12]
 497 009a 22F40062 		bic	r2, r2, #2048
 498 009e DA60     		str	r2, [r3, #12]
 476:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, WakeUpMethod);
 499              		.loc 1 476 0
 500 00a0 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccnvFOuI.s 			page 18


 501 00a2 1B68     		ldr	r3, [r3]
 502 00a4 FA68     		ldr	r2, [r7, #12]
 503 00a6 1268     		ldr	r2, [r2]
 504 00a8 D168     		ldr	r1, [r2, #12]
 505 00aa 7A68     		ldr	r2, [r7, #4]
 506 00ac 0A43     		orrs	r2, r2, r1
 507 00ae DA60     		str	r2, [r3, #12]
 477:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 478:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Enable the peripheral */
 479:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 508              		.loc 1 479 0
 509 00b0 FB68     		ldr	r3, [r7, #12]
 510 00b2 1B68     		ldr	r3, [r3]
 511 00b4 FA68     		ldr	r2, [r7, #12]
 512 00b6 1268     		ldr	r2, [r2]
 513 00b8 D268     		ldr	r2, [r2, #12]
 514 00ba 42F40052 		orr	r2, r2, #8192
 515 00be DA60     		str	r2, [r3, #12]
 480:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 481:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Initialize the UART state */
 482:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 516              		.loc 1 482 0
 517 00c0 FB68     		ldr	r3, [r7, #12]
 518 00c2 0022     		movs	r2, #0
 519 00c4 DA63     		str	r2, [r3, #60]
 483:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState= HAL_UART_STATE_READY;
 520              		.loc 1 483 0
 521 00c6 FB68     		ldr	r3, [r7, #12]
 522 00c8 2022     		movs	r2, #32
 523 00ca 83F83920 		strb	r2, [r3, #57]
 484:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxState= HAL_UART_STATE_READY;
 524              		.loc 1 484 0
 525 00ce FB68     		ldr	r3, [r7, #12]
 526 00d0 2022     		movs	r2, #32
 527 00d2 83F83A20 		strb	r2, [r3, #58]
 485:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 486:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 528              		.loc 1 486 0
 529 00d6 0023     		movs	r3, #0
 530              	.L15:
 487:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 531              		.loc 1 487 0
 532 00d8 1846     		mov	r0, r3
 533 00da 1037     		adds	r7, r7, #16
 534              	.LCFI18:
 535              		.cfi_def_cfa_offset 8
 536 00dc BD46     		mov	sp, r7
 537              	.LCFI19:
 538              		.cfi_def_cfa_register 13
 539              		@ sp needed
 540 00de 80BD     		pop	{r7, pc}
 541              		.cfi_endproc
 542              	.LFE126:
 544              		.section	.text.HAL_UART_DeInit,"ax",%progbits
 545              		.align	2
 546              		.global	HAL_UART_DeInit
 547              		.thumb
ARM GAS  /tmp/ccnvFOuI.s 			page 19


 548              		.thumb_func
 550              	HAL_UART_DeInit:
 551              	.LFB127:
 488:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 489:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
 490:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  DeInitializes the UART peripheral. 
 491:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
 492:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 493:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
 494:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 495:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
 496:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 552              		.loc 1 496 0
 553              		.cfi_startproc
 554              		@ args = 0, pretend = 0, frame = 8
 555              		@ frame_needed = 1, uses_anonymous_args = 0
 556 0000 80B5     		push	{r7, lr}
 557              	.LCFI20:
 558              		.cfi_def_cfa_offset 8
 559              		.cfi_offset 7, -8
 560              		.cfi_offset 14, -4
 561 0002 82B0     		sub	sp, sp, #8
 562              	.LCFI21:
 563              		.cfi_def_cfa_offset 16
 564 0004 00AF     		add	r7, sp, #0
 565              	.LCFI22:
 566              		.cfi_def_cfa_register 7
 567 0006 7860     		str	r0, [r7, #4]
 497:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check the UART handle allocation */
 498:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart == NULL)
 568              		.loc 1 498 0
 569 0008 7B68     		ldr	r3, [r7, #4]
 570 000a 002B     		cmp	r3, #0
 571 000c 01D1     		bne	.L18
 499:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 500:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_ERROR;
 572              		.loc 1 500 0
 573 000e 0123     		movs	r3, #1
 574 0010 16E0     		b	.L19
 575              	.L18:
 501:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 502:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 503:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check the parameters */
 504:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
 505:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 506:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 576              		.loc 1 506 0
 577 0012 7B68     		ldr	r3, [r7, #4]
 578 0014 2422     		movs	r2, #36
 579 0016 83F83920 		strb	r2, [r3, #57]
 507:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 508:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* DeInit the low level hardware */
 509:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   HAL_UART_MspDeInit(huart);
 580              		.loc 1 509 0
 581 001a 7868     		ldr	r0, [r7, #4]
 582 001c FFF7FEFF 		bl	HAL_UART_MspDeInit
 510:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
ARM GAS  /tmp/ccnvFOuI.s 			page 20


 511:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 583              		.loc 1 511 0
 584 0020 7B68     		ldr	r3, [r7, #4]
 585 0022 0022     		movs	r2, #0
 586 0024 DA63     		str	r2, [r3, #60]
 512:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_RESET;
 587              		.loc 1 512 0
 588 0026 7B68     		ldr	r3, [r7, #4]
 589 0028 0022     		movs	r2, #0
 590 002a 83F83920 		strb	r2, [r3, #57]
 513:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_RESET;
 591              		.loc 1 513 0
 592 002e 7B68     		ldr	r3, [r7, #4]
 593 0030 0022     		movs	r2, #0
 594 0032 83F83A20 		strb	r2, [r3, #58]
 514:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 515:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process Lock */
 516:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 595              		.loc 1 516 0
 596 0036 7B68     		ldr	r3, [r7, #4]
 597 0038 0022     		movs	r2, #0
 598 003a 83F83820 		strb	r2, [r3, #56]
 517:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 518:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 599              		.loc 1 518 0
 600 003e 0023     		movs	r3, #0
 601              	.L19:
 519:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 602              		.loc 1 519 0
 603 0040 1846     		mov	r0, r3
 604 0042 0837     		adds	r7, r7, #8
 605              	.LCFI23:
 606              		.cfi_def_cfa_offset 8
 607 0044 BD46     		mov	sp, r7
 608              	.LCFI24:
 609              		.cfi_def_cfa_register 13
 610              		@ sp needed
 611 0046 80BD     		pop	{r7, pc}
 612              		.cfi_endproc
 613              	.LFE127:
 615              		.section	.text.HAL_UART_MspInit,"ax",%progbits
 616              		.align	2
 617              		.weak	HAL_UART_MspInit
 618              		.thumb
 619              		.thumb_func
 621              	HAL_UART_MspInit:
 622              	.LFB128:
 520:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 521:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
 522:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  UART MSP Init.
 523:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
 524:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 525:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
 526:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 527:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****  __weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
 528:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 623              		.loc 1 528 0
ARM GAS  /tmp/ccnvFOuI.s 			page 21


 624              		.cfi_startproc
 625              		@ args = 0, pretend = 0, frame = 8
 626              		@ frame_needed = 1, uses_anonymous_args = 0
 627              		@ link register save eliminated.
 628 0000 80B4     		push	{r7}
 629              	.LCFI25:
 630              		.cfi_def_cfa_offset 4
 631              		.cfi_offset 7, -4
 632 0002 83B0     		sub	sp, sp, #12
 633              	.LCFI26:
 634              		.cfi_def_cfa_offset 16
 635 0004 00AF     		add	r7, sp, #0
 636              	.LCFI27:
 637              		.cfi_def_cfa_register 7
 638 0006 7860     		str	r0, [r7, #4]
 529:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    /* Prevent unused argument(s) compilation warning */
 530:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UNUSED(huart);
 531:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* NOTE: This function Should not be modified, when the callback is needed,
 532:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            the HAL_UART_MspInit could be implemented in the user file
 533:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    */ 
 534:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 639              		.loc 1 534 0
 640 0008 0C37     		adds	r7, r7, #12
 641              	.LCFI28:
 642              		.cfi_def_cfa_offset 4
 643 000a BD46     		mov	sp, r7
 644              	.LCFI29:
 645              		.cfi_def_cfa_register 13
 646              		@ sp needed
 647 000c 5DF8047B 		ldr	r7, [sp], #4
 648              	.LCFI30:
 649              		.cfi_restore 7
 650              		.cfi_def_cfa_offset 0
 651 0010 7047     		bx	lr
 652              		.cfi_endproc
 653              	.LFE128:
 655 0012 00BF     		.section	.text.HAL_UART_MspDeInit,"ax",%progbits
 656              		.align	2
 657              		.weak	HAL_UART_MspDeInit
 658              		.thumb
 659              		.thumb_func
 661              	HAL_UART_MspDeInit:
 662              	.LFB129:
 535:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 536:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
 537:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  UART MSP DeInit.
 538:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
 539:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 540:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
 541:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 542:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****  __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
 543:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 663              		.loc 1 543 0
 664              		.cfi_startproc
 665              		@ args = 0, pretend = 0, frame = 8
 666              		@ frame_needed = 1, uses_anonymous_args = 0
 667              		@ link register save eliminated.
ARM GAS  /tmp/ccnvFOuI.s 			page 22


 668 0000 80B4     		push	{r7}
 669              	.LCFI31:
 670              		.cfi_def_cfa_offset 4
 671              		.cfi_offset 7, -4
 672 0002 83B0     		sub	sp, sp, #12
 673              	.LCFI32:
 674              		.cfi_def_cfa_offset 16
 675 0004 00AF     		add	r7, sp, #0
 676              	.LCFI33:
 677              		.cfi_def_cfa_register 7
 678 0006 7860     		str	r0, [r7, #4]
 544:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 545:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UNUSED(huart);
 546:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* NOTE: This function Should not be modified, when the callback is needed,
 547:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            the HAL_UART_MspDeInit could be implemented in the user file
 548:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    */ 
 549:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 679              		.loc 1 549 0
 680 0008 0C37     		adds	r7, r7, #12
 681              	.LCFI34:
 682              		.cfi_def_cfa_offset 4
 683 000a BD46     		mov	sp, r7
 684              	.LCFI35:
 685              		.cfi_def_cfa_register 13
 686              		@ sp needed
 687 000c 5DF8047B 		ldr	r7, [sp], #4
 688              	.LCFI36:
 689              		.cfi_restore 7
 690              		.cfi_def_cfa_offset 0
 691 0010 7047     		bx	lr
 692              		.cfi_endproc
 693              	.LFE129:
 695 0012 00BF     		.section	.text.HAL_UART_Transmit,"ax",%progbits
 696              		.align	2
 697              		.global	HAL_UART_Transmit
 698              		.thumb
 699              		.thumb_func
 701              	HAL_UART_Transmit:
 702              	.LFB130:
 550:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 551:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
 552:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @}
 553:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 554:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 555:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group2 IO operation functions 
 556:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *  @brief UART Transmit and Receive functions 
 557:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *
 558:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** @verbatim   
 559:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ==============================================================================
 560:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****                       ##### IO operation functions #####
 561:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ==============================================================================  
 562:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   [..]
 563:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     This subsection provides a set of functions allowing to manage the UART asynchronous
 564:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     and Half duplex data transfers.
 565:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 566:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (#) There are two modes of transfer:
 567:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (++) Blocking mode: The communication is performed in polling mode. 
ARM GAS  /tmp/ccnvFOuI.s 			page 23


 568:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             The HAL status of all data processing is returned by the same function 
 569:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             after finishing transfer.  
 570:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (++) Non blocking mode: The communication is performed using Interrupts 
 571:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             or DMA, these APIs return the HAL status.
 572:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             The end of the data processing will be indicated through the 
 573:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             dedicated UART IRQ when using Interrupt mode or the DMA IRQ when 
 574:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             using DMA mode.
 575:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             The HAL_UART_TxCpltCallback(), HAL_UART_RxCpltCallback() user callbacks 
 576:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             will be executed respectively at the end of the transmit or receive process.
 577:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             The HAL_UART_ErrorCallback() user callback will be executed when 
 578:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             a communication error is detected.
 579:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 580:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (#) Blocking mode APIs are:
 581:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (++) HAL_UART_Transmit()
 582:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (++) HAL_UART_Receive() 
 583:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         
 584:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (#) Non Blocking mode APIs with Interrupt are:
 585:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (++) HAL_UART_Transmit_IT()
 586:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (++) HAL_UART_Receive_IT()
 587:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (++) HAL_UART_IRQHandler()
 588:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 589:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (#) Non Blocking mode functions with DMA are:
 590:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (++) HAL_UART_Transmit_DMA()
 591:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (++) HAL_UART_Receive_DMA()
 592:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 593:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (#) A set of Transfer Complete Callbacks are provided in non blocking mode:
 594:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (++) HAL_UART_TxCpltCallback()
 595:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (++) HAL_UART_RxCpltCallback()
 596:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (++) HAL_UART_ErrorCallback()
 597:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 598:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     [..] 
 599:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       (@) In the Half duplex communication, it is forbidden to run the transmit 
 600:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           and receive process in parallel, the UART state HAL_UART_STATE_BUSY_TX_RX 
 601:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           can't be useful.
 602:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       
 603:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** @endverbatim
 604:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @{
 605:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 606:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 607:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
 608:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Sends an amount of data in blocking mode. 
 609:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
 610:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 611:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  pData Pointer to data buffer
 612:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  Size Amount of data to be sent
 613:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  Timeout Timeout duration  
 614:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
 615:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 616:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint3
 617:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 703              		.loc 1 617 0
 704              		.cfi_startproc
 705              		@ args = 0, pretend = 0, frame = 24
 706              		@ frame_needed = 1, uses_anonymous_args = 0
 707 0000 80B5     		push	{r7, lr}
 708              	.LCFI37:
 709              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccnvFOuI.s 			page 24


 710              		.cfi_offset 7, -8
 711              		.cfi_offset 14, -4
 712 0002 88B0     		sub	sp, sp, #32
 713              	.LCFI38:
 714              		.cfi_def_cfa_offset 40
 715 0004 02AF     		add	r7, sp, #8
 716              	.LCFI39:
 717              		.cfi_def_cfa 7, 32
 718 0006 F860     		str	r0, [r7, #12]
 719 0008 B960     		str	r1, [r7, #8]
 720 000a 3B60     		str	r3, [r7]
 721 000c 1346     		mov	r3, r2	@ movhi
 722 000e FB80     		strh	r3, [r7, #6]	@ movhi
 618:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint16_t* tmp;
 619:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint32_t tickstart = 0U;
 723              		.loc 1 619 0
 724 0010 0023     		movs	r3, #0
 725 0012 7B61     		str	r3, [r7, #20]
 620:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 621:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
 622:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_READY) 
 726              		.loc 1 622 0
 727 0014 FB68     		ldr	r3, [r7, #12]
 728 0016 93F83930 		ldrb	r3, [r3, #57]
 729 001a DBB2     		uxtb	r3, r3
 730 001c 202B     		cmp	r3, #32
 731 001e 40F08280 		bne	.L23
 623:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 624:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if((pData == NULL ) || (Size == 0)) 
 732              		.loc 1 624 0
 733 0022 BB68     		ldr	r3, [r7, #8]
 734 0024 002B     		cmp	r3, #0
 735 0026 02D0     		beq	.L24
 736              		.loc 1 624 0 is_stmt 0 discriminator 1
 737 0028 FB88     		ldrh	r3, [r7, #6]
 738 002a 002B     		cmp	r3, #0
 739 002c 01D1     		bne	.L25
 740              	.L24:
 625:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
 626:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       return  HAL_ERROR;
 741              		.loc 1 626 0 is_stmt 1
 742 002e 0123     		movs	r3, #1
 743 0030 7AE0     		b	.L26
 744              	.L25:
 627:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
 628:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 629:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Process Locked */
 630:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_LOCK(huart);
 745              		.loc 1 630 0
 746 0032 FB68     		ldr	r3, [r7, #12]
 747 0034 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 748 0038 012B     		cmp	r3, #1
 749 003a 01D1     		bne	.L27
 750              		.loc 1 630 0 is_stmt 0 discriminator 1
 751 003c 0223     		movs	r3, #2
 752 003e 73E0     		b	.L26
 753              	.L27:
ARM GAS  /tmp/ccnvFOuI.s 			page 25


 754              		.loc 1 630 0 discriminator 2
 755 0040 FB68     		ldr	r3, [r7, #12]
 756 0042 0122     		movs	r2, #1
 757 0044 83F83820 		strb	r2, [r3, #56]
 631:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 632:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 758              		.loc 1 632 0 is_stmt 1 discriminator 2
 759 0048 FB68     		ldr	r3, [r7, #12]
 760 004a 0022     		movs	r2, #0
 761 004c DA63     		str	r2, [r3, #60]
 633:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 762              		.loc 1 633 0 discriminator 2
 763 004e FB68     		ldr	r3, [r7, #12]
 764 0050 2122     		movs	r2, #33
 765 0052 83F83920 		strb	r2, [r3, #57]
 634:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 	
 635:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Init tickstart for timeout managment */
 636:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     tickstart = HAL_GetTick();
 766              		.loc 1 636 0 discriminator 2
 767 0056 FFF7FEFF 		bl	HAL_GetTick
 768 005a 7861     		str	r0, [r7, #20]
 637:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 638:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->TxXferSize = Size;
 769              		.loc 1 638 0 discriminator 2
 770 005c FB68     		ldr	r3, [r7, #12]
 771 005e FA88     		ldrh	r2, [r7, #6]	@ movhi
 772 0060 9A84     		strh	r2, [r3, #36]	@ movhi
 639:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->TxXferCount = Size;
 773              		.loc 1 639 0 discriminator 2
 774 0062 FB68     		ldr	r3, [r7, #12]
 775 0064 FA88     		ldrh	r2, [r7, #6]	@ movhi
 776 0066 DA84     		strh	r2, [r3, #38]	@ movhi
 640:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     while(huart->TxXferCount > 0U)
 777              		.loc 1 640 0 discriminator 2
 778 0068 41E0     		b	.L28
 779              	.L34:
 641:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
 642:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->TxXferCount--;
 780              		.loc 1 642 0
 781 006a FB68     		ldr	r3, [r7, #12]
 782 006c DB8C     		ldrh	r3, [r3, #38]	@ movhi
 783 006e 9BB2     		uxth	r3, r3
 784 0070 013B     		subs	r3, r3, #1
 785 0072 9AB2     		uxth	r2, r3
 786 0074 FB68     		ldr	r3, [r7, #12]
 787 0076 DA84     		strh	r2, [r3, #38]	@ movhi
 643:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 788              		.loc 1 643 0
 789 0078 FB68     		ldr	r3, [r7, #12]
 790 007a 9B68     		ldr	r3, [r3, #8]
 791 007c B3F5805F 		cmp	r3, #4096
 792 0080 21D1     		bne	.L29
 644:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
 645:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 793              		.loc 1 645 0
 794 0082 3B68     		ldr	r3, [r7]
 795 0084 0093     		str	r3, [sp]
ARM GAS  /tmp/ccnvFOuI.s 			page 26


 796 0086 F868     		ldr	r0, [r7, #12]
 797 0088 8021     		movs	r1, #128
 798 008a 0022     		movs	r2, #0
 799 008c 7B69     		ldr	r3, [r7, #20]
 800 008e FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 801 0092 0346     		mov	r3, r0
 802 0094 002B     		cmp	r3, #0
 803 0096 01D0     		beq	.L30
 646:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         { 
 647:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           return HAL_TIMEOUT;
 804              		.loc 1 647 0
 805 0098 0323     		movs	r3, #3
 806 009a 45E0     		b	.L26
 807              	.L30:
 648:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         }
 649:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         tmp = (uint16_t*) pData;
 808              		.loc 1 649 0
 809 009c BB68     		ldr	r3, [r7, #8]
 810 009e 3B61     		str	r3, [r7, #16]
 650:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 811              		.loc 1 650 0
 812 00a0 FB68     		ldr	r3, [r7, #12]
 813 00a2 1B68     		ldr	r3, [r3]
 814 00a4 3A69     		ldr	r2, [r7, #16]
 815 00a6 1288     		ldrh	r2, [r2]
 816 00a8 C2F30802 		ubfx	r2, r2, #0, #9
 817 00ac 5A60     		str	r2, [r3, #4]
 651:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         if(huart->Init.Parity == UART_PARITY_NONE)
 818              		.loc 1 651 0
 819 00ae FB68     		ldr	r3, [r7, #12]
 820 00b0 1B69     		ldr	r3, [r3, #16]
 821 00b2 002B     		cmp	r3, #0
 822 00b4 03D1     		bne	.L31
 652:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         {
 653:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           pData +=2U;
 823              		.loc 1 653 0
 824 00b6 BB68     		ldr	r3, [r7, #8]
 825 00b8 0233     		adds	r3, r3, #2
 826 00ba BB60     		str	r3, [r7, #8]
 827 00bc 17E0     		b	.L28
 828              	.L31:
 654:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         }
 655:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         else
 656:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         { 
 657:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           pData +=1U;
 829              		.loc 1 657 0
 830 00be BB68     		ldr	r3, [r7, #8]
 831 00c0 0133     		adds	r3, r3, #1
 832 00c2 BB60     		str	r3, [r7, #8]
 833 00c4 13E0     		b	.L28
 834              	.L29:
 658:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         }
 659:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       } 
 660:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       else
 661:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
 662:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 835              		.loc 1 662 0
ARM GAS  /tmp/ccnvFOuI.s 			page 27


 836 00c6 3B68     		ldr	r3, [r7]
 837 00c8 0093     		str	r3, [sp]
 838 00ca F868     		ldr	r0, [r7, #12]
 839 00cc 8021     		movs	r1, #128
 840 00ce 0022     		movs	r2, #0
 841 00d0 7B69     		ldr	r3, [r7, #20]
 842 00d2 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 843 00d6 0346     		mov	r3, r0
 844 00d8 002B     		cmp	r3, #0
 845 00da 01D0     		beq	.L33
 663:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         {
 664:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           return HAL_TIMEOUT;
 846              		.loc 1 664 0
 847 00dc 0323     		movs	r3, #3
 848 00de 23E0     		b	.L26
 849              	.L33:
 665:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         }
 666:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 850              		.loc 1 666 0
 851 00e0 FB68     		ldr	r3, [r7, #12]
 852 00e2 1A68     		ldr	r2, [r3]
 853 00e4 BB68     		ldr	r3, [r7, #8]
 854 00e6 591C     		adds	r1, r3, #1
 855 00e8 B960     		str	r1, [r7, #8]
 856 00ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 857 00ec 5360     		str	r3, [r2, #4]
 858              	.L28:
 640:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
 859              		.loc 1 640 0
 860 00ee FB68     		ldr	r3, [r7, #12]
 861 00f0 DB8C     		ldrh	r3, [r3, #38]	@ movhi
 862 00f2 9BB2     		uxth	r3, r3
 863 00f4 002B     		cmp	r3, #0
 864 00f6 B8D1     		bne	.L34
 667:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       } 
 668:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
 669:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 670:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 865              		.loc 1 670 0
 866 00f8 3B68     		ldr	r3, [r7]
 867 00fa 0093     		str	r3, [sp]
 868 00fc F868     		ldr	r0, [r7, #12]
 869 00fe 4021     		movs	r1, #64
 870 0100 0022     		movs	r2, #0
 871 0102 7B69     		ldr	r3, [r7, #20]
 872 0104 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 873 0108 0346     		mov	r3, r0
 874 010a 002B     		cmp	r3, #0
 875 010c 01D0     		beq	.L35
 671:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     { 
 672:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       return HAL_TIMEOUT;
 876              		.loc 1 672 0
 877 010e 0323     		movs	r3, #3
 878 0110 0AE0     		b	.L26
 879              	.L35:
 673:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
 674:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
ARM GAS  /tmp/ccnvFOuI.s 			page 28


 675:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* At end of Tx process, restore huart->gState to Ready */
 676:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->gState = HAL_UART_STATE_READY;
 880              		.loc 1 676 0
 881 0112 FB68     		ldr	r3, [r7, #12]
 882 0114 2022     		movs	r2, #32
 883 0116 83F83920 		strb	r2, [r3, #57]
 677:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 678:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Process Unlocked */
 679:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 884              		.loc 1 679 0
 885 011a FB68     		ldr	r3, [r7, #12]
 886 011c 0022     		movs	r2, #0
 887 011e 83F83820 		strb	r2, [r3, #56]
 680:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 681:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_OK;
 888              		.loc 1 681 0
 889 0122 0023     		movs	r3, #0
 890 0124 00E0     		b	.L26
 891              	.L23:
 682:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 683:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
 684:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 685:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_BUSY;
 892              		.loc 1 685 0
 893 0126 0223     		movs	r3, #2
 894              	.L26:
 686:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 687:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 895              		.loc 1 687 0
 896 0128 1846     		mov	r0, r3
 897 012a 1837     		adds	r7, r7, #24
 898              	.LCFI40:
 899              		.cfi_def_cfa_offset 8
 900 012c BD46     		mov	sp, r7
 901              	.LCFI41:
 902              		.cfi_def_cfa_register 13
 903              		@ sp needed
 904 012e 80BD     		pop	{r7, pc}
 905              		.cfi_endproc
 906              	.LFE130:
 908              		.section	.text.HAL_UART_Receive,"ax",%progbits
 909              		.align	2
 910              		.global	HAL_UART_Receive
 911              		.thumb
 912              		.thumb_func
 914              	HAL_UART_Receive:
 915              	.LFB131:
 688:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 689:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
 690:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Receives an amount of data in blocking mode. 
 691:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
 692:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 693:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  pData Pointer to data buffer
 694:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  Size Amount of data to be received
 695:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  Timeout Timeout duration
 696:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
 697:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
ARM GAS  /tmp/ccnvFOuI.s 			page 29


 698:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32
 699:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** { 
 916              		.loc 1 699 0
 917              		.cfi_startproc
 918              		@ args = 0, pretend = 0, frame = 24
 919              		@ frame_needed = 1, uses_anonymous_args = 0
 920 0000 80B5     		push	{r7, lr}
 921              	.LCFI42:
 922              		.cfi_def_cfa_offset 8
 923              		.cfi_offset 7, -8
 924              		.cfi_offset 14, -4
 925 0002 88B0     		sub	sp, sp, #32
 926              	.LCFI43:
 927              		.cfi_def_cfa_offset 40
 928 0004 02AF     		add	r7, sp, #8
 929              	.LCFI44:
 930              		.cfi_def_cfa 7, 32
 931 0006 F860     		str	r0, [r7, #12]
 932 0008 B960     		str	r1, [r7, #8]
 933 000a 3B60     		str	r3, [r7]
 934 000c 1346     		mov	r3, r2	@ movhi
 935 000e FB80     		strh	r3, [r7, #6]	@ movhi
 700:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint16_t* tmp;
 701:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint32_t tickstart = 0U;
 936              		.loc 1 701 0
 937 0010 0023     		movs	r3, #0
 938 0012 7B61     		str	r3, [r7, #20]
 702:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 703:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
 704:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart->RxState == HAL_UART_STATE_READY) 
 939              		.loc 1 704 0
 940 0014 FB68     		ldr	r3, [r7, #12]
 941 0016 93F83A30 		ldrb	r3, [r3, #58]
 942 001a DBB2     		uxtb	r3, r3
 943 001c 202B     		cmp	r3, #32
 944 001e 40F09080 		bne	.L37
 705:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   { 
 706:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if((pData == NULL ) || (Size == 0)) 
 945              		.loc 1 706 0
 946 0022 BB68     		ldr	r3, [r7, #8]
 947 0024 002B     		cmp	r3, #0
 948 0026 02D0     		beq	.L38
 949              		.loc 1 706 0 is_stmt 0 discriminator 1
 950 0028 FB88     		ldrh	r3, [r7, #6]
 951 002a 002B     		cmp	r3, #0
 952 002c 01D1     		bne	.L39
 953              	.L38:
 707:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
 708:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       return  HAL_ERROR;
 954              		.loc 1 708 0 is_stmt 1
 955 002e 0123     		movs	r3, #1
 956 0030 88E0     		b	.L40
 957              	.L39:
 709:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
 710:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 711:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Process Locked */
 712:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_LOCK(huart);
ARM GAS  /tmp/ccnvFOuI.s 			page 30


 958              		.loc 1 712 0
 959 0032 FB68     		ldr	r3, [r7, #12]
 960 0034 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 961 0038 012B     		cmp	r3, #1
 962 003a 01D1     		bne	.L41
 963              		.loc 1 712 0 is_stmt 0 discriminator 1
 964 003c 0223     		movs	r3, #2
 965 003e 81E0     		b	.L40
 966              	.L41:
 967              		.loc 1 712 0 discriminator 2
 968 0040 FB68     		ldr	r3, [r7, #12]
 969 0042 0122     		movs	r2, #1
 970 0044 83F83820 		strb	r2, [r3, #56]
 713:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 714:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 971              		.loc 1 714 0 is_stmt 1 discriminator 2
 972 0048 FB68     		ldr	r3, [r7, #12]
 973 004a 0022     		movs	r2, #0
 974 004c DA63     		str	r2, [r3, #60]
 715:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 975              		.loc 1 715 0 discriminator 2
 976 004e FB68     		ldr	r3, [r7, #12]
 977 0050 2222     		movs	r2, #34
 978 0052 83F83A20 		strb	r2, [r3, #58]
 716:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 	
 717:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Init tickstart for timeout managment */
 718:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     tickstart = HAL_GetTick();
 979              		.loc 1 718 0 discriminator 2
 980 0056 FFF7FEFF 		bl	HAL_GetTick
 981 005a 7861     		str	r0, [r7, #20]
 719:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         
 720:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxXferSize = Size; 
 982              		.loc 1 720 0 discriminator 2
 983 005c FB68     		ldr	r3, [r7, #12]
 984 005e FA88     		ldrh	r2, [r7, #6]	@ movhi
 985 0060 9A85     		strh	r2, [r3, #44]	@ movhi
 721:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxXferCount = Size;
 986              		.loc 1 721 0 discriminator 2
 987 0062 FB68     		ldr	r3, [r7, #12]
 988 0064 FA88     		ldrh	r2, [r7, #6]	@ movhi
 989 0066 DA85     		strh	r2, [r3, #46]	@ movhi
 722:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 723:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Check the remain data to be received */
 724:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     while(huart->RxXferCount > 0U)
 990              		.loc 1 724 0 discriminator 2
 991 0068 5CE0     		b	.L42
 992              	.L49:
 725:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
 726:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->RxXferCount--;
 993              		.loc 1 726 0
 994 006a FB68     		ldr	r3, [r7, #12]
 995 006c DB8D     		ldrh	r3, [r3, #46]	@ movhi
 996 006e 9BB2     		uxth	r3, r3
 997 0070 013B     		subs	r3, r3, #1
 998 0072 9AB2     		uxth	r2, r3
 999 0074 FB68     		ldr	r3, [r7, #12]
 1000 0076 DA85     		strh	r2, [r3, #46]	@ movhi
ARM GAS  /tmp/ccnvFOuI.s 			page 31


 727:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 1001              		.loc 1 727 0
 1002 0078 FB68     		ldr	r3, [r7, #12]
 1003 007a 9B68     		ldr	r3, [r3, #8]
 1004 007c B3F5805F 		cmp	r3, #4096
 1005 0080 2BD1     		bne	.L43
 728:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
 729:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 1006              		.loc 1 729 0
 1007 0082 3B68     		ldr	r3, [r7]
 1008 0084 0093     		str	r3, [sp]
 1009 0086 F868     		ldr	r0, [r7, #12]
 1010 0088 2021     		movs	r1, #32
 1011 008a 0022     		movs	r2, #0
 1012 008c 7B69     		ldr	r3, [r7, #20]
 1013 008e FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 1014 0092 0346     		mov	r3, r0
 1015 0094 002B     		cmp	r3, #0
 1016 0096 01D0     		beq	.L44
 730:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         { 
 731:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           return HAL_TIMEOUT;
 1017              		.loc 1 731 0
 1018 0098 0323     		movs	r3, #3
 1019 009a 53E0     		b	.L40
 1020              	.L44:
 732:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         }
 733:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         tmp = (uint16_t*) pData;
 1021              		.loc 1 733 0
 1022 009c BB68     		ldr	r3, [r7, #8]
 1023 009e 3B61     		str	r3, [r7, #16]
 734:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         if(huart->Init.Parity == UART_PARITY_NONE)
 1024              		.loc 1 734 0
 1025 00a0 FB68     		ldr	r3, [r7, #12]
 1026 00a2 1B69     		ldr	r3, [r3, #16]
 1027 00a4 002B     		cmp	r3, #0
 1028 00a6 0CD1     		bne	.L45
 735:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         {
 736:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 1029              		.loc 1 736 0
 1030 00a8 FB68     		ldr	r3, [r7, #12]
 1031 00aa 1B68     		ldr	r3, [r3]
 1032 00ac 5B68     		ldr	r3, [r3, #4]
 1033 00ae 9BB2     		uxth	r3, r3
 1034 00b0 C3F30803 		ubfx	r3, r3, #0, #9
 1035 00b4 9AB2     		uxth	r2, r3
 1036 00b6 3B69     		ldr	r3, [r7, #16]
 1037 00b8 1A80     		strh	r2, [r3]	@ movhi
 737:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           pData +=2U;
 1038              		.loc 1 737 0
 1039 00ba BB68     		ldr	r3, [r7, #8]
 1040 00bc 0233     		adds	r3, r3, #2
 1041 00be BB60     		str	r3, [r7, #8]
 1042 00c0 30E0     		b	.L42
 1043              	.L45:
 738:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         }
 739:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         else
 740:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         {
ARM GAS  /tmp/ccnvFOuI.s 			page 32


 741:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 1044              		.loc 1 741 0
 1045 00c2 FB68     		ldr	r3, [r7, #12]
 1046 00c4 1B68     		ldr	r3, [r3]
 1047 00c6 5B68     		ldr	r3, [r3, #4]
 1048 00c8 9BB2     		uxth	r3, r3
 1049 00ca DBB2     		uxtb	r3, r3
 1050 00cc 9AB2     		uxth	r2, r3
 1051 00ce 3B69     		ldr	r3, [r7, #16]
 1052 00d0 1A80     		strh	r2, [r3]	@ movhi
 742:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           pData +=1U;
 1053              		.loc 1 742 0
 1054 00d2 BB68     		ldr	r3, [r7, #8]
 1055 00d4 0133     		adds	r3, r3, #1
 1056 00d6 BB60     		str	r3, [r7, #8]
 1057 00d8 24E0     		b	.L42
 1058              	.L43:
 743:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         }
 744:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 745:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       } 
 746:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       else
 747:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
 748:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 1059              		.loc 1 748 0
 1060 00da 3B68     		ldr	r3, [r7]
 1061 00dc 0093     		str	r3, [sp]
 1062 00de F868     		ldr	r0, [r7, #12]
 1063 00e0 2021     		movs	r1, #32
 1064 00e2 0022     		movs	r2, #0
 1065 00e4 7B69     		ldr	r3, [r7, #20]
 1066 00e6 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 1067 00ea 0346     		mov	r3, r0
 1068 00ec 002B     		cmp	r3, #0
 1069 00ee 01D0     		beq	.L47
 749:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         { 
 750:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           return HAL_TIMEOUT;
 1070              		.loc 1 750 0
 1071 00f0 0323     		movs	r3, #3
 1072 00f2 27E0     		b	.L40
 1073              	.L47:
 751:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         }
 752:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         if(huart->Init.Parity == UART_PARITY_NONE)
 1074              		.loc 1 752 0
 1075 00f4 FB68     		ldr	r3, [r7, #12]
 1076 00f6 1B69     		ldr	r3, [r3, #16]
 1077 00f8 002B     		cmp	r3, #0
 1078 00fa 08D1     		bne	.L48
 753:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         {
 754:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 1079              		.loc 1 754 0
 1080 00fc BB68     		ldr	r3, [r7, #8]
 1081 00fe 5A1C     		adds	r2, r3, #1
 1082 0100 BA60     		str	r2, [r7, #8]
 1083 0102 FA68     		ldr	r2, [r7, #12]
 1084 0104 1268     		ldr	r2, [r2]
 1085 0106 5268     		ldr	r2, [r2, #4]
 1086 0108 D2B2     		uxtb	r2, r2
ARM GAS  /tmp/ccnvFOuI.s 			page 33


 1087 010a 1A70     		strb	r2, [r3]
 1088 010c 0AE0     		b	.L42
 1089              	.L48:
 755:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         }
 756:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         else
 757:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         {
 758:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 1090              		.loc 1 758 0
 1091 010e BB68     		ldr	r3, [r7, #8]
 1092 0110 5A1C     		adds	r2, r3, #1
 1093 0112 BA60     		str	r2, [r7, #8]
 1094 0114 FA68     		ldr	r2, [r7, #12]
 1095 0116 1268     		ldr	r2, [r2]
 1096 0118 5268     		ldr	r2, [r2, #4]
 1097 011a D2B2     		uxtb	r2, r2
 1098 011c 02F07F02 		and	r2, r2, #127
 1099 0120 D2B2     		uxtb	r2, r2
 1100 0122 1A70     		strb	r2, [r3]
 1101              	.L42:
 724:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
 1102              		.loc 1 724 0
 1103 0124 FB68     		ldr	r3, [r7, #12]
 1104 0126 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 1105 0128 9BB2     		uxth	r3, r3
 1106 012a 002B     		cmp	r3, #0
 1107 012c 9DD1     		bne	.L49
 759:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         }
 760:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         
 761:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
 762:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
 763:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 764:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
 765:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 1108              		.loc 1 765 0
 1109 012e FB68     		ldr	r3, [r7, #12]
 1110 0130 2022     		movs	r2, #32
 1111 0132 83F83A20 		strb	r2, [r3, #58]
 766:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 767:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Process Unlocked */
 768:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 1112              		.loc 1 768 0
 1113 0136 FB68     		ldr	r3, [r7, #12]
 1114 0138 0022     		movs	r2, #0
 1115 013a 83F83820 		strb	r2, [r3, #56]
 769:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 770:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_OK;
 1116              		.loc 1 770 0
 1117 013e 0023     		movs	r3, #0
 1118 0140 00E0     		b	.L40
 1119              	.L37:
 771:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 772:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
 773:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 774:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_BUSY;   
 1120              		.loc 1 774 0
 1121 0142 0223     		movs	r3, #2
 1122              	.L40:
ARM GAS  /tmp/ccnvFOuI.s 			page 34


 775:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 776:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 1123              		.loc 1 776 0
 1124 0144 1846     		mov	r0, r3
 1125 0146 1837     		adds	r7, r7, #24
 1126              	.LCFI45:
 1127              		.cfi_def_cfa_offset 8
 1128 0148 BD46     		mov	sp, r7
 1129              	.LCFI46:
 1130              		.cfi_def_cfa_register 13
 1131              		@ sp needed
 1132 014a 80BD     		pop	{r7, pc}
 1133              		.cfi_endproc
 1134              	.LFE131:
 1136              		.section	.text.HAL_UART_Transmit_IT,"ax",%progbits
 1137              		.align	2
 1138              		.global	HAL_UART_Transmit_IT
 1139              		.thumb
 1140              		.thumb_func
 1142              	HAL_UART_Transmit_IT:
 1143              	.LFB132:
 777:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 778:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
 779:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Sends an amount of data in non blocking mode.
 780:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
 781:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 782:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  pData Pointer to data buffer
 783:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  Size Amount of data to be sent
 784:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
 785:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 786:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 787:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 1144              		.loc 1 787 0
 1145              		.cfi_startproc
 1146              		@ args = 0, pretend = 0, frame = 16
 1147              		@ frame_needed = 1, uses_anonymous_args = 0
 1148              		@ link register save eliminated.
 1149 0000 80B4     		push	{r7}
 1150              	.LCFI47:
 1151              		.cfi_def_cfa_offset 4
 1152              		.cfi_offset 7, -4
 1153 0002 85B0     		sub	sp, sp, #20
 1154              	.LCFI48:
 1155              		.cfi_def_cfa_offset 24
 1156 0004 00AF     		add	r7, sp, #0
 1157              	.LCFI49:
 1158              		.cfi_def_cfa_register 7
 1159 0006 F860     		str	r0, [r7, #12]
 1160 0008 B960     		str	r1, [r7, #8]
 1161 000a 1346     		mov	r3, r2
 1162 000c FB80     		strh	r3, [r7, #6]	@ movhi
 788:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
 789:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_READY)
 1163              		.loc 1 789 0
 1164 000e FB68     		ldr	r3, [r7, #12]
 1165 0010 93F83930 		ldrb	r3, [r3, #57]
 1166 0014 DBB2     		uxtb	r3, r3
ARM GAS  /tmp/ccnvFOuI.s 			page 35


 1167 0016 202B     		cmp	r3, #32
 1168 0018 30D1     		bne	.L51
 790:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 791:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if((pData == NULL ) || (Size == 0)) 
 1169              		.loc 1 791 0
 1170 001a BB68     		ldr	r3, [r7, #8]
 1171 001c 002B     		cmp	r3, #0
 1172 001e 02D0     		beq	.L52
 1173              		.loc 1 791 0 is_stmt 0 discriminator 1
 1174 0020 FB88     		ldrh	r3, [r7, #6]
 1175 0022 002B     		cmp	r3, #0
 1176 0024 01D1     		bne	.L53
 1177              	.L52:
 792:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
 793:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       return HAL_ERROR;
 1178              		.loc 1 793 0 is_stmt 1
 1179 0026 0123     		movs	r3, #1
 1180 0028 29E0     		b	.L54
 1181              	.L53:
 794:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
 795:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 796:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Process Locked */
 797:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_LOCK(huart);
 1182              		.loc 1 797 0
 1183 002a FB68     		ldr	r3, [r7, #12]
 1184 002c 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 1185 0030 012B     		cmp	r3, #1
 1186 0032 01D1     		bne	.L55
 1187              		.loc 1 797 0 is_stmt 0 discriminator 1
 1188 0034 0223     		movs	r3, #2
 1189 0036 22E0     		b	.L54
 1190              	.L55:
 1191              		.loc 1 797 0 discriminator 2
 1192 0038 FB68     		ldr	r3, [r7, #12]
 1193 003a 0122     		movs	r2, #1
 1194 003c 83F83820 		strb	r2, [r3, #56]
 798:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 799:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->pTxBuffPtr = pData;
 1195              		.loc 1 799 0 is_stmt 1 discriminator 2
 1196 0040 FB68     		ldr	r3, [r7, #12]
 1197 0042 BA68     		ldr	r2, [r7, #8]
 1198 0044 1A62     		str	r2, [r3, #32]
 800:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->TxXferSize = Size;
 1199              		.loc 1 800 0 discriminator 2
 1200 0046 FB68     		ldr	r3, [r7, #12]
 1201 0048 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1202 004a 9A84     		strh	r2, [r3, #36]	@ movhi
 801:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->TxXferCount = Size;
 1203              		.loc 1 801 0 discriminator 2
 1204 004c FB68     		ldr	r3, [r7, #12]
 1205 004e FA88     		ldrh	r2, [r7, #6]	@ movhi
 1206 0050 DA84     		strh	r2, [r3, #38]	@ movhi
 802:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 803:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1207              		.loc 1 803 0 discriminator 2
 1208 0052 FB68     		ldr	r3, [r7, #12]
 1209 0054 0022     		movs	r2, #0
ARM GAS  /tmp/ccnvFOuI.s 			page 36


 1210 0056 DA63     		str	r2, [r3, #60]
 804:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 1211              		.loc 1 804 0 discriminator 2
 1212 0058 FB68     		ldr	r3, [r7, #12]
 1213 005a 2122     		movs	r2, #33
 1214 005c 83F83920 		strb	r2, [r3, #57]
 805:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 806:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Process Unlocked */
 807:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 1215              		.loc 1 807 0 discriminator 2
 1216 0060 FB68     		ldr	r3, [r7, #12]
 1217 0062 0022     		movs	r2, #0
 1218 0064 83F83820 		strb	r2, [r3, #56]
 808:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 809:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Enable the UART Transmit data register empty Interrupt */
 810:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 1219              		.loc 1 810 0 discriminator 2
 1220 0068 FB68     		ldr	r3, [r7, #12]
 1221 006a 1B68     		ldr	r3, [r3]
 1222 006c FA68     		ldr	r2, [r7, #12]
 1223 006e 1268     		ldr	r2, [r2]
 1224 0070 D268     		ldr	r2, [r2, #12]
 1225 0072 42F08002 		orr	r2, r2, #128
 1226 0076 DA60     		str	r2, [r3, #12]
 811:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 812:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_OK;
 1227              		.loc 1 812 0 discriminator 2
 1228 0078 0023     		movs	r3, #0
 1229 007a 00E0     		b	.L54
 1230              	.L51:
 813:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 814:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
 815:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 816:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_BUSY;   
 1231              		.loc 1 816 0
 1232 007c 0223     		movs	r3, #2
 1233              	.L54:
 817:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 818:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 1234              		.loc 1 818 0
 1235 007e 1846     		mov	r0, r3
 1236 0080 1437     		adds	r7, r7, #20
 1237              	.LCFI50:
 1238              		.cfi_def_cfa_offset 4
 1239 0082 BD46     		mov	sp, r7
 1240              	.LCFI51:
 1241              		.cfi_def_cfa_register 13
 1242              		@ sp needed
 1243 0084 5DF8047B 		ldr	r7, [sp], #4
 1244              	.LCFI52:
 1245              		.cfi_restore 7
 1246              		.cfi_def_cfa_offset 0
 1247 0088 7047     		bx	lr
 1248              		.cfi_endproc
 1249              	.LFE132:
 1251 008a 00BF     		.section	.text.HAL_UART_Receive_IT,"ax",%progbits
 1252              		.align	2
ARM GAS  /tmp/ccnvFOuI.s 			page 37


 1253              		.global	HAL_UART_Receive_IT
 1254              		.thumb
 1255              		.thumb_func
 1257              	HAL_UART_Receive_IT:
 1258              	.LFB133:
 819:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 820:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
 821:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Receives an amount of data in non blocking mode 
 822:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
 823:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 824:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  pData Pointer to data buffer
 825:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  Size Amount of data to be received
 826:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
 827:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 828:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 829:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 1259              		.loc 1 829 0
 1260              		.cfi_startproc
 1261              		@ args = 0, pretend = 0, frame = 16
 1262              		@ frame_needed = 1, uses_anonymous_args = 0
 1263              		@ link register save eliminated.
 1264 0000 80B4     		push	{r7}
 1265              	.LCFI53:
 1266              		.cfi_def_cfa_offset 4
 1267              		.cfi_offset 7, -4
 1268 0002 85B0     		sub	sp, sp, #20
 1269              	.LCFI54:
 1270              		.cfi_def_cfa_offset 24
 1271 0004 00AF     		add	r7, sp, #0
 1272              	.LCFI55:
 1273              		.cfi_def_cfa_register 7
 1274 0006 F860     		str	r0, [r7, #12]
 1275 0008 B960     		str	r1, [r7, #8]
 1276 000a 1346     		mov	r3, r2
 1277 000c FB80     		strh	r3, [r7, #6]	@ movhi
 830:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */ 
 831:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart->RxState == HAL_UART_STATE_READY)
 1278              		.loc 1 831 0
 1279 000e FB68     		ldr	r3, [r7, #12]
 1280 0010 93F83A30 		ldrb	r3, [r3, #58]
 1281 0014 DBB2     		uxtb	r3, r3
 1282 0016 202B     		cmp	r3, #32
 1283 0018 38D1     		bne	.L57
 832:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 833:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if((pData == NULL ) || (Size == 0)) 
 1284              		.loc 1 833 0
 1285 001a BB68     		ldr	r3, [r7, #8]
 1286 001c 002B     		cmp	r3, #0
 1287 001e 02D0     		beq	.L58
 1288              		.loc 1 833 0 is_stmt 0 discriminator 1
 1289 0020 FB88     		ldrh	r3, [r7, #6]
 1290 0022 002B     		cmp	r3, #0
 1291 0024 01D1     		bne	.L59
 1292              	.L58:
 834:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
 835:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       return HAL_ERROR;
 1293              		.loc 1 835 0 is_stmt 1
ARM GAS  /tmp/ccnvFOuI.s 			page 38


 1294 0026 0123     		movs	r3, #1
 1295 0028 31E0     		b	.L60
 1296              	.L59:
 836:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
 837:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 838:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Process Locked */
 839:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_LOCK(huart);
 1297              		.loc 1 839 0
 1298 002a FB68     		ldr	r3, [r7, #12]
 1299 002c 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 1300 0030 012B     		cmp	r3, #1
 1301 0032 01D1     		bne	.L61
 1302              		.loc 1 839 0 is_stmt 0 discriminator 1
 1303 0034 0223     		movs	r3, #2
 1304 0036 2AE0     		b	.L60
 1305              	.L61:
 1306              		.loc 1 839 0 discriminator 2
 1307 0038 FB68     		ldr	r3, [r7, #12]
 1308 003a 0122     		movs	r2, #1
 1309 003c 83F83820 		strb	r2, [r3, #56]
 840:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 841:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->pRxBuffPtr = pData;
 1310              		.loc 1 841 0 is_stmt 1 discriminator 2
 1311 0040 FB68     		ldr	r3, [r7, #12]
 1312 0042 BA68     		ldr	r2, [r7, #8]
 1313 0044 9A62     		str	r2, [r3, #40]
 842:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxXferSize = Size;
 1314              		.loc 1 842 0 discriminator 2
 1315 0046 FB68     		ldr	r3, [r7, #12]
 1316 0048 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1317 004a 9A85     		strh	r2, [r3, #44]	@ movhi
 843:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxXferCount = Size;
 1318              		.loc 1 843 0 discriminator 2
 1319 004c FB68     		ldr	r3, [r7, #12]
 1320 004e FA88     		ldrh	r2, [r7, #6]	@ movhi
 1321 0050 DA85     		strh	r2, [r3, #46]	@ movhi
 844:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 845:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1322              		.loc 1 845 0 discriminator 2
 1323 0052 FB68     		ldr	r3, [r7, #12]
 1324 0054 0022     		movs	r2, #0
 1325 0056 DA63     		str	r2, [r3, #60]
 846:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 1326              		.loc 1 846 0 discriminator 2
 1327 0058 FB68     		ldr	r3, [r7, #12]
 1328 005a 2222     		movs	r2, #34
 1329 005c 83F83A20 		strb	r2, [r3, #58]
 847:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 848:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Process Unlocked */
 849:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 1330              		.loc 1 849 0 discriminator 2
 1331 0060 FB68     		ldr	r3, [r7, #12]
 1332 0062 0022     		movs	r2, #0
 1333 0064 83F83820 		strb	r2, [r3, #56]
 850:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         
 851:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
 852:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
ARM GAS  /tmp/ccnvFOuI.s 			page 39


 1334              		.loc 1 852 0 discriminator 2
 1335 0068 FB68     		ldr	r3, [r7, #12]
 1336 006a 1B68     		ldr	r3, [r3]
 1337 006c FA68     		ldr	r2, [r7, #12]
 1338 006e 1268     		ldr	r2, [r2]
 1339 0070 5269     		ldr	r2, [r2, #20]
 1340 0072 42F00102 		orr	r2, r2, #1
 1341 0076 5A61     		str	r2, [r3, #20]
 853:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 854:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Enable the UART Parity Error and Data Register not empty Interrupts */
 855:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 1342              		.loc 1 855 0 discriminator 2
 1343 0078 FB68     		ldr	r3, [r7, #12]
 1344 007a 1B68     		ldr	r3, [r3]
 1345 007c FA68     		ldr	r2, [r7, #12]
 1346 007e 1268     		ldr	r2, [r2]
 1347 0080 D268     		ldr	r2, [r2, #12]
 1348 0082 42F49072 		orr	r2, r2, #288
 1349 0086 DA60     		str	r2, [r3, #12]
 856:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 857:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_OK;
 1350              		.loc 1 857 0 discriminator 2
 1351 0088 0023     		movs	r3, #0
 1352 008a 00E0     		b	.L60
 1353              	.L57:
 858:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 859:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
 860:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 861:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_BUSY; 
 1354              		.loc 1 861 0
 1355 008c 0223     		movs	r3, #2
 1356              	.L60:
 862:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 863:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 1357              		.loc 1 863 0
 1358 008e 1846     		mov	r0, r3
 1359 0090 1437     		adds	r7, r7, #20
 1360              	.LCFI56:
 1361              		.cfi_def_cfa_offset 4
 1362 0092 BD46     		mov	sp, r7
 1363              	.LCFI57:
 1364              		.cfi_def_cfa_register 13
 1365              		@ sp needed
 1366 0094 5DF8047B 		ldr	r7, [sp], #4
 1367              	.LCFI58:
 1368              		.cfi_restore 7
 1369              		.cfi_def_cfa_offset 0
 1370 0098 7047     		bx	lr
 1371              		.cfi_endproc
 1372              	.LFE133:
 1374 009a 00BF     		.section	.text.HAL_UART_Transmit_DMA,"ax",%progbits
 1375              		.align	2
 1376              		.global	HAL_UART_Transmit_DMA
 1377              		.thumb
 1378              		.thumb_func
 1380              	HAL_UART_Transmit_DMA:
 1381              	.LFB134:
ARM GAS  /tmp/ccnvFOuI.s 			page 40


 864:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 865:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
 866:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Sends an amount of data in non blocking mode. 
 867:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
 868:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 869:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  pData Pointer to data buffer
 870:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  Size Amount of data to be sent
 871:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
 872:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 873:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 874:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 1382              		.loc 1 874 0
 1383              		.cfi_startproc
 1384              		@ args = 0, pretend = 0, frame = 24
 1385              		@ frame_needed = 1, uses_anonymous_args = 0
 1386 0000 90B5     		push	{r4, r7, lr}
 1387              	.LCFI59:
 1388              		.cfi_def_cfa_offset 12
 1389              		.cfi_offset 4, -12
 1390              		.cfi_offset 7, -8
 1391              		.cfi_offset 14, -4
 1392 0002 87B0     		sub	sp, sp, #28
 1393              	.LCFI60:
 1394              		.cfi_def_cfa_offset 40
 1395 0004 00AF     		add	r7, sp, #0
 1396              	.LCFI61:
 1397              		.cfi_def_cfa_register 7
 1398 0006 F860     		str	r0, [r7, #12]
 1399 0008 B960     		str	r1, [r7, #8]
 1400 000a 1346     		mov	r3, r2
 1401 000c FB80     		strh	r3, [r7, #6]	@ movhi
 875:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint32_t *tmp;
 876:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 877:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
 878:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_READY)
 1402              		.loc 1 878 0
 1403 000e FB68     		ldr	r3, [r7, #12]
 1404 0010 93F83930 		ldrb	r3, [r3, #57]
 1405 0014 DBB2     		uxtb	r3, r3
 1406 0016 202B     		cmp	r3, #32
 1407 0018 56D1     		bne	.L63
 879:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 880:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if((pData == NULL ) || (Size == 0))
 1408              		.loc 1 880 0
 1409 001a BB68     		ldr	r3, [r7, #8]
 1410 001c 002B     		cmp	r3, #0
 1411 001e 02D0     		beq	.L64
 1412              		.loc 1 880 0 is_stmt 0 discriminator 1
 1413 0020 FB88     		ldrh	r3, [r7, #6]
 1414 0022 002B     		cmp	r3, #0
 1415 0024 01D1     		bne	.L65
 1416              	.L64:
 881:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
 882:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       return HAL_ERROR;
 1417              		.loc 1 882 0 is_stmt 1
 1418 0026 0123     		movs	r3, #1
 1419 0028 4FE0     		b	.L66
ARM GAS  /tmp/ccnvFOuI.s 			page 41


 1420              	.L65:
 883:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
 884:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 885:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Process Locked */
 886:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_LOCK(huart);
 1421              		.loc 1 886 0
 1422 002a FB68     		ldr	r3, [r7, #12]
 1423 002c 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 1424 0030 012B     		cmp	r3, #1
 1425 0032 01D1     		bne	.L67
 1426              		.loc 1 886 0 is_stmt 0 discriminator 1
 1427 0034 0223     		movs	r3, #2
 1428 0036 48E0     		b	.L66
 1429              	.L67:
 1430              		.loc 1 886 0 discriminator 2
 1431 0038 FB68     		ldr	r3, [r7, #12]
 1432 003a 0122     		movs	r2, #1
 1433 003c 83F83820 		strb	r2, [r3, #56]
 887:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 888:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->pTxBuffPtr = pData;
 1434              		.loc 1 888 0 is_stmt 1 discriminator 2
 1435 0040 BA68     		ldr	r2, [r7, #8]
 1436 0042 FB68     		ldr	r3, [r7, #12]
 1437 0044 1A62     		str	r2, [r3, #32]
 889:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->TxXferSize = Size;
 1438              		.loc 1 889 0 discriminator 2
 1439 0046 FB68     		ldr	r3, [r7, #12]
 1440 0048 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1441 004a 9A84     		strh	r2, [r3, #36]	@ movhi
 890:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->TxXferCount = Size;
 1442              		.loc 1 890 0 discriminator 2
 1443 004c FB68     		ldr	r3, [r7, #12]
 1444 004e FA88     		ldrh	r2, [r7, #6]	@ movhi
 1445 0050 DA84     		strh	r2, [r3, #38]	@ movhi
 891:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 892:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1446              		.loc 1 892 0 discriminator 2
 1447 0052 FB68     		ldr	r3, [r7, #12]
 1448 0054 0022     		movs	r2, #0
 1449 0056 DA63     		str	r2, [r3, #60]
 893:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 1450              		.loc 1 893 0 discriminator 2
 1451 0058 FB68     		ldr	r3, [r7, #12]
 1452 005a 2122     		movs	r2, #33
 1453 005c 83F83920 		strb	r2, [r3, #57]
 894:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 895:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Set the UART DMA transfer complete callback */
 896:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 1454              		.loc 1 896 0 discriminator 2
 1455 0060 FB68     		ldr	r3, [r7, #12]
 1456 0062 1B6B     		ldr	r3, [r3, #48]
 1457 0064 1B4A     		ldr	r2, .L68
 1458 0066 DA63     		str	r2, [r3, #60]
 897:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 898:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Set the UART DMA Half transfer complete callback */
 899:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 1459              		.loc 1 899 0 discriminator 2
ARM GAS  /tmp/ccnvFOuI.s 			page 42


 1460 0068 FB68     		ldr	r3, [r7, #12]
 1461 006a 1B6B     		ldr	r3, [r3, #48]
 1462 006c 1A4A     		ldr	r2, .L68+4
 1463 006e 1A64     		str	r2, [r3, #64]
 900:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 901:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Set the DMA error callback */
 902:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->hdmatx->XferErrorCallback = UART_DMAError;
 1464              		.loc 1 902 0 discriminator 2
 1465 0070 FB68     		ldr	r3, [r7, #12]
 1466 0072 1B6B     		ldr	r3, [r3, #48]
 1467 0074 194A     		ldr	r2, .L68+8
 1468 0076 DA64     		str	r2, [r3, #76]
 903:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 904:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Set the DMA abort callback */
 905:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->hdmatx->XferAbortCallback = NULL;
 1469              		.loc 1 905 0 discriminator 2
 1470 0078 FB68     		ldr	r3, [r7, #12]
 1471 007a 1B6B     		ldr	r3, [r3, #48]
 1472 007c 0022     		movs	r2, #0
 1473 007e 1A65     		str	r2, [r3, #80]
 906:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 907:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Enable the UART transmit DMA Stream */
 908:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     tmp = (uint32_t*)&pData;
 1474              		.loc 1 908 0 discriminator 2
 1475 0080 07F10803 		add	r3, r7, #8
 1476 0084 7B61     		str	r3, [r7, #20]
 909:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 1477              		.loc 1 909 0 discriminator 2
 1478 0086 FB68     		ldr	r3, [r7, #12]
 1479 0088 196B     		ldr	r1, [r3, #48]
 1480 008a 7B69     		ldr	r3, [r7, #20]
 1481 008c 1A68     		ldr	r2, [r3]
 1482 008e FB68     		ldr	r3, [r7, #12]
 1483 0090 1B68     		ldr	r3, [r3]
 1484 0092 0433     		adds	r3, r3, #4
 1485 0094 1C46     		mov	r4, r3
 1486 0096 FB88     		ldrh	r3, [r7, #6]
 1487 0098 0846     		mov	r0, r1
 1488 009a 1146     		mov	r1, r2
 1489 009c 2246     		mov	r2, r4
 1490 009e FFF7FEFF 		bl	HAL_DMA_Start_IT
 910:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 911:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Clear the TC flag in the SR register by writing 0 to it */
 912:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 1491              		.loc 1 912 0 discriminator 2
 1492 00a2 FB68     		ldr	r3, [r7, #12]
 1493 00a4 1B68     		ldr	r3, [r3]
 1494 00a6 6FF04002 		mvn	r2, #64
 1495 00aa 1A60     		str	r2, [r3]
 913:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 914:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Process Unlocked */
 915:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 1496              		.loc 1 915 0 discriminator 2
 1497 00ac FB68     		ldr	r3, [r7, #12]
 1498 00ae 0022     		movs	r2, #0
 1499 00b0 83F83820 		strb	r2, [r3, #56]
 916:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
ARM GAS  /tmp/ccnvFOuI.s 			page 43


 917:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Enable the DMA transfer for transmit request by setting the DMAT bit
 918:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        in the UART CR3 register */
 919:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 1500              		.loc 1 919 0 discriminator 2
 1501 00b4 FB68     		ldr	r3, [r7, #12]
 1502 00b6 1B68     		ldr	r3, [r3]
 1503 00b8 FA68     		ldr	r2, [r7, #12]
 1504 00ba 1268     		ldr	r2, [r2]
 1505 00bc 5269     		ldr	r2, [r2, #20]
 1506 00be 42F08002 		orr	r2, r2, #128
 1507 00c2 5A61     		str	r2, [r3, #20]
 920:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 921:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_OK;
 1508              		.loc 1 921 0 discriminator 2
 1509 00c4 0023     		movs	r3, #0
 1510 00c6 00E0     		b	.L66
 1511              	.L63:
 922:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 923:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
 924:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 925:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_BUSY;
 1512              		.loc 1 925 0
 1513 00c8 0223     		movs	r3, #2
 1514              	.L66:
 926:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 927:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 1515              		.loc 1 927 0
 1516 00ca 1846     		mov	r0, r3
 1517 00cc 1C37     		adds	r7, r7, #28
 1518              	.LCFI62:
 1519              		.cfi_def_cfa_offset 12
 1520 00ce BD46     		mov	sp, r7
 1521              	.LCFI63:
 1522              		.cfi_def_cfa_register 13
 1523              		@ sp needed
 1524 00d0 90BD     		pop	{r4, r7, pc}
 1525              	.L69:
 1526 00d2 00BF     		.align	2
 1527              	.L68:
 1528 00d4 00000000 		.word	UART_DMATransmitCplt
 1529 00d8 00000000 		.word	UART_DMATxHalfCplt
 1530 00dc 00000000 		.word	UART_DMAError
 1531              		.cfi_endproc
 1532              	.LFE134:
 1534              		.section	.text.HAL_UART_Receive_DMA,"ax",%progbits
 1535              		.align	2
 1536              		.global	HAL_UART_Receive_DMA
 1537              		.thumb
 1538              		.thumb_func
 1540              	HAL_UART_Receive_DMA:
 1541              	.LFB135:
 928:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 929:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
 930:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Receives an amount of data in non blocking mode. 
 931:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
 932:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 933:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  pData Pointer to data buffer
ARM GAS  /tmp/ccnvFOuI.s 			page 44


 934:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  Size Amount of data to be received
 935:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   When the UART parity is enabled (PCE = 1) the data received contain the parity bit.
 936:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
 937:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 938:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 939:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {  
 1542              		.loc 1 939 0
 1543              		.cfi_startproc
 1544              		@ args = 0, pretend = 0, frame = 24
 1545              		@ frame_needed = 1, uses_anonymous_args = 0
 1546 0000 90B5     		push	{r4, r7, lr}
 1547              	.LCFI64:
 1548              		.cfi_def_cfa_offset 12
 1549              		.cfi_offset 4, -12
 1550              		.cfi_offset 7, -8
 1551              		.cfi_offset 14, -4
 1552 0002 87B0     		sub	sp, sp, #28
 1553              	.LCFI65:
 1554              		.cfi_def_cfa_offset 40
 1555 0004 00AF     		add	r7, sp, #0
 1556              	.LCFI66:
 1557              		.cfi_def_cfa_register 7
 1558 0006 F860     		str	r0, [r7, #12]
 1559 0008 B960     		str	r1, [r7, #8]
 1560 000a 1346     		mov	r3, r2
 1561 000c FB80     		strh	r3, [r7, #6]	@ movhi
 940:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint32_t *tmp;
 941:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 942:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
 943:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart->RxState == HAL_UART_STATE_READY) 
 1562              		.loc 1 943 0
 1563 000e FB68     		ldr	r3, [r7, #12]
 1564 0010 93F83A30 		ldrb	r3, [r3, #58]
 1565 0014 DBB2     		uxtb	r3, r3
 1566 0016 202B     		cmp	r3, #32
 1567 0018 68D1     		bne	.L71
 944:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 945:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if((pData == NULL ) || (Size == 0)) 
 1568              		.loc 1 945 0
 1569 001a BB68     		ldr	r3, [r7, #8]
 1570 001c 002B     		cmp	r3, #0
 1571 001e 02D0     		beq	.L72
 1572              		.loc 1 945 0 is_stmt 0 discriminator 1
 1573 0020 FB88     		ldrh	r3, [r7, #6]
 1574 0022 002B     		cmp	r3, #0
 1575 0024 01D1     		bne	.L73
 1576              	.L72:
 946:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
 947:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       return HAL_ERROR;
 1577              		.loc 1 947 0 is_stmt 1
 1578 0026 0123     		movs	r3, #1
 1579 0028 61E0     		b	.L74
 1580              	.L73:
 948:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
 949:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 950:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Process Locked */
 951:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_LOCK(huart);
ARM GAS  /tmp/ccnvFOuI.s 			page 45


 1581              		.loc 1 951 0
 1582 002a FB68     		ldr	r3, [r7, #12]
 1583 002c 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 1584 0030 012B     		cmp	r3, #1
 1585 0032 01D1     		bne	.L75
 1586              		.loc 1 951 0 is_stmt 0 discriminator 1
 1587 0034 0223     		movs	r3, #2
 1588 0036 5AE0     		b	.L74
 1589              	.L75:
 1590              		.loc 1 951 0 discriminator 2
 1591 0038 FB68     		ldr	r3, [r7, #12]
 1592 003a 0122     		movs	r2, #1
 1593 003c 83F83820 		strb	r2, [r3, #56]
 952:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 953:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->pRxBuffPtr = pData;
 1594              		.loc 1 953 0 is_stmt 1 discriminator 2
 1595 0040 BA68     		ldr	r2, [r7, #8]
 1596 0042 FB68     		ldr	r3, [r7, #12]
 1597 0044 9A62     		str	r2, [r3, #40]
 954:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxXferSize = Size;
 1598              		.loc 1 954 0 discriminator 2
 1599 0046 FB68     		ldr	r3, [r7, #12]
 1600 0048 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1601 004a 9A85     		strh	r2, [r3, #44]	@ movhi
 955:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 956:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1602              		.loc 1 956 0 discriminator 2
 1603 004c FB68     		ldr	r3, [r7, #12]
 1604 004e 0022     		movs	r2, #0
 1605 0050 DA63     		str	r2, [r3, #60]
 957:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 1606              		.loc 1 957 0 discriminator 2
 1607 0052 FB68     		ldr	r3, [r7, #12]
 1608 0054 2222     		movs	r2, #34
 1609 0056 83F83A20 		strb	r2, [r3, #58]
 958:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         
 959:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Set the UART DMA transfer complete callback */
 960:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 1610              		.loc 1 960 0 discriminator 2
 1611 005a FB68     		ldr	r3, [r7, #12]
 1612 005c 5B6B     		ldr	r3, [r3, #52]
 1613 005e 264A     		ldr	r2, .L76
 1614 0060 DA63     		str	r2, [r3, #60]
 961:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 962:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Set the UART DMA Half transfer complete callback */
 963:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 1615              		.loc 1 963 0 discriminator 2
 1616 0062 FB68     		ldr	r3, [r7, #12]
 1617 0064 5B6B     		ldr	r3, [r3, #52]
 1618 0066 254A     		ldr	r2, .L76+4
 1619 0068 1A64     		str	r2, [r3, #64]
 964:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 965:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Set the DMA error callback */
 966:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->hdmarx->XferErrorCallback = UART_DMAError;
 1620              		.loc 1 966 0 discriminator 2
 1621 006a FB68     		ldr	r3, [r7, #12]
 1622 006c 5B6B     		ldr	r3, [r3, #52]
ARM GAS  /tmp/ccnvFOuI.s 			page 46


 1623 006e 244A     		ldr	r2, .L76+8
 1624 0070 DA64     		str	r2, [r3, #76]
 967:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 968:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Set the DMA abort callback */
 969:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->hdmarx->XferAbortCallback = NULL;
 1625              		.loc 1 969 0 discriminator 2
 1626 0072 FB68     		ldr	r3, [r7, #12]
 1627 0074 5B6B     		ldr	r3, [r3, #52]
 1628 0076 0022     		movs	r2, #0
 1629 0078 1A65     		str	r2, [r3, #80]
 970:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 971:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Enable the DMA Stream */
 972:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     tmp = (uint32_t*)&pData;
 1630              		.loc 1 972 0 discriminator 2
 1631 007a 07F10803 		add	r3, r7, #8
 1632 007e 7B61     		str	r3, [r7, #20]
 973:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 1633              		.loc 1 973 0 discriminator 2
 1634 0080 FB68     		ldr	r3, [r7, #12]
 1635 0082 596B     		ldr	r1, [r3, #52]
 1636 0084 FB68     		ldr	r3, [r7, #12]
 1637 0086 1B68     		ldr	r3, [r3]
 1638 0088 0433     		adds	r3, r3, #4
 1639 008a 1C46     		mov	r4, r3
 1640 008c 7B69     		ldr	r3, [r7, #20]
 1641 008e 1A68     		ldr	r2, [r3]
 1642 0090 FB88     		ldrh	r3, [r7, #6]
 1643 0092 0846     		mov	r0, r1
 1644 0094 2146     		mov	r1, r4
 1645 0096 FFF7FEFF 		bl	HAL_DMA_Start_IT
 1646              	.LBB2:
 974:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 975:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the sec
 976:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_UART_CLEAR_OREFLAG(huart);
 1647              		.loc 1 976 0 discriminator 2
 1648 009a 0023     		movs	r3, #0
 1649 009c 3B61     		str	r3, [r7, #16]
 1650 009e FB68     		ldr	r3, [r7, #12]
 1651 00a0 1B68     		ldr	r3, [r3]
 1652 00a2 1B68     		ldr	r3, [r3]
 1653 00a4 3B61     		str	r3, [r7, #16]
 1654 00a6 FB68     		ldr	r3, [r7, #12]
 1655 00a8 1B68     		ldr	r3, [r3]
 1656 00aa 5B68     		ldr	r3, [r3, #4]
 1657 00ac 3B61     		str	r3, [r7, #16]
 1658 00ae 3B69     		ldr	r3, [r7, #16]
 1659              	.LBE2:
 977:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 978:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Process Unlocked */
 979:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 1660              		.loc 1 979 0 discriminator 2
 1661 00b0 FB68     		ldr	r3, [r7, #12]
 1662 00b2 0022     		movs	r2, #0
 1663 00b4 83F83820 		strb	r2, [r3, #56]
 980:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 981:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Enable the UART Parity Error Interrupt */
 982:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
ARM GAS  /tmp/ccnvFOuI.s 			page 47


 1664              		.loc 1 982 0 discriminator 2
 1665 00b8 FB68     		ldr	r3, [r7, #12]
 1666 00ba 1B68     		ldr	r3, [r3]
 1667 00bc FA68     		ldr	r2, [r7, #12]
 1668 00be 1268     		ldr	r2, [r2]
 1669 00c0 D268     		ldr	r2, [r2, #12]
 1670 00c2 42F48072 		orr	r2, r2, #256
 1671 00c6 DA60     		str	r2, [r3, #12]
 983:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 984:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
 985:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1672              		.loc 1 985 0 discriminator 2
 1673 00c8 FB68     		ldr	r3, [r7, #12]
 1674 00ca 1B68     		ldr	r3, [r3]
 1675 00cc FA68     		ldr	r2, [r7, #12]
 1676 00ce 1268     		ldr	r2, [r2]
 1677 00d0 5269     		ldr	r2, [r2, #20]
 1678 00d2 42F00102 		orr	r2, r2, #1
 1679 00d6 5A61     		str	r2, [r3, #20]
 986:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 987:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
 988:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     in the UART CR3 register */
 989:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 1680              		.loc 1 989 0 discriminator 2
 1681 00d8 FB68     		ldr	r3, [r7, #12]
 1682 00da 1B68     		ldr	r3, [r3]
 1683 00dc FA68     		ldr	r2, [r7, #12]
 1684 00de 1268     		ldr	r2, [r2]
 1685 00e0 5269     		ldr	r2, [r2, #20]
 1686 00e2 42F04002 		orr	r2, r2, #64
 1687 00e6 5A61     		str	r2, [r3, #20]
 990:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 991:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_OK;
 1688              		.loc 1 991 0 discriminator 2
 1689 00e8 0023     		movs	r3, #0
 1690 00ea 00E0     		b	.L74
 1691              	.L71:
 992:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 993:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
 994:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 995:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_BUSY; 
 1692              		.loc 1 995 0
 1693 00ec 0223     		movs	r3, #2
 1694              	.L74:
 996:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 997:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 1695              		.loc 1 997 0
 1696 00ee 1846     		mov	r0, r3
 1697 00f0 1C37     		adds	r7, r7, #28
 1698              	.LCFI67:
 1699              		.cfi_def_cfa_offset 12
 1700 00f2 BD46     		mov	sp, r7
 1701              	.LCFI68:
 1702              		.cfi_def_cfa_register 13
 1703              		@ sp needed
 1704 00f4 90BD     		pop	{r4, r7, pc}
 1705              	.L77:
ARM GAS  /tmp/ccnvFOuI.s 			page 48


 1706 00f6 00BF     		.align	2
 1707              	.L76:
 1708 00f8 00000000 		.word	UART_DMAReceiveCplt
 1709 00fc 00000000 		.word	UART_DMARxHalfCplt
 1710 0100 00000000 		.word	UART_DMAError
 1711              		.cfi_endproc
 1712              	.LFE135:
 1714              		.section	.text.HAL_UART_DMAPause,"ax",%progbits
 1715              		.align	2
 1716              		.global	HAL_UART_DMAPause
 1717              		.thumb
 1718              		.thumb_func
 1720              	HAL_UART_DMAPause:
 1721              	.LFB136:
 998:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 999:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1000:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief Pauses the DMA Transfer.
1001:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
1002:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1003:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
1004:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1005:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
1006:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 1722              		.loc 1 1006 0
 1723              		.cfi_startproc
 1724              		@ args = 0, pretend = 0, frame = 16
 1725              		@ frame_needed = 1, uses_anonymous_args = 0
 1726              		@ link register save eliminated.
 1727 0000 80B4     		push	{r7}
 1728              	.LCFI69:
 1729              		.cfi_def_cfa_offset 4
 1730              		.cfi_offset 7, -4
 1731 0002 85B0     		sub	sp, sp, #20
 1732              	.LCFI70:
 1733              		.cfi_def_cfa_offset 24
 1734 0004 00AF     		add	r7, sp, #0
 1735              	.LCFI71:
 1736              		.cfi_def_cfa_register 7
 1737 0006 7860     		str	r0, [r7, #4]
1007:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    uint32_t dmarequest = 0x00U;
 1738              		.loc 1 1007 0
 1739 0008 0023     		movs	r3, #0
 1740 000a FB60     		str	r3, [r7, #12]
1008:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1009:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process Locked */
1010:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_LOCK(huart);
 1741              		.loc 1 1010 0
 1742 000c 7B68     		ldr	r3, [r7, #4]
 1743 000e 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 1744 0012 012B     		cmp	r3, #1
 1745 0014 01D1     		bne	.L79
 1746              		.loc 1 1010 0 is_stmt 0 discriminator 1
 1747 0016 0223     		movs	r3, #2
 1748 0018 50E0     		b	.L80
 1749              	.L79:
 1750              		.loc 1 1010 0 discriminator 2
 1751 001a 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccnvFOuI.s 			page 49


 1752 001c 0122     		movs	r2, #1
 1753 001e 83F83820 		strb	r2, [r3, #56]
1011:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 1754              		.loc 1 1011 0 is_stmt 1 discriminator 2
 1755 0022 7B68     		ldr	r3, [r7, #4]
 1756 0024 1B68     		ldr	r3, [r3]
 1757 0026 5B69     		ldr	r3, [r3, #20]
 1758 0028 03F08003 		and	r3, r3, #128
 1759 002c 002B     		cmp	r3, #0
 1760 002e 14BF     		ite	ne
 1761 0030 0123     		movne	r3, #1
 1762 0032 0023     		moveq	r3, #0
 1763 0034 DBB2     		uxtb	r3, r3
 1764 0036 FB60     		str	r3, [r7, #12]
1012:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 1765              		.loc 1 1012 0 discriminator 2
 1766 0038 7B68     		ldr	r3, [r7, #4]
 1767 003a 93F83930 		ldrb	r3, [r3, #57]
 1768 003e DBB2     		uxtb	r3, r3
 1769 0040 212B     		cmp	r3, #33
 1770 0042 0AD1     		bne	.L81
 1771              		.loc 1 1012 0 is_stmt 0 discriminator 1
 1772 0044 FB68     		ldr	r3, [r7, #12]
 1773 0046 002B     		cmp	r3, #0
 1774 0048 07D0     		beq	.L81
1013:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1014:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Disable the UART DMA Tx request */
1015:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 1775              		.loc 1 1015 0 is_stmt 1
 1776 004a 7B68     		ldr	r3, [r7, #4]
 1777 004c 1B68     		ldr	r3, [r3]
 1778 004e 7A68     		ldr	r2, [r7, #4]
 1779 0050 1268     		ldr	r2, [r2]
 1780 0052 5269     		ldr	r2, [r2, #20]
 1781 0054 22F08002 		bic	r2, r2, #128
 1782 0058 5A61     		str	r2, [r3, #20]
 1783              	.L81:
1016:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1017:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 1784              		.loc 1 1017 0
 1785 005a 7B68     		ldr	r3, [r7, #4]
 1786 005c 1B68     		ldr	r3, [r3]
 1787 005e 5B69     		ldr	r3, [r3, #20]
 1788 0060 03F04003 		and	r3, r3, #64
 1789 0064 002B     		cmp	r3, #0
 1790 0066 14BF     		ite	ne
 1791 0068 0123     		movne	r3, #1
 1792 006a 0023     		moveq	r3, #0
 1793 006c DBB2     		uxtb	r3, r3
 1794 006e FB60     		str	r3, [r7, #12]
1018:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 1795              		.loc 1 1018 0
 1796 0070 7B68     		ldr	r3, [r7, #4]
 1797 0072 93F83A30 		ldrb	r3, [r3, #58]
 1798 0076 DBB2     		uxtb	r3, r3
 1799 0078 222B     		cmp	r3, #34
 1800 007a 1AD1     		bne	.L82
ARM GAS  /tmp/ccnvFOuI.s 			page 50


 1801              		.loc 1 1018 0 is_stmt 0 discriminator 1
 1802 007c FB68     		ldr	r3, [r7, #12]
 1803 007e 002B     		cmp	r3, #0
 1804 0080 17D0     		beq	.L82
1019:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1020:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1021:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 1805              		.loc 1 1021 0 is_stmt 1
 1806 0082 7B68     		ldr	r3, [r7, #4]
 1807 0084 1B68     		ldr	r3, [r3]
 1808 0086 7A68     		ldr	r2, [r7, #4]
 1809 0088 1268     		ldr	r2, [r2]
 1810 008a D268     		ldr	r2, [r2, #12]
 1811 008c 22F48072 		bic	r2, r2, #256
 1812 0090 DA60     		str	r2, [r3, #12]
1022:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1813              		.loc 1 1022 0
 1814 0092 7B68     		ldr	r3, [r7, #4]
 1815 0094 1B68     		ldr	r3, [r3]
 1816 0096 7A68     		ldr	r2, [r7, #4]
 1817 0098 1268     		ldr	r2, [r2]
 1818 009a 5269     		ldr	r2, [r2, #20]
 1819 009c 22F00102 		bic	r2, r2, #1
 1820 00a0 5A61     		str	r2, [r3, #20]
1023:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
1024:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Disable the UART DMA Rx request */
1025:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 1821              		.loc 1 1025 0
 1822 00a2 7B68     		ldr	r3, [r7, #4]
 1823 00a4 1B68     		ldr	r3, [r3]
 1824 00a6 7A68     		ldr	r2, [r7, #4]
 1825 00a8 1268     		ldr	r2, [r2]
 1826 00aa 5269     		ldr	r2, [r2, #20]
 1827 00ac 22F04002 		bic	r2, r2, #64
 1828 00b0 5A61     		str	r2, [r3, #20]
 1829              	.L82:
1026:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1027:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1028:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process Unlocked */
1029:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 1830              		.loc 1 1029 0
 1831 00b2 7B68     		ldr	r3, [r7, #4]
 1832 00b4 0022     		movs	r2, #0
 1833 00b6 83F83820 		strb	r2, [r3, #56]
1030:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1031:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK; 
 1834              		.loc 1 1031 0
 1835 00ba 0023     		movs	r3, #0
 1836              	.L80:
1032:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 1837              		.loc 1 1032 0
 1838 00bc 1846     		mov	r0, r3
 1839 00be 1437     		adds	r7, r7, #20
 1840              	.LCFI72:
 1841              		.cfi_def_cfa_offset 4
 1842 00c0 BD46     		mov	sp, r7
 1843              	.LCFI73:
ARM GAS  /tmp/ccnvFOuI.s 			page 51


 1844              		.cfi_def_cfa_register 13
 1845              		@ sp needed
 1846 00c2 5DF8047B 		ldr	r7, [sp], #4
 1847              	.LCFI74:
 1848              		.cfi_restore 7
 1849              		.cfi_def_cfa_offset 0
 1850 00c6 7047     		bx	lr
 1851              		.cfi_endproc
 1852              	.LFE136:
 1854              		.section	.text.HAL_UART_DMAResume,"ax",%progbits
 1855              		.align	2
 1856              		.global	HAL_UART_DMAResume
 1857              		.thumb
 1858              		.thumb_func
 1860              	HAL_UART_DMAResume:
 1861              	.LFB137:
1033:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1034:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1035:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief Resumes the DMA Transfer.
1036:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
1037:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1038:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
1039:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1040:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
1041:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 1862              		.loc 1 1041 0
 1863              		.cfi_startproc
 1864              		@ args = 0, pretend = 0, frame = 16
 1865              		@ frame_needed = 1, uses_anonymous_args = 0
 1866              		@ link register save eliminated.
 1867 0000 80B4     		push	{r7}
 1868              	.LCFI75:
 1869              		.cfi_def_cfa_offset 4
 1870              		.cfi_offset 7, -4
 1871 0002 85B0     		sub	sp, sp, #20
 1872              	.LCFI76:
 1873              		.cfi_def_cfa_offset 24
 1874 0004 00AF     		add	r7, sp, #0
 1875              	.LCFI77:
 1876              		.cfi_def_cfa_register 7
 1877 0006 7860     		str	r0, [r7, #4]
1042:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process Locked */
1043:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_LOCK(huart);
 1878              		.loc 1 1043 0
 1879 0008 7B68     		ldr	r3, [r7, #4]
 1880 000a 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 1881 000e 012B     		cmp	r3, #1
 1882 0010 01D1     		bne	.L84
 1883              		.loc 1 1043 0 is_stmt 0 discriminator 1
 1884 0012 0223     		movs	r3, #2
 1885 0014 3FE0     		b	.L85
 1886              	.L84:
 1887              		.loc 1 1043 0 discriminator 2
 1888 0016 7B68     		ldr	r3, [r7, #4]
 1889 0018 0122     		movs	r2, #1
 1890 001a 83F83820 		strb	r2, [r3, #56]
1044:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
ARM GAS  /tmp/ccnvFOuI.s 			page 52


1045:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_BUSY_TX)
 1891              		.loc 1 1045 0 is_stmt 1 discriminator 2
 1892 001e 7B68     		ldr	r3, [r7, #4]
 1893 0020 93F83930 		ldrb	r3, [r3, #57]
 1894 0024 DBB2     		uxtb	r3, r3
 1895 0026 212B     		cmp	r3, #33
 1896 0028 07D1     		bne	.L86
1046:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1047:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Enable the UART DMA Tx request */
1048:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 1897              		.loc 1 1048 0
 1898 002a 7B68     		ldr	r3, [r7, #4]
 1899 002c 1B68     		ldr	r3, [r3]
 1900 002e 7A68     		ldr	r2, [r7, #4]
 1901 0030 1268     		ldr	r2, [r2]
 1902 0032 5269     		ldr	r2, [r2, #20]
 1903 0034 42F08002 		orr	r2, r2, #128
 1904 0038 5A61     		str	r2, [r3, #20]
 1905              	.L86:
1049:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1050:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 1906              		.loc 1 1050 0
 1907 003a 7B68     		ldr	r3, [r7, #4]
 1908 003c 93F83A30 		ldrb	r3, [r3, #58]
 1909 0040 DBB2     		uxtb	r3, r3
 1910 0042 222B     		cmp	r3, #34
 1911 0044 22D1     		bne	.L87
 1912              	.LBB3:
1051:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1052:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Clear the Overrun flag before resuming the Rx transfer*/
1053:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_UART_CLEAR_OREFLAG(huart);
 1913              		.loc 1 1053 0
 1914 0046 0023     		movs	r3, #0
 1915 0048 FB60     		str	r3, [r7, #12]
 1916 004a 7B68     		ldr	r3, [r7, #4]
 1917 004c 1B68     		ldr	r3, [r3]
 1918 004e 1B68     		ldr	r3, [r3]
 1919 0050 FB60     		str	r3, [r7, #12]
 1920 0052 7B68     		ldr	r3, [r7, #4]
 1921 0054 1B68     		ldr	r3, [r3]
 1922 0056 5B68     		ldr	r3, [r3, #4]
 1923 0058 FB60     		str	r3, [r7, #12]
 1924 005a FB68     		ldr	r3, [r7, #12]
 1925              	.LBE3:
1054:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
1055:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */
1056:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 1926              		.loc 1 1056 0
 1927 005c 7B68     		ldr	r3, [r7, #4]
 1928 005e 1B68     		ldr	r3, [r3]
 1929 0060 7A68     		ldr	r2, [r7, #4]
 1930 0062 1268     		ldr	r2, [r2]
 1931 0064 D268     		ldr	r2, [r2, #12]
 1932 0066 42F48072 		orr	r2, r2, #256
 1933 006a DA60     		str	r2, [r3, #12]
1057:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1934              		.loc 1 1057 0
ARM GAS  /tmp/ccnvFOuI.s 			page 53


 1935 006c 7B68     		ldr	r3, [r7, #4]
 1936 006e 1B68     		ldr	r3, [r3]
 1937 0070 7A68     		ldr	r2, [r7, #4]
 1938 0072 1268     		ldr	r2, [r2]
 1939 0074 5269     		ldr	r2, [r2, #20]
 1940 0076 42F00102 		orr	r2, r2, #1
 1941 007a 5A61     		str	r2, [r3, #20]
1058:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
1059:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Enable the UART DMA Rx request */
1060:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 1942              		.loc 1 1060 0
 1943 007c 7B68     		ldr	r3, [r7, #4]
 1944 007e 1B68     		ldr	r3, [r3]
 1945 0080 7A68     		ldr	r2, [r7, #4]
 1946 0082 1268     		ldr	r2, [r2]
 1947 0084 5269     		ldr	r2, [r2, #20]
 1948 0086 42F04002 		orr	r2, r2, #64
 1949 008a 5A61     		str	r2, [r3, #20]
 1950              	.L87:
1061:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1062:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1063:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process Unlocked */
1064:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 1951              		.loc 1 1064 0
 1952 008c 7B68     		ldr	r3, [r7, #4]
 1953 008e 0022     		movs	r2, #0
 1954 0090 83F83820 		strb	r2, [r3, #56]
1065:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1066:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 1955              		.loc 1 1066 0
 1956 0094 0023     		movs	r3, #0
 1957              	.L85:
1067:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 1958              		.loc 1 1067 0
 1959 0096 1846     		mov	r0, r3
 1960 0098 1437     		adds	r7, r7, #20
 1961              	.LCFI78:
 1962              		.cfi_def_cfa_offset 4
 1963 009a BD46     		mov	sp, r7
 1964              	.LCFI79:
 1965              		.cfi_def_cfa_register 13
 1966              		@ sp needed
 1967 009c 5DF8047B 		ldr	r7, [sp], #4
 1968              	.LCFI80:
 1969              		.cfi_restore 7
 1970              		.cfi_def_cfa_offset 0
 1971 00a0 7047     		bx	lr
 1972              		.cfi_endproc
 1973              	.LFE137:
 1975 00a2 00BF     		.section	.text.HAL_UART_DMAStop,"ax",%progbits
 1976              		.align	2
 1977              		.global	HAL_UART_DMAStop
 1978              		.thumb
 1979              		.thumb_func
 1981              	HAL_UART_DMAStop:
 1982              	.LFB138:
1068:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
ARM GAS  /tmp/ccnvFOuI.s 			page 54


1069:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1070:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief Stops the DMA Transfer.
1071:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
1072:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1073:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
1074:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1075:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
1076:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 1983              		.loc 1 1076 0
 1984              		.cfi_startproc
 1985              		@ args = 0, pretend = 0, frame = 16
 1986              		@ frame_needed = 1, uses_anonymous_args = 0
 1987 0000 80B5     		push	{r7, lr}
 1988              	.LCFI81:
 1989              		.cfi_def_cfa_offset 8
 1990              		.cfi_offset 7, -8
 1991              		.cfi_offset 14, -4
 1992 0002 84B0     		sub	sp, sp, #16
 1993              	.LCFI82:
 1994              		.cfi_def_cfa_offset 24
 1995 0004 00AF     		add	r7, sp, #0
 1996              	.LCFI83:
 1997              		.cfi_def_cfa_register 7
 1998 0006 7860     		str	r0, [r7, #4]
1077:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
 1999              		.loc 1 1077 0
 2000 0008 0023     		movs	r3, #0
 2001 000a FB60     		str	r3, [r7, #12]
1078:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* The Lock is not implemented on this API to allow the user application
1079:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      to call the HAL UART API under callbacks HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
1080:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
1081:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
1082:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      */
1083:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1084:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Stop UART DMA Tx request if ongoing */
1085:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 2002              		.loc 1 1085 0
 2003 000c 7B68     		ldr	r3, [r7, #4]
 2004 000e 1B68     		ldr	r3, [r3]
 2005 0010 5B69     		ldr	r3, [r3, #20]
 2006 0012 03F08003 		and	r3, r3, #128
 2007 0016 002B     		cmp	r3, #0
 2008 0018 14BF     		ite	ne
 2009 001a 0123     		movne	r3, #1
 2010 001c 0023     		moveq	r3, #0
 2011 001e DBB2     		uxtb	r3, r3
 2012 0020 FB60     		str	r3, [r7, #12]
1086:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 2013              		.loc 1 1086 0
 2014 0022 7B68     		ldr	r3, [r7, #4]
 2015 0024 93F83930 		ldrb	r3, [r3, #57]
 2016 0028 DBB2     		uxtb	r3, r3
 2017 002a 212B     		cmp	r3, #33
 2018 002c 16D1     		bne	.L89
 2019              		.loc 1 1086 0 is_stmt 0 discriminator 1
 2020 002e FB68     		ldr	r3, [r7, #12]
 2021 0030 002B     		cmp	r3, #0
ARM GAS  /tmp/ccnvFOuI.s 			page 55


 2022 0032 13D0     		beq	.L89
1087:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1088:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 2023              		.loc 1 1088 0 is_stmt 1
 2024 0034 7B68     		ldr	r3, [r7, #4]
 2025 0036 1B68     		ldr	r3, [r3]
 2026 0038 7A68     		ldr	r2, [r7, #4]
 2027 003a 1268     		ldr	r2, [r2]
 2028 003c 5269     		ldr	r2, [r2, #20]
 2029 003e 22F08002 		bic	r2, r2, #128
 2030 0042 5A61     		str	r2, [r3, #20]
1089:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1090:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Abort the UART DMA Tx channel */
1091:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(huart->hdmatx != NULL)
 2031              		.loc 1 1091 0
 2032 0044 7B68     		ldr	r3, [r7, #4]
 2033 0046 1B6B     		ldr	r3, [r3, #48]
 2034 0048 002B     		cmp	r3, #0
 2035 004a 04D0     		beq	.L90
1092:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1093:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmatx);
 2036              		.loc 1 1093 0
 2037 004c 7B68     		ldr	r3, [r7, #4]
 2038 004e 1B6B     		ldr	r3, [r3, #48]
 2039 0050 1846     		mov	r0, r3
 2040 0052 FFF7FEFF 		bl	HAL_DMA_Abort
 2041              	.L90:
1094:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1095:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     UART_EndTxTransfer(huart);
 2042              		.loc 1 1095 0
 2043 0056 7868     		ldr	r0, [r7, #4]
 2044 0058 FFF7FEFF 		bl	UART_EndTxTransfer
 2045              	.L89:
1096:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1097:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1098:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Stop UART DMA Rx request if ongoing */
1099:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 2046              		.loc 1 1099 0
 2047 005c 7B68     		ldr	r3, [r7, #4]
 2048 005e 1B68     		ldr	r3, [r3]
 2049 0060 5B69     		ldr	r3, [r3, #20]
 2050 0062 03F04003 		and	r3, r3, #64
 2051 0066 002B     		cmp	r3, #0
 2052 0068 14BF     		ite	ne
 2053 006a 0123     		movne	r3, #1
 2054 006c 0023     		moveq	r3, #0
 2055 006e DBB2     		uxtb	r3, r3
 2056 0070 FB60     		str	r3, [r7, #12]
1100:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 2057              		.loc 1 1100 0
 2058 0072 7B68     		ldr	r3, [r7, #4]
 2059 0074 93F83A30 		ldrb	r3, [r3, #58]
 2060 0078 DBB2     		uxtb	r3, r3
 2061 007a 222B     		cmp	r3, #34
 2062 007c 16D1     		bne	.L91
 2063              		.loc 1 1100 0 is_stmt 0 discriminator 1
 2064 007e FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccnvFOuI.s 			page 56


 2065 0080 002B     		cmp	r3, #0
 2066 0082 13D0     		beq	.L91
1101:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1102:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 2067              		.loc 1 1102 0 is_stmt 1
 2068 0084 7B68     		ldr	r3, [r7, #4]
 2069 0086 1B68     		ldr	r3, [r3]
 2070 0088 7A68     		ldr	r2, [r7, #4]
 2071 008a 1268     		ldr	r2, [r2]
 2072 008c 5269     		ldr	r2, [r2, #20]
 2073 008e 22F04002 		bic	r2, r2, #64
 2074 0092 5A61     		str	r2, [r3, #20]
1103:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1104:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Abort the UART DMA Rx channel */
1105:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(huart->hdmarx != NULL)
 2075              		.loc 1 1105 0
 2076 0094 7B68     		ldr	r3, [r7, #4]
 2077 0096 5B6B     		ldr	r3, [r3, #52]
 2078 0098 002B     		cmp	r3, #0
 2079 009a 04D0     		beq	.L92
1106:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1107:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmarx);
 2080              		.loc 1 1107 0
 2081 009c 7B68     		ldr	r3, [r7, #4]
 2082 009e 5B6B     		ldr	r3, [r3, #52]
 2083 00a0 1846     		mov	r0, r3
 2084 00a2 FFF7FEFF 		bl	HAL_DMA_Abort
 2085              	.L92:
1108:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1109:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     UART_EndRxTransfer(huart);
 2086              		.loc 1 1109 0
 2087 00a6 7868     		ldr	r0, [r7, #4]
 2088 00a8 FFF7FEFF 		bl	UART_EndRxTransfer
 2089              	.L91:
1110:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1111:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1112:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 2090              		.loc 1 1112 0
 2091 00ac 0023     		movs	r3, #0
1113:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 2092              		.loc 1 1113 0
 2093 00ae 1846     		mov	r0, r3
 2094 00b0 1037     		adds	r7, r7, #16
 2095              	.LCFI84:
 2096              		.cfi_def_cfa_offset 8
 2097 00b2 BD46     		mov	sp, r7
 2098              	.LCFI85:
 2099              		.cfi_def_cfa_register 13
 2100              		@ sp needed
 2101 00b4 80BD     		pop	{r7, pc}
 2102              		.cfi_endproc
 2103              	.LFE138:
 2105 00b6 00BF     		.section	.text.HAL_UART_Abort,"ax",%progbits
 2106              		.align	2
 2107              		.global	HAL_UART_Abort
 2108              		.thumb
 2109              		.thumb_func
ARM GAS  /tmp/ccnvFOuI.s 			page 57


 2111              	HAL_UART_Abort:
 2112              	.LFB139:
1114:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1115:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1116:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Abort ongoing transfers (blocking mode).
1117:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart UART handle.
1118:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1119:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         This procedure performs following operations :
1120:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Disable PPP Interrupts
1121:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1122:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1123:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Set handle State to READY
1124:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1125:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
1126:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** */
1127:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
1128:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 2113              		.loc 1 1128 0
 2114              		.cfi_startproc
 2115              		@ args = 0, pretend = 0, frame = 8
 2116              		@ frame_needed = 1, uses_anonymous_args = 0
 2117 0000 80B5     		push	{r7, lr}
 2118              	.LCFI86:
 2119              		.cfi_def_cfa_offset 8
 2120              		.cfi_offset 7, -8
 2121              		.cfi_offset 14, -4
 2122 0002 82B0     		sub	sp, sp, #8
 2123              	.LCFI87:
 2124              		.cfi_def_cfa_offset 16
 2125 0004 00AF     		add	r7, sp, #0
 2126              	.LCFI88:
 2127              		.cfi_def_cfa_register 7
 2128 0006 7860     		str	r0, [r7, #4]
1129:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1130:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_
 2129              		.loc 1 1130 0
 2130 0008 7B68     		ldr	r3, [r7, #4]
 2131 000a 1B68     		ldr	r3, [r3]
 2132 000c 7A68     		ldr	r2, [r7, #4]
 2133 000e 1268     		ldr	r2, [r2]
 2134 0010 D268     		ldr	r2, [r2, #12]
 2135 0012 22F4F072 		bic	r2, r2, #480
 2136 0016 DA60     		str	r2, [r3, #12]
1131:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2137              		.loc 1 1131 0
 2138 0018 7B68     		ldr	r3, [r7, #4]
 2139 001a 1B68     		ldr	r3, [r3]
 2140 001c 7A68     		ldr	r2, [r7, #4]
 2141 001e 1268     		ldr	r2, [r2]
 2142 0020 5269     		ldr	r2, [r2, #20]
 2143 0022 22F00102 		bic	r2, r2, #1
 2144 0026 5A61     		str	r2, [r3, #20]
1132:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1133:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1134:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 2145              		.loc 1 1134 0
 2146 0028 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccnvFOuI.s 			page 58


 2147 002a 1B68     		ldr	r3, [r3]
 2148 002c 5B69     		ldr	r3, [r3, #20]
 2149 002e 03F08003 		and	r3, r3, #128
 2150 0032 002B     		cmp	r3, #0
 2151 0034 14D0     		beq	.L95
1135:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1136:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 2152              		.loc 1 1136 0
 2153 0036 7B68     		ldr	r3, [r7, #4]
 2154 0038 1B68     		ldr	r3, [r3]
 2155 003a 7A68     		ldr	r2, [r7, #4]
 2156 003c 1268     		ldr	r2, [r2]
 2157 003e 5269     		ldr	r2, [r2, #20]
 2158 0040 22F08002 		bic	r2, r2, #128
 2159 0044 5A61     		str	r2, [r3, #20]
1137:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1138:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Abort the UART DMA Tx channel: use blocking DMA Abort API (no callback) */
1139:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(huart->hdmatx != NULL)
 2160              		.loc 1 1139 0
 2161 0046 7B68     		ldr	r3, [r7, #4]
 2162 0048 1B6B     		ldr	r3, [r3, #48]
 2163 004a 002B     		cmp	r3, #0
 2164 004c 08D0     		beq	.L95
1140:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1141:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null. 
1142:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1143:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
 2165              		.loc 1 1143 0
 2166 004e 7B68     		ldr	r3, [r7, #4]
 2167 0050 1B6B     		ldr	r3, [r3, #48]
 2168 0052 0022     		movs	r2, #0
 2169 0054 1A65     		str	r2, [r3, #80]
1144:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1145:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmatx);
 2170              		.loc 1 1145 0
 2171 0056 7B68     		ldr	r3, [r7, #4]
 2172 0058 1B6B     		ldr	r3, [r3, #48]
 2173 005a 1846     		mov	r0, r3
 2174 005c FFF7FEFF 		bl	HAL_DMA_Abort
 2175              	.L95:
1146:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1147:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1148:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1149:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1150:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 2176              		.loc 1 1150 0
 2177 0060 7B68     		ldr	r3, [r7, #4]
 2178 0062 1B68     		ldr	r3, [r3]
 2179 0064 5B69     		ldr	r3, [r3, #20]
 2180 0066 03F04003 		and	r3, r3, #64
 2181 006a 002B     		cmp	r3, #0
 2182 006c 14D0     		beq	.L96
1151:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1152:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 2183              		.loc 1 1152 0
 2184 006e 7B68     		ldr	r3, [r7, #4]
 2185 0070 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccnvFOuI.s 			page 59


 2186 0072 7A68     		ldr	r2, [r7, #4]
 2187 0074 1268     		ldr	r2, [r2]
 2188 0076 5269     		ldr	r2, [r2, #20]
 2189 0078 22F04002 		bic	r2, r2, #64
 2190 007c 5A61     		str	r2, [r3, #20]
1153:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1154:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Abort the UART DMA Rx channel: use blocking DMA Abort API (no callback) */
1155:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(huart->hdmarx != NULL)
 2191              		.loc 1 1155 0
 2192 007e 7B68     		ldr	r3, [r7, #4]
 2193 0080 5B6B     		ldr	r3, [r3, #52]
 2194 0082 002B     		cmp	r3, #0
 2195 0084 08D0     		beq	.L96
1156:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1157:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null. 
1158:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1159:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
 2196              		.loc 1 1159 0
 2197 0086 7B68     		ldr	r3, [r7, #4]
 2198 0088 5B6B     		ldr	r3, [r3, #52]
 2199 008a 0022     		movs	r2, #0
 2200 008c 1A65     		str	r2, [r3, #80]
1160:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1161:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmarx);
 2201              		.loc 1 1161 0
 2202 008e 7B68     		ldr	r3, [r7, #4]
 2203 0090 5B6B     		ldr	r3, [r3, #52]
 2204 0092 1846     		mov	r0, r3
 2205 0094 FFF7FEFF 		bl	HAL_DMA_Abort
 2206              	.L96:
1162:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1163:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1164:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1165:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Reset Tx and Rx transfer counters */
1166:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 2207              		.loc 1 1166 0
 2208 0098 7B68     		ldr	r3, [r7, #4]
 2209 009a 0022     		movs	r2, #0
 2210 009c DA84     		strh	r2, [r3, #38]	@ movhi
1167:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 2211              		.loc 1 1167 0
 2212 009e 7B68     		ldr	r3, [r7, #4]
 2213 00a0 0022     		movs	r2, #0
 2214 00a2 DA85     		strh	r2, [r3, #46]	@ movhi
1168:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1169:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Reset ErrorCode */
1170:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 2215              		.loc 1 1170 0
 2216 00a4 7B68     		ldr	r3, [r7, #4]
 2217 00a6 0022     		movs	r2, #0
 2218 00a8 DA63     		str	r2, [r3, #60]
1171:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1172:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Restore huart->RxState and huart->gState to Ready */
1173:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 2219              		.loc 1 1173 0
 2220 00aa 7B68     		ldr	r3, [r7, #4]
 2221 00ac 2022     		movs	r2, #32
ARM GAS  /tmp/ccnvFOuI.s 			page 60


 2222 00ae 83F83A20 		strb	r2, [r3, #58]
1174:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 2223              		.loc 1 1174 0
 2224 00b2 7B68     		ldr	r3, [r7, #4]
 2225 00b4 2022     		movs	r2, #32
 2226 00b6 83F83920 		strb	r2, [r3, #57]
1175:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1176:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 2227              		.loc 1 1176 0
 2228 00ba 0023     		movs	r3, #0
1177:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 2229              		.loc 1 1177 0
 2230 00bc 1846     		mov	r0, r3
 2231 00be 0837     		adds	r7, r7, #8
 2232              	.LCFI89:
 2233              		.cfi_def_cfa_offset 8
 2234 00c0 BD46     		mov	sp, r7
 2235              	.LCFI90:
 2236              		.cfi_def_cfa_register 13
 2237              		@ sp needed
 2238 00c2 80BD     		pop	{r7, pc}
 2239              		.cfi_endproc
 2240              	.LFE139:
 2242              		.section	.text.HAL_UART_AbortTransmit,"ax",%progbits
 2243              		.align	2
 2244              		.global	HAL_UART_AbortTransmit
 2245              		.thumb
 2246              		.thumb_func
 2248              	HAL_UART_AbortTransmit:
 2249              	.LFB140:
1178:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1179:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1180:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Abort ongoing Transmit transfer (blocking mode).
1181:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart UART handle.
1182:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1183:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         This procedure performs following operations :
1184:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Disable PPP Interrupts
1185:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1186:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1187:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Set handle State to READY
1188:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1189:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
1190:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** */
1191:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
1192:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 2250              		.loc 1 1192 0
 2251              		.cfi_startproc
 2252              		@ args = 0, pretend = 0, frame = 8
 2253              		@ frame_needed = 1, uses_anonymous_args = 0
 2254 0000 80B5     		push	{r7, lr}
 2255              	.LCFI91:
 2256              		.cfi_def_cfa_offset 8
 2257              		.cfi_offset 7, -8
 2258              		.cfi_offset 14, -4
 2259 0002 82B0     		sub	sp, sp, #8
 2260              	.LCFI92:
 2261              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccnvFOuI.s 			page 61


 2262 0004 00AF     		add	r7, sp, #0
 2263              	.LCFI93:
 2264              		.cfi_def_cfa_register 7
 2265 0006 7860     		str	r0, [r7, #4]
1193:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
1194:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 2266              		.loc 1 1194 0
 2267 0008 7B68     		ldr	r3, [r7, #4]
 2268 000a 1B68     		ldr	r3, [r3]
 2269 000c 7A68     		ldr	r2, [r7, #4]
 2270 000e 1268     		ldr	r2, [r2]
 2271 0010 D268     		ldr	r2, [r2, #12]
 2272 0012 22F0C002 		bic	r2, r2, #192
 2273 0016 DA60     		str	r2, [r3, #12]
1195:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1196:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1197:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 2274              		.loc 1 1197 0
 2275 0018 7B68     		ldr	r3, [r7, #4]
 2276 001a 1B68     		ldr	r3, [r3]
 2277 001c 5B69     		ldr	r3, [r3, #20]
 2278 001e 03F08003 		and	r3, r3, #128
 2279 0022 002B     		cmp	r3, #0
 2280 0024 14D0     		beq	.L99
1198:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1199:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 2281              		.loc 1 1199 0
 2282 0026 7B68     		ldr	r3, [r7, #4]
 2283 0028 1B68     		ldr	r3, [r3]
 2284 002a 7A68     		ldr	r2, [r7, #4]
 2285 002c 1268     		ldr	r2, [r2]
 2286 002e 5269     		ldr	r2, [r2, #20]
 2287 0030 22F08002 		bic	r2, r2, #128
 2288 0034 5A61     		str	r2, [r3, #20]
1200:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1201:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
1202:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(huart->hdmatx != NULL)
 2289              		.loc 1 1202 0
 2290 0036 7B68     		ldr	r3, [r7, #4]
 2291 0038 1B6B     		ldr	r3, [r3, #48]
 2292 003a 002B     		cmp	r3, #0
 2293 003c 08D0     		beq	.L99
1203:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1204:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null. 
1205:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1206:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
 2294              		.loc 1 1206 0
 2295 003e 7B68     		ldr	r3, [r7, #4]
 2296 0040 1B6B     		ldr	r3, [r3, #48]
 2297 0042 0022     		movs	r2, #0
 2298 0044 1A65     		str	r2, [r3, #80]
1207:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1208:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmatx);
 2299              		.loc 1 1208 0
 2300 0046 7B68     		ldr	r3, [r7, #4]
 2301 0048 1B6B     		ldr	r3, [r3, #48]
 2302 004a 1846     		mov	r0, r3
ARM GAS  /tmp/ccnvFOuI.s 			page 62


 2303 004c FFF7FEFF 		bl	HAL_DMA_Abort
 2304              	.L99:
1209:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1210:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1211:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1212:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Reset Tx transfer counter */
1213:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 2305              		.loc 1 1213 0
 2306 0050 7B68     		ldr	r3, [r7, #4]
 2307 0052 0022     		movs	r2, #0
 2308 0054 DA84     		strh	r2, [r3, #38]	@ movhi
1214:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1215:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Restore huart->gState to Ready */
1216:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 2309              		.loc 1 1216 0
 2310 0056 7B68     		ldr	r3, [r7, #4]
 2311 0058 2022     		movs	r2, #32
 2312 005a 83F83920 		strb	r2, [r3, #57]
1217:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1218:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 2313              		.loc 1 1218 0
 2314 005e 0023     		movs	r3, #0
1219:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 2315              		.loc 1 1219 0
 2316 0060 1846     		mov	r0, r3
 2317 0062 0837     		adds	r7, r7, #8
 2318              	.LCFI94:
 2319              		.cfi_def_cfa_offset 8
 2320 0064 BD46     		mov	sp, r7
 2321              	.LCFI95:
 2322              		.cfi_def_cfa_register 13
 2323              		@ sp needed
 2324 0066 80BD     		pop	{r7, pc}
 2325              		.cfi_endproc
 2326              	.LFE140:
 2328              		.section	.text.HAL_UART_AbortReceive,"ax",%progbits
 2329              		.align	2
 2330              		.global	HAL_UART_AbortReceive
 2331              		.thumb
 2332              		.thumb_func
 2334              	HAL_UART_AbortReceive:
 2335              	.LFB141:
1220:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1221:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1222:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Abort ongoing Receive transfer (blocking mode).
1223:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart UART handle.
1224:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1225:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         This procedure performs following operations :
1226:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Disable PPP Interrupts
1227:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1228:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1229:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Set handle State to READY
1230:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1231:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
1232:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** */
1233:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
1234:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
ARM GAS  /tmp/ccnvFOuI.s 			page 63


 2336              		.loc 1 1234 0
 2337              		.cfi_startproc
 2338              		@ args = 0, pretend = 0, frame = 8
 2339              		@ frame_needed = 1, uses_anonymous_args = 0
 2340 0000 80B5     		push	{r7, lr}
 2341              	.LCFI96:
 2342              		.cfi_def_cfa_offset 8
 2343              		.cfi_offset 7, -8
 2344              		.cfi_offset 14, -4
 2345 0002 82B0     		sub	sp, sp, #8
 2346              	.LCFI97:
 2347              		.cfi_def_cfa_offset 16
 2348 0004 00AF     		add	r7, sp, #0
 2349              	.LCFI98:
 2350              		.cfi_def_cfa_register 7
 2351 0006 7860     		str	r0, [r7, #4]
1235:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1236:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 2352              		.loc 1 1236 0
 2353 0008 7B68     		ldr	r3, [r7, #4]
 2354 000a 1B68     		ldr	r3, [r3]
 2355 000c 7A68     		ldr	r2, [r7, #4]
 2356 000e 1268     		ldr	r2, [r2]
 2357 0010 D268     		ldr	r2, [r2, #12]
 2358 0012 22F49072 		bic	r2, r2, #288
 2359 0016 DA60     		str	r2, [r3, #12]
1237:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2360              		.loc 1 1237 0
 2361 0018 7B68     		ldr	r3, [r7, #4]
 2362 001a 1B68     		ldr	r3, [r3]
 2363 001c 7A68     		ldr	r2, [r7, #4]
 2364 001e 1268     		ldr	r2, [r2]
 2365 0020 5269     		ldr	r2, [r2, #20]
 2366 0022 22F00102 		bic	r2, r2, #1
 2367 0026 5A61     		str	r2, [r3, #20]
1238:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1239:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1240:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 2368              		.loc 1 1240 0
 2369 0028 7B68     		ldr	r3, [r7, #4]
 2370 002a 1B68     		ldr	r3, [r3]
 2371 002c 5B69     		ldr	r3, [r3, #20]
 2372 002e 03F04003 		and	r3, r3, #64
 2373 0032 002B     		cmp	r3, #0
 2374 0034 14D0     		beq	.L102
1241:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1242:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 2375              		.loc 1 1242 0
 2376 0036 7B68     		ldr	r3, [r7, #4]
 2377 0038 1B68     		ldr	r3, [r3]
 2378 003a 7A68     		ldr	r2, [r7, #4]
 2379 003c 1268     		ldr	r2, [r2]
 2380 003e 5269     		ldr	r2, [r2, #20]
 2381 0040 22F04002 		bic	r2, r2, #64
 2382 0044 5A61     		str	r2, [r3, #20]
1243:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1244:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
ARM GAS  /tmp/ccnvFOuI.s 			page 64


1245:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(huart->hdmarx != NULL)
 2383              		.loc 1 1245 0
 2384 0046 7B68     		ldr	r3, [r7, #4]
 2385 0048 5B6B     		ldr	r3, [r3, #52]
 2386 004a 002B     		cmp	r3, #0
 2387 004c 08D0     		beq	.L102
1246:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1247:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null. 
1248:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1249:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
 2388              		.loc 1 1249 0
 2389 004e 7B68     		ldr	r3, [r7, #4]
 2390 0050 5B6B     		ldr	r3, [r3, #52]
 2391 0052 0022     		movs	r2, #0
 2392 0054 1A65     		str	r2, [r3, #80]
1250:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1251:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmarx);
 2393              		.loc 1 1251 0
 2394 0056 7B68     		ldr	r3, [r7, #4]
 2395 0058 5B6B     		ldr	r3, [r3, #52]
 2396 005a 1846     		mov	r0, r3
 2397 005c FFF7FEFF 		bl	HAL_DMA_Abort
 2398              	.L102:
1252:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1253:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1254:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1255:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Reset Rx transfer counter */
1256:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 2399              		.loc 1 1256 0
 2400 0060 7B68     		ldr	r3, [r7, #4]
 2401 0062 0022     		movs	r2, #0
 2402 0064 DA85     		strh	r2, [r3, #46]	@ movhi
1257:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1258:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Restore huart->RxState to Ready */
1259:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 2403              		.loc 1 1259 0
 2404 0066 7B68     		ldr	r3, [r7, #4]
 2405 0068 2022     		movs	r2, #32
 2406 006a 83F83A20 		strb	r2, [r3, #58]
1260:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1261:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 2407              		.loc 1 1261 0
 2408 006e 0023     		movs	r3, #0
1262:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 2409              		.loc 1 1262 0
 2410 0070 1846     		mov	r0, r3
 2411 0072 0837     		adds	r7, r7, #8
 2412              	.LCFI99:
 2413              		.cfi_def_cfa_offset 8
 2414 0074 BD46     		mov	sp, r7
 2415              	.LCFI100:
 2416              		.cfi_def_cfa_register 13
 2417              		@ sp needed
 2418 0076 80BD     		pop	{r7, pc}
 2419              		.cfi_endproc
 2420              	.LFE141:
 2422              		.section	.text.HAL_UART_Abort_IT,"ax",%progbits
ARM GAS  /tmp/ccnvFOuI.s 			page 65


 2423              		.align	2
 2424              		.global	HAL_UART_Abort_IT
 2425              		.thumb
 2426              		.thumb_func
 2428              	HAL_UART_Abort_IT:
 2429              	.LFB142:
1263:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1264:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1265:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Abort ongoing transfers (Interrupt mode).
1266:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart UART handle.
1267:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1268:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         This procedure performs following operations :
1269:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Disable PPP Interrupts
1270:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1271:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1272:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Set handle State to READY
1273:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
1274:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1275:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1276:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
1277:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** */
1278:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
1279:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 2430              		.loc 1 1279 0
 2431              		.cfi_startproc
 2432              		@ args = 0, pretend = 0, frame = 16
 2433              		@ frame_needed = 1, uses_anonymous_args = 0
 2434 0000 80B5     		push	{r7, lr}
 2435              	.LCFI101:
 2436              		.cfi_def_cfa_offset 8
 2437              		.cfi_offset 7, -8
 2438              		.cfi_offset 14, -4
 2439 0002 84B0     		sub	sp, sp, #16
 2440              	.LCFI102:
 2441              		.cfi_def_cfa_offset 24
 2442 0004 00AF     		add	r7, sp, #0
 2443              	.LCFI103:
 2444              		.cfi_def_cfa_register 7
 2445 0006 7860     		str	r0, [r7, #4]
1280:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint32_t AbortCplt = 0x01U;
 2446              		.loc 1 1280 0
 2447 0008 0123     		movs	r3, #1
 2448 000a FB60     		str	r3, [r7, #12]
1281:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1282:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1283:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_
 2449              		.loc 1 1283 0
 2450 000c 7B68     		ldr	r3, [r7, #4]
 2451 000e 1B68     		ldr	r3, [r3]
 2452 0010 7A68     		ldr	r2, [r7, #4]
 2453 0012 1268     		ldr	r2, [r2]
 2454 0014 D268     		ldr	r2, [r2, #12]
 2455 0016 22F4F072 		bic	r2, r2, #480
 2456 001a DA60     		str	r2, [r3, #12]
1284:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2457              		.loc 1 1284 0
 2458 001c 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccnvFOuI.s 			page 66


 2459 001e 1B68     		ldr	r3, [r3]
 2460 0020 7A68     		ldr	r2, [r7, #4]
 2461 0022 1268     		ldr	r2, [r2]
 2462 0024 5269     		ldr	r2, [r2, #20]
 2463 0026 22F00102 		bic	r2, r2, #1
 2464 002a 5A61     		str	r2, [r3, #20]
1285:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1286:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks sh
1287:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      before any call to DMA Abort functions */
1288:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* DMA Tx Handle is valid */
1289:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart->hdmatx != NULL)
 2465              		.loc 1 1289 0
 2466 002c 7B68     		ldr	r3, [r7, #4]
 2467 002e 1B6B     		ldr	r3, [r3, #48]
 2468 0030 002B     		cmp	r3, #0
 2469 0032 0FD0     		beq	.L105
1290:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1291:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
1292:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        Otherwise, set it to NULL */
1293:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 2470              		.loc 1 1293 0
 2471 0034 7B68     		ldr	r3, [r7, #4]
 2472 0036 1B68     		ldr	r3, [r3]
 2473 0038 5B69     		ldr	r3, [r3, #20]
 2474 003a 03F08003 		and	r3, r3, #128
 2475 003e 002B     		cmp	r3, #0
 2476 0040 04D0     		beq	.L106
1294:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1295:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 2477              		.loc 1 1295 0
 2478 0042 7B68     		ldr	r3, [r7, #4]
 2479 0044 1B6B     		ldr	r3, [r3, #48]
 2480 0046 3E4A     		ldr	r2, .L115
 2481 0048 1A65     		str	r2, [r3, #80]
 2482 004a 03E0     		b	.L105
 2483              	.L106:
1296:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1297:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     else
1298:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1299:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
 2484              		.loc 1 1299 0
 2485 004c 7B68     		ldr	r3, [r7, #4]
 2486 004e 1B6B     		ldr	r3, [r3, #48]
 2487 0050 0022     		movs	r2, #0
 2488 0052 1A65     		str	r2, [r3, #80]
 2489              	.L105:
1300:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1301:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1302:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* DMA Rx Handle is valid */
1303:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart->hdmarx != NULL)
 2490              		.loc 1 1303 0
 2491 0054 7B68     		ldr	r3, [r7, #4]
 2492 0056 5B6B     		ldr	r3, [r3, #52]
 2493 0058 002B     		cmp	r3, #0
 2494 005a 0FD0     		beq	.L107
1304:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1305:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
ARM GAS  /tmp/ccnvFOuI.s 			page 67


1306:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        Otherwise, set it to NULL */
1307:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 2495              		.loc 1 1307 0
 2496 005c 7B68     		ldr	r3, [r7, #4]
 2497 005e 1B68     		ldr	r3, [r3]
 2498 0060 5B69     		ldr	r3, [r3, #20]
 2499 0062 03F04003 		and	r3, r3, #64
 2500 0066 002B     		cmp	r3, #0
 2501 0068 04D0     		beq	.L108
1308:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1309:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 2502              		.loc 1 1309 0
 2503 006a 7B68     		ldr	r3, [r7, #4]
 2504 006c 5B6B     		ldr	r3, [r3, #52]
 2505 006e 354A     		ldr	r2, .L115+4
 2506 0070 1A65     		str	r2, [r3, #80]
 2507 0072 03E0     		b	.L107
 2508              	.L108:
1310:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1311:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     else
1312:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1313:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
 2509              		.loc 1 1313 0
 2510 0074 7B68     		ldr	r3, [r7, #4]
 2511 0076 5B6B     		ldr	r3, [r3, #52]
 2512 0078 0022     		movs	r2, #0
 2513 007a 1A65     		str	r2, [r3, #80]
 2514              	.L107:
1314:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1315:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1316:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1317:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1318:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 2515              		.loc 1 1318 0
 2516 007c 7B68     		ldr	r3, [r7, #4]
 2517 007e 1B68     		ldr	r3, [r3]
 2518 0080 5B69     		ldr	r3, [r3, #20]
 2519 0082 03F08003 		and	r3, r3, #128
 2520 0086 002B     		cmp	r3, #0
 2521 0088 1AD0     		beq	.L109
1319:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1320:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Disable DMA Tx at UART level */
1321:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 2522              		.loc 1 1321 0
 2523 008a 7B68     		ldr	r3, [r7, #4]
 2524 008c 1B68     		ldr	r3, [r3]
 2525 008e 7A68     		ldr	r2, [r7, #4]
 2526 0090 1268     		ldr	r2, [r2]
 2527 0092 5269     		ldr	r2, [r2, #20]
 2528 0094 22F08002 		bic	r2, r2, #128
 2529 0098 5A61     		str	r2, [r3, #20]
1322:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1323:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
1324:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(huart->hdmatx != NULL)
 2530              		.loc 1 1324 0
 2531 009a 7B68     		ldr	r3, [r7, #4]
 2532 009c 1B6B     		ldr	r3, [r3, #48]
ARM GAS  /tmp/ccnvFOuI.s 			page 68


 2533 009e 002B     		cmp	r3, #0
 2534 00a0 0ED0     		beq	.L109
1325:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1326:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* UART Tx DMA Abort callback has already been initialised : 
1327:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
1328:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1329:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Abort DMA TX */
1330:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if(HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 2535              		.loc 1 1330 0
 2536 00a2 7B68     		ldr	r3, [r7, #4]
 2537 00a4 1B6B     		ldr	r3, [r3, #48]
 2538 00a6 1846     		mov	r0, r3
 2539 00a8 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2540 00ac 0346     		mov	r3, r0
 2541 00ae 002B     		cmp	r3, #0
 2542 00b0 04D0     		beq	.L110
1331:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
1332:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->hdmatx->XferAbortCallback = NULL;
 2543              		.loc 1 1332 0
 2544 00b2 7B68     		ldr	r3, [r7, #4]
 2545 00b4 1B6B     		ldr	r3, [r3, #48]
 2546 00b6 0022     		movs	r2, #0
 2547 00b8 1A65     		str	r2, [r3, #80]
 2548 00ba 01E0     		b	.L109
 2549              	.L110:
1333:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
1334:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       else
1335:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
1336:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         AbortCplt = 0x00U;
 2550              		.loc 1 1336 0
 2551 00bc 0023     		movs	r3, #0
 2552 00be FB60     		str	r3, [r7, #12]
 2553              	.L109:
1337:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
1338:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1339:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1340:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1341:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1342:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 2554              		.loc 1 1342 0
 2555 00c0 7B68     		ldr	r3, [r7, #4]
 2556 00c2 1B68     		ldr	r3, [r3]
 2557 00c4 5B69     		ldr	r3, [r3, #20]
 2558 00c6 03F04003 		and	r3, r3, #64
 2559 00ca 002B     		cmp	r3, #0
 2560 00cc 1CD0     		beq	.L111
1343:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1344:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 2561              		.loc 1 1344 0
 2562 00ce 7B68     		ldr	r3, [r7, #4]
 2563 00d0 1B68     		ldr	r3, [r3]
 2564 00d2 7A68     		ldr	r2, [r7, #4]
 2565 00d4 1268     		ldr	r2, [r2]
 2566 00d6 5269     		ldr	r2, [r2, #20]
 2567 00d8 22F04002 		bic	r2, r2, #64
 2568 00dc 5A61     		str	r2, [r3, #20]
1345:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
ARM GAS  /tmp/ccnvFOuI.s 			page 69


1346:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
1347:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(huart->hdmarx != NULL)
 2569              		.loc 1 1347 0
 2570 00de 7B68     		ldr	r3, [r7, #4]
 2571 00e0 5B6B     		ldr	r3, [r3, #52]
 2572 00e2 002B     		cmp	r3, #0
 2573 00e4 10D0     		beq	.L111
1348:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1349:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* UART Rx DMA Abort callback has already been initialised : 
1350:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
1351:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1352:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Abort DMA RX */
1353:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 2574              		.loc 1 1353 0
 2575 00e6 7B68     		ldr	r3, [r7, #4]
 2576 00e8 5B6B     		ldr	r3, [r3, #52]
 2577 00ea 1846     		mov	r0, r3
 2578 00ec FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2579 00f0 0346     		mov	r3, r0
 2580 00f2 002B     		cmp	r3, #0
 2581 00f4 06D0     		beq	.L112
1354:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
1355:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->hdmarx->XferAbortCallback = NULL;
 2582              		.loc 1 1355 0
 2583 00f6 7B68     		ldr	r3, [r7, #4]
 2584 00f8 5B6B     		ldr	r3, [r3, #52]
 2585 00fa 0022     		movs	r2, #0
 2586 00fc 1A65     		str	r2, [r3, #80]
1356:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         AbortCplt = 0x01U;
 2587              		.loc 1 1356 0
 2588 00fe 0123     		movs	r3, #1
 2589 0100 FB60     		str	r3, [r7, #12]
 2590 0102 01E0     		b	.L111
 2591              	.L112:
1357:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
1358:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       else
1359:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
1360:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         AbortCplt = 0x00U;
 2592              		.loc 1 1360 0
 2593 0104 0023     		movs	r3, #0
 2594 0106 FB60     		str	r3, [r7, #12]
 2595              	.L111:
1361:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
1362:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1363:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1364:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1365:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* if no DMA abort complete callback execution is required => call user Abort Complete callback *
1366:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(AbortCplt == 0x01U)
 2596              		.loc 1 1366 0
 2597 0108 FB68     		ldr	r3, [r7, #12]
 2598 010a 012B     		cmp	r3, #1
 2599 010c 13D1     		bne	.L113
1367:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1368:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Reset Tx and Rx transfer counters */
1369:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->TxXferCount = 0x00U; 
 2600              		.loc 1 1369 0
 2601 010e 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccnvFOuI.s 			page 70


 2602 0110 0022     		movs	r2, #0
 2603 0112 DA84     		strh	r2, [r3, #38]	@ movhi
1370:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxXferCount = 0x00U;
 2604              		.loc 1 1370 0
 2605 0114 7B68     		ldr	r3, [r7, #4]
 2606 0116 0022     		movs	r2, #0
 2607 0118 DA85     		strh	r2, [r3, #46]	@ movhi
1371:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1372:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Reset ErrorCode */
1373:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 2608              		.loc 1 1373 0
 2609 011a 7B68     		ldr	r3, [r7, #4]
 2610 011c 0022     		movs	r2, #0
 2611 011e DA63     		str	r2, [r3, #60]
1374:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1375:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Restore huart->gState and huart->RxState to Ready */
1376:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->gState  = HAL_UART_STATE_READY;
 2612              		.loc 1 1376 0
 2613 0120 7B68     		ldr	r3, [r7, #4]
 2614 0122 2022     		movs	r2, #32
 2615 0124 83F83920 		strb	r2, [r3, #57]
1377:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 2616              		.loc 1 1377 0
 2617 0128 7B68     		ldr	r3, [r7, #4]
 2618 012a 2022     		movs	r2, #32
 2619 012c 83F83A20 		strb	r2, [r3, #58]
1378:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1379:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1380:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     HAL_UART_AbortCpltCallback(huart);
 2620              		.loc 1 1380 0
 2621 0130 7868     		ldr	r0, [r7, #4]
 2622 0132 FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 2623              	.L113:
1381:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1382:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1383:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 2624              		.loc 1 1383 0
 2625 0136 0023     		movs	r3, #0
1384:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 2626              		.loc 1 1384 0
 2627 0138 1846     		mov	r0, r3
 2628 013a 1037     		adds	r7, r7, #16
 2629              	.LCFI104:
 2630              		.cfi_def_cfa_offset 8
 2631 013c BD46     		mov	sp, r7
 2632              	.LCFI105:
 2633              		.cfi_def_cfa_register 13
 2634              		@ sp needed
 2635 013e 80BD     		pop	{r7, pc}
 2636              	.L116:
 2637              		.align	2
 2638              	.L115:
 2639 0140 00000000 		.word	UART_DMATxAbortCallback
 2640 0144 00000000 		.word	UART_DMARxAbortCallback
 2641              		.cfi_endproc
 2642              	.LFE142:
 2644              		.section	.text.HAL_UART_AbortTransmit_IT,"ax",%progbits
ARM GAS  /tmp/ccnvFOuI.s 			page 71


 2645              		.align	2
 2646              		.global	HAL_UART_AbortTransmit_IT
 2647              		.thumb
 2648              		.thumb_func
 2650              	HAL_UART_AbortTransmit_IT:
 2651              	.LFB143:
1385:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1386:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1387:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Abort ongoing Transmit transfer (Interrupt mode).
1388:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart UART handle.
1389:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1390:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         This procedure performs following operations :
1391:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Disable PPP Interrupts
1392:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1393:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1394:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Set handle State to READY
1395:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
1396:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1397:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1398:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
1399:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** */
1400:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
1401:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 2652              		.loc 1 1401 0
 2653              		.cfi_startproc
 2654              		@ args = 0, pretend = 0, frame = 8
 2655              		@ frame_needed = 1, uses_anonymous_args = 0
 2656 0000 80B5     		push	{r7, lr}
 2657              	.LCFI106:
 2658              		.cfi_def_cfa_offset 8
 2659              		.cfi_offset 7, -8
 2660              		.cfi_offset 14, -4
 2661 0002 82B0     		sub	sp, sp, #8
 2662              	.LCFI107:
 2663              		.cfi_def_cfa_offset 16
 2664 0004 00AF     		add	r7, sp, #0
 2665              	.LCFI108:
 2666              		.cfi_def_cfa_register 7
 2667 0006 7860     		str	r0, [r7, #4]
1402:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
1403:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 2668              		.loc 1 1403 0
 2669 0008 7B68     		ldr	r3, [r7, #4]
 2670 000a 1B68     		ldr	r3, [r3]
 2671 000c 7A68     		ldr	r2, [r7, #4]
 2672 000e 1268     		ldr	r2, [r2]
 2673 0010 D268     		ldr	r2, [r2, #12]
 2674 0012 22F0C002 		bic	r2, r2, #192
 2675 0016 DA60     		str	r2, [r3, #12]
1404:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1405:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1406:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 2676              		.loc 1 1406 0
 2677 0018 7B68     		ldr	r3, [r7, #4]
 2678 001a 1B68     		ldr	r3, [r3]
 2679 001c 5B69     		ldr	r3, [r3, #20]
 2680 001e 03F08003 		and	r3, r3, #128
ARM GAS  /tmp/ccnvFOuI.s 			page 72


 2681 0022 002B     		cmp	r3, #0
 2682 0024 2AD0     		beq	.L118
1407:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1408:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 2683              		.loc 1 1408 0
 2684 0026 7B68     		ldr	r3, [r7, #4]
 2685 0028 1B68     		ldr	r3, [r3]
 2686 002a 7A68     		ldr	r2, [r7, #4]
 2687 002c 1268     		ldr	r2, [r2]
 2688 002e 5269     		ldr	r2, [r2, #20]
 2689 0030 22F08002 		bic	r2, r2, #128
 2690 0034 5A61     		str	r2, [r3, #20]
1409:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1410:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
1411:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(huart->hdmatx != NULL)
 2691              		.loc 1 1411 0
 2692 0036 7B68     		ldr	r3, [r7, #4]
 2693 0038 1B6B     		ldr	r3, [r3, #48]
 2694 003a 002B     		cmp	r3, #0
 2695 003c 13D0     		beq	.L119
1412:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1413:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Set the UART DMA Abort callback : 
1414:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
1415:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 2696              		.loc 1 1415 0
 2697 003e 7B68     		ldr	r3, [r7, #4]
 2698 0040 1B6B     		ldr	r3, [r3, #48]
 2699 0042 164A     		ldr	r2, .L124
 2700 0044 1A65     		str	r2, [r3, #80]
1416:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1417:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Abort DMA TX */
1418:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if(HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 2701              		.loc 1 1418 0
 2702 0046 7B68     		ldr	r3, [r7, #4]
 2703 0048 1B6B     		ldr	r3, [r3, #48]
 2704 004a 1846     		mov	r0, r3
 2705 004c FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2706 0050 0346     		mov	r3, r0
 2707 0052 002B     		cmp	r3, #0
 2708 0054 1CD0     		beq	.L122
1419:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
1420:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
1421:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->hdmatx->XferAbortCallback(huart->hdmatx);
 2709              		.loc 1 1421 0
 2710 0056 7B68     		ldr	r3, [r7, #4]
 2711 0058 1B6B     		ldr	r3, [r3, #48]
 2712 005a 1B6D     		ldr	r3, [r3, #80]
 2713 005c 7A68     		ldr	r2, [r7, #4]
 2714 005e 126B     		ldr	r2, [r2, #48]
 2715 0060 1046     		mov	r0, r2
 2716 0062 9847     		blx	r3
 2717 0064 14E0     		b	.L122
 2718              	.L119:
1422:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
1423:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1424:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     else
1425:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {      
ARM GAS  /tmp/ccnvFOuI.s 			page 73


1426:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Reset Tx transfer counter */
1427:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->TxXferCount = 0x00U;
 2719              		.loc 1 1427 0
 2720 0066 7B68     		ldr	r3, [r7, #4]
 2721 0068 0022     		movs	r2, #0
 2722 006a DA84     		strh	r2, [r3, #38]	@ movhi
1428:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1429:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Restore huart->gState to Ready */
1430:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->gState = HAL_UART_STATE_READY;
 2723              		.loc 1 1430 0
 2724 006c 7B68     		ldr	r3, [r7, #4]
 2725 006e 2022     		movs	r2, #32
 2726 0070 83F83920 		strb	r2, [r3, #57]
1431:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1432:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
1433:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       HAL_UART_AbortTransmitCpltCallback(huart);
 2727              		.loc 1 1433 0
 2728 0074 7868     		ldr	r0, [r7, #4]
 2729 0076 FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
 2730 007a 09E0     		b	.L122
 2731              	.L118:
1434:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1435:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1436:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
1437:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1438:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Reset Tx transfer counter */
1439:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->TxXferCount = 0x00U;
 2732              		.loc 1 1439 0
 2733 007c 7B68     		ldr	r3, [r7, #4]
 2734 007e 0022     		movs	r2, #0
 2735 0080 DA84     		strh	r2, [r3, #38]	@ movhi
1440:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1441:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Restore huart->gState to Ready */
1442:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
 2736              		.loc 1 1442 0
 2737 0082 7B68     		ldr	r3, [r7, #4]
 2738 0084 2022     		movs	r2, #32
 2739 0086 83F83920 		strb	r2, [r3, #57]
1443:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1444:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1445:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     HAL_UART_AbortTransmitCpltCallback(huart);
 2740              		.loc 1 1445 0
 2741 008a 7868     		ldr	r0, [r7, #4]
 2742 008c FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
 2743              	.L122:
1446:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1447:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1448:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 2744              		.loc 1 1448 0
 2745 0090 0023     		movs	r3, #0
1449:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 2746              		.loc 1 1449 0
 2747 0092 1846     		mov	r0, r3
 2748 0094 0837     		adds	r7, r7, #8
 2749              	.LCFI109:
 2750              		.cfi_def_cfa_offset 8
 2751 0096 BD46     		mov	sp, r7
ARM GAS  /tmp/ccnvFOuI.s 			page 74


 2752              	.LCFI110:
 2753              		.cfi_def_cfa_register 13
 2754              		@ sp needed
 2755 0098 80BD     		pop	{r7, pc}
 2756              	.L125:
 2757 009a 00BF     		.align	2
 2758              	.L124:
 2759 009c 00000000 		.word	UART_DMATxOnlyAbortCallback
 2760              		.cfi_endproc
 2761              	.LFE143:
 2763              		.section	.text.HAL_UART_AbortReceive_IT,"ax",%progbits
 2764              		.align	2
 2765              		.global	HAL_UART_AbortReceive_IT
 2766              		.thumb
 2767              		.thumb_func
 2769              	HAL_UART_AbortReceive_IT:
 2770              	.LFB144:
1450:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1451:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1452:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Abort ongoing Receive transfer (Interrupt mode).
1453:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart UART handle.
1454:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1455:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         This procedure performs following operations :
1456:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Disable PPP Interrupts
1457:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1458:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1459:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Set handle State to READY
1460:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
1461:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1462:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1463:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
1464:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** */
1465:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
1466:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 2771              		.loc 1 1466 0
 2772              		.cfi_startproc
 2773              		@ args = 0, pretend = 0, frame = 8
 2774              		@ frame_needed = 1, uses_anonymous_args = 0
 2775 0000 80B5     		push	{r7, lr}
 2776              	.LCFI111:
 2777              		.cfi_def_cfa_offset 8
 2778              		.cfi_offset 7, -8
 2779              		.cfi_offset 14, -4
 2780 0002 82B0     		sub	sp, sp, #8
 2781              	.LCFI112:
 2782              		.cfi_def_cfa_offset 16
 2783 0004 00AF     		add	r7, sp, #0
 2784              	.LCFI113:
 2785              		.cfi_def_cfa_register 7
 2786 0006 7860     		str	r0, [r7, #4]
1467:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1468:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 2787              		.loc 1 1468 0
 2788 0008 7B68     		ldr	r3, [r7, #4]
 2789 000a 1B68     		ldr	r3, [r3]
 2790 000c 7A68     		ldr	r2, [r7, #4]
 2791 000e 1268     		ldr	r2, [r2]
ARM GAS  /tmp/ccnvFOuI.s 			page 75


 2792 0010 D268     		ldr	r2, [r2, #12]
 2793 0012 22F49072 		bic	r2, r2, #288
 2794 0016 DA60     		str	r2, [r3, #12]
1469:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2795              		.loc 1 1469 0
 2796 0018 7B68     		ldr	r3, [r7, #4]
 2797 001a 1B68     		ldr	r3, [r3]
 2798 001c 7A68     		ldr	r2, [r7, #4]
 2799 001e 1268     		ldr	r2, [r2]
 2800 0020 5269     		ldr	r2, [r2, #20]
 2801 0022 22F00102 		bic	r2, r2, #1
 2802 0026 5A61     		str	r2, [r3, #20]
1470:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1471:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1472:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 2803              		.loc 1 1472 0
 2804 0028 7B68     		ldr	r3, [r7, #4]
 2805 002a 1B68     		ldr	r3, [r3]
 2806 002c 5B69     		ldr	r3, [r3, #20]
 2807 002e 03F04003 		and	r3, r3, #64
 2808 0032 002B     		cmp	r3, #0
 2809 0034 2AD0     		beq	.L127
1473:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1474:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 2810              		.loc 1 1474 0
 2811 0036 7B68     		ldr	r3, [r7, #4]
 2812 0038 1B68     		ldr	r3, [r3]
 2813 003a 7A68     		ldr	r2, [r7, #4]
 2814 003c 1268     		ldr	r2, [r2]
 2815 003e 5269     		ldr	r2, [r2, #20]
 2816 0040 22F04002 		bic	r2, r2, #64
 2817 0044 5A61     		str	r2, [r3, #20]
1475:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1476:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
1477:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(huart->hdmarx != NULL)
 2818              		.loc 1 1477 0
 2819 0046 7B68     		ldr	r3, [r7, #4]
 2820 0048 5B6B     		ldr	r3, [r3, #52]
 2821 004a 002B     		cmp	r3, #0
 2822 004c 13D0     		beq	.L128
1478:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1479:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Set the UART DMA Abort callback : 
1480:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
1481:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 2823              		.loc 1 1481 0
 2824 004e 7B68     		ldr	r3, [r7, #4]
 2825 0050 5B6B     		ldr	r3, [r3, #52]
 2826 0052 164A     		ldr	r2, .L133
 2827 0054 1A65     		str	r2, [r3, #80]
1482:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1483:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Abort DMA RX */
1484:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 2828              		.loc 1 1484 0
 2829 0056 7B68     		ldr	r3, [r7, #4]
 2830 0058 5B6B     		ldr	r3, [r3, #52]
 2831 005a 1846     		mov	r0, r3
 2832 005c FFF7FEFF 		bl	HAL_DMA_Abort_IT
ARM GAS  /tmp/ccnvFOuI.s 			page 76


 2833 0060 0346     		mov	r3, r0
 2834 0062 002B     		cmp	r3, #0
 2835 0064 1CD0     		beq	.L131
1485:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
1486:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
1487:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->hdmarx->XferAbortCallback(huart->hdmarx);
 2836              		.loc 1 1487 0
 2837 0066 7B68     		ldr	r3, [r7, #4]
 2838 0068 5B6B     		ldr	r3, [r3, #52]
 2839 006a 1B6D     		ldr	r3, [r3, #80]
 2840 006c 7A68     		ldr	r2, [r7, #4]
 2841 006e 526B     		ldr	r2, [r2, #52]
 2842 0070 1046     		mov	r0, r2
 2843 0072 9847     		blx	r3
 2844 0074 14E0     		b	.L131
 2845              	.L128:
1488:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
1489:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1490:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     else
1491:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1492:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Reset Rx transfer counter */
1493:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->RxXferCount = 0x00U; 
 2846              		.loc 1 1493 0
 2847 0076 7B68     		ldr	r3, [r7, #4]
 2848 0078 0022     		movs	r2, #0
 2849 007a DA85     		strh	r2, [r3, #46]	@ movhi
1494:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1495:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Restore huart->RxState to Ready */
1496:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->RxState = HAL_UART_STATE_READY;
 2850              		.loc 1 1496 0
 2851 007c 7B68     		ldr	r3, [r7, #4]
 2852 007e 2022     		movs	r2, #32
 2853 0080 83F83A20 		strb	r2, [r3, #58]
1497:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1498:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
1499:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       HAL_UART_AbortReceiveCpltCallback(huart);
 2854              		.loc 1 1499 0
 2855 0084 7868     		ldr	r0, [r7, #4]
 2856 0086 FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
 2857 008a 09E0     		b	.L131
 2858              	.L127:
1500:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1501:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1502:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
1503:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1504:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Reset Rx transfer counter */
1505:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxXferCount = 0x00U; 
 2859              		.loc 1 1505 0
 2860 008c 7B68     		ldr	r3, [r7, #4]
 2861 008e 0022     		movs	r2, #0
 2862 0090 DA85     		strh	r2, [r3, #46]	@ movhi
1506:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1507:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Restore huart->RxState to Ready */
1508:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 2863              		.loc 1 1508 0
 2864 0092 7B68     		ldr	r3, [r7, #4]
 2865 0094 2022     		movs	r2, #32
ARM GAS  /tmp/ccnvFOuI.s 			page 77


 2866 0096 83F83A20 		strb	r2, [r3, #58]
1509:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1510:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1511:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     HAL_UART_AbortReceiveCpltCallback(huart);
 2867              		.loc 1 1511 0
 2868 009a 7868     		ldr	r0, [r7, #4]
 2869 009c FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
 2870              	.L131:
1512:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1513:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1514:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 2871              		.loc 1 1514 0
 2872 00a0 0023     		movs	r3, #0
1515:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 2873              		.loc 1 1515 0
 2874 00a2 1846     		mov	r0, r3
 2875 00a4 0837     		adds	r7, r7, #8
 2876              	.LCFI114:
 2877              		.cfi_def_cfa_offset 8
 2878 00a6 BD46     		mov	sp, r7
 2879              	.LCFI115:
 2880              		.cfi_def_cfa_register 13
 2881              		@ sp needed
 2882 00a8 80BD     		pop	{r7, pc}
 2883              	.L134:
 2884 00aa 00BF     		.align	2
 2885              	.L133:
 2886 00ac 00000000 		.word	UART_DMARxOnlyAbortCallback
 2887              		.cfi_endproc
 2888              	.LFE144:
 2890              		.section	.text.HAL_UART_IRQHandler,"ax",%progbits
 2891              		.align	2
 2892              		.global	HAL_UART_IRQHandler
 2893              		.thumb
 2894              		.thumb_func
 2896              	HAL_UART_IRQHandler:
 2897              	.LFB145:
1516:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1517:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1518:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  This function handles UART interrupt request.
1519:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
1520:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1521:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
1522:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1523:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
1524:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 2898              		.loc 1 1524 0
 2899              		.cfi_startproc
 2900              		@ args = 0, pretend = 0, frame = 32
 2901              		@ frame_needed = 1, uses_anonymous_args = 0
 2902 0000 80B5     		push	{r7, lr}
 2903              	.LCFI116:
 2904              		.cfi_def_cfa_offset 8
 2905              		.cfi_offset 7, -8
 2906              		.cfi_offset 14, -4
 2907 0002 88B0     		sub	sp, sp, #32
 2908              	.LCFI117:
ARM GAS  /tmp/ccnvFOuI.s 			page 78


 2909              		.cfi_def_cfa_offset 40
 2910 0004 00AF     		add	r7, sp, #0
 2911              	.LCFI118:
 2912              		.cfi_def_cfa_register 7
 2913 0006 7860     		str	r0, [r7, #4]
1525:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    uint32_t isrflags   = READ_REG(huart->Instance->SR);
 2914              		.loc 1 1525 0
 2915 0008 7B68     		ldr	r3, [r7, #4]
 2916 000a 1B68     		ldr	r3, [r3]
 2917 000c 1B68     		ldr	r3, [r3]
 2918 000e FB61     		str	r3, [r7, #28]
1526:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 2919              		.loc 1 1526 0
 2920 0010 7B68     		ldr	r3, [r7, #4]
 2921 0012 1B68     		ldr	r3, [r3]
 2922 0014 DB68     		ldr	r3, [r3, #12]
 2923 0016 BB61     		str	r3, [r7, #24]
1527:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 2924              		.loc 1 1527 0
 2925 0018 7B68     		ldr	r3, [r7, #4]
 2926 001a 1B68     		ldr	r3, [r3]
 2927 001c 5B69     		ldr	r3, [r3, #20]
 2928 001e 7B61     		str	r3, [r7, #20]
1528:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    uint32_t errorflags = 0x00U;
 2929              		.loc 1 1528 0
 2930 0020 0023     		movs	r3, #0
 2931 0022 3B61     		str	r3, [r7, #16]
1529:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    uint32_t dmarequest = 0x00U;
 2932              		.loc 1 1529 0
 2933 0024 0023     		movs	r3, #0
 2934 0026 FB60     		str	r3, [r7, #12]
1530:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1531:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* If no error occurs */
1532:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 2935              		.loc 1 1532 0
 2936 0028 FB69     		ldr	r3, [r7, #28]
 2937 002a 03F00F03 		and	r3, r3, #15
 2938 002e 3B61     		str	r3, [r7, #16]
1533:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(errorflags == RESET)
 2939              		.loc 1 1533 0
 2940 0030 3B69     		ldr	r3, [r7, #16]
 2941 0032 002B     		cmp	r3, #0
 2942 0034 0DD1     		bne	.L136
1534:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1535:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* UART in mode Receiver -------------------------------------------------*/
1536:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 2943              		.loc 1 1536 0
 2944 0036 FB69     		ldr	r3, [r7, #28]
 2945 0038 03F02003 		and	r3, r3, #32
 2946 003c 002B     		cmp	r3, #0
 2947 003e 08D0     		beq	.L136
 2948              		.loc 1 1536 0 is_stmt 0 discriminator 1
 2949 0040 BB69     		ldr	r3, [r7, #24]
 2950 0042 03F02003 		and	r3, r3, #32
 2951 0046 002B     		cmp	r3, #0
 2952 0048 03D0     		beq	.L136
1537:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
ARM GAS  /tmp/ccnvFOuI.s 			page 79


1538:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       UART_Receive_IT(huart);
 2953              		.loc 1 1538 0 is_stmt 1
 2954 004a 7868     		ldr	r0, [r7, #4]
 2955 004c FFF7FEFF 		bl	UART_Receive_IT
1539:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       return;
 2956              		.loc 1 1539 0
 2957 0050 CAE0     		b	.L135
 2958              	.L136:
1540:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1541:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }  
1542:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1543:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* If some errors occur */
1544:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE 
 2959              		.loc 1 1544 0
 2960 0052 3B69     		ldr	r3, [r7, #16]
 2961 0054 002B     		cmp	r3, #0
 2962 0056 00F0AB80 		beq	.L138
 2963              		.loc 1 1544 0 is_stmt 0 discriminator 1
 2964 005a 7B69     		ldr	r3, [r7, #20]
 2965 005c 03F00103 		and	r3, r3, #1
 2966 0060 002B     		cmp	r3, #0
 2967 0062 05D1     		bne	.L139
 2968              		.loc 1 1544 0 discriminator 2
 2969 0064 BB69     		ldr	r3, [r7, #24]
 2970 0066 03F49073 		and	r3, r3, #288
 2971 006a 002B     		cmp	r3, #0
 2972 006c 00F0A080 		beq	.L138
 2973              	.L139:
1545:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1546:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* UART parity error interrupt occurred ----------------------------------*/
1547:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 2974              		.loc 1 1547 0 is_stmt 1
 2975 0070 FB69     		ldr	r3, [r7, #28]
 2976 0072 03F00103 		and	r3, r3, #1
 2977 0076 002B     		cmp	r3, #0
 2978 0078 0AD0     		beq	.L140
 2979              		.loc 1 1547 0 is_stmt 0 discriminator 1
 2980 007a BB69     		ldr	r3, [r7, #24]
 2981 007c 03F48073 		and	r3, r3, #256
 2982 0080 002B     		cmp	r3, #0
 2983 0082 05D0     		beq	.L140
1548:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1549:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_PE;
 2984              		.loc 1 1549 0 is_stmt 1
 2985 0084 7B68     		ldr	r3, [r7, #4]
 2986 0086 DB6B     		ldr	r3, [r3, #60]
 2987 0088 43F00102 		orr	r2, r3, #1
 2988 008c 7B68     		ldr	r3, [r7, #4]
 2989 008e DA63     		str	r2, [r3, #60]
 2990              	.L140:
1550:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1551:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
1552:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* UART noise error interrupt occurred -----------------------------------*/
1553:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 2991              		.loc 1 1553 0
 2992 0090 FB69     		ldr	r3, [r7, #28]
 2993 0092 03F00403 		and	r3, r3, #4
ARM GAS  /tmp/ccnvFOuI.s 			page 80


 2994 0096 002B     		cmp	r3, #0
 2995 0098 0AD0     		beq	.L141
 2996              		.loc 1 1553 0 is_stmt 0 discriminator 1
 2997 009a 7B69     		ldr	r3, [r7, #20]
 2998 009c 03F00103 		and	r3, r3, #1
 2999 00a0 002B     		cmp	r3, #0
 3000 00a2 05D0     		beq	.L141
1554:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1555:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_NE;
 3001              		.loc 1 1555 0 is_stmt 1
 3002 00a4 7B68     		ldr	r3, [r7, #4]
 3003 00a6 DB6B     		ldr	r3, [r3, #60]
 3004 00a8 43F00202 		orr	r2, r3, #2
 3005 00ac 7B68     		ldr	r3, [r7, #4]
 3006 00ae DA63     		str	r2, [r3, #60]
 3007              	.L141:
1556:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1557:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
1558:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* UART frame error interrupt occurred -----------------------------------*/
1559:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 3008              		.loc 1 1559 0
 3009 00b0 FB69     		ldr	r3, [r7, #28]
 3010 00b2 03F00203 		and	r3, r3, #2
 3011 00b6 002B     		cmp	r3, #0
 3012 00b8 0AD0     		beq	.L142
 3013              		.loc 1 1559 0 is_stmt 0 discriminator 1
 3014 00ba 7B69     		ldr	r3, [r7, #20]
 3015 00bc 03F00103 		and	r3, r3, #1
 3016 00c0 002B     		cmp	r3, #0
 3017 00c2 05D0     		beq	.L142
1560:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1561:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_FE;
 3018              		.loc 1 1561 0 is_stmt 1
 3019 00c4 7B68     		ldr	r3, [r7, #4]
 3020 00c6 DB6B     		ldr	r3, [r3, #60]
 3021 00c8 43F00402 		orr	r2, r3, #4
 3022 00cc 7B68     		ldr	r3, [r7, #4]
 3023 00ce DA63     		str	r2, [r3, #60]
 3024              	.L142:
1562:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1563:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
1564:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* UART Over-Run interrupt occurred --------------------------------------*/
1565:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 3025              		.loc 1 1565 0
 3026 00d0 FB69     		ldr	r3, [r7, #28]
 3027 00d2 03F00803 		and	r3, r3, #8
 3028 00d6 002B     		cmp	r3, #0
 3029 00d8 0AD0     		beq	.L143
 3030              		.loc 1 1565 0 is_stmt 0 discriminator 1
 3031 00da 7B69     		ldr	r3, [r7, #20]
 3032 00dc 03F00103 		and	r3, r3, #1
 3033 00e0 002B     		cmp	r3, #0
 3034 00e2 05D0     		beq	.L143
1566:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     { 
1567:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_ORE;
 3035              		.loc 1 1567 0 is_stmt 1
 3036 00e4 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccnvFOuI.s 			page 81


 3037 00e6 DB6B     		ldr	r3, [r3, #60]
 3038 00e8 43F00802 		orr	r2, r3, #8
 3039 00ec 7B68     		ldr	r3, [r7, #4]
 3040 00ee DA63     		str	r2, [r3, #60]
 3041              	.L143:
1568:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1569:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1570:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Call UART Error Call back function if need be --------------------------*/    
1571:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 3042              		.loc 1 1571 0
 3043 00f0 7B68     		ldr	r3, [r7, #4]
 3044 00f2 DB6B     		ldr	r3, [r3, #60]
 3045 00f4 002B     		cmp	r3, #0
 3046 00f6 5AD0     		beq	.L144
1572:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1573:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* UART in mode Receiver -----------------------------------------------*/
1574:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 3047              		.loc 1 1574 0
 3048 00f8 FB69     		ldr	r3, [r7, #28]
 3049 00fa 03F02003 		and	r3, r3, #32
 3050 00fe 002B     		cmp	r3, #0
 3051 0100 07D0     		beq	.L145
 3052              		.loc 1 1574 0 is_stmt 0 discriminator 1
 3053 0102 BB69     		ldr	r3, [r7, #24]
 3054 0104 03F02003 		and	r3, r3, #32
 3055 0108 002B     		cmp	r3, #0
 3056 010a 02D0     		beq	.L145
1575:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
1576:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         UART_Receive_IT(huart);
 3057              		.loc 1 1576 0 is_stmt 1
 3058 010c 7868     		ldr	r0, [r7, #4]
 3059 010e FFF7FEFF 		bl	UART_Receive_IT
 3060              	.L145:
1577:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
1578:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1579:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* If Overrun error occurs, or if any error occurs in DMA mode reception,
1580:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****          consider error as blocking */
1581:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 3061              		.loc 1 1581 0
 3062 0112 7B68     		ldr	r3, [r7, #4]
 3063 0114 1B68     		ldr	r3, [r3]
 3064 0116 5B69     		ldr	r3, [r3, #20]
 3065 0118 03F04003 		and	r3, r3, #64
 3066 011c 002B     		cmp	r3, #0
 3067 011e 14BF     		ite	ne
 3068 0120 0123     		movne	r3, #1
 3069 0122 0023     		moveq	r3, #0
 3070 0124 DBB2     		uxtb	r3, r3
 3071 0126 FB60     		str	r3, [r7, #12]
1582:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 3072              		.loc 1 1582 0
 3073 0128 7B68     		ldr	r3, [r7, #4]
 3074 012a DB6B     		ldr	r3, [r3, #60]
 3075 012c 03F00803 		and	r3, r3, #8
 3076 0130 002B     		cmp	r3, #0
 3077 0132 02D1     		bne	.L146
 3078              		.loc 1 1582 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccnvFOuI.s 			page 82


 3079 0134 FB68     		ldr	r3, [r7, #12]
 3080 0136 002B     		cmp	r3, #0
 3081 0138 32D0     		beq	.L147
 3082              	.L146:
1583:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
1584:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /* Blocking error : transfer is aborted
1585:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            Set the UART state ready to be able to start again the process,
1586:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
1587:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         UART_EndRxTransfer(huart);
 3083              		.loc 1 1587 0 is_stmt 1
 3084 013a 7868     		ldr	r0, [r7, #4]
 3085 013c FFF7FEFF 		bl	UART_EndRxTransfer
1588:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         
1589:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /* Disable the UART DMA Rx request if enabled */
1590:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 3086              		.loc 1 1590 0
 3087 0140 7B68     		ldr	r3, [r7, #4]
 3088 0142 1B68     		ldr	r3, [r3]
 3089 0144 5B69     		ldr	r3, [r3, #20]
 3090 0146 03F04003 		and	r3, r3, #64
 3091 014a 002B     		cmp	r3, #0
 3092 014c 23D0     		beq	.L148
1591:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         {
1592:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 3093              		.loc 1 1592 0
 3094 014e 7B68     		ldr	r3, [r7, #4]
 3095 0150 1B68     		ldr	r3, [r3]
 3096 0152 7A68     		ldr	r2, [r7, #4]
 3097 0154 1268     		ldr	r2, [r2]
 3098 0156 5269     		ldr	r2, [r2, #20]
 3099 0158 22F04002 		bic	r2, r2, #64
 3100 015c 5A61     		str	r2, [r3, #20]
1593:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           
1594:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           /* Abort the UART DMA Rx channel */
1595:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           if(huart->hdmarx != NULL)
 3101              		.loc 1 1595 0
 3102 015e 7B68     		ldr	r3, [r7, #4]
 3103 0160 5B6B     		ldr	r3, [r3, #52]
 3104 0162 002B     		cmp	r3, #0
 3105 0164 13D0     		beq	.L149
1596:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           {
1597:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             /* Set the UART DMA Abort callback : 
1598:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****                will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
1599:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 3106              		.loc 1 1599 0
 3107 0166 7B68     		ldr	r3, [r7, #4]
 3108 0168 5B6B     		ldr	r3, [r3, #52]
 3109 016a 214A     		ldr	r2, .L154
 3110 016c 1A65     		str	r2, [r3, #80]
1600:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 3111              		.loc 1 1600 0
 3112 016e 7B68     		ldr	r3, [r7, #4]
 3113 0170 5B6B     		ldr	r3, [r3, #52]
 3114 0172 1846     		mov	r0, r3
 3115 0174 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3116 0178 0346     		mov	r3, r0
 3117 017a 002B     		cmp	r3, #0
ARM GAS  /tmp/ccnvFOuI.s 			page 83


 3118 017c 0FD0     		beq	.L152
1601:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             {
1602:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****               /* Call Directly XferAbortCallback function in case of error */
1603:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****               huart->hdmarx->XferAbortCallback(huart->hdmarx);
 3119              		.loc 1 1603 0
 3120 017e 7B68     		ldr	r3, [r7, #4]
 3121 0180 5B6B     		ldr	r3, [r3, #52]
 3122 0182 1B6D     		ldr	r3, [r3, #80]
 3123 0184 7A68     		ldr	r2, [r7, #4]
 3124 0186 526B     		ldr	r2, [r2, #52]
 3125 0188 1046     		mov	r0, r2
 3126 018a 9847     		blx	r3
 3127 018c 07E0     		b	.L152
 3128              	.L149:
1604:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             }
1605:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           }
1606:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           else
1607:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           {
1608:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             /* Call user error callback */
1609:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             HAL_UART_ErrorCallback(huart);
 3129              		.loc 1 1609 0
 3130 018e 7868     		ldr	r0, [r7, #4]
 3131 0190 FFF7FEFF 		bl	HAL_UART_ErrorCallback
1590:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         {
 3132              		.loc 1 1590 0
 3133 0194 0BE0     		b	.L144
 3134              	.L148:
1610:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           }
1611:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         }
1612:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         else
1613:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         {
1614:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           /* Call user error callback */
1615:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           HAL_UART_ErrorCallback(huart);
 3135              		.loc 1 1615 0
 3136 0196 7868     		ldr	r0, [r7, #4]
 3137 0198 FFF7FEFF 		bl	HAL_UART_ErrorCallback
1590:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         {
 3138              		.loc 1 1590 0
 3139 019c 07E0     		b	.L144
 3140              	.L152:
1590:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         {
 3141              		.loc 1 1590 0 is_stmt 0 discriminator 2
 3142 019e 06E0     		b	.L144
 3143              	.L147:
1616:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         }
1617:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
1618:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       else
1619:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
1620:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /* Non Blocking error : transfer could go on. 
1621:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            Error is notified to user through user error callback */
1622:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         HAL_UART_ErrorCallback(huart);
 3144              		.loc 1 1622 0 is_stmt 1
 3145 01a0 7868     		ldr	r0, [r7, #4]
 3146 01a2 FFF7FEFF 		bl	HAL_UART_ErrorCallback
1623:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->ErrorCode = HAL_UART_ERROR_NONE;
 3147              		.loc 1 1623 0
 3148 01a6 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccnvFOuI.s 			page 84


 3149 01a8 0022     		movs	r2, #0
 3150 01aa DA63     		str	r2, [r3, #60]
1624:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
1625:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1626:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return;
 3151              		.loc 1 1626 0
 3152 01ac 1CE0     		b	.L135
 3153              	.L144:
 3154              		.loc 1 1626 0 is_stmt 0 discriminator 3
 3155 01ae 1BE0     		b	.L135
 3156              	.L138:
1627:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   } /* End if some error occurs */
1628:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1629:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* UART in mode Transmitter ------------------------------------------------*/
1630:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 3157              		.loc 1 1630 0 is_stmt 1
 3158 01b0 FB69     		ldr	r3, [r7, #28]
 3159 01b2 03F08003 		and	r3, r3, #128
 3160 01b6 002B     		cmp	r3, #0
 3161 01b8 08D0     		beq	.L153
 3162              		.loc 1 1630 0 is_stmt 0 discriminator 1
 3163 01ba BB69     		ldr	r3, [r7, #24]
 3164 01bc 03F08003 		and	r3, r3, #128
 3165 01c0 002B     		cmp	r3, #0
 3166 01c2 03D0     		beq	.L153
1631:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1632:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     UART_Transmit_IT(huart);
 3167              		.loc 1 1632 0 is_stmt 1
 3168 01c4 7868     		ldr	r0, [r7, #4]
 3169 01c6 FFF7FEFF 		bl	UART_Transmit_IT
1633:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return;
 3170              		.loc 1 1633 0
 3171 01ca 0DE0     		b	.L135
 3172              	.L153:
1634:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1635:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1636:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* UART in mode Transmitter end --------------------------------------------*/
1637:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 3173              		.loc 1 1637 0
 3174 01cc FB69     		ldr	r3, [r7, #28]
 3175 01ce 03F04003 		and	r3, r3, #64
 3176 01d2 002B     		cmp	r3, #0
 3177 01d4 08D0     		beq	.L135
 3178              		.loc 1 1637 0 is_stmt 0 discriminator 1
 3179 01d6 BB69     		ldr	r3, [r7, #24]
 3180 01d8 03F04003 		and	r3, r3, #64
 3181 01dc 002B     		cmp	r3, #0
 3182 01de 03D0     		beq	.L135
1638:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1639:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     UART_EndTransmit_IT(huart);
 3183              		.loc 1 1639 0 is_stmt 1
 3184 01e0 7868     		ldr	r0, [r7, #4]
 3185 01e2 FFF7FEFF 		bl	UART_EndTransmit_IT
1640:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return;
 3186              		.loc 1 1640 0
 3187 01e6 00BF     		nop
 3188              	.L135:
ARM GAS  /tmp/ccnvFOuI.s 			page 85


1641:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1642:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 3189              		.loc 1 1642 0
 3190 01e8 2037     		adds	r7, r7, #32
 3191              	.LCFI119:
 3192              		.cfi_def_cfa_offset 8
 3193 01ea BD46     		mov	sp, r7
 3194              	.LCFI120:
 3195              		.cfi_def_cfa_register 13
 3196              		@ sp needed
 3197 01ec 80BD     		pop	{r7, pc}
 3198              	.L155:
 3199 01ee 00BF     		.align	2
 3200              	.L154:
 3201 01f0 00000000 		.word	UART_DMAAbortOnError
 3202              		.cfi_endproc
 3203              	.LFE145:
 3205              		.section	.text.HAL_UART_TxCpltCallback,"ax",%progbits
 3206              		.align	2
 3207              		.weak	HAL_UART_TxCpltCallback
 3208              		.thumb
 3209              		.thumb_func
 3211              	HAL_UART_TxCpltCallback:
 3212              	.LFB146:
1643:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1644:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1645:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Tx Transfer completed callbacks.
1646:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
1647:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1648:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
1649:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1650:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****  __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
1651:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 3213              		.loc 1 1651 0
 3214              		.cfi_startproc
 3215              		@ args = 0, pretend = 0, frame = 8
 3216              		@ frame_needed = 1, uses_anonymous_args = 0
 3217              		@ link register save eliminated.
 3218 0000 80B4     		push	{r7}
 3219              	.LCFI121:
 3220              		.cfi_def_cfa_offset 4
 3221              		.cfi_offset 7, -4
 3222 0002 83B0     		sub	sp, sp, #12
 3223              	.LCFI122:
 3224              		.cfi_def_cfa_offset 16
 3225 0004 00AF     		add	r7, sp, #0
 3226              	.LCFI123:
 3227              		.cfi_def_cfa_register 7
 3228 0006 7860     		str	r0, [r7, #4]
1652:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
1653:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UNUSED(huart);
1654:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* NOTE: This function Should not be modified, when the callback is needed,
1655:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            the HAL_UART_TxCpltCallback could be implemented in the user file
1656:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    */ 
1657:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 3229              		.loc 1 1657 0
 3230 0008 0C37     		adds	r7, r7, #12
ARM GAS  /tmp/ccnvFOuI.s 			page 86


 3231              	.LCFI124:
 3232              		.cfi_def_cfa_offset 4
 3233 000a BD46     		mov	sp, r7
 3234              	.LCFI125:
 3235              		.cfi_def_cfa_register 13
 3236              		@ sp needed
 3237 000c 5DF8047B 		ldr	r7, [sp], #4
 3238              	.LCFI126:
 3239              		.cfi_restore 7
 3240              		.cfi_def_cfa_offset 0
 3241 0010 7047     		bx	lr
 3242              		.cfi_endproc
 3243              	.LFE146:
 3245 0012 00BF     		.section	.text.HAL_UART_TxHalfCpltCallback,"ax",%progbits
 3246              		.align	2
 3247              		.weak	HAL_UART_TxHalfCpltCallback
 3248              		.thumb
 3249              		.thumb_func
 3251              	HAL_UART_TxHalfCpltCallback:
 3252              	.LFB147:
1658:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1659:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1660:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Tx Half Transfer completed callbacks.
1661:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
1662:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1663:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
1664:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1665:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****  __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
1666:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 3253              		.loc 1 1666 0
 3254              		.cfi_startproc
 3255              		@ args = 0, pretend = 0, frame = 8
 3256              		@ frame_needed = 1, uses_anonymous_args = 0
 3257              		@ link register save eliminated.
 3258 0000 80B4     		push	{r7}
 3259              	.LCFI127:
 3260              		.cfi_def_cfa_offset 4
 3261              		.cfi_offset 7, -4
 3262 0002 83B0     		sub	sp, sp, #12
 3263              	.LCFI128:
 3264              		.cfi_def_cfa_offset 16
 3265 0004 00AF     		add	r7, sp, #0
 3266              	.LCFI129:
 3267              		.cfi_def_cfa_register 7
 3268 0006 7860     		str	r0, [r7, #4]
1667:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
1668:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UNUSED(huart);
1669:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* NOTE: This function Should not be modified, when the callback is needed,
1670:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            the HAL_UART_TxCpltCallback could be implemented in the user file
1671:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    */ 
1672:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 3269              		.loc 1 1672 0
 3270 0008 0C37     		adds	r7, r7, #12
 3271              	.LCFI130:
 3272              		.cfi_def_cfa_offset 4
 3273 000a BD46     		mov	sp, r7
 3274              	.LCFI131:
ARM GAS  /tmp/ccnvFOuI.s 			page 87


 3275              		.cfi_def_cfa_register 13
 3276              		@ sp needed
 3277 000c 5DF8047B 		ldr	r7, [sp], #4
 3278              	.LCFI132:
 3279              		.cfi_restore 7
 3280              		.cfi_def_cfa_offset 0
 3281 0010 7047     		bx	lr
 3282              		.cfi_endproc
 3283              	.LFE147:
 3285 0012 00BF     		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 3286              		.align	2
 3287              		.weak	HAL_UART_RxCpltCallback
 3288              		.thumb
 3289              		.thumb_func
 3291              	HAL_UART_RxCpltCallback:
 3292              	.LFB148:
1673:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1674:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1675:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Rx Transfer completed callbacks.
1676:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
1677:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1678:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
1679:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1680:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** __weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
1681:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 3293              		.loc 1 1681 0
 3294              		.cfi_startproc
 3295              		@ args = 0, pretend = 0, frame = 8
 3296              		@ frame_needed = 1, uses_anonymous_args = 0
 3297              		@ link register save eliminated.
 3298 0000 80B4     		push	{r7}
 3299              	.LCFI133:
 3300              		.cfi_def_cfa_offset 4
 3301              		.cfi_offset 7, -4
 3302 0002 83B0     		sub	sp, sp, #12
 3303              	.LCFI134:
 3304              		.cfi_def_cfa_offset 16
 3305 0004 00AF     		add	r7, sp, #0
 3306              	.LCFI135:
 3307              		.cfi_def_cfa_register 7
 3308 0006 7860     		str	r0, [r7, #4]
1682:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
1683:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UNUSED(huart);
1684:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* NOTE: This function Should not be modified, when the callback is needed,
1685:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            the HAL_UART_TxCpltCallback could be implemented in the user file
1686:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    */
1687:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 3309              		.loc 1 1687 0
 3310 0008 0C37     		adds	r7, r7, #12
 3311              	.LCFI136:
 3312              		.cfi_def_cfa_offset 4
 3313 000a BD46     		mov	sp, r7
 3314              	.LCFI137:
 3315              		.cfi_def_cfa_register 13
 3316              		@ sp needed
 3317 000c 5DF8047B 		ldr	r7, [sp], #4
 3318              	.LCFI138:
ARM GAS  /tmp/ccnvFOuI.s 			page 88


 3319              		.cfi_restore 7
 3320              		.cfi_def_cfa_offset 0
 3321 0010 7047     		bx	lr
 3322              		.cfi_endproc
 3323              	.LFE148:
 3325 0012 00BF     		.section	.text.HAL_UART_RxHalfCpltCallback,"ax",%progbits
 3326              		.align	2
 3327              		.weak	HAL_UART_RxHalfCpltCallback
 3328              		.thumb
 3329              		.thumb_func
 3331              	HAL_UART_RxHalfCpltCallback:
 3332              	.LFB149:
1688:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1689:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1690:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Rx Half Transfer completed callbacks.
1691:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
1692:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1693:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
1694:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1695:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** __weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
1696:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 3333              		.loc 1 1696 0
 3334              		.cfi_startproc
 3335              		@ args = 0, pretend = 0, frame = 8
 3336              		@ frame_needed = 1, uses_anonymous_args = 0
 3337              		@ link register save eliminated.
 3338 0000 80B4     		push	{r7}
 3339              	.LCFI139:
 3340              		.cfi_def_cfa_offset 4
 3341              		.cfi_offset 7, -4
 3342 0002 83B0     		sub	sp, sp, #12
 3343              	.LCFI140:
 3344              		.cfi_def_cfa_offset 16
 3345 0004 00AF     		add	r7, sp, #0
 3346              	.LCFI141:
 3347              		.cfi_def_cfa_register 7
 3348 0006 7860     		str	r0, [r7, #4]
1697:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
1698:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UNUSED(huart);
1699:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* NOTE: This function Should not be modified, when the callback is needed,
1700:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            the HAL_UART_TxCpltCallback could be implemented in the user file
1701:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    */
1702:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 3349              		.loc 1 1702 0
 3350 0008 0C37     		adds	r7, r7, #12
 3351              	.LCFI142:
 3352              		.cfi_def_cfa_offset 4
 3353 000a BD46     		mov	sp, r7
 3354              	.LCFI143:
 3355              		.cfi_def_cfa_register 13
 3356              		@ sp needed
 3357 000c 5DF8047B 		ldr	r7, [sp], #4
 3358              	.LCFI144:
 3359              		.cfi_restore 7
 3360              		.cfi_def_cfa_offset 0
 3361 0010 7047     		bx	lr
 3362              		.cfi_endproc
ARM GAS  /tmp/ccnvFOuI.s 			page 89


 3363              	.LFE149:
 3365 0012 00BF     		.section	.text.HAL_UART_ErrorCallback,"ax",%progbits
 3366              		.align	2
 3367              		.weak	HAL_UART_ErrorCallback
 3368              		.thumb
 3369              		.thumb_func
 3371              	HAL_UART_ErrorCallback:
 3372              	.LFB150:
1703:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1704:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1705:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  UART error callbacks.
1706:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
1707:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1708:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
1709:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1710:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****  __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
1711:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 3373              		.loc 1 1711 0
 3374              		.cfi_startproc
 3375              		@ args = 0, pretend = 0, frame = 8
 3376              		@ frame_needed = 1, uses_anonymous_args = 0
 3377              		@ link register save eliminated.
 3378 0000 80B4     		push	{r7}
 3379              	.LCFI145:
 3380              		.cfi_def_cfa_offset 4
 3381              		.cfi_offset 7, -4
 3382 0002 83B0     		sub	sp, sp, #12
 3383              	.LCFI146:
 3384              		.cfi_def_cfa_offset 16
 3385 0004 00AF     		add	r7, sp, #0
 3386              	.LCFI147:
 3387              		.cfi_def_cfa_register 7
 3388 0006 7860     		str	r0, [r7, #4]
1712:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
1713:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UNUSED(huart); 
1714:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* NOTE: This function Should not be modified, when the callback is needed,
1715:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            the HAL_UART_ErrorCallback could be implemented in the user file
1716:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    */ 
1717:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 3389              		.loc 1 1717 0
 3390 0008 0C37     		adds	r7, r7, #12
 3391              	.LCFI148:
 3392              		.cfi_def_cfa_offset 4
 3393 000a BD46     		mov	sp, r7
 3394              	.LCFI149:
 3395              		.cfi_def_cfa_register 13
 3396              		@ sp needed
 3397 000c 5DF8047B 		ldr	r7, [sp], #4
 3398              	.LCFI150:
 3399              		.cfi_restore 7
 3400              		.cfi_def_cfa_offset 0
 3401 0010 7047     		bx	lr
 3402              		.cfi_endproc
 3403              	.LFE150:
 3405 0012 00BF     		.section	.text.HAL_UART_AbortCpltCallback,"ax",%progbits
 3406              		.align	2
 3407              		.weak	HAL_UART_AbortCpltCallback
ARM GAS  /tmp/ccnvFOuI.s 			page 90


 3408              		.thumb
 3409              		.thumb_func
 3411              	HAL_UART_AbortCpltCallback:
 3412              	.LFB151:
1718:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1719:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1720:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  UART Abort Complete callback.
1721:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart UART handle.
1722:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
1723:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1724:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** __weak void HAL_UART_AbortCpltCallback (UART_HandleTypeDef *huart)
1725:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 3413              		.loc 1 1725 0
 3414              		.cfi_startproc
 3415              		@ args = 0, pretend = 0, frame = 8
 3416              		@ frame_needed = 1, uses_anonymous_args = 0
 3417              		@ link register save eliminated.
 3418 0000 80B4     		push	{r7}
 3419              	.LCFI151:
 3420              		.cfi_def_cfa_offset 4
 3421              		.cfi_offset 7, -4
 3422 0002 83B0     		sub	sp, sp, #12
 3423              	.LCFI152:
 3424              		.cfi_def_cfa_offset 16
 3425 0004 00AF     		add	r7, sp, #0
 3426              	.LCFI153:
 3427              		.cfi_def_cfa_register 7
 3428 0006 7860     		str	r0, [r7, #4]
1726:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
1727:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UNUSED(huart);
1728:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1729:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1730:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             the HAL_UART_AbortCpltCallback can be implemented in the user file.
1731:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    */
1732:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 3429              		.loc 1 1732 0
 3430 0008 0C37     		adds	r7, r7, #12
 3431              	.LCFI154:
 3432              		.cfi_def_cfa_offset 4
 3433 000a BD46     		mov	sp, r7
 3434              	.LCFI155:
 3435              		.cfi_def_cfa_register 13
 3436              		@ sp needed
 3437 000c 5DF8047B 		ldr	r7, [sp], #4
 3438              	.LCFI156:
 3439              		.cfi_restore 7
 3440              		.cfi_def_cfa_offset 0
 3441 0010 7047     		bx	lr
 3442              		.cfi_endproc
 3443              	.LFE151:
 3445 0012 00BF     		.section	.text.HAL_UART_AbortTransmitCpltCallback,"ax",%progbits
 3446              		.align	2
 3447              		.weak	HAL_UART_AbortTransmitCpltCallback
 3448              		.thumb
 3449              		.thumb_func
 3451              	HAL_UART_AbortTransmitCpltCallback:
 3452              	.LFB152:
ARM GAS  /tmp/ccnvFOuI.s 			page 91


1733:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1734:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  UART Abort Complete callback.
1735:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart UART handle.
1736:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
1737:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1738:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** __weak void HAL_UART_AbortTransmitCpltCallback (UART_HandleTypeDef *huart)
1739:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 3453              		.loc 1 1739 0
 3454              		.cfi_startproc
 3455              		@ args = 0, pretend = 0, frame = 8
 3456              		@ frame_needed = 1, uses_anonymous_args = 0
 3457              		@ link register save eliminated.
 3458 0000 80B4     		push	{r7}
 3459              	.LCFI157:
 3460              		.cfi_def_cfa_offset 4
 3461              		.cfi_offset 7, -4
 3462 0002 83B0     		sub	sp, sp, #12
 3463              	.LCFI158:
 3464              		.cfi_def_cfa_offset 16
 3465 0004 00AF     		add	r7, sp, #0
 3466              	.LCFI159:
 3467              		.cfi_def_cfa_register 7
 3468 0006 7860     		str	r0, [r7, #4]
1740:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
1741:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UNUSED(huart);
1742:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1743:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1744:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
1745:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    */
1746:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 3469              		.loc 1 1746 0
 3470 0008 0C37     		adds	r7, r7, #12
 3471              	.LCFI160:
 3472              		.cfi_def_cfa_offset 4
 3473 000a BD46     		mov	sp, r7
 3474              	.LCFI161:
 3475              		.cfi_def_cfa_register 13
 3476              		@ sp needed
 3477 000c 5DF8047B 		ldr	r7, [sp], #4
 3478              	.LCFI162:
 3479              		.cfi_restore 7
 3480              		.cfi_def_cfa_offset 0
 3481 0010 7047     		bx	lr
 3482              		.cfi_endproc
 3483              	.LFE152:
 3485 0012 00BF     		.section	.text.HAL_UART_AbortReceiveCpltCallback,"ax",%progbits
 3486              		.align	2
 3487              		.weak	HAL_UART_AbortReceiveCpltCallback
 3488              		.thumb
 3489              		.thumb_func
 3491              	HAL_UART_AbortReceiveCpltCallback:
 3492              	.LFB153:
1747:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1748:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1749:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  UART Abort Receive Complete callback.
1750:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart UART handle.
1751:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
ARM GAS  /tmp/ccnvFOuI.s 			page 92


1752:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1753:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** __weak void HAL_UART_AbortReceiveCpltCallback (UART_HandleTypeDef *huart)
1754:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 3493              		.loc 1 1754 0
 3494              		.cfi_startproc
 3495              		@ args = 0, pretend = 0, frame = 8
 3496              		@ frame_needed = 1, uses_anonymous_args = 0
 3497              		@ link register save eliminated.
 3498 0000 80B4     		push	{r7}
 3499              	.LCFI163:
 3500              		.cfi_def_cfa_offset 4
 3501              		.cfi_offset 7, -4
 3502 0002 83B0     		sub	sp, sp, #12
 3503              	.LCFI164:
 3504              		.cfi_def_cfa_offset 16
 3505 0004 00AF     		add	r7, sp, #0
 3506              	.LCFI165:
 3507              		.cfi_def_cfa_register 7
 3508 0006 7860     		str	r0, [r7, #4]
1755:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
1756:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UNUSED(huart);
1757:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1758:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1759:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
1760:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    */
1761:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 3509              		.loc 1 1761 0
 3510 0008 0C37     		adds	r7, r7, #12
 3511              	.LCFI166:
 3512              		.cfi_def_cfa_offset 4
 3513 000a BD46     		mov	sp, r7
 3514              	.LCFI167:
 3515              		.cfi_def_cfa_register 13
 3516              		@ sp needed
 3517 000c 5DF8047B 		ldr	r7, [sp], #4
 3518              	.LCFI168:
 3519              		.cfi_restore 7
 3520              		.cfi_def_cfa_offset 0
 3521 0010 7047     		bx	lr
 3522              		.cfi_endproc
 3523              	.LFE153:
 3525 0012 00BF     		.section	.text.HAL_LIN_SendBreak,"ax",%progbits
 3526              		.align	2
 3527              		.global	HAL_LIN_SendBreak
 3528              		.thumb
 3529              		.thumb_func
 3531              	HAL_LIN_SendBreak:
 3532              	.LFB154:
1762:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1763:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1764:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @}
1765:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1766:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1767:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group3 Peripheral Control functions 
1768:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *  @brief   UART control functions 
1769:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *
1770:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** @verbatim   
ARM GAS  /tmp/ccnvFOuI.s 			page 93


1771:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ==============================================================================
1772:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****                       ##### Peripheral Control functions #####
1773:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ==============================================================================  
1774:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   [..]
1775:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     This subsection provides a set of functions allowing to control the UART:
1776:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (+) HAL_LIN_SendBreak() API can be helpful to transmit the break character.
1777:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (+) HAL_MultiProcessor_EnterMuteMode() API can be helpful to enter the UART in mute mode. 
1778:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (+) HAL_MultiProcessor_ExitMuteMode() API can be helpful to exit the UART mute mode by software
1779:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
1780:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** @endverbatim
1781:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @{
1782:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1783:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1784:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1785:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Transmits break characters.
1786:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
1787:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1788:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
1789:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1790:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
1791:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 3533              		.loc 1 1791 0
 3534              		.cfi_startproc
 3535              		@ args = 0, pretend = 0, frame = 8
 3536              		@ frame_needed = 1, uses_anonymous_args = 0
 3537              		@ link register save eliminated.
 3538 0000 80B4     		push	{r7}
 3539              	.LCFI169:
 3540              		.cfi_def_cfa_offset 4
 3541              		.cfi_offset 7, -4
 3542 0002 83B0     		sub	sp, sp, #12
 3543              	.LCFI170:
 3544              		.cfi_def_cfa_offset 16
 3545 0004 00AF     		add	r7, sp, #0
 3546              	.LCFI171:
 3547              		.cfi_def_cfa_register 7
 3548 0006 7860     		str	r0, [r7, #4]
1792:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check the parameters */
1793:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
1794:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1795:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process Locked */
1796:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_LOCK(huart);
 3549              		.loc 1 1796 0
 3550 0008 7B68     		ldr	r3, [r7, #4]
 3551 000a 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 3552 000e 012B     		cmp	r3, #1
 3553 0010 01D1     		bne	.L165
 3554              		.loc 1 1796 0 is_stmt 0 discriminator 1
 3555 0012 0223     		movs	r3, #2
 3556 0014 18E0     		b	.L166
 3557              	.L165:
 3558              		.loc 1 1796 0 discriminator 2
 3559 0016 7B68     		ldr	r3, [r7, #4]
 3560 0018 0122     		movs	r2, #1
 3561 001a 83F83820 		strb	r2, [r3, #56]
1797:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1798:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
ARM GAS  /tmp/ccnvFOuI.s 			page 94


 3562              		.loc 1 1798 0 is_stmt 1 discriminator 2
 3563 001e 7B68     		ldr	r3, [r7, #4]
 3564 0020 2422     		movs	r2, #36
 3565 0022 83F83920 		strb	r2, [r3, #57]
1799:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1800:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Send break characters */
1801:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_SBK);
 3566              		.loc 1 1801 0 discriminator 2
 3567 0026 7B68     		ldr	r3, [r7, #4]
 3568 0028 1B68     		ldr	r3, [r3]
 3569 002a 7A68     		ldr	r2, [r7, #4]
 3570 002c 1268     		ldr	r2, [r2]
 3571 002e D268     		ldr	r2, [r2, #12]
 3572 0030 42F00102 		orr	r2, r2, #1
 3573 0034 DA60     		str	r2, [r3, #12]
1802:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****  
1803:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 3574              		.loc 1 1803 0 discriminator 2
 3575 0036 7B68     		ldr	r3, [r7, #4]
 3576 0038 2022     		movs	r2, #32
 3577 003a 83F83920 		strb	r2, [r3, #57]
1804:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1805:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process Unlocked */
1806:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 3578              		.loc 1 1806 0 discriminator 2
 3579 003e 7B68     		ldr	r3, [r7, #4]
 3580 0040 0022     		movs	r2, #0
 3581 0042 83F83820 		strb	r2, [r3, #56]
1807:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1808:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK; 
 3582              		.loc 1 1808 0 discriminator 2
 3583 0046 0023     		movs	r3, #0
 3584              	.L166:
1809:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 3585              		.loc 1 1809 0
 3586 0048 1846     		mov	r0, r3
 3587 004a 0C37     		adds	r7, r7, #12
 3588              	.LCFI172:
 3589              		.cfi_def_cfa_offset 4
 3590 004c BD46     		mov	sp, r7
 3591              	.LCFI173:
 3592              		.cfi_def_cfa_register 13
 3593              		@ sp needed
 3594 004e 5DF8047B 		ldr	r7, [sp], #4
 3595              	.LCFI174:
 3596              		.cfi_restore 7
 3597              		.cfi_def_cfa_offset 0
 3598 0052 7047     		bx	lr
 3599              		.cfi_endproc
 3600              	.LFE154:
 3602              		.section	.text.HAL_MultiProcessor_EnterMuteMode,"ax",%progbits
 3603              		.align	2
 3604              		.global	HAL_MultiProcessor_EnterMuteMode
 3605              		.thumb
 3606              		.thumb_func
 3608              	HAL_MultiProcessor_EnterMuteMode:
 3609              	.LFB155:
ARM GAS  /tmp/ccnvFOuI.s 			page 95


1810:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1811:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1812:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Enters the UART in mute mode. 
1813:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
1814:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1815:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
1816:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1817:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)
1818:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 3610              		.loc 1 1818 0
 3611              		.cfi_startproc
 3612              		@ args = 0, pretend = 0, frame = 8
 3613              		@ frame_needed = 1, uses_anonymous_args = 0
 3614              		@ link register save eliminated.
 3615 0000 80B4     		push	{r7}
 3616              	.LCFI175:
 3617              		.cfi_def_cfa_offset 4
 3618              		.cfi_offset 7, -4
 3619 0002 83B0     		sub	sp, sp, #12
 3620              	.LCFI176:
 3621              		.cfi_def_cfa_offset 16
 3622 0004 00AF     		add	r7, sp, #0
 3623              	.LCFI177:
 3624              		.cfi_def_cfa_register 7
 3625 0006 7860     		str	r0, [r7, #4]
1819:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check the parameters */
1820:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
1821:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1822:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process Locked */
1823:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_LOCK(huart);
 3626              		.loc 1 1823 0
 3627 0008 7B68     		ldr	r3, [r7, #4]
 3628 000a 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 3629 000e 012B     		cmp	r3, #1
 3630 0010 01D1     		bne	.L168
 3631              		.loc 1 1823 0 is_stmt 0 discriminator 1
 3632 0012 0223     		movs	r3, #2
 3633 0014 18E0     		b	.L169
 3634              	.L168:
 3635              		.loc 1 1823 0 discriminator 2
 3636 0016 7B68     		ldr	r3, [r7, #4]
 3637 0018 0122     		movs	r2, #1
 3638 001a 83F83820 		strb	r2, [r3, #56]
1824:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1825:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 3639              		.loc 1 1825 0 is_stmt 1 discriminator 2
 3640 001e 7B68     		ldr	r3, [r7, #4]
 3641 0020 2422     		movs	r2, #36
 3642 0022 83F83920 		strb	r2, [r3, #57]
1826:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1827:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
1828:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_RWU);
 3643              		.loc 1 1828 0 discriminator 2
 3644 0026 7B68     		ldr	r3, [r7, #4]
 3645 0028 1B68     		ldr	r3, [r3]
 3646 002a 7A68     		ldr	r2, [r7, #4]
 3647 002c 1268     		ldr	r2, [r2]
ARM GAS  /tmp/ccnvFOuI.s 			page 96


 3648 002e D268     		ldr	r2, [r2, #12]
 3649 0030 42F00202 		orr	r2, r2, #2
 3650 0034 DA60     		str	r2, [r3, #12]
1829:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1830:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 3651              		.loc 1 1830 0 discriminator 2
 3652 0036 7B68     		ldr	r3, [r7, #4]
 3653 0038 2022     		movs	r2, #32
 3654 003a 83F83920 		strb	r2, [r3, #57]
1831:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1832:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process Unlocked */
1833:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 3655              		.loc 1 1833 0 discriminator 2
 3656 003e 7B68     		ldr	r3, [r7, #4]
 3657 0040 0022     		movs	r2, #0
 3658 0042 83F83820 		strb	r2, [r3, #56]
1834:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1835:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK; 
 3659              		.loc 1 1835 0 discriminator 2
 3660 0046 0023     		movs	r3, #0
 3661              	.L169:
1836:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 3662              		.loc 1 1836 0
 3663 0048 1846     		mov	r0, r3
 3664 004a 0C37     		adds	r7, r7, #12
 3665              	.LCFI178:
 3666              		.cfi_def_cfa_offset 4
 3667 004c BD46     		mov	sp, r7
 3668              	.LCFI179:
 3669              		.cfi_def_cfa_register 13
 3670              		@ sp needed
 3671 004e 5DF8047B 		ldr	r7, [sp], #4
 3672              	.LCFI180:
 3673              		.cfi_restore 7
 3674              		.cfi_def_cfa_offset 0
 3675 0052 7047     		bx	lr
 3676              		.cfi_endproc
 3677              	.LFE155:
 3679              		.section	.text.HAL_MultiProcessor_ExitMuteMode,"ax",%progbits
 3680              		.align	2
 3681              		.global	HAL_MultiProcessor_ExitMuteMode
 3682              		.thumb
 3683              		.thumb_func
 3685              	HAL_MultiProcessor_ExitMuteMode:
 3686              	.LFB156:
1837:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1838:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1839:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Exits the UART mute mode: wake up software. 
1840:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
1841:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1842:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
1843:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1844:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_ExitMuteMode(UART_HandleTypeDef *huart)
1845:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 3687              		.loc 1 1845 0
 3688              		.cfi_startproc
 3689              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccnvFOuI.s 			page 97


 3690              		@ frame_needed = 1, uses_anonymous_args = 0
 3691              		@ link register save eliminated.
 3692 0000 80B4     		push	{r7}
 3693              	.LCFI181:
 3694              		.cfi_def_cfa_offset 4
 3695              		.cfi_offset 7, -4
 3696 0002 83B0     		sub	sp, sp, #12
 3697              	.LCFI182:
 3698              		.cfi_def_cfa_offset 16
 3699 0004 00AF     		add	r7, sp, #0
 3700              	.LCFI183:
 3701              		.cfi_def_cfa_register 7
 3702 0006 7860     		str	r0, [r7, #4]
1846:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check the parameters */
1847:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
1848:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1849:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process Locked */
1850:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_LOCK(huart);
 3703              		.loc 1 1850 0
 3704 0008 7B68     		ldr	r3, [r7, #4]
 3705 000a 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 3706 000e 012B     		cmp	r3, #1
 3707 0010 01D1     		bne	.L171
 3708              		.loc 1 1850 0 is_stmt 0 discriminator 1
 3709 0012 0223     		movs	r3, #2
 3710 0014 18E0     		b	.L172
 3711              	.L171:
 3712              		.loc 1 1850 0 discriminator 2
 3713 0016 7B68     		ldr	r3, [r7, #4]
 3714 0018 0122     		movs	r2, #1
 3715 001a 83F83820 		strb	r2, [r3, #56]
1851:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1852:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 3716              		.loc 1 1852 0 is_stmt 1 discriminator 2
 3717 001e 7B68     		ldr	r3, [r7, #4]
 3718 0020 2422     		movs	r2, #36
 3719 0022 83F83920 		strb	r2, [r3, #57]
1853:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1854:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
1855:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, USART_CR1_RWU);
 3720              		.loc 1 1855 0 discriminator 2
 3721 0026 7B68     		ldr	r3, [r7, #4]
 3722 0028 1B68     		ldr	r3, [r3]
 3723 002a 7A68     		ldr	r2, [r7, #4]
 3724 002c 1268     		ldr	r2, [r2]
 3725 002e D268     		ldr	r2, [r2, #12]
 3726 0030 22F00202 		bic	r2, r2, #2
 3727 0034 DA60     		str	r2, [r3, #12]
1856:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1857:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 3728              		.loc 1 1857 0 discriminator 2
 3729 0036 7B68     		ldr	r3, [r7, #4]
 3730 0038 2022     		movs	r2, #32
 3731 003a 83F83920 		strb	r2, [r3, #57]
1858:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1859:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process Unlocked */
1860:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UNLOCK(huart);
ARM GAS  /tmp/ccnvFOuI.s 			page 98


 3732              		.loc 1 1860 0 discriminator 2
 3733 003e 7B68     		ldr	r3, [r7, #4]
 3734 0040 0022     		movs	r2, #0
 3735 0042 83F83820 		strb	r2, [r3, #56]
1861:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1862:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK; 
 3736              		.loc 1 1862 0 discriminator 2
 3737 0046 0023     		movs	r3, #0
 3738              	.L172:
1863:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 3739              		.loc 1 1863 0
 3740 0048 1846     		mov	r0, r3
 3741 004a 0C37     		adds	r7, r7, #12
 3742              	.LCFI184:
 3743              		.cfi_def_cfa_offset 4
 3744 004c BD46     		mov	sp, r7
 3745              	.LCFI185:
 3746              		.cfi_def_cfa_register 13
 3747              		@ sp needed
 3748 004e 5DF8047B 		ldr	r7, [sp], #4
 3749              	.LCFI186:
 3750              		.cfi_restore 7
 3751              		.cfi_def_cfa_offset 0
 3752 0052 7047     		bx	lr
 3753              		.cfi_endproc
 3754              	.LFE156:
 3756              		.section	.text.HAL_HalfDuplex_EnableTransmitter,"ax",%progbits
 3757              		.align	2
 3758              		.global	HAL_HalfDuplex_EnableTransmitter
 3759              		.thumb
 3760              		.thumb_func
 3762              	HAL_HalfDuplex_EnableTransmitter:
 3763              	.LFB157:
1864:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1865:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1866:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Enables the UART transmitter and disables the UART receiver.
1867:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
1868:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1869:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
1870:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1871:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
1872:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 3764              		.loc 1 1872 0
 3765              		.cfi_startproc
 3766              		@ args = 0, pretend = 0, frame = 16
 3767              		@ frame_needed = 1, uses_anonymous_args = 0
 3768              		@ link register save eliminated.
 3769 0000 80B4     		push	{r7}
 3770              	.LCFI187:
 3771              		.cfi_def_cfa_offset 4
 3772              		.cfi_offset 7, -4
 3773 0002 85B0     		sub	sp, sp, #20
 3774              	.LCFI188:
 3775              		.cfi_def_cfa_offset 24
 3776 0004 00AF     		add	r7, sp, #0
 3777              	.LCFI189:
 3778              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccnvFOuI.s 			page 99


 3779 0006 7860     		str	r0, [r7, #4]
1873:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint32_t tmpreg = 0x00U;
 3780              		.loc 1 1873 0
 3781 0008 0023     		movs	r3, #0
 3782 000a FB60     		str	r3, [r7, #12]
1874:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1875:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process Locked */
1876:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_LOCK(huart);
 3783              		.loc 1 1876 0
 3784 000c 7B68     		ldr	r3, [r7, #4]
 3785 000e 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 3786 0012 012B     		cmp	r3, #1
 3787 0014 01D1     		bne	.L174
 3788              		.loc 1 1876 0 is_stmt 0 discriminator 1
 3789 0016 0223     		movs	r3, #2
 3790 0018 20E0     		b	.L175
 3791              	.L174:
 3792              		.loc 1 1876 0 discriminator 2
 3793 001a 7B68     		ldr	r3, [r7, #4]
 3794 001c 0122     		movs	r2, #1
 3795 001e 83F83820 		strb	r2, [r3, #56]
1877:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1878:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 3796              		.loc 1 1878 0 is_stmt 1 discriminator 2
 3797 0022 7B68     		ldr	r3, [r7, #4]
 3798 0024 2422     		movs	r2, #36
 3799 0026 83F83920 		strb	r2, [r3, #57]
1879:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1880:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
1881:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   tmpreg = huart->Instance->CR1;
 3800              		.loc 1 1881 0 discriminator 2
 3801 002a 7B68     		ldr	r3, [r7, #4]
 3802 002c 1B68     		ldr	r3, [r3]
 3803 002e DB68     		ldr	r3, [r3, #12]
 3804 0030 FB60     		str	r3, [r7, #12]
1882:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1883:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Clear TE and RE bits */
1884:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 3805              		.loc 1 1884 0 discriminator 2
 3806 0032 FB68     		ldr	r3, [r7, #12]
 3807 0034 23F00C03 		bic	r3, r3, #12
 3808 0038 FB60     		str	r3, [r7, #12]
1885:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1886:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
1887:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   tmpreg |= (uint32_t)USART_CR1_TE;
 3809              		.loc 1 1887 0 discriminator 2
 3810 003a FB68     		ldr	r3, [r7, #12]
 3811 003c 43F00803 		orr	r3, r3, #8
 3812 0040 FB60     		str	r3, [r7, #12]
1888:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1889:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Write to USART CR1 */
1890:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 3813              		.loc 1 1890 0 discriminator 2
 3814 0042 7B68     		ldr	r3, [r7, #4]
 3815 0044 1B68     		ldr	r3, [r3]
 3816 0046 FA68     		ldr	r2, [r7, #12]
 3817 0048 DA60     		str	r2, [r3, #12]
ARM GAS  /tmp/ccnvFOuI.s 			page 100


1891:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****  
1892:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 3818              		.loc 1 1892 0 discriminator 2
 3819 004a 7B68     		ldr	r3, [r7, #4]
 3820 004c 2022     		movs	r2, #32
 3821 004e 83F83920 		strb	r2, [r3, #57]
1893:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1894:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process Unlocked */
1895:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 3822              		.loc 1 1895 0 discriminator 2
 3823 0052 7B68     		ldr	r3, [r7, #4]
 3824 0054 0022     		movs	r2, #0
 3825 0056 83F83820 		strb	r2, [r3, #56]
1896:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1897:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK; 
 3826              		.loc 1 1897 0 discriminator 2
 3827 005a 0023     		movs	r3, #0
 3828              	.L175:
1898:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 3829              		.loc 1 1898 0
 3830 005c 1846     		mov	r0, r3
 3831 005e 1437     		adds	r7, r7, #20
 3832              	.LCFI190:
 3833              		.cfi_def_cfa_offset 4
 3834 0060 BD46     		mov	sp, r7
 3835              	.LCFI191:
 3836              		.cfi_def_cfa_register 13
 3837              		@ sp needed
 3838 0062 5DF8047B 		ldr	r7, [sp], #4
 3839              	.LCFI192:
 3840              		.cfi_restore 7
 3841              		.cfi_def_cfa_offset 0
 3842 0066 7047     		bx	lr
 3843              		.cfi_endproc
 3844              	.LFE157:
 3846              		.section	.text.HAL_HalfDuplex_EnableReceiver,"ax",%progbits
 3847              		.align	2
 3848              		.global	HAL_HalfDuplex_EnableReceiver
 3849              		.thumb
 3850              		.thumb_func
 3852              	HAL_HalfDuplex_EnableReceiver:
 3853              	.LFB158:
1899:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1900:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1901:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Enables the UART receiver and disables the UART transmitter.
1902:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
1903:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1904:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
1905:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1906:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
1907:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 3854              		.loc 1 1907 0
 3855              		.cfi_startproc
 3856              		@ args = 0, pretend = 0, frame = 16
 3857              		@ frame_needed = 1, uses_anonymous_args = 0
 3858              		@ link register save eliminated.
 3859 0000 80B4     		push	{r7}
ARM GAS  /tmp/ccnvFOuI.s 			page 101


 3860              	.LCFI193:
 3861              		.cfi_def_cfa_offset 4
 3862              		.cfi_offset 7, -4
 3863 0002 85B0     		sub	sp, sp, #20
 3864              	.LCFI194:
 3865              		.cfi_def_cfa_offset 24
 3866 0004 00AF     		add	r7, sp, #0
 3867              	.LCFI195:
 3868              		.cfi_def_cfa_register 7
 3869 0006 7860     		str	r0, [r7, #4]
1908:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint32_t tmpreg = 0x00U;
 3870              		.loc 1 1908 0
 3871 0008 0023     		movs	r3, #0
 3872 000a FB60     		str	r3, [r7, #12]
1909:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1910:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process Locked */
1911:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_LOCK(huart);
 3873              		.loc 1 1911 0
 3874 000c 7B68     		ldr	r3, [r7, #4]
 3875 000e 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 3876 0012 012B     		cmp	r3, #1
 3877 0014 01D1     		bne	.L177
 3878              		.loc 1 1911 0 is_stmt 0 discriminator 1
 3879 0016 0223     		movs	r3, #2
 3880 0018 20E0     		b	.L178
 3881              	.L177:
 3882              		.loc 1 1911 0 discriminator 2
 3883 001a 7B68     		ldr	r3, [r7, #4]
 3884 001c 0122     		movs	r2, #1
 3885 001e 83F83820 		strb	r2, [r3, #56]
1912:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1913:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 3886              		.loc 1 1913 0 is_stmt 1 discriminator 2
 3887 0022 7B68     		ldr	r3, [r7, #4]
 3888 0024 2422     		movs	r2, #36
 3889 0026 83F83920 		strb	r2, [r3, #57]
1914:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1915:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
1916:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   tmpreg = huart->Instance->CR1;
 3890              		.loc 1 1916 0 discriminator 2
 3891 002a 7B68     		ldr	r3, [r7, #4]
 3892 002c 1B68     		ldr	r3, [r3]
 3893 002e DB68     		ldr	r3, [r3, #12]
 3894 0030 FB60     		str	r3, [r7, #12]
1917:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1918:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Clear TE and RE bits */
1919:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 3895              		.loc 1 1919 0 discriminator 2
 3896 0032 FB68     		ldr	r3, [r7, #12]
 3897 0034 23F00C03 		bic	r3, r3, #12
 3898 0038 FB60     		str	r3, [r7, #12]
1920:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1921:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
1922:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   tmpreg |= (uint32_t)USART_CR1_RE;
 3899              		.loc 1 1922 0 discriminator 2
 3900 003a FB68     		ldr	r3, [r7, #12]
 3901 003c 43F00403 		orr	r3, r3, #4
ARM GAS  /tmp/ccnvFOuI.s 			page 102


 3902 0040 FB60     		str	r3, [r7, #12]
1923:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1924:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Write to USART CR1 */
1925:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 3903              		.loc 1 1925 0 discriminator 2
 3904 0042 7B68     		ldr	r3, [r7, #4]
 3905 0044 1B68     		ldr	r3, [r3]
 3906 0046 FA68     		ldr	r2, [r7, #12]
 3907 0048 DA60     		str	r2, [r3, #12]
1926:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1927:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 3908              		.loc 1 1927 0 discriminator 2
 3909 004a 7B68     		ldr	r3, [r7, #4]
 3910 004c 2022     		movs	r2, #32
 3911 004e 83F83920 		strb	r2, [r3, #57]
1928:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1929:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process Unlocked */
1930:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 3912              		.loc 1 1930 0 discriminator 2
 3913 0052 7B68     		ldr	r3, [r7, #4]
 3914 0054 0022     		movs	r2, #0
 3915 0056 83F83820 		strb	r2, [r3, #56]
1931:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1932:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK; 
 3916              		.loc 1 1932 0 discriminator 2
 3917 005a 0023     		movs	r3, #0
 3918              	.L178:
1933:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 3919              		.loc 1 1933 0
 3920 005c 1846     		mov	r0, r3
 3921 005e 1437     		adds	r7, r7, #20
 3922              	.LCFI196:
 3923              		.cfi_def_cfa_offset 4
 3924 0060 BD46     		mov	sp, r7
 3925              	.LCFI197:
 3926              		.cfi_def_cfa_register 13
 3927              		@ sp needed
 3928 0062 5DF8047B 		ldr	r7, [sp], #4
 3929              	.LCFI198:
 3930              		.cfi_restore 7
 3931              		.cfi_def_cfa_offset 0
 3932 0066 7047     		bx	lr
 3933              		.cfi_endproc
 3934              	.LFE158:
 3936              		.section	.text.HAL_UART_GetState,"ax",%progbits
 3937              		.align	2
 3938              		.global	HAL_UART_GetState
 3939              		.thumb
 3940              		.thumb_func
 3942              	HAL_UART_GetState:
 3943              	.LFB159:
1934:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1935:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1936:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @}
1937:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1938:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1939:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group4 Peripheral State and Errors functions 
ARM GAS  /tmp/ccnvFOuI.s 			page 103


1940:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *  @brief   UART State and Errors functions 
1941:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *
1942:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** @verbatim   
1943:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ==============================================================================
1944:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****                  ##### Peripheral State and Errors functions #####
1945:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ==============================================================================  
1946:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****  [..]
1947:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    This subsection provides a set of functions allowing to return the State of 
1948:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    UART communication process, return Peripheral Errors occurred during communication 
1949:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    process
1950:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    (+) HAL_UART_GetState() API can be helpful to check in run-time the state of the UART peripheral
1951:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    (+) HAL_UART_GetError() check in run-time errors that could be occurred during communication. 
1952:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1953:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** @endverbatim
1954:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @{
1955:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1956:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1957:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1958:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Returns the UART state.
1959:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
1960:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1961:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL state
1962:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1963:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
1964:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 3944              		.loc 1 1964 0
 3945              		.cfi_startproc
 3946              		@ args = 0, pretend = 0, frame = 16
 3947              		@ frame_needed = 1, uses_anonymous_args = 0
 3948              		@ link register save eliminated.
 3949 0000 80B4     		push	{r7}
 3950              	.LCFI199:
 3951              		.cfi_def_cfa_offset 4
 3952              		.cfi_offset 7, -4
 3953 0002 85B0     		sub	sp, sp, #20
 3954              	.LCFI200:
 3955              		.cfi_def_cfa_offset 24
 3956 0004 00AF     		add	r7, sp, #0
 3957              	.LCFI201:
 3958              		.cfi_def_cfa_register 7
 3959 0006 7860     		str	r0, [r7, #4]
1965:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint32_t temp1= 0x00U, temp2 = 0x00U;
 3960              		.loc 1 1965 0
 3961 0008 0023     		movs	r3, #0
 3962 000a FB60     		str	r3, [r7, #12]
 3963 000c 0023     		movs	r3, #0
 3964 000e BB60     		str	r3, [r7, #8]
1966:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   temp1 = huart->gState;
 3965              		.loc 1 1966 0
 3966 0010 7B68     		ldr	r3, [r7, #4]
 3967 0012 93F83930 		ldrb	r3, [r3, #57]
 3968 0016 DBB2     		uxtb	r3, r3
 3969 0018 FB60     		str	r3, [r7, #12]
1967:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   temp2 = huart->RxState;
 3970              		.loc 1 1967 0
 3971 001a 7B68     		ldr	r3, [r7, #4]
 3972 001c 93F83A30 		ldrb	r3, [r3, #58]
ARM GAS  /tmp/ccnvFOuI.s 			page 104


 3973 0020 DBB2     		uxtb	r3, r3
 3974 0022 BB60     		str	r3, [r7, #8]
1968:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1969:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return (HAL_UART_StateTypeDef)(temp1 | temp2);
 3975              		.loc 1 1969 0
 3976 0024 FB68     		ldr	r3, [r7, #12]
 3977 0026 DAB2     		uxtb	r2, r3
 3978 0028 BB68     		ldr	r3, [r7, #8]
 3979 002a DBB2     		uxtb	r3, r3
 3980 002c 1343     		orrs	r3, r3, r2
 3981 002e DBB2     		uxtb	r3, r3
1970:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 3982              		.loc 1 1970 0
 3983 0030 1846     		mov	r0, r3
 3984 0032 1437     		adds	r7, r7, #20
 3985              	.LCFI202:
 3986              		.cfi_def_cfa_offset 4
 3987 0034 BD46     		mov	sp, r7
 3988              	.LCFI203:
 3989              		.cfi_def_cfa_register 13
 3990              		@ sp needed
 3991 0036 5DF8047B 		ldr	r7, [sp], #4
 3992              	.LCFI204:
 3993              		.cfi_restore 7
 3994              		.cfi_def_cfa_offset 0
 3995 003a 7047     		bx	lr
 3996              		.cfi_endproc
 3997              	.LFE159:
 3999              		.section	.text.HAL_UART_GetError,"ax",%progbits
 4000              		.align	2
 4001              		.global	HAL_UART_GetError
 4002              		.thumb
 4003              		.thumb_func
 4005              	HAL_UART_GetError:
 4006              	.LFB160:
1971:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1972:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1973:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Return the UART error code
1974:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart  pointer to a UART_HandleTypeDef structure that contains
1975:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *              the configuration information for the specified UART.
1976:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval UART Error Code
1977:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1978:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
1979:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 4007              		.loc 1 1979 0
 4008              		.cfi_startproc
 4009              		@ args = 0, pretend = 0, frame = 8
 4010              		@ frame_needed = 1, uses_anonymous_args = 0
 4011              		@ link register save eliminated.
 4012 0000 80B4     		push	{r7}
 4013              	.LCFI205:
 4014              		.cfi_def_cfa_offset 4
 4015              		.cfi_offset 7, -4
 4016 0002 83B0     		sub	sp, sp, #12
 4017              	.LCFI206:
 4018              		.cfi_def_cfa_offset 16
 4019 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccnvFOuI.s 			page 105


 4020              	.LCFI207:
 4021              		.cfi_def_cfa_register 7
 4022 0006 7860     		str	r0, [r7, #4]
1980:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return huart->ErrorCode;
 4023              		.loc 1 1980 0
 4024 0008 7B68     		ldr	r3, [r7, #4]
 4025 000a DB6B     		ldr	r3, [r3, #60]
1981:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 4026              		.loc 1 1981 0
 4027 000c 1846     		mov	r0, r3
 4028 000e 0C37     		adds	r7, r7, #12
 4029              	.LCFI208:
 4030              		.cfi_def_cfa_offset 4
 4031 0010 BD46     		mov	sp, r7
 4032              	.LCFI209:
 4033              		.cfi_def_cfa_register 13
 4034              		@ sp needed
 4035 0012 5DF8047B 		ldr	r7, [sp], #4
 4036              	.LCFI210:
 4037              		.cfi_restore 7
 4038              		.cfi_def_cfa_offset 0
 4039 0016 7047     		bx	lr
 4040              		.cfi_endproc
 4041              	.LFE160:
 4043              		.section	.text.UART_DMATransmitCplt,"ax",%progbits
 4044              		.align	2
 4045              		.thumb
 4046              		.thumb_func
 4048              	UART_DMATransmitCplt:
 4049              	.LFB161:
1982:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1983:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1984:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @}
1985:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1986:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1987:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1988:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  DMA UART transmit process complete callback. 
1989:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  hdma DMA handle
1990:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
1991:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1992:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
1993:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 4050              		.loc 1 1993 0
 4051              		.cfi_startproc
 4052              		@ args = 0, pretend = 0, frame = 16
 4053              		@ frame_needed = 1, uses_anonymous_args = 0
 4054 0000 80B5     		push	{r7, lr}
 4055              	.LCFI211:
 4056              		.cfi_def_cfa_offset 8
 4057              		.cfi_offset 7, -8
 4058              		.cfi_offset 14, -4
 4059 0002 84B0     		sub	sp, sp, #16
 4060              	.LCFI212:
 4061              		.cfi_def_cfa_offset 24
 4062 0004 00AF     		add	r7, sp, #0
 4063              	.LCFI213:
 4064              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccnvFOuI.s 			page 106


 4065 0006 7860     		str	r0, [r7, #4]
1994:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 4066              		.loc 1 1994 0
 4067 0008 7B68     		ldr	r3, [r7, #4]
 4068 000a 9B6B     		ldr	r3, [r3, #56]
 4069 000c FB60     		str	r3, [r7, #12]
1995:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* DMA Normal mode*/
1996:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 4070              		.loc 1 1996 0
 4071 000e 7B68     		ldr	r3, [r7, #4]
 4072 0010 1B68     		ldr	r3, [r3]
 4073 0012 1B68     		ldr	r3, [r3]
 4074 0014 03F48073 		and	r3, r3, #256
 4075 0018 002B     		cmp	r3, #0
 4076 001a 13D1     		bne	.L184
1997:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1998:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->TxXferCount = 0U;
 4077              		.loc 1 1998 0
 4078 001c FB68     		ldr	r3, [r7, #12]
 4079 001e 0022     		movs	r2, #0
 4080 0020 DA84     		strh	r2, [r3, #38]	@ movhi
1999:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2000:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Disable the DMA transfer for transmit request by setting the DMAT bit
2001:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        in the UART CR3 register */
2002:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 4081              		.loc 1 2002 0
 4082 0022 FB68     		ldr	r3, [r7, #12]
 4083 0024 1B68     		ldr	r3, [r3]
 4084 0026 FA68     		ldr	r2, [r7, #12]
 4085 0028 1268     		ldr	r2, [r2]
 4086 002a 5269     		ldr	r2, [r2, #20]
 4087 002c 22F08002 		bic	r2, r2, #128
 4088 0030 5A61     		str	r2, [r3, #20]
2003:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2004:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Enable the UART Transmit Complete Interrupt */
2005:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 4089              		.loc 1 2005 0
 4090 0032 FB68     		ldr	r3, [r7, #12]
 4091 0034 1B68     		ldr	r3, [r3]
 4092 0036 FA68     		ldr	r2, [r7, #12]
 4093 0038 1268     		ldr	r2, [r2]
 4094 003a D268     		ldr	r2, [r2, #12]
 4095 003c 42F04002 		orr	r2, r2, #64
 4096 0040 DA60     		str	r2, [r3, #12]
 4097 0042 02E0     		b	.L183
 4098              	.L184:
2006:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2007:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
2008:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* DMA Circular mode */
2009:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
2010:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
2011:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     HAL_UART_TxCpltCallback(huart);
 4099              		.loc 1 2011 0
 4100 0044 F868     		ldr	r0, [r7, #12]
 4101 0046 FFF7FEFF 		bl	HAL_UART_TxCpltCallback
 4102              	.L183:
2012:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
ARM GAS  /tmp/ccnvFOuI.s 			page 107


2013:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 4103              		.loc 1 2013 0
 4104 004a 1037     		adds	r7, r7, #16
 4105              	.LCFI214:
 4106              		.cfi_def_cfa_offset 8
 4107 004c BD46     		mov	sp, r7
 4108              	.LCFI215:
 4109              		.cfi_def_cfa_register 13
 4110              		@ sp needed
 4111 004e 80BD     		pop	{r7, pc}
 4112              		.cfi_endproc
 4113              	.LFE161:
 4115              		.section	.text.UART_DMATxHalfCplt,"ax",%progbits
 4116              		.align	2
 4117              		.thumb
 4118              		.thumb_func
 4120              	UART_DMATxHalfCplt:
 4121              	.LFB162:
2014:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2015:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2016:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief DMA UART transmit process half complete callback 
2017:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
2018:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified DMA module.
2019:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
2020:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2021:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
2022:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 4122              		.loc 1 2022 0
 4123              		.cfi_startproc
 4124              		@ args = 0, pretend = 0, frame = 16
 4125              		@ frame_needed = 1, uses_anonymous_args = 0
 4126 0000 80B5     		push	{r7, lr}
 4127              	.LCFI216:
 4128              		.cfi_def_cfa_offset 8
 4129              		.cfi_offset 7, -8
 4130              		.cfi_offset 14, -4
 4131 0002 84B0     		sub	sp, sp, #16
 4132              	.LCFI217:
 4133              		.cfi_def_cfa_offset 24
 4134 0004 00AF     		add	r7, sp, #0
 4135              	.LCFI218:
 4136              		.cfi_def_cfa_register 7
 4137 0006 7860     		str	r0, [r7, #4]
2023:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 4138              		.loc 1 2023 0
 4139 0008 7B68     		ldr	r3, [r7, #4]
 4140 000a 9B6B     		ldr	r3, [r3, #56]
 4141 000c FB60     		str	r3, [r7, #12]
2024:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2025:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   HAL_UART_TxHalfCpltCallback(huart);
 4142              		.loc 1 2025 0
 4143 000e F868     		ldr	r0, [r7, #12]
 4144 0010 FFF7FEFF 		bl	HAL_UART_TxHalfCpltCallback
2026:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 4145              		.loc 1 2026 0
 4146 0014 1037     		adds	r7, r7, #16
 4147              	.LCFI219:
ARM GAS  /tmp/ccnvFOuI.s 			page 108


 4148              		.cfi_def_cfa_offset 8
 4149 0016 BD46     		mov	sp, r7
 4150              	.LCFI220:
 4151              		.cfi_def_cfa_register 13
 4152              		@ sp needed
 4153 0018 80BD     		pop	{r7, pc}
 4154              		.cfi_endproc
 4155              	.LFE162:
 4157 001a 00BF     		.section	.text.UART_DMAReceiveCplt,"ax",%progbits
 4158              		.align	2
 4159              		.thumb
 4160              		.thumb_func
 4162              	UART_DMAReceiveCplt:
 4163              	.LFB163:
2027:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2028:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2029:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  DMA UART receive process complete callback. 
2030:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  hdma DMA handle
2031:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
2032:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2033:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
2034:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 4164              		.loc 1 2034 0
 4165              		.cfi_startproc
 4166              		@ args = 0, pretend = 0, frame = 16
 4167              		@ frame_needed = 1, uses_anonymous_args = 0
 4168 0000 80B5     		push	{r7, lr}
 4169              	.LCFI221:
 4170              		.cfi_def_cfa_offset 8
 4171              		.cfi_offset 7, -8
 4172              		.cfi_offset 14, -4
 4173 0002 84B0     		sub	sp, sp, #16
 4174              	.LCFI222:
 4175              		.cfi_def_cfa_offset 24
 4176 0004 00AF     		add	r7, sp, #0
 4177              	.LCFI223:
 4178              		.cfi_def_cfa_register 7
 4179 0006 7860     		str	r0, [r7, #4]
2035:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 4180              		.loc 1 2035 0
 4181 0008 7B68     		ldr	r3, [r7, #4]
 4182 000a 9B6B     		ldr	r3, [r3, #56]
 4183 000c FB60     		str	r3, [r7, #12]
2036:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* DMA Normal mode*/
2037:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 4184              		.loc 1 2037 0
 4185 000e 7B68     		ldr	r3, [r7, #4]
 4186 0010 1B68     		ldr	r3, [r3]
 4187 0012 1B68     		ldr	r3, [r3]
 4188 0014 03F48073 		and	r3, r3, #256
 4189 0018 002B     		cmp	r3, #0
 4190 001a 1ED1     		bne	.L188
2038:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
2039:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxXferCount = 0U;
 4191              		.loc 1 2039 0
 4192 001c FB68     		ldr	r3, [r7, #12]
 4193 001e 0022     		movs	r2, #0
ARM GAS  /tmp/ccnvFOuI.s 			page 109


 4194 0020 DA85     		strh	r2, [r3, #46]	@ movhi
2040:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
2041:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
2042:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 4195              		.loc 1 2042 0
 4196 0022 FB68     		ldr	r3, [r7, #12]
 4197 0024 1B68     		ldr	r3, [r3]
 4198 0026 FA68     		ldr	r2, [r7, #12]
 4199 0028 1268     		ldr	r2, [r2]
 4200 002a D268     		ldr	r2, [r2, #12]
 4201 002c 22F48072 		bic	r2, r2, #256
 4202 0030 DA60     		str	r2, [r3, #12]
2043:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 4203              		.loc 1 2043 0
 4204 0032 FB68     		ldr	r3, [r7, #12]
 4205 0034 1B68     		ldr	r3, [r3]
 4206 0036 FA68     		ldr	r2, [r7, #12]
 4207 0038 1268     		ldr	r2, [r2]
 4208 003a 5269     		ldr	r2, [r2, #20]
 4209 003c 22F00102 		bic	r2, r2, #1
 4210 0040 5A61     		str	r2, [r3, #20]
2044:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
2045:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
2046:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        in the UART CR3 register */
2047:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 4211              		.loc 1 2047 0
 4212 0042 FB68     		ldr	r3, [r7, #12]
 4213 0044 1B68     		ldr	r3, [r3]
 4214 0046 FA68     		ldr	r2, [r7, #12]
 4215 0048 1268     		ldr	r2, [r2]
 4216 004a 5269     		ldr	r2, [r2, #20]
 4217 004c 22F04002 		bic	r2, r2, #64
 4218 0050 5A61     		str	r2, [r3, #20]
2048:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 	
2049:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
2050:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 4219              		.loc 1 2050 0
 4220 0052 FB68     		ldr	r3, [r7, #12]
 4221 0054 2022     		movs	r2, #32
 4222 0056 83F83A20 		strb	r2, [r3, #58]
 4223              	.L188:
2051:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
2052:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   HAL_UART_RxCpltCallback(huart);
 4224              		.loc 1 2052 0
 4225 005a F868     		ldr	r0, [r7, #12]
 4226 005c FFF7FEFF 		bl	HAL_UART_RxCpltCallback
2053:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 4227              		.loc 1 2053 0
 4228 0060 1037     		adds	r7, r7, #16
 4229              	.LCFI224:
 4230              		.cfi_def_cfa_offset 8
 4231 0062 BD46     		mov	sp, r7
 4232              	.LCFI225:
 4233              		.cfi_def_cfa_register 13
 4234              		@ sp needed
 4235 0064 80BD     		pop	{r7, pc}
 4236              		.cfi_endproc
ARM GAS  /tmp/ccnvFOuI.s 			page 110


 4237              	.LFE163:
 4239 0066 00BF     		.section	.text.UART_DMARxHalfCplt,"ax",%progbits
 4240              		.align	2
 4241              		.thumb
 4242              		.thumb_func
 4244              	UART_DMARxHalfCplt:
 4245              	.LFB164:
2054:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2055:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2056:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief DMA UART receive process half complete callback 
2057:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
2058:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified DMA module.
2059:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
2060:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2061:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
2062:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 4246              		.loc 1 2062 0
 4247              		.cfi_startproc
 4248              		@ args = 0, pretend = 0, frame = 16
 4249              		@ frame_needed = 1, uses_anonymous_args = 0
 4250 0000 80B5     		push	{r7, lr}
 4251              	.LCFI226:
 4252              		.cfi_def_cfa_offset 8
 4253              		.cfi_offset 7, -8
 4254              		.cfi_offset 14, -4
 4255 0002 84B0     		sub	sp, sp, #16
 4256              	.LCFI227:
 4257              		.cfi_def_cfa_offset 24
 4258 0004 00AF     		add	r7, sp, #0
 4259              	.LCFI228:
 4260              		.cfi_def_cfa_register 7
 4261 0006 7860     		str	r0, [r7, #4]
2063:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 4262              		.loc 1 2063 0
 4263 0008 7B68     		ldr	r3, [r7, #4]
 4264 000a 9B6B     		ldr	r3, [r3, #56]
 4265 000c FB60     		str	r3, [r7, #12]
2064:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2065:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   HAL_UART_RxHalfCpltCallback(huart); 
 4266              		.loc 1 2065 0
 4267 000e F868     		ldr	r0, [r7, #12]
 4268 0010 FFF7FEFF 		bl	HAL_UART_RxHalfCpltCallback
2066:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 4269              		.loc 1 2066 0
 4270 0014 1037     		adds	r7, r7, #16
 4271              	.LCFI229:
 4272              		.cfi_def_cfa_offset 8
 4273 0016 BD46     		mov	sp, r7
 4274              	.LCFI230:
 4275              		.cfi_def_cfa_register 13
 4276              		@ sp needed
 4277 0018 80BD     		pop	{r7, pc}
 4278              		.cfi_endproc
 4279              	.LFE164:
 4281 001a 00BF     		.section	.text.UART_DMAError,"ax",%progbits
 4282              		.align	2
 4283              		.thumb
ARM GAS  /tmp/ccnvFOuI.s 			page 111


 4284              		.thumb_func
 4286              	UART_DMAError:
 4287              	.LFB165:
2067:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2068:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2069:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  DMA UART communication error callback.
2070:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  hdma DMA handle
2071:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
2072:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2073:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMAError(DMA_HandleTypeDef *hdma)
2074:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 4288              		.loc 1 2074 0
 4289              		.cfi_startproc
 4290              		@ args = 0, pretend = 0, frame = 16
 4291              		@ frame_needed = 1, uses_anonymous_args = 0
 4292 0000 80B5     		push	{r7, lr}
 4293              	.LCFI231:
 4294              		.cfi_def_cfa_offset 8
 4295              		.cfi_offset 7, -8
 4296              		.cfi_offset 14, -4
 4297 0002 84B0     		sub	sp, sp, #16
 4298              	.LCFI232:
 4299              		.cfi_def_cfa_offset 24
 4300 0004 00AF     		add	r7, sp, #0
 4301              	.LCFI233:
 4302              		.cfi_def_cfa_register 7
 4303 0006 7860     		str	r0, [r7, #4]
2075:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
 4304              		.loc 1 2075 0
 4305 0008 0023     		movs	r3, #0
 4306 000a FB60     		str	r3, [r7, #12]
2076:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 4307              		.loc 1 2076 0
 4308 000c 7B68     		ldr	r3, [r7, #4]
 4309 000e 9B6B     		ldr	r3, [r3, #56]
 4310 0010 BB60     		str	r3, [r7, #8]
2077:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2078:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Stop UART DMA Tx request if ongoing */
2079:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 4311              		.loc 1 2079 0
 4312 0012 BB68     		ldr	r3, [r7, #8]
 4313 0014 1B68     		ldr	r3, [r3]
 4314 0016 5B69     		ldr	r3, [r3, #20]
 4315 0018 03F08003 		and	r3, r3, #128
 4316 001c 002B     		cmp	r3, #0
 4317 001e 14BF     		ite	ne
 4318 0020 0123     		movne	r3, #1
 4319 0022 0023     		moveq	r3, #0
 4320 0024 DBB2     		uxtb	r3, r3
 4321 0026 FB60     		str	r3, [r7, #12]
2080:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 4322              		.loc 1 2080 0
 4323 0028 BB68     		ldr	r3, [r7, #8]
 4324 002a 93F83930 		ldrb	r3, [r3, #57]
 4325 002e DBB2     		uxtb	r3, r3
 4326 0030 212B     		cmp	r3, #33
 4327 0032 08D1     		bne	.L191
ARM GAS  /tmp/ccnvFOuI.s 			page 112


 4328              		.loc 1 2080 0 is_stmt 0 discriminator 1
 4329 0034 FB68     		ldr	r3, [r7, #12]
 4330 0036 002B     		cmp	r3, #0
 4331 0038 05D0     		beq	.L191
2081:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
2082:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->TxXferCount = 0U;
 4332              		.loc 1 2082 0 is_stmt 1
 4333 003a BB68     		ldr	r3, [r7, #8]
 4334 003c 0022     		movs	r2, #0
 4335 003e DA84     		strh	r2, [r3, #38]	@ movhi
2083:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     UART_EndTxTransfer(huart);
 4336              		.loc 1 2083 0
 4337 0040 B868     		ldr	r0, [r7, #8]
 4338 0042 FFF7FEFF 		bl	UART_EndTxTransfer
 4339              	.L191:
2084:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
2085:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2086:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Stop UART DMA Rx request if ongoing */
2087:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 4340              		.loc 1 2087 0
 4341 0046 BB68     		ldr	r3, [r7, #8]
 4342 0048 1B68     		ldr	r3, [r3]
 4343 004a 5B69     		ldr	r3, [r3, #20]
 4344 004c 03F04003 		and	r3, r3, #64
 4345 0050 002B     		cmp	r3, #0
 4346 0052 14BF     		ite	ne
 4347 0054 0123     		movne	r3, #1
 4348 0056 0023     		moveq	r3, #0
 4349 0058 DBB2     		uxtb	r3, r3
 4350 005a FB60     		str	r3, [r7, #12]
2088:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 4351              		.loc 1 2088 0
 4352 005c BB68     		ldr	r3, [r7, #8]
 4353 005e 93F83A30 		ldrb	r3, [r3, #58]
 4354 0062 DBB2     		uxtb	r3, r3
 4355 0064 222B     		cmp	r3, #34
 4356 0066 08D1     		bne	.L192
 4357              		.loc 1 2088 0 is_stmt 0 discriminator 1
 4358 0068 FB68     		ldr	r3, [r7, #12]
 4359 006a 002B     		cmp	r3, #0
 4360 006c 05D0     		beq	.L192
2089:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
2090:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxXferCount = 0U;
 4361              		.loc 1 2090 0 is_stmt 1
 4362 006e BB68     		ldr	r3, [r7, #8]
 4363 0070 0022     		movs	r2, #0
 4364 0072 DA85     		strh	r2, [r3, #46]	@ movhi
2091:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     UART_EndRxTransfer(huart);
 4365              		.loc 1 2091 0
 4366 0074 B868     		ldr	r0, [r7, #8]
 4367 0076 FFF7FEFF 		bl	UART_EndRxTransfer
 4368              	.L192:
2092:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
2093:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2094:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->ErrorCode |= HAL_UART_ERROR_DMA;
 4369              		.loc 1 2094 0
 4370 007a BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/ccnvFOuI.s 			page 113


 4371 007c DB6B     		ldr	r3, [r3, #60]
 4372 007e 43F01002 		orr	r2, r3, #16
 4373 0082 BB68     		ldr	r3, [r7, #8]
 4374 0084 DA63     		str	r2, [r3, #60]
2095:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   HAL_UART_ErrorCallback(huart);
 4375              		.loc 1 2095 0
 4376 0086 B868     		ldr	r0, [r7, #8]
 4377 0088 FFF7FEFF 		bl	HAL_UART_ErrorCallback
2096:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 4378              		.loc 1 2096 0
 4379 008c 1037     		adds	r7, r7, #16
 4380              	.LCFI234:
 4381              		.cfi_def_cfa_offset 8
 4382 008e BD46     		mov	sp, r7
 4383              	.LCFI235:
 4384              		.cfi_def_cfa_register 13
 4385              		@ sp needed
 4386 0090 80BD     		pop	{r7, pc}
 4387              		.cfi_endproc
 4388              	.LFE165:
 4390 0092 00BF     		.section	.text.UART_WaitOnFlagUntilTimeout,"ax",%progbits
 4391              		.align	2
 4392              		.thumb
 4393              		.thumb_func
 4395              	UART_WaitOnFlagUntilTimeout:
 4396              	.LFB166:
2097:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2098:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2099:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  This function handles UART Communication Timeout.
2100:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
2101:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2102:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  Flag specifies the UART flag to check.
2103:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  Status The new Flag status (SET or RESET).
2104:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  Tickstart Tick start value
2105:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  Timeout Timeout duration
2106:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
2107:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2108:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, Flag
2109:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 4397              		.loc 1 2109 0
 4398              		.cfi_startproc
 4399              		@ args = 4, pretend = 0, frame = 16
 4400              		@ frame_needed = 1, uses_anonymous_args = 0
 4401 0000 80B5     		push	{r7, lr}
 4402              	.LCFI236:
 4403              		.cfi_def_cfa_offset 8
 4404              		.cfi_offset 7, -8
 4405              		.cfi_offset 14, -4
 4406 0002 84B0     		sub	sp, sp, #16
 4407              	.LCFI237:
 4408              		.cfi_def_cfa_offset 24
 4409 0004 00AF     		add	r7, sp, #0
 4410              	.LCFI238:
 4411              		.cfi_def_cfa_register 7
 4412 0006 F860     		str	r0, [r7, #12]
 4413 0008 B960     		str	r1, [r7, #8]
 4414 000a 3B60     		str	r3, [r7]
ARM GAS  /tmp/ccnvFOuI.s 			page 114


 4415 000c 1346     		mov	r3, r2
 4416 000e FB71     		strb	r3, [r7, #7]
2110:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Wait until flag is set */
2111:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 4417              		.loc 1 2111 0
 4418 0010 2CE0     		b	.L194
 4419              	.L197:
2112:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
2113:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Check for the Timeout */
2114:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(Timeout != HAL_MAX_DELAY)
 4420              		.loc 1 2114 0
 4421 0012 BB69     		ldr	r3, [r7, #24]
 4422 0014 B3F1FF3F 		cmp	r3, #-1
 4423 0018 28D0     		beq	.L194
2115:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2116:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 4424              		.loc 1 2116 0
 4425 001a BB69     		ldr	r3, [r7, #24]
 4426 001c 002B     		cmp	r3, #0
 4427 001e 07D0     		beq	.L195
 4428              		.loc 1 2116 0 is_stmt 0 discriminator 1
 4429 0020 FFF7FEFF 		bl	HAL_GetTick
 4430 0024 0246     		mov	r2, r0
 4431 0026 3B68     		ldr	r3, [r7]
 4432 0028 D21A     		subs	r2, r2, r3
 4433 002a BB69     		ldr	r3, [r7, #24]
 4434 002c 9A42     		cmp	r2, r3
 4435 002e 1DD9     		bls	.L194
 4436              	.L195:
2117:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
2118:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for t
2119:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 4437              		.loc 1 2119 0 is_stmt 1
 4438 0030 FB68     		ldr	r3, [r7, #12]
 4439 0032 1B68     		ldr	r3, [r3]
 4440 0034 FA68     		ldr	r2, [r7, #12]
 4441 0036 1268     		ldr	r2, [r2]
 4442 0038 D268     		ldr	r2, [r2, #12]
 4443 003a 22F4D072 		bic	r2, r2, #416
 4444 003e DA60     		str	r2, [r3, #12]
2120:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 4445              		.loc 1 2120 0
 4446 0040 FB68     		ldr	r3, [r7, #12]
 4447 0042 1B68     		ldr	r3, [r3]
 4448 0044 FA68     		ldr	r2, [r7, #12]
 4449 0046 1268     		ldr	r2, [r2]
 4450 0048 5269     		ldr	r2, [r2, #20]
 4451 004a 22F00102 		bic	r2, r2, #1
 4452 004e 5A61     		str	r2, [r3, #20]
2121:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         
2122:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->gState  = HAL_UART_STATE_READY;
 4453              		.loc 1 2122 0
 4454 0050 FB68     		ldr	r3, [r7, #12]
 4455 0052 2022     		movs	r2, #32
 4456 0054 83F83920 		strb	r2, [r3, #57]
2123:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->RxState = HAL_UART_STATE_READY;
 4457              		.loc 1 2123 0
ARM GAS  /tmp/ccnvFOuI.s 			page 115


 4458 0058 FB68     		ldr	r3, [r7, #12]
 4459 005a 2022     		movs	r2, #32
 4460 005c 83F83A20 		strb	r2, [r3, #58]
2124:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         
2125:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /* Process Unlocked */
2126:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         __HAL_UNLOCK(huart);
 4461              		.loc 1 2126 0
 4462 0060 FB68     		ldr	r3, [r7, #12]
 4463 0062 0022     		movs	r2, #0
 4464 0064 83F83820 		strb	r2, [r3, #56]
2127:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         
2128:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         return HAL_TIMEOUT;
 4465              		.loc 1 2128 0
 4466 0068 0323     		movs	r3, #3
 4467 006a 0FE0     		b	.L196
 4468              	.L194:
2111:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 4469              		.loc 1 2111 0
 4470 006c FB68     		ldr	r3, [r7, #12]
 4471 006e 1B68     		ldr	r3, [r3]
 4472 0070 1A68     		ldr	r2, [r3]
 4473 0072 BB68     		ldr	r3, [r7, #8]
 4474 0074 1A40     		ands	r2, r2, r3
 4475 0076 BB68     		ldr	r3, [r7, #8]
 4476 0078 9A42     		cmp	r2, r3
 4477 007a 0CBF     		ite	eq
 4478 007c 0123     		moveq	r3, #1
 4479 007e 0023     		movne	r3, #0
 4480 0080 DBB2     		uxtb	r3, r3
 4481 0082 1A46     		mov	r2, r3
 4482 0084 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4483 0086 9A42     		cmp	r2, r3
 4484 0088 C3D0     		beq	.L197
2129:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
2130:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
2131:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
2132:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
2133:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 4485              		.loc 1 2133 0
 4486 008a 0023     		movs	r3, #0
 4487              	.L196:
2134:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 4488              		.loc 1 2134 0
 4489 008c 1846     		mov	r0, r3
 4490 008e 1037     		adds	r7, r7, #16
 4491              	.LCFI239:
 4492              		.cfi_def_cfa_offset 8
 4493 0090 BD46     		mov	sp, r7
 4494              	.LCFI240:
 4495              		.cfi_def_cfa_register 13
 4496              		@ sp needed
 4497 0092 80BD     		pop	{r7, pc}
 4498              		.cfi_endproc
 4499              	.LFE166:
 4501              		.section	.text.UART_EndTxTransfer,"ax",%progbits
 4502              		.align	2
 4503              		.thumb
ARM GAS  /tmp/ccnvFOuI.s 			page 116


 4504              		.thumb_func
 4506              	UART_EndTxTransfer:
 4507              	.LFB167:
2135:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2136:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2137:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit compl
2138:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart UART handle.
2139:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
2140:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2141:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
2142:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 4508              		.loc 1 2142 0
 4509              		.cfi_startproc
 4510              		@ args = 0, pretend = 0, frame = 8
 4511              		@ frame_needed = 1, uses_anonymous_args = 0
 4512              		@ link register save eliminated.
 4513 0000 80B4     		push	{r7}
 4514              	.LCFI241:
 4515              		.cfi_def_cfa_offset 4
 4516              		.cfi_offset 7, -4
 4517 0002 83B0     		sub	sp, sp, #12
 4518              	.LCFI242:
 4519              		.cfi_def_cfa_offset 16
 4520 0004 00AF     		add	r7, sp, #0
 4521              	.LCFI243:
 4522              		.cfi_def_cfa_register 7
 4523 0006 7860     		str	r0, [r7, #4]
2143:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
2144:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 4524              		.loc 1 2144 0
 4525 0008 7B68     		ldr	r3, [r7, #4]
 4526 000a 1B68     		ldr	r3, [r3]
 4527 000c 7A68     		ldr	r2, [r7, #4]
 4528 000e 1268     		ldr	r2, [r2]
 4529 0010 D268     		ldr	r2, [r2, #12]
 4530 0012 22F0C002 		bic	r2, r2, #192
 4531 0016 DA60     		str	r2, [r3, #12]
2145:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2146:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* At end of Tx process, restore huart->gState to Ready */
2147:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 4532              		.loc 1 2147 0
 4533 0018 7B68     		ldr	r3, [r7, #4]
 4534 001a 2022     		movs	r2, #32
 4535 001c 83F83920 		strb	r2, [r3, #57]
2148:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 4536              		.loc 1 2148 0
 4537 0020 0C37     		adds	r7, r7, #12
 4538              	.LCFI244:
 4539              		.cfi_def_cfa_offset 4
 4540 0022 BD46     		mov	sp, r7
 4541              	.LCFI245:
 4542              		.cfi_def_cfa_register 13
 4543              		@ sp needed
 4544 0024 5DF8047B 		ldr	r7, [sp], #4
 4545              	.LCFI246:
 4546              		.cfi_restore 7
 4547              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccnvFOuI.s 			page 117


 4548 0028 7047     		bx	lr
 4549              		.cfi_endproc
 4550              	.LFE167:
 4552 002a 00BF     		.section	.text.UART_EndRxTransfer,"ax",%progbits
 4553              		.align	2
 4554              		.thumb
 4555              		.thumb_func
 4557              	UART_EndRxTransfer:
 4558              	.LFB168:
2149:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2150:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2151:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception comp
2152:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart UART handle.
2153:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
2154:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2155:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
2156:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 4559              		.loc 1 2156 0
 4560              		.cfi_startproc
 4561              		@ args = 0, pretend = 0, frame = 8
 4562              		@ frame_needed = 1, uses_anonymous_args = 0
 4563              		@ link register save eliminated.
 4564 0000 80B4     		push	{r7}
 4565              	.LCFI247:
 4566              		.cfi_def_cfa_offset 4
 4567              		.cfi_offset 7, -4
 4568 0002 83B0     		sub	sp, sp, #12
 4569              	.LCFI248:
 4570              		.cfi_def_cfa_offset 16
 4571 0004 00AF     		add	r7, sp, #0
 4572              	.LCFI249:
 4573              		.cfi_def_cfa_register 7
 4574 0006 7860     		str	r0, [r7, #4]
2157:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
2158:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 4575              		.loc 1 2158 0
 4576 0008 7B68     		ldr	r3, [r7, #4]
 4577 000a 1B68     		ldr	r3, [r3]
 4578 000c 7A68     		ldr	r2, [r7, #4]
 4579 000e 1268     		ldr	r2, [r2]
 4580 0010 D268     		ldr	r2, [r2, #12]
 4581 0012 22F49072 		bic	r2, r2, #288
 4582 0016 DA60     		str	r2, [r3, #12]
2159:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 4583              		.loc 1 2159 0
 4584 0018 7B68     		ldr	r3, [r7, #4]
 4585 001a 1B68     		ldr	r3, [r3]
 4586 001c 7A68     		ldr	r2, [r7, #4]
 4587 001e 1268     		ldr	r2, [r2]
 4588 0020 5269     		ldr	r2, [r2, #20]
 4589 0022 22F00102 		bic	r2, r2, #1
 4590 0026 5A61     		str	r2, [r3, #20]
2160:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2161:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* At end of Rx process, restore huart->RxState to Ready */
2162:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 4591              		.loc 1 2162 0
 4592 0028 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccnvFOuI.s 			page 118


 4593 002a 2022     		movs	r2, #32
 4594 002c 83F83A20 		strb	r2, [r3, #58]
2163:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 4595              		.loc 1 2163 0
 4596 0030 0C37     		adds	r7, r7, #12
 4597              	.LCFI250:
 4598              		.cfi_def_cfa_offset 4
 4599 0032 BD46     		mov	sp, r7
 4600              	.LCFI251:
 4601              		.cfi_def_cfa_register 13
 4602              		@ sp needed
 4603 0034 5DF8047B 		ldr	r7, [sp], #4
 4604              	.LCFI252:
 4605              		.cfi_restore 7
 4606              		.cfi_def_cfa_offset 0
 4607 0038 7047     		bx	lr
 4608              		.cfi_endproc
 4609              	.LFE168:
 4611 003a 00BF     		.section	.text.UART_DMAAbortOnError,"ax",%progbits
 4612              		.align	2
 4613              		.thumb
 4614              		.thumb_func
 4616              	UART_DMAAbortOnError:
 4617              	.LFB169:
2164:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2165:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2166:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  DMA UART communication abort callback, when initiated by HAL services on Error
2167:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         (To be called at end of DMA Abort procedure following error occurrence).
2168:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  hdma DMA handle.
2169:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
2170:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2171:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
2172:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 4618              		.loc 1 2172 0
 4619              		.cfi_startproc
 4620              		@ args = 0, pretend = 0, frame = 16
 4621              		@ frame_needed = 1, uses_anonymous_args = 0
 4622 0000 80B5     		push	{r7, lr}
 4623              	.LCFI253:
 4624              		.cfi_def_cfa_offset 8
 4625              		.cfi_offset 7, -8
 4626              		.cfi_offset 14, -4
 4627 0002 84B0     		sub	sp, sp, #16
 4628              	.LCFI254:
 4629              		.cfi_def_cfa_offset 24
 4630 0004 00AF     		add	r7, sp, #0
 4631              	.LCFI255:
 4632              		.cfi_def_cfa_register 7
 4633 0006 7860     		str	r0, [r7, #4]
2173:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 4634              		.loc 1 2173 0
 4635 0008 7B68     		ldr	r3, [r7, #4]
 4636 000a 9B6B     		ldr	r3, [r3, #56]
 4637 000c FB60     		str	r3, [r7, #12]
2174:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxXferCount = 0U;
 4638              		.loc 1 2174 0
 4639 000e FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccnvFOuI.s 			page 119


 4640 0010 0022     		movs	r2, #0
 4641 0012 DA85     		strh	r2, [r3, #46]	@ movhi
2175:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->TxXferCount = 0U;
 4642              		.loc 1 2175 0
 4643 0014 FB68     		ldr	r3, [r7, #12]
 4644 0016 0022     		movs	r2, #0
 4645 0018 DA84     		strh	r2, [r3, #38]	@ movhi
2176:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2177:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   HAL_UART_ErrorCallback(huart);
 4646              		.loc 1 2177 0
 4647 001a F868     		ldr	r0, [r7, #12]
 4648 001c FFF7FEFF 		bl	HAL_UART_ErrorCallback
2178:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 4649              		.loc 1 2178 0
 4650 0020 1037     		adds	r7, r7, #16
 4651              	.LCFI256:
 4652              		.cfi_def_cfa_offset 8
 4653 0022 BD46     		mov	sp, r7
 4654              	.LCFI257:
 4655              		.cfi_def_cfa_register 13
 4656              		@ sp needed
 4657 0024 80BD     		pop	{r7, pc}
 4658              		.cfi_endproc
 4659              	.LFE169:
 4661 0026 00BF     		.section	.text.UART_DMATxAbortCallback,"ax",%progbits
 4662              		.align	2
 4663              		.thumb
 4664              		.thumb_func
 4666              	UART_DMATxAbortCallback:
 4667              	.LFB170:
2179:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2180:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2181:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  DMA UART Tx communication abort callback, when initiated by user
2182:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         (To be called at end of DMA Tx Abort procedure following user abort request).
2183:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
2184:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         Abort still ongoing for Rx DMA Handle.
2185:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  hdma DMA handle.
2186:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
2187:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2188:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
2189:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 4668              		.loc 1 2189 0
 4669              		.cfi_startproc
 4670              		@ args = 0, pretend = 0, frame = 16
 4671              		@ frame_needed = 1, uses_anonymous_args = 0
 4672 0000 80B5     		push	{r7, lr}
 4673              	.LCFI258:
 4674              		.cfi_def_cfa_offset 8
 4675              		.cfi_offset 7, -8
 4676              		.cfi_offset 14, -4
 4677 0002 84B0     		sub	sp, sp, #16
 4678              	.LCFI259:
 4679              		.cfi_def_cfa_offset 24
 4680 0004 00AF     		add	r7, sp, #0
 4681              	.LCFI260:
 4682              		.cfi_def_cfa_register 7
 4683 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccnvFOuI.s 			page 120


2190:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 4684              		.loc 1 2190 0
 4685 0008 7B68     		ldr	r3, [r7, #4]
 4686 000a 9B6B     		ldr	r3, [r3, #56]
 4687 000c FB60     		str	r3, [r7, #12]
2191:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
2192:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->hdmatx->XferAbortCallback = NULL;
 4688              		.loc 1 2192 0
 4689 000e FB68     		ldr	r3, [r7, #12]
 4690 0010 1B6B     		ldr	r3, [r3, #48]
 4691 0012 0022     		movs	r2, #0
 4692 0014 1A65     		str	r2, [r3, #80]
2193:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2194:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check if an Abort process is still ongoing */
2195:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart->hdmarx != NULL)
 4693              		.loc 1 2195 0
 4694 0016 FB68     		ldr	r3, [r7, #12]
 4695 0018 5B6B     		ldr	r3, [r3, #52]
 4696 001a 002B     		cmp	r3, #0
 4697 001c 05D0     		beq	.L202
2196:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
2197:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(huart->hdmarx->XferAbortCallback != NULL)
 4698              		.loc 1 2197 0
 4699 001e FB68     		ldr	r3, [r7, #12]
 4700 0020 5B6B     		ldr	r3, [r3, #52]
 4701 0022 1B6D     		ldr	r3, [r3, #80]
 4702 0024 002B     		cmp	r3, #0
 4703 0026 00D0     		beq	.L202
2198:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2199:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       return;
 4704              		.loc 1 2199 0
 4705 0028 13E0     		b	.L201
 4706              	.L202:
2200:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
2201:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
2202:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2203:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
2204:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 4707              		.loc 1 2204 0
 4708 002a FB68     		ldr	r3, [r7, #12]
 4709 002c 0022     		movs	r2, #0
 4710 002e DA84     		strh	r2, [r3, #38]	@ movhi
2205:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 4711              		.loc 1 2205 0
 4712 0030 FB68     		ldr	r3, [r7, #12]
 4713 0032 0022     		movs	r2, #0
 4714 0034 DA85     		strh	r2, [r3, #46]	@ movhi
2206:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2207:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Reset ErrorCode */
2208:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 4715              		.loc 1 2208 0
 4716 0036 FB68     		ldr	r3, [r7, #12]
 4717 0038 0022     		movs	r2, #0
 4718 003a DA63     		str	r2, [r3, #60]
2209:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2210:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
2211:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
ARM GAS  /tmp/ccnvFOuI.s 			page 121


 4719              		.loc 1 2211 0
 4720 003c FB68     		ldr	r3, [r7, #12]
 4721 003e 2022     		movs	r2, #32
 4722 0040 83F83920 		strb	r2, [r3, #57]
2212:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 4723              		.loc 1 2212 0
 4724 0044 FB68     		ldr	r3, [r7, #12]
 4725 0046 2022     		movs	r2, #32
 4726 0048 83F83A20 		strb	r2, [r3, #58]
2213:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2214:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Call user Abort complete callback */
2215:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   HAL_UART_AbortCpltCallback(huart);
 4727              		.loc 1 2215 0
 4728 004c F868     		ldr	r0, [r7, #12]
 4729 004e FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 4730              	.L201:
2216:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 4731              		.loc 1 2216 0
 4732 0052 1037     		adds	r7, r7, #16
 4733              	.LCFI261:
 4734              		.cfi_def_cfa_offset 8
 4735 0054 BD46     		mov	sp, r7
 4736              	.LCFI262:
 4737              		.cfi_def_cfa_register 13
 4738              		@ sp needed
 4739 0056 80BD     		pop	{r7, pc}
 4740              		.cfi_endproc
 4741              	.LFE170:
 4743              		.section	.text.UART_DMARxAbortCallback,"ax",%progbits
 4744              		.align	2
 4745              		.thumb
 4746              		.thumb_func
 4748              	UART_DMARxAbortCallback:
 4749              	.LFB171:
2217:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2218:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2219:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  DMA UART Rx communication abort callback, when initiated by user
2220:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         (To be called at end of DMA Rx Abort procedure following user abort request).
2221:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
2222:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         Abort still ongoing for Tx DMA Handle.
2223:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  hdma DMA handle.
2224:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
2225:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2226:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
2227:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 4750              		.loc 1 2227 0
 4751              		.cfi_startproc
 4752              		@ args = 0, pretend = 0, frame = 16
 4753              		@ frame_needed = 1, uses_anonymous_args = 0
 4754 0000 80B5     		push	{r7, lr}
 4755              	.LCFI263:
 4756              		.cfi_def_cfa_offset 8
 4757              		.cfi_offset 7, -8
 4758              		.cfi_offset 14, -4
 4759 0002 84B0     		sub	sp, sp, #16
 4760              	.LCFI264:
 4761              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/ccnvFOuI.s 			page 122


 4762 0004 00AF     		add	r7, sp, #0
 4763              	.LCFI265:
 4764              		.cfi_def_cfa_register 7
 4765 0006 7860     		str	r0, [r7, #4]
2228:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 4766              		.loc 1 2228 0
 4767 0008 7B68     		ldr	r3, [r7, #4]
 4768 000a 9B6B     		ldr	r3, [r3, #56]
 4769 000c FB60     		str	r3, [r7, #12]
2229:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
2230:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->hdmarx->XferAbortCallback = NULL;
 4770              		.loc 1 2230 0
 4771 000e FB68     		ldr	r3, [r7, #12]
 4772 0010 5B6B     		ldr	r3, [r3, #52]
 4773 0012 0022     		movs	r2, #0
 4774 0014 1A65     		str	r2, [r3, #80]
2231:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2232:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check if an Abort process is still ongoing */
2233:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart->hdmatx != NULL)
 4775              		.loc 1 2233 0
 4776 0016 FB68     		ldr	r3, [r7, #12]
 4777 0018 1B6B     		ldr	r3, [r3, #48]
 4778 001a 002B     		cmp	r3, #0
 4779 001c 05D0     		beq	.L205
2234:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
2235:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(huart->hdmatx->XferAbortCallback != NULL)
 4780              		.loc 1 2235 0
 4781 001e FB68     		ldr	r3, [r7, #12]
 4782 0020 1B6B     		ldr	r3, [r3, #48]
 4783 0022 1B6D     		ldr	r3, [r3, #80]
 4784 0024 002B     		cmp	r3, #0
 4785 0026 00D0     		beq	.L205
2236:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2237:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       return;
 4786              		.loc 1 2237 0
 4787 0028 13E0     		b	.L204
 4788              	.L205:
2238:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
2239:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
2240:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
2241:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
2242:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 4789              		.loc 1 2242 0
 4790 002a FB68     		ldr	r3, [r7, #12]
 4791 002c 0022     		movs	r2, #0
 4792 002e DA84     		strh	r2, [r3, #38]	@ movhi
2243:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 4793              		.loc 1 2243 0
 4794 0030 FB68     		ldr	r3, [r7, #12]
 4795 0032 0022     		movs	r2, #0
 4796 0034 DA85     		strh	r2, [r3, #46]	@ movhi
2244:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2245:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Reset ErrorCode */
2246:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 4797              		.loc 1 2246 0
 4798 0036 FB68     		ldr	r3, [r7, #12]
 4799 0038 0022     		movs	r2, #0
ARM GAS  /tmp/ccnvFOuI.s 			page 123


 4800 003a DA63     		str	r2, [r3, #60]
2247:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2248:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
2249:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
 4801              		.loc 1 2249 0
 4802 003c FB68     		ldr	r3, [r7, #12]
 4803 003e 2022     		movs	r2, #32
 4804 0040 83F83920 		strb	r2, [r3, #57]
2250:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 4805              		.loc 1 2250 0
 4806 0044 FB68     		ldr	r3, [r7, #12]
 4807 0046 2022     		movs	r2, #32
 4808 0048 83F83A20 		strb	r2, [r3, #58]
2251:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2252:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Call user Abort complete callback */
2253:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   HAL_UART_AbortCpltCallback(huart);
 4809              		.loc 1 2253 0
 4810 004c F868     		ldr	r0, [r7, #12]
 4811 004e FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 4812              	.L204:
2254:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 4813              		.loc 1 2254 0
 4814 0052 1037     		adds	r7, r7, #16
 4815              	.LCFI266:
 4816              		.cfi_def_cfa_offset 8
 4817 0054 BD46     		mov	sp, r7
 4818              	.LCFI267:
 4819              		.cfi_def_cfa_register 13
 4820              		@ sp needed
 4821 0056 80BD     		pop	{r7, pc}
 4822              		.cfi_endproc
 4823              	.LFE171:
 4825              		.section	.text.UART_DMATxOnlyAbortCallback,"ax",%progbits
 4826              		.align	2
 4827              		.thumb
 4828              		.thumb_func
 4830              	UART_DMATxOnlyAbortCallback:
 4831              	.LFB172:
2255:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2256:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2257:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  DMA UART Tx communication abort callback, when initiated by user by a call to
2258:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         HAL_UART_AbortTransmit_IT API (Abort only Tx transfer)
2259:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         (This callback is executed at end of DMA Tx Abort procedure following user abort reques
2260:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         and leads to user Tx Abort Complete callback execution).
2261:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  hdma DMA handle.
2262:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
2263:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2264:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
2265:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 4832              		.loc 1 2265 0
 4833              		.cfi_startproc
 4834              		@ args = 0, pretend = 0, frame = 16
 4835              		@ frame_needed = 1, uses_anonymous_args = 0
 4836 0000 80B5     		push	{r7, lr}
 4837              	.LCFI268:
 4838              		.cfi_def_cfa_offset 8
 4839              		.cfi_offset 7, -8
ARM GAS  /tmp/ccnvFOuI.s 			page 124


 4840              		.cfi_offset 14, -4
 4841 0002 84B0     		sub	sp, sp, #16
 4842              	.LCFI269:
 4843              		.cfi_def_cfa_offset 24
 4844 0004 00AF     		add	r7, sp, #0
 4845              	.LCFI270:
 4846              		.cfi_def_cfa_register 7
 4847 0006 7860     		str	r0, [r7, #4]
2266:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 4848              		.loc 1 2266 0
 4849 0008 7B68     		ldr	r3, [r7, #4]
 4850 000a 9B6B     		ldr	r3, [r3, #56]
 4851 000c FB60     		str	r3, [r7, #12]
2267:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2268:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 4852              		.loc 1 2268 0
 4853 000e FB68     		ldr	r3, [r7, #12]
 4854 0010 0022     		movs	r2, #0
 4855 0012 DA84     		strh	r2, [r3, #38]	@ movhi
2269:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2270:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Restore huart->gState to Ready */
2271:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 4856              		.loc 1 2271 0
 4857 0014 FB68     		ldr	r3, [r7, #12]
 4858 0016 2022     		movs	r2, #32
 4859 0018 83F83920 		strb	r2, [r3, #57]
2272:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2273:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Call user Abort complete callback */
2274:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   HAL_UART_AbortTransmitCpltCallback(huart);
 4860              		.loc 1 2274 0
 4861 001c F868     		ldr	r0, [r7, #12]
 4862 001e FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
2275:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 4863              		.loc 1 2275 0
 4864 0022 1037     		adds	r7, r7, #16
 4865              	.LCFI271:
 4866              		.cfi_def_cfa_offset 8
 4867 0024 BD46     		mov	sp, r7
 4868              	.LCFI272:
 4869              		.cfi_def_cfa_register 13
 4870              		@ sp needed
 4871 0026 80BD     		pop	{r7, pc}
 4872              		.cfi_endproc
 4873              	.LFE172:
 4875              		.section	.text.UART_DMARxOnlyAbortCallback,"ax",%progbits
 4876              		.align	2
 4877              		.thumb
 4878              		.thumb_func
 4880              	UART_DMARxOnlyAbortCallback:
 4881              	.LFB173:
2276:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2277:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2278:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  DMA UART Rx communication abort callback, when initiated by user by a call to
2279:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         HAL_UART_AbortReceive_IT API (Abort only Rx transfer)
2280:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         (This callback is executed at end of DMA Rx Abort procedure following user abort reques
2281:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         and leads to user Rx Abort Complete callback execution).
2282:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  hdma DMA handle.
ARM GAS  /tmp/ccnvFOuI.s 			page 125


2283:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
2284:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2285:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
2286:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 4882              		.loc 1 2286 0
 4883              		.cfi_startproc
 4884              		@ args = 0, pretend = 0, frame = 16
 4885              		@ frame_needed = 1, uses_anonymous_args = 0
 4886 0000 80B5     		push	{r7, lr}
 4887              	.LCFI273:
 4888              		.cfi_def_cfa_offset 8
 4889              		.cfi_offset 7, -8
 4890              		.cfi_offset 14, -4
 4891 0002 84B0     		sub	sp, sp, #16
 4892              	.LCFI274:
 4893              		.cfi_def_cfa_offset 24
 4894 0004 00AF     		add	r7, sp, #0
 4895              	.LCFI275:
 4896              		.cfi_def_cfa_register 7
 4897 0006 7860     		str	r0, [r7, #4]
2287:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 4898              		.loc 1 2287 0
 4899 0008 7B68     		ldr	r3, [r7, #4]
 4900 000a 9B6B     		ldr	r3, [r3, #56]
 4901 000c FB60     		str	r3, [r7, #12]
2288:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2289:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 4902              		.loc 1 2289 0
 4903 000e FB68     		ldr	r3, [r7, #12]
 4904 0010 0022     		movs	r2, #0
 4905 0012 DA85     		strh	r2, [r3, #46]	@ movhi
2290:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2291:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Restore huart->RxState to Ready */
2292:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 4906              		.loc 1 2292 0
 4907 0014 FB68     		ldr	r3, [r7, #12]
 4908 0016 2022     		movs	r2, #32
 4909 0018 83F83A20 		strb	r2, [r3, #58]
2293:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2294:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Call user Abort complete callback */
2295:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   HAL_UART_AbortReceiveCpltCallback(huart);
 4910              		.loc 1 2295 0
 4911 001c F868     		ldr	r0, [r7, #12]
 4912 001e FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
2296:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 4913              		.loc 1 2296 0
 4914 0022 1037     		adds	r7, r7, #16
 4915              	.LCFI276:
 4916              		.cfi_def_cfa_offset 8
 4917 0024 BD46     		mov	sp, r7
 4918              	.LCFI277:
 4919              		.cfi_def_cfa_register 13
 4920              		@ sp needed
 4921 0026 80BD     		pop	{r7, pc}
 4922              		.cfi_endproc
 4923              	.LFE173:
 4925              		.section	.text.UART_Transmit_IT,"ax",%progbits
ARM GAS  /tmp/ccnvFOuI.s 			page 126


 4926              		.align	2
 4927              		.thumb
 4928              		.thumb_func
 4930              	UART_Transmit_IT:
 4931              	.LFB174:
2297:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2298:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2299:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Sends an amount of data in non blocking mode.
2300:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
2301:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2302:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
2303:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2304:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
2305:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 4932              		.loc 1 2305 0
 4933              		.cfi_startproc
 4934              		@ args = 0, pretend = 0, frame = 16
 4935              		@ frame_needed = 1, uses_anonymous_args = 0
 4936              		@ link register save eliminated.
 4937 0000 80B4     		push	{r7}
 4938              	.LCFI278:
 4939              		.cfi_def_cfa_offset 4
 4940              		.cfi_offset 7, -4
 4941 0002 85B0     		sub	sp, sp, #20
 4942              	.LCFI279:
 4943              		.cfi_def_cfa_offset 24
 4944 0004 00AF     		add	r7, sp, #0
 4945              	.LCFI280:
 4946              		.cfi_def_cfa_register 7
 4947 0006 7860     		str	r0, [r7, #4]
2306:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint16_t* tmp;
2307:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
2308:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check that a Tx process is ongoing */
2309:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_BUSY_TX)
 4948              		.loc 1 2309 0
 4949 0008 7B68     		ldr	r3, [r7, #4]
 4950 000a 93F83930 		ldrb	r3, [r3, #57]
 4951 000e DBB2     		uxtb	r3, r3
 4952 0010 212B     		cmp	r3, #33
 4953 0012 43D1     		bne	.L210
2310:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
2311:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 4954              		.loc 1 2311 0
 4955 0014 7B68     		ldr	r3, [r7, #4]
 4956 0016 9B68     		ldr	r3, [r3, #8]
 4957 0018 B3F5805F 		cmp	r3, #4096
 4958 001c 19D1     		bne	.L211
2312:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2313:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       tmp = (uint16_t*) huart->pTxBuffPtr;
 4959              		.loc 1 2313 0
 4960 001e 7B68     		ldr	r3, [r7, #4]
 4961 0020 1B6A     		ldr	r3, [r3, #32]
 4962 0022 FB60     		str	r3, [r7, #12]
2314:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 4963              		.loc 1 2314 0
 4964 0024 7B68     		ldr	r3, [r7, #4]
 4965 0026 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccnvFOuI.s 			page 127


 4966 0028 FA68     		ldr	r2, [r7, #12]
 4967 002a 1288     		ldrh	r2, [r2]
 4968 002c C2F30802 		ubfx	r2, r2, #0, #9
 4969 0030 5A60     		str	r2, [r3, #4]
2315:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if(huart->Init.Parity == UART_PARITY_NONE)
 4970              		.loc 1 2315 0
 4971 0032 7B68     		ldr	r3, [r7, #4]
 4972 0034 1B69     		ldr	r3, [r3, #16]
 4973 0036 002B     		cmp	r3, #0
 4974 0038 05D1     		bne	.L212
2316:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
2317:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->pTxBuffPtr += 2U;
 4975              		.loc 1 2317 0
 4976 003a 7B68     		ldr	r3, [r7, #4]
 4977 003c 1B6A     		ldr	r3, [r3, #32]
 4978 003e 9A1C     		adds	r2, r3, #2
 4979 0040 7B68     		ldr	r3, [r7, #4]
 4980 0042 1A62     		str	r2, [r3, #32]
 4981 0044 0EE0     		b	.L214
 4982              	.L212:
2318:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
2319:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       else
2320:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
2321:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->pTxBuffPtr += 1U;
 4983              		.loc 1 2321 0
 4984 0046 7B68     		ldr	r3, [r7, #4]
 4985 0048 1B6A     		ldr	r3, [r3, #32]
 4986 004a 5A1C     		adds	r2, r3, #1
 4987 004c 7B68     		ldr	r3, [r7, #4]
 4988 004e 1A62     		str	r2, [r3, #32]
 4989 0050 08E0     		b	.L214
 4990              	.L211:
2322:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
2323:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     } 
2324:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     else
2325:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2326:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 4991              		.loc 1 2326 0
 4992 0052 7B68     		ldr	r3, [r7, #4]
 4993 0054 1A68     		ldr	r2, [r3]
 4994 0056 7B68     		ldr	r3, [r7, #4]
 4995 0058 1B6A     		ldr	r3, [r3, #32]
 4996 005a 581C     		adds	r0, r3, #1
 4997 005c 7968     		ldr	r1, [r7, #4]
 4998 005e 0862     		str	r0, [r1, #32]
 4999 0060 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5000 0062 5360     		str	r3, [r2, #4]
 5001              	.L214:
2327:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
2328:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2329:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(--huart->TxXferCount == 0U)
 5002              		.loc 1 2329 0
 5003 0064 7B68     		ldr	r3, [r7, #4]
 5004 0066 DB8C     		ldrh	r3, [r3, #38]	@ movhi
 5005 0068 9BB2     		uxth	r3, r3
 5006 006a 013B     		subs	r3, r3, #1
 5007 006c 9BB2     		uxth	r3, r3
ARM GAS  /tmp/ccnvFOuI.s 			page 128


 5008 006e 7A68     		ldr	r2, [r7, #4]
 5009 0070 1946     		mov	r1, r3	@ movhi
 5010 0072 D184     		strh	r1, [r2, #38]	@ movhi
 5011 0074 002B     		cmp	r3, #0
 5012 0076 0FD1     		bne	.L215
2330:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2331:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Disable the UART Transmit Complete Interrupt */
2332:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 5013              		.loc 1 2332 0
 5014 0078 7B68     		ldr	r3, [r7, #4]
 5015 007a 1B68     		ldr	r3, [r3]
 5016 007c 7A68     		ldr	r2, [r7, #4]
 5017 007e 1268     		ldr	r2, [r2]
 5018 0080 D268     		ldr	r2, [r2, #12]
 5019 0082 22F08002 		bic	r2, r2, #128
 5020 0086 DA60     		str	r2, [r3, #12]
2333:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2334:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Enable the UART Transmit Complete Interrupt */    
2335:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 5021              		.loc 1 2335 0
 5022 0088 7B68     		ldr	r3, [r7, #4]
 5023 008a 1B68     		ldr	r3, [r3]
 5024 008c 7A68     		ldr	r2, [r7, #4]
 5025 008e 1268     		ldr	r2, [r2]
 5026 0090 D268     		ldr	r2, [r2, #12]
 5027 0092 42F04002 		orr	r2, r2, #64
 5028 0096 DA60     		str	r2, [r3, #12]
 5029              	.L215:
2336:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
2337:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_OK;
 5030              		.loc 1 2337 0
 5031 0098 0023     		movs	r3, #0
 5032 009a 00E0     		b	.L216
 5033              	.L210:
2338:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
2339:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
2340:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
2341:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_BUSY;
 5034              		.loc 1 2341 0
 5035 009c 0223     		movs	r3, #2
 5036              	.L216:
2342:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
2343:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 5037              		.loc 1 2343 0
 5038 009e 1846     		mov	r0, r3
 5039 00a0 1437     		adds	r7, r7, #20
 5040              	.LCFI281:
 5041              		.cfi_def_cfa_offset 4
 5042 00a2 BD46     		mov	sp, r7
 5043              	.LCFI282:
 5044              		.cfi_def_cfa_register 13
 5045              		@ sp needed
 5046 00a4 5DF8047B 		ldr	r7, [sp], #4
 5047              	.LCFI283:
 5048              		.cfi_restore 7
 5049              		.cfi_def_cfa_offset 0
 5050 00a8 7047     		bx	lr
ARM GAS  /tmp/ccnvFOuI.s 			page 129


 5051              		.cfi_endproc
 5052              	.LFE174:
 5054 00aa 00BF     		.section	.text.UART_EndTransmit_IT,"ax",%progbits
 5055              		.align	2
 5056              		.thumb
 5057              		.thumb_func
 5059              	UART_EndTransmit_IT:
 5060              	.LFB175:
2344:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2345:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2346:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Wraps up transmission in non blocking mode.
2347:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
2348:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2349:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
2350:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2351:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
2352:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 5061              		.loc 1 2352 0
 5062              		.cfi_startproc
 5063              		@ args = 0, pretend = 0, frame = 8
 5064              		@ frame_needed = 1, uses_anonymous_args = 0
 5065 0000 80B5     		push	{r7, lr}
 5066              	.LCFI284:
 5067              		.cfi_def_cfa_offset 8
 5068              		.cfi_offset 7, -8
 5069              		.cfi_offset 14, -4
 5070 0002 82B0     		sub	sp, sp, #8
 5071              	.LCFI285:
 5072              		.cfi_def_cfa_offset 16
 5073 0004 00AF     		add	r7, sp, #0
 5074              	.LCFI286:
 5075              		.cfi_def_cfa_register 7
 5076 0006 7860     		str	r0, [r7, #4]
2353:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable the UART Transmit Complete Interrupt */    
2354:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 5077              		.loc 1 2354 0
 5078 0008 7B68     		ldr	r3, [r7, #4]
 5079 000a 1B68     		ldr	r3, [r3]
 5080 000c 7A68     		ldr	r2, [r7, #4]
 5081 000e 1268     		ldr	r2, [r2]
 5082 0010 D268     		ldr	r2, [r2, #12]
 5083 0012 22F04002 		bic	r2, r2, #64
 5084 0016 DA60     		str	r2, [r3, #12]
2355:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
2356:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Tx process is ended, restore huart->gState to Ready */
2357:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 5085              		.loc 1 2357 0
 5086 0018 7B68     		ldr	r3, [r7, #4]
 5087 001a 2022     		movs	r2, #32
 5088 001c 83F83920 		strb	r2, [r3, #57]
2358:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
2359:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   HAL_UART_TxCpltCallback(huart);
 5089              		.loc 1 2359 0
 5090 0020 7868     		ldr	r0, [r7, #4]
 5091 0022 FFF7FEFF 		bl	HAL_UART_TxCpltCallback
2360:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
2361:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
ARM GAS  /tmp/ccnvFOuI.s 			page 130


 5092              		.loc 1 2361 0
 5093 0026 0023     		movs	r3, #0
2362:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 5094              		.loc 1 2362 0
 5095 0028 1846     		mov	r0, r3
 5096 002a 0837     		adds	r7, r7, #8
 5097              	.LCFI287:
 5098              		.cfi_def_cfa_offset 8
 5099 002c BD46     		mov	sp, r7
 5100              	.LCFI288:
 5101              		.cfi_def_cfa_register 13
 5102              		@ sp needed
 5103 002e 80BD     		pop	{r7, pc}
 5104              		.cfi_endproc
 5105              	.LFE175:
 5107              		.section	.text.UART_Receive_IT,"ax",%progbits
 5108              		.align	2
 5109              		.thumb
 5110              		.thumb_func
 5112              	UART_Receive_IT:
 5113              	.LFB176:
2363:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2364:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2365:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Receives an amount of data in non blocking mode 
2366:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
2367:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2368:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
2369:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2370:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
2371:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 5114              		.loc 1 2371 0
 5115              		.cfi_startproc
 5116              		@ args = 0, pretend = 0, frame = 16
 5117              		@ frame_needed = 1, uses_anonymous_args = 0
 5118 0000 80B5     		push	{r7, lr}
 5119              	.LCFI289:
 5120              		.cfi_def_cfa_offset 8
 5121              		.cfi_offset 7, -8
 5122              		.cfi_offset 14, -4
 5123 0002 84B0     		sub	sp, sp, #16
 5124              	.LCFI290:
 5125              		.cfi_def_cfa_offset 24
 5126 0004 00AF     		add	r7, sp, #0
 5127              	.LCFI291:
 5128              		.cfi_def_cfa_register 7
 5129 0006 7860     		str	r0, [r7, #4]
2372:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint16_t* tmp;
2373:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
2374:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check that a Rx process is ongoing */
2375:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 5130              		.loc 1 2375 0
 5131 0008 7B68     		ldr	r3, [r7, #4]
 5132 000a 93F83A30 		ldrb	r3, [r3, #58]
 5133 000e DBB2     		uxtb	r3, r3
 5134 0010 222B     		cmp	r3, #34
 5135 0012 69D1     		bne	.L220
2376:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
ARM GAS  /tmp/ccnvFOuI.s 			page 131


2377:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 5136              		.loc 1 2377 0
 5137 0014 7B68     		ldr	r3, [r7, #4]
 5138 0016 9B68     		ldr	r3, [r3, #8]
 5139 0018 B3F5805F 		cmp	r3, #4096
 5140 001c 23D1     		bne	.L221
2378:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2379:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       tmp = (uint16_t*) huart->pRxBuffPtr;
 5141              		.loc 1 2379 0
 5142 001e 7B68     		ldr	r3, [r7, #4]
 5143 0020 9B6A     		ldr	r3, [r3, #40]
 5144 0022 FB60     		str	r3, [r7, #12]
2380:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if(huart->Init.Parity == UART_PARITY_NONE)
 5145              		.loc 1 2380 0
 5146 0024 7B68     		ldr	r3, [r7, #4]
 5147 0026 1B69     		ldr	r3, [r3, #16]
 5148 0028 002B     		cmp	r3, #0
 5149 002a 0ED1     		bne	.L222
2381:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
2382:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 5150              		.loc 1 2382 0
 5151 002c 7B68     		ldr	r3, [r7, #4]
 5152 002e 1B68     		ldr	r3, [r3]
 5153 0030 5B68     		ldr	r3, [r3, #4]
 5154 0032 9BB2     		uxth	r3, r3
 5155 0034 C3F30803 		ubfx	r3, r3, #0, #9
 5156 0038 9AB2     		uxth	r2, r3
 5157 003a FB68     		ldr	r3, [r7, #12]
 5158 003c 1A80     		strh	r2, [r3]	@ movhi
2383:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->pRxBuffPtr += 2U;
 5159              		.loc 1 2383 0
 5160 003e 7B68     		ldr	r3, [r7, #4]
 5161 0040 9B6A     		ldr	r3, [r3, #40]
 5162 0042 9A1C     		adds	r2, r3, #2
 5163 0044 7B68     		ldr	r3, [r7, #4]
 5164 0046 9A62     		str	r2, [r3, #40]
 5165 0048 29E0     		b	.L224
 5166              	.L222:
2384:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
2385:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       else
2386:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
2387:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 5167              		.loc 1 2387 0
 5168 004a 7B68     		ldr	r3, [r7, #4]
 5169 004c 1B68     		ldr	r3, [r3]
 5170 004e 5B68     		ldr	r3, [r3, #4]
 5171 0050 9BB2     		uxth	r3, r3
 5172 0052 DBB2     		uxtb	r3, r3
 5173 0054 9AB2     		uxth	r2, r3
 5174 0056 FB68     		ldr	r3, [r7, #12]
 5175 0058 1A80     		strh	r2, [r3]	@ movhi
2388:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->pRxBuffPtr += 1U;
 5176              		.loc 1 2388 0
 5177 005a 7B68     		ldr	r3, [r7, #4]
 5178 005c 9B6A     		ldr	r3, [r3, #40]
 5179 005e 5A1C     		adds	r2, r3, #1
 5180 0060 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccnvFOuI.s 			page 132


 5181 0062 9A62     		str	r2, [r3, #40]
 5182 0064 1BE0     		b	.L224
 5183              	.L221:
2389:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
2390:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
2391:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     else
2392:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2393:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if(huart->Init.Parity == UART_PARITY_NONE)
 5184              		.loc 1 2393 0
 5185 0066 7B68     		ldr	r3, [r7, #4]
 5186 0068 1B69     		ldr	r3, [r3, #16]
 5187 006a 002B     		cmp	r3, #0
 5188 006c 0AD1     		bne	.L225
2394:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
2395:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 5189              		.loc 1 2395 0
 5190 006e 7B68     		ldr	r3, [r7, #4]
 5191 0070 9B6A     		ldr	r3, [r3, #40]
 5192 0072 591C     		adds	r1, r3, #1
 5193 0074 7A68     		ldr	r2, [r7, #4]
 5194 0076 9162     		str	r1, [r2, #40]
 5195 0078 7A68     		ldr	r2, [r7, #4]
 5196 007a 1268     		ldr	r2, [r2]
 5197 007c 5268     		ldr	r2, [r2, #4]
 5198 007e D2B2     		uxtb	r2, r2
 5199 0080 1A70     		strb	r2, [r3]
 5200 0082 0CE0     		b	.L224
 5201              	.L225:
2396:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
2397:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       else
2398:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
2399:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 5202              		.loc 1 2399 0
 5203 0084 7B68     		ldr	r3, [r7, #4]
 5204 0086 9B6A     		ldr	r3, [r3, #40]
 5205 0088 591C     		adds	r1, r3, #1
 5206 008a 7A68     		ldr	r2, [r7, #4]
 5207 008c 9162     		str	r1, [r2, #40]
 5208 008e 7A68     		ldr	r2, [r7, #4]
 5209 0090 1268     		ldr	r2, [r2]
 5210 0092 5268     		ldr	r2, [r2, #4]
 5211 0094 D2B2     		uxtb	r2, r2
 5212 0096 02F07F02 		and	r2, r2, #127
 5213 009a D2B2     		uxtb	r2, r2
 5214 009c 1A70     		strb	r2, [r3]
 5215              	.L224:
2400:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
2401:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
2402:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2403:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(--huart->RxXferCount == 0U)
 5216              		.loc 1 2403 0
 5217 009e 7B68     		ldr	r3, [r7, #4]
 5218 00a0 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 5219 00a2 9BB2     		uxth	r3, r3
 5220 00a4 013B     		subs	r3, r3, #1
 5221 00a6 9BB2     		uxth	r3, r3
 5222 00a8 7A68     		ldr	r2, [r7, #4]
ARM GAS  /tmp/ccnvFOuI.s 			page 133


 5223 00aa 1946     		mov	r1, r3	@ movhi
 5224 00ac D185     		strh	r1, [r2, #46]	@ movhi
 5225 00ae 002B     		cmp	r3, #0
 5226 00b0 18D1     		bne	.L226
2404:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2405:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
2406:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 5227              		.loc 1 2406 0
 5228 00b2 7B68     		ldr	r3, [r7, #4]
 5229 00b4 1B68     		ldr	r3, [r3]
 5230 00b6 7A68     		ldr	r2, [r7, #4]
 5231 00b8 1268     		ldr	r2, [r2]
 5232 00ba D268     		ldr	r2, [r2, #12]
 5233 00bc 22F49072 		bic	r2, r2, #288
 5234 00c0 DA60     		str	r2, [r3, #12]
2407:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2408:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
2409:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 5235              		.loc 1 2409 0
 5236 00c2 7B68     		ldr	r3, [r7, #4]
 5237 00c4 1B68     		ldr	r3, [r3]
 5238 00c6 7A68     		ldr	r2, [r7, #4]
 5239 00c8 1268     		ldr	r2, [r2]
 5240 00ca 5269     		ldr	r2, [r2, #20]
 5241 00cc 22F00102 		bic	r2, r2, #1
 5242 00d0 5A61     		str	r2, [r3, #20]
2410:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2411:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Rx process is completed, restore huart->RxState to Ready */
2412:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->RxState = HAL_UART_STATE_READY;
 5243              		.loc 1 2412 0
 5244 00d2 7B68     		ldr	r3, [r7, #4]
 5245 00d4 2022     		movs	r2, #32
 5246 00d6 83F83A20 		strb	r2, [r3, #58]
2413:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      
2414:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       HAL_UART_RxCpltCallback(huart);
 5247              		.loc 1 2414 0
 5248 00da 7868     		ldr	r0, [r7, #4]
 5249 00dc FFF7FEFF 		bl	HAL_UART_RxCpltCallback
2415:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2416:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       return HAL_OK;
 5250              		.loc 1 2416 0
 5251 00e0 0023     		movs	r3, #0
 5252 00e2 02E0     		b	.L227
 5253              	.L226:
2417:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
2418:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_OK;
 5254              		.loc 1 2418 0
 5255 00e4 0023     		movs	r3, #0
 5256 00e6 00E0     		b	.L227
 5257              	.L220:
2419:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
2420:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
2421:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
2422:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_BUSY;
 5258              		.loc 1 2422 0
 5259 00e8 0223     		movs	r3, #2
 5260              	.L227:
ARM GAS  /tmp/ccnvFOuI.s 			page 134


2423:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
2424:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 5261              		.loc 1 2424 0
 5262 00ea 1846     		mov	r0, r3
 5263 00ec 1037     		adds	r7, r7, #16
 5264              	.LCFI292:
 5265              		.cfi_def_cfa_offset 8
 5266 00ee BD46     		mov	sp, r7
 5267              	.LCFI293:
 5268              		.cfi_def_cfa_register 13
 5269              		@ sp needed
 5270 00f0 80BD     		pop	{r7, pc}
 5271              		.cfi_endproc
 5272              	.LFE176:
 5274 00f2 00BF     		.section	.text.UART_SetConfig,"ax",%progbits
 5275              		.align	2
 5276              		.thumb
 5277              		.thumb_func
 5279              	UART_SetConfig:
 5280              	.LFB177:
2425:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2426:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2427:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Configures the UART peripheral. 
2428:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
2429:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2430:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
2431:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2432:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_SetConfig(UART_HandleTypeDef *huart)
2433:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 5281              		.loc 1 2433 0
 5282              		.cfi_startproc
 5283              		@ args = 0, pretend = 0, frame = 16
 5284              		@ frame_needed = 1, uses_anonymous_args = 0
 5285 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 5286              	.LCFI294:
 5287              		.cfi_def_cfa_offset 20
 5288              		.cfi_offset 4, -20
 5289              		.cfi_offset 5, -16
 5290              		.cfi_offset 6, -12
 5291              		.cfi_offset 7, -8
 5292              		.cfi_offset 14, -4
 5293 0002 85B0     		sub	sp, sp, #20
 5294              	.LCFI295:
 5295              		.cfi_def_cfa_offset 40
 5296 0004 00AF     		add	r7, sp, #0
 5297              	.LCFI296:
 5298              		.cfi_def_cfa_register 7
 5299 0006 7860     		str	r0, [r7, #4]
2434:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint32_t tmpreg = 0x00U;
 5300              		.loc 1 2434 0
 5301 0008 0023     		movs	r3, #0
 5302 000a FB60     		str	r3, [r7, #12]
2435:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
2436:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check the parameters */
2437:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
2438:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
2439:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_PARITY(huart->Init.Parity));
ARM GAS  /tmp/ccnvFOuI.s 			page 135


2440:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_MODE(huart->Init.Mode));
2441:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2442:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /*-------------------------- USART CR2 Configuration -----------------------*/
2443:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   tmpreg = huart->Instance->CR2;
 5303              		.loc 1 2443 0
 5304 000c 7B68     		ldr	r3, [r7, #4]
 5305 000e 1B68     		ldr	r3, [r3]
 5306 0010 1B69     		ldr	r3, [r3, #16]
 5307 0012 FB60     		str	r3, [r7, #12]
2444:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2445:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Clear STOP[13:12] bits */
2446:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 5308              		.loc 1 2446 0
 5309 0014 FB68     		ldr	r3, [r7, #12]
 5310 0016 23F44053 		bic	r3, r3, #12288
 5311 001a FB60     		str	r3, [r7, #12]
2447:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2448:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
2449:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   tmpreg |= (uint32_t)huart->Init.StopBits;
 5312              		.loc 1 2449 0
 5313 001c 7B68     		ldr	r3, [r7, #4]
 5314 001e DB68     		ldr	r3, [r3, #12]
 5315 0020 FA68     		ldr	r2, [r7, #12]
 5316 0022 1343     		orrs	r3, r3, r2
 5317 0024 FB60     		str	r3, [r7, #12]
2450:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
2451:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Write to USART CR2 */
2452:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 5318              		.loc 1 2452 0
 5319 0026 7B68     		ldr	r3, [r7, #4]
 5320 0028 1B68     		ldr	r3, [r3]
 5321 002a FA68     		ldr	r2, [r7, #12]
 5322 002c 1A61     		str	r2, [r3, #16]
2453:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2454:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
2455:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   tmpreg = huart->Instance->CR1;
 5323              		.loc 1 2455 0
 5324 002e 7B68     		ldr	r3, [r7, #4]
 5325 0030 1B68     		ldr	r3, [r3]
 5326 0032 DB68     		ldr	r3, [r3, #12]
 5327 0034 FB60     		str	r3, [r7, #12]
2456:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2457:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Clear M, PCE, PS, TE and RE bits */
2458:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 5328              		.loc 1 2458 0
 5329 0036 FB68     		ldr	r3, [r7, #12]
 5330 0038 23F41643 		bic	r3, r3, #38400
 5331 003c 23F00C03 		bic	r3, r3, #12
 5332 0040 FB60     		str	r3, [r7, #12]
2459:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****                                    USART_CR1_RE | USART_CR1_OVER8));
2460:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2461:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Configure the UART Word Length, Parity and mode: 
2462:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      Set the M bits according to huart->Init.WordLength value 
2463:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      Set PCE and PS bits according to huart->Init.Parity value
2464:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      Set TE and RE bits according to huart->Init.Mode value
2465:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      Set OVER8 bit according to huart->Init.OverSampling value */
2466:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.
ARM GAS  /tmp/ccnvFOuI.s 			page 136


 5333              		.loc 1 2466 0
 5334 0042 7B68     		ldr	r3, [r7, #4]
 5335 0044 9A68     		ldr	r2, [r3, #8]
 5336 0046 7B68     		ldr	r3, [r7, #4]
 5337 0048 1B69     		ldr	r3, [r3, #16]
 5338 004a 1A43     		orrs	r2, r2, r3
 5339 004c 7B68     		ldr	r3, [r7, #4]
 5340 004e 5B69     		ldr	r3, [r3, #20]
 5341 0050 1A43     		orrs	r2, r2, r3
 5342 0052 7B68     		ldr	r3, [r7, #4]
 5343 0054 DB69     		ldr	r3, [r3, #28]
 5344 0056 1343     		orrs	r3, r3, r2
 5345 0058 FA68     		ldr	r2, [r7, #12]
 5346 005a 1343     		orrs	r3, r3, r2
 5347 005c FB60     		str	r3, [r7, #12]
2467:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
2468:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Write to USART CR1 */
2469:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 5348              		.loc 1 2469 0
 5349 005e 7B68     		ldr	r3, [r7, #4]
 5350 0060 1B68     		ldr	r3, [r3]
 5351 0062 FA68     		ldr	r2, [r7, #12]
 5352 0064 DA60     		str	r2, [r3, #12]
2470:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
2471:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /*-------------------------- USART CR3 Configuration -----------------------*/  
2472:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   tmpreg = huart->Instance->CR3;
 5353              		.loc 1 2472 0
 5354 0066 7B68     		ldr	r3, [r7, #4]
 5355 0068 1B68     		ldr	r3, [r3]
 5356 006a 5B69     		ldr	r3, [r3, #20]
 5357 006c FB60     		str	r3, [r7, #12]
2473:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
2474:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Clear CTSE and RTSE bits */
2475:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 5358              		.loc 1 2475 0
 5359 006e FB68     		ldr	r3, [r7, #12]
 5360 0070 23F44073 		bic	r3, r3, #768
 5361 0074 FB60     		str	r3, [r7, #12]
2476:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
2477:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
2478:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   tmpreg |= huart->Init.HwFlowCtl;
 5362              		.loc 1 2478 0
 5363 0076 7B68     		ldr	r3, [r7, #4]
 5364 0078 9B69     		ldr	r3, [r3, #24]
 5365 007a FA68     		ldr	r2, [r7, #12]
 5366 007c 1343     		orrs	r3, r3, r2
 5367 007e FB60     		str	r3, [r7, #12]
2479:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
2480:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Write to USART CR3 */
2481:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 5368              		.loc 1 2481 0
 5369 0080 7B68     		ldr	r3, [r7, #4]
 5370 0082 1B68     		ldr	r3, [r3]
 5371 0084 FA68     		ldr	r2, [r7, #12]
 5372 0086 5A61     		str	r2, [r3, #20]
2482:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
2483:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check the Over Sampling */
ARM GAS  /tmp/ccnvFOuI.s 			page 137


2484:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 5373              		.loc 1 2484 0
 5374 0088 7B68     		ldr	r3, [r7, #4]
 5375 008a DB69     		ldr	r3, [r3, #28]
 5376 008c B3F5004F 		cmp	r3, #32768
 5377 0090 40F0E480 		bne	.L229
2485:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
2486:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /*-------------------------- USART BRR Configuration ---------------------*/
2487:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #if defined(USART6) 
2488:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if((huart->Instance == USART1) || (huart->Instance == USART6))
 5378              		.loc 1 2488 0
 5379 0094 7B68     		ldr	r3, [r7, #4]
 5380 0096 1B68     		ldr	r3, [r3]
 5381 0098 AB4A     		ldr	r2, .L236
 5382 009a 9342     		cmp	r3, r2
 5383 009c 04D0     		beq	.L230
 5384              		.loc 1 2488 0 is_stmt 0 discriminator 1
 5385 009e 7B68     		ldr	r3, [r7, #4]
 5386 00a0 1B68     		ldr	r3, [r3]
 5387 00a2 AA4A     		ldr	r2, .L236+4
 5388 00a4 9342     		cmp	r3, r2
 5389 00a6 6CD1     		bne	.L231
 5390              	.L230:
2489:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2490:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 5391              		.loc 1 2490 0 is_stmt 1
 5392 00a8 7B68     		ldr	r3, [r7, #4]
 5393 00aa 1C68     		ldr	r4, [r3]
 5394 00ac FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 5395 00b0 0246     		mov	r2, r0
 5396 00b2 1346     		mov	r3, r2
 5397 00b4 9B00     		lsls	r3, r3, #2
 5398 00b6 1344     		add	r3, r3, r2
 5399 00b8 9A00     		lsls	r2, r3, #2
 5400 00ba 1A44     		add	r2, r2, r3
 5401 00bc 7B68     		ldr	r3, [r7, #4]
 5402 00be 5B68     		ldr	r3, [r3, #4]
 5403 00c0 5B00     		lsls	r3, r3, #1
 5404 00c2 B2FBF3F3 		udiv	r3, r2, r3
 5405 00c6 A24A     		ldr	r2, .L236+8
 5406 00c8 A2FB0323 		umull	r2, r3, r2, r3
 5407 00cc 5B09     		lsrs	r3, r3, #5
 5408 00ce 1D01     		lsls	r5, r3, #4
 5409 00d0 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 5410 00d4 0246     		mov	r2, r0
 5411 00d6 1346     		mov	r3, r2
 5412 00d8 9B00     		lsls	r3, r3, #2
 5413 00da 1344     		add	r3, r3, r2
 5414 00dc 9A00     		lsls	r2, r3, #2
 5415 00de 1A44     		add	r2, r2, r3
 5416 00e0 7B68     		ldr	r3, [r7, #4]
 5417 00e2 5B68     		ldr	r3, [r3, #4]
 5418 00e4 5B00     		lsls	r3, r3, #1
 5419 00e6 B2FBF3F6 		udiv	r6, r2, r3
 5420 00ea FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 5421 00ee 0246     		mov	r2, r0
 5422 00f0 1346     		mov	r3, r2
ARM GAS  /tmp/ccnvFOuI.s 			page 138


 5423 00f2 9B00     		lsls	r3, r3, #2
 5424 00f4 1344     		add	r3, r3, r2
 5425 00f6 9A00     		lsls	r2, r3, #2
 5426 00f8 1A44     		add	r2, r2, r3
 5427 00fa 7B68     		ldr	r3, [r7, #4]
 5428 00fc 5B68     		ldr	r3, [r3, #4]
 5429 00fe 5B00     		lsls	r3, r3, #1
 5430 0100 B2FBF3F3 		udiv	r3, r2, r3
 5431 0104 924A     		ldr	r2, .L236+8
 5432 0106 A2FB0323 		umull	r2, r3, r2, r3
 5433 010a 5B09     		lsrs	r3, r3, #5
 5434 010c 6422     		movs	r2, #100
 5435 010e 02FB03F3 		mul	r3, r2, r3
 5436 0112 F31A     		subs	r3, r6, r3
 5437 0114 DB00     		lsls	r3, r3, #3
 5438 0116 3233     		adds	r3, r3, #50
 5439 0118 8D4A     		ldr	r2, .L236+8
 5440 011a A2FB0323 		umull	r2, r3, r2, r3
 5441 011e 5B09     		lsrs	r3, r3, #5
 5442 0120 03F0F803 		and	r3, r3, #248
 5443 0124 5B00     		lsls	r3, r3, #1
 5444 0126 1D44     		add	r5, r5, r3
 5445 0128 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 5446 012c 0246     		mov	r2, r0
 5447 012e 1346     		mov	r3, r2
 5448 0130 9B00     		lsls	r3, r3, #2
 5449 0132 1344     		add	r3, r3, r2
 5450 0134 9A00     		lsls	r2, r3, #2
 5451 0136 1A44     		add	r2, r2, r3
 5452 0138 7B68     		ldr	r3, [r7, #4]
 5453 013a 5B68     		ldr	r3, [r3, #4]
 5454 013c 5B00     		lsls	r3, r3, #1
 5455 013e B2FBF3F6 		udiv	r6, r2, r3
 5456 0142 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 5457 0146 0246     		mov	r2, r0
 5458 0148 1346     		mov	r3, r2
 5459 014a 9B00     		lsls	r3, r3, #2
 5460 014c 1344     		add	r3, r3, r2
 5461 014e 9A00     		lsls	r2, r3, #2
 5462 0150 1A44     		add	r2, r2, r3
 5463 0152 7B68     		ldr	r3, [r7, #4]
 5464 0154 5B68     		ldr	r3, [r3, #4]
 5465 0156 5B00     		lsls	r3, r3, #1
 5466 0158 B2FBF3F3 		udiv	r3, r2, r3
 5467 015c 7C4A     		ldr	r2, .L236+8
 5468 015e A2FB0323 		umull	r2, r3, r2, r3
 5469 0162 5B09     		lsrs	r3, r3, #5
 5470 0164 6422     		movs	r2, #100
 5471 0166 02FB03F3 		mul	r3, r2, r3
 5472 016a F31A     		subs	r3, r6, r3
 5473 016c DB00     		lsls	r3, r3, #3
 5474 016e 3233     		adds	r3, r3, #50
 5475 0170 774A     		ldr	r2, .L236+8
 5476 0172 A2FB0323 		umull	r2, r3, r2, r3
 5477 0176 5B09     		lsrs	r3, r3, #5
 5478 0178 03F00703 		and	r3, r3, #7
 5479 017c 2B44     		add	r3, r3, r5
ARM GAS  /tmp/ccnvFOuI.s 			page 139


 5480 017e A360     		str	r3, [r4, #8]
 5481 0180 53E1     		b	.L228
 5482              	.L231:
2491:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
2492:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #else
2493:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(huart->Instance == USART1)
2494:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2495:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
2496:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }	
2497:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #endif /* USART6 */
2498:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     else
2499:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2500:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 5483              		.loc 1 2500 0
 5484 0182 7B68     		ldr	r3, [r7, #4]
 5485 0184 1C68     		ldr	r4, [r3]
 5486 0186 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 5487 018a 0246     		mov	r2, r0
 5488 018c 1346     		mov	r3, r2
 5489 018e 9B00     		lsls	r3, r3, #2
 5490 0190 1344     		add	r3, r3, r2
 5491 0192 9A00     		lsls	r2, r3, #2
 5492 0194 1A44     		add	r2, r2, r3
 5493 0196 7B68     		ldr	r3, [r7, #4]
 5494 0198 5B68     		ldr	r3, [r3, #4]
 5495 019a 5B00     		lsls	r3, r3, #1
 5496 019c B2FBF3F3 		udiv	r3, r2, r3
 5497 01a0 6B4A     		ldr	r2, .L236+8
 5498 01a2 A2FB0323 		umull	r2, r3, r2, r3
 5499 01a6 5B09     		lsrs	r3, r3, #5
 5500 01a8 1D01     		lsls	r5, r3, #4
 5501 01aa FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 5502 01ae 0246     		mov	r2, r0
 5503 01b0 1346     		mov	r3, r2
 5504 01b2 9B00     		lsls	r3, r3, #2
 5505 01b4 1344     		add	r3, r3, r2
 5506 01b6 9A00     		lsls	r2, r3, #2
 5507 01b8 1A44     		add	r2, r2, r3
 5508 01ba 7B68     		ldr	r3, [r7, #4]
 5509 01bc 5B68     		ldr	r3, [r3, #4]
 5510 01be 5B00     		lsls	r3, r3, #1
 5511 01c0 B2FBF3F6 		udiv	r6, r2, r3
 5512 01c4 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 5513 01c8 0246     		mov	r2, r0
 5514 01ca 1346     		mov	r3, r2
 5515 01cc 9B00     		lsls	r3, r3, #2
 5516 01ce 1344     		add	r3, r3, r2
 5517 01d0 9A00     		lsls	r2, r3, #2
 5518 01d2 1A44     		add	r2, r2, r3
 5519 01d4 7B68     		ldr	r3, [r7, #4]
 5520 01d6 5B68     		ldr	r3, [r3, #4]
 5521 01d8 5B00     		lsls	r3, r3, #1
 5522 01da B2FBF3F3 		udiv	r3, r2, r3
 5523 01de 5C4A     		ldr	r2, .L236+8
 5524 01e0 A2FB0323 		umull	r2, r3, r2, r3
 5525 01e4 5B09     		lsrs	r3, r3, #5
 5526 01e6 6422     		movs	r2, #100
ARM GAS  /tmp/ccnvFOuI.s 			page 140


 5527 01e8 02FB03F3 		mul	r3, r2, r3
 5528 01ec F31A     		subs	r3, r6, r3
 5529 01ee DB00     		lsls	r3, r3, #3
 5530 01f0 3233     		adds	r3, r3, #50
 5531 01f2 574A     		ldr	r2, .L236+8
 5532 01f4 A2FB0323 		umull	r2, r3, r2, r3
 5533 01f8 5B09     		lsrs	r3, r3, #5
 5534 01fa 03F0F803 		and	r3, r3, #248
 5535 01fe 5B00     		lsls	r3, r3, #1
 5536 0200 1D44     		add	r5, r5, r3
 5537 0202 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 5538 0206 0246     		mov	r2, r0
 5539 0208 1346     		mov	r3, r2
 5540 020a 9B00     		lsls	r3, r3, #2
 5541 020c 1344     		add	r3, r3, r2
 5542 020e 9A00     		lsls	r2, r3, #2
 5543 0210 1A44     		add	r2, r2, r3
 5544 0212 7B68     		ldr	r3, [r7, #4]
 5545 0214 5B68     		ldr	r3, [r3, #4]
 5546 0216 5B00     		lsls	r3, r3, #1
 5547 0218 B2FBF3F6 		udiv	r6, r2, r3
 5548 021c FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 5549 0220 0246     		mov	r2, r0
 5550 0222 1346     		mov	r3, r2
 5551 0224 9B00     		lsls	r3, r3, #2
 5552 0226 1344     		add	r3, r3, r2
 5553 0228 9A00     		lsls	r2, r3, #2
 5554 022a 1A44     		add	r2, r2, r3
 5555 022c 7B68     		ldr	r3, [r7, #4]
 5556 022e 5B68     		ldr	r3, [r3, #4]
 5557 0230 5B00     		lsls	r3, r3, #1
 5558 0232 B2FBF3F3 		udiv	r3, r2, r3
 5559 0236 464A     		ldr	r2, .L236+8
 5560 0238 A2FB0323 		umull	r2, r3, r2, r3
 5561 023c 5B09     		lsrs	r3, r3, #5
 5562 023e 6422     		movs	r2, #100
 5563 0240 02FB03F3 		mul	r3, r2, r3
 5564 0244 F31A     		subs	r3, r6, r3
 5565 0246 DB00     		lsls	r3, r3, #3
 5566 0248 3233     		adds	r3, r3, #50
 5567 024a 414A     		ldr	r2, .L236+8
 5568 024c A2FB0323 		umull	r2, r3, r2, r3
 5569 0250 5B09     		lsrs	r3, r3, #5
 5570 0252 03F00703 		and	r3, r3, #7
 5571 0256 2B44     		add	r3, r3, r5
 5572 0258 A360     		str	r3, [r4, #8]
 5573 025a E6E0     		b	.L228
 5574              	.L229:
2501:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
2502:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
2503:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
2504:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
2505:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /*-------------------------- USART BRR Configuration ---------------------*/
2506:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #if defined(USART6) 
2507:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if((huart->Instance == USART1) || (huart->Instance == USART6))
 5575              		.loc 1 2507 0
 5576 025c 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccnvFOuI.s 			page 141


 5577 025e 1B68     		ldr	r3, [r3]
 5578 0260 394A     		ldr	r2, .L236
 5579 0262 9342     		cmp	r3, r2
 5580 0264 04D0     		beq	.L234
 5581              		.loc 1 2507 0 is_stmt 0 discriminator 1
 5582 0266 7B68     		ldr	r3, [r7, #4]
 5583 0268 1B68     		ldr	r3, [r3]
 5584 026a 384A     		ldr	r2, .L236+4
 5585 026c 9342     		cmp	r3, r2
 5586 026e 71D1     		bne	.L235
 5587              	.L234:
2508:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2509:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 5588              		.loc 1 2509 0 is_stmt 1
 5589 0270 7B68     		ldr	r3, [r7, #4]
 5590 0272 1C68     		ldr	r4, [r3]
 5591 0274 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 5592 0278 0246     		mov	r2, r0
 5593 027a 1346     		mov	r3, r2
 5594 027c 9B00     		lsls	r3, r3, #2
 5595 027e 1344     		add	r3, r3, r2
 5596 0280 9A00     		lsls	r2, r3, #2
 5597 0282 1A44     		add	r2, r2, r3
 5598 0284 7B68     		ldr	r3, [r7, #4]
 5599 0286 5B68     		ldr	r3, [r3, #4]
 5600 0288 9B00     		lsls	r3, r3, #2
 5601 028a B2FBF3F3 		udiv	r3, r2, r3
 5602 028e 304A     		ldr	r2, .L236+8
 5603 0290 A2FB0323 		umull	r2, r3, r2, r3
 5604 0294 5B09     		lsrs	r3, r3, #5
 5605 0296 1D01     		lsls	r5, r3, #4
 5606 0298 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 5607 029c 0246     		mov	r2, r0
 5608 029e 1346     		mov	r3, r2
 5609 02a0 9B00     		lsls	r3, r3, #2
 5610 02a2 1344     		add	r3, r3, r2
 5611 02a4 9A00     		lsls	r2, r3, #2
 5612 02a6 1A44     		add	r2, r2, r3
 5613 02a8 7B68     		ldr	r3, [r7, #4]
 5614 02aa 5B68     		ldr	r3, [r3, #4]
 5615 02ac 9B00     		lsls	r3, r3, #2
 5616 02ae B2FBF3F6 		udiv	r6, r2, r3
 5617 02b2 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 5618 02b6 0246     		mov	r2, r0
 5619 02b8 1346     		mov	r3, r2
 5620 02ba 9B00     		lsls	r3, r3, #2
 5621 02bc 1344     		add	r3, r3, r2
 5622 02be 9A00     		lsls	r2, r3, #2
 5623 02c0 1A44     		add	r2, r2, r3
 5624 02c2 7B68     		ldr	r3, [r7, #4]
 5625 02c4 5B68     		ldr	r3, [r3, #4]
 5626 02c6 9B00     		lsls	r3, r3, #2
 5627 02c8 B2FBF3F3 		udiv	r3, r2, r3
 5628 02cc 204A     		ldr	r2, .L236+8
 5629 02ce A2FB0323 		umull	r2, r3, r2, r3
 5630 02d2 5B09     		lsrs	r3, r3, #5
 5631 02d4 6422     		movs	r2, #100
ARM GAS  /tmp/ccnvFOuI.s 			page 142


 5632 02d6 02FB03F3 		mul	r3, r2, r3
 5633 02da F31A     		subs	r3, r6, r3
 5634 02dc 1B01     		lsls	r3, r3, #4
 5635 02de 3233     		adds	r3, r3, #50
 5636 02e0 1B4A     		ldr	r2, .L236+8
 5637 02e2 A2FB0323 		umull	r2, r3, r2, r3
 5638 02e6 5B09     		lsrs	r3, r3, #5
 5639 02e8 03F0F003 		and	r3, r3, #240
 5640 02ec 1D44     		add	r5, r5, r3
 5641 02ee FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 5642 02f2 0246     		mov	r2, r0
 5643 02f4 1346     		mov	r3, r2
 5644 02f6 9B00     		lsls	r3, r3, #2
 5645 02f8 1344     		add	r3, r3, r2
 5646 02fa 9A00     		lsls	r2, r3, #2
 5647 02fc 1A44     		add	r2, r2, r3
 5648 02fe 7B68     		ldr	r3, [r7, #4]
 5649 0300 5B68     		ldr	r3, [r3, #4]
 5650 0302 9B00     		lsls	r3, r3, #2
 5651 0304 B2FBF3F6 		udiv	r6, r2, r3
 5652 0308 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 5653 030c 0246     		mov	r2, r0
 5654 030e 1346     		mov	r3, r2
 5655 0310 9B00     		lsls	r3, r3, #2
 5656 0312 1344     		add	r3, r3, r2
 5657 0314 9A00     		lsls	r2, r3, #2
 5658 0316 1A44     		add	r2, r2, r3
 5659 0318 7B68     		ldr	r3, [r7, #4]
 5660 031a 5B68     		ldr	r3, [r3, #4]
 5661 031c 9B00     		lsls	r3, r3, #2
 5662 031e B2FBF3F3 		udiv	r3, r2, r3
 5663 0322 0B4A     		ldr	r2, .L236+8
 5664 0324 A2FB0323 		umull	r2, r3, r2, r3
 5665 0328 5B09     		lsrs	r3, r3, #5
 5666 032a 6422     		movs	r2, #100
 5667 032c 02FB03F3 		mul	r3, r2, r3
 5668 0330 F31A     		subs	r3, r6, r3
 5669 0332 1B01     		lsls	r3, r3, #4
 5670 0334 3233     		adds	r3, r3, #50
 5671 0336 064A     		ldr	r2, .L236+8
 5672 0338 A2FB0323 		umull	r2, r3, r2, r3
 5673 033c 5B09     		lsrs	r3, r3, #5
 5674 033e 03F00F03 		and	r3, r3, #15
 5675 0342 2B44     		add	r3, r3, r5
 5676 0344 A360     		str	r3, [r4, #8]
 5677 0346 70E0     		b	.L228
 5678              	.L237:
 5679              		.align	2
 5680              	.L236:
 5681 0348 00100140 		.word	1073811456
 5682 034c 00140140 		.word	1073812480
 5683 0350 1F85EB51 		.word	1374389535
 5684              	.L235:
2510:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
2511:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #else
2512:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(huart->Instance == USART1)
2513:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
ARM GAS  /tmp/ccnvFOuI.s 			page 143


2514:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
2515:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }	
2516:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #endif /* USART6 */
2517:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     else
2518:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2519:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 5685              		.loc 1 2519 0
 5686 0354 7B68     		ldr	r3, [r7, #4]
 5687 0356 1C68     		ldr	r4, [r3]
 5688 0358 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 5689 035c 0246     		mov	r2, r0
 5690 035e 1346     		mov	r3, r2
 5691 0360 9B00     		lsls	r3, r3, #2
 5692 0362 1344     		add	r3, r3, r2
 5693 0364 9A00     		lsls	r2, r3, #2
 5694 0366 1A44     		add	r2, r2, r3
 5695 0368 7B68     		ldr	r3, [r7, #4]
 5696 036a 5B68     		ldr	r3, [r3, #4]
 5697 036c 9B00     		lsls	r3, r3, #2
 5698 036e B2FBF3F3 		udiv	r3, r2, r3
 5699 0372 2F4A     		ldr	r2, .L238
 5700 0374 A2FB0323 		umull	r2, r3, r2, r3
 5701 0378 5B09     		lsrs	r3, r3, #5
 5702 037a 1D01     		lsls	r5, r3, #4
 5703 037c FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 5704 0380 0246     		mov	r2, r0
 5705 0382 1346     		mov	r3, r2
 5706 0384 9B00     		lsls	r3, r3, #2
 5707 0386 1344     		add	r3, r3, r2
 5708 0388 9A00     		lsls	r2, r3, #2
 5709 038a 1A44     		add	r2, r2, r3
 5710 038c 7B68     		ldr	r3, [r7, #4]
 5711 038e 5B68     		ldr	r3, [r3, #4]
 5712 0390 9B00     		lsls	r3, r3, #2
 5713 0392 B2FBF3F6 		udiv	r6, r2, r3
 5714 0396 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 5715 039a 0246     		mov	r2, r0
 5716 039c 1346     		mov	r3, r2
 5717 039e 9B00     		lsls	r3, r3, #2
 5718 03a0 1344     		add	r3, r3, r2
 5719 03a2 9A00     		lsls	r2, r3, #2
 5720 03a4 1A44     		add	r2, r2, r3
 5721 03a6 7B68     		ldr	r3, [r7, #4]
 5722 03a8 5B68     		ldr	r3, [r3, #4]
 5723 03aa 9B00     		lsls	r3, r3, #2
 5724 03ac B2FBF3F3 		udiv	r3, r2, r3
 5725 03b0 1F4A     		ldr	r2, .L238
 5726 03b2 A2FB0323 		umull	r2, r3, r2, r3
 5727 03b6 5B09     		lsrs	r3, r3, #5
 5728 03b8 6422     		movs	r2, #100
 5729 03ba 02FB03F3 		mul	r3, r2, r3
 5730 03be F31A     		subs	r3, r6, r3
 5731 03c0 1B01     		lsls	r3, r3, #4
 5732 03c2 3233     		adds	r3, r3, #50
 5733 03c4 1A4A     		ldr	r2, .L238
 5734 03c6 A2FB0323 		umull	r2, r3, r2, r3
 5735 03ca 5B09     		lsrs	r3, r3, #5
ARM GAS  /tmp/ccnvFOuI.s 			page 144


 5736 03cc 03F0F003 		and	r3, r3, #240
 5737 03d0 1D44     		add	r5, r5, r3
 5738 03d2 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 5739 03d6 0246     		mov	r2, r0
 5740 03d8 1346     		mov	r3, r2
 5741 03da 9B00     		lsls	r3, r3, #2
 5742 03dc 1344     		add	r3, r3, r2
 5743 03de 9A00     		lsls	r2, r3, #2
 5744 03e0 1A44     		add	r2, r2, r3
 5745 03e2 7B68     		ldr	r3, [r7, #4]
 5746 03e4 5B68     		ldr	r3, [r3, #4]
 5747 03e6 9B00     		lsls	r3, r3, #2
 5748 03e8 B2FBF3F6 		udiv	r6, r2, r3
 5749 03ec FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 5750 03f0 0246     		mov	r2, r0
 5751 03f2 1346     		mov	r3, r2
 5752 03f4 9B00     		lsls	r3, r3, #2
 5753 03f6 1344     		add	r3, r3, r2
 5754 03f8 9A00     		lsls	r2, r3, #2
 5755 03fa 1A44     		add	r2, r2, r3
 5756 03fc 7B68     		ldr	r3, [r7, #4]
 5757 03fe 5B68     		ldr	r3, [r3, #4]
 5758 0400 9B00     		lsls	r3, r3, #2
 5759 0402 B2FBF3F3 		udiv	r3, r2, r3
 5760 0406 0A4A     		ldr	r2, .L238
 5761 0408 A2FB0323 		umull	r2, r3, r2, r3
 5762 040c 5B09     		lsrs	r3, r3, #5
 5763 040e 6422     		movs	r2, #100
 5764 0410 02FB03F3 		mul	r3, r2, r3
 5765 0414 F31A     		subs	r3, r6, r3
 5766 0416 1B01     		lsls	r3, r3, #4
 5767 0418 3233     		adds	r3, r3, #50
 5768 041a 054A     		ldr	r2, .L238
 5769 041c A2FB0323 		umull	r2, r3, r2, r3
 5770 0420 5B09     		lsrs	r3, r3, #5
 5771 0422 03F00F03 		and	r3, r3, #15
 5772 0426 2B44     		add	r3, r3, r5
 5773 0428 A360     		str	r3, [r4, #8]
 5774              	.L228:
2520:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
2521:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
2522:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 5775              		.loc 1 2522 0
 5776 042a 1437     		adds	r7, r7, #20
 5777              	.LCFI297:
 5778              		.cfi_def_cfa_offset 20
 5779 042c BD46     		mov	sp, r7
 5780              	.LCFI298:
 5781              		.cfi_def_cfa_register 13
 5782              		@ sp needed
 5783 042e F0BD     		pop	{r4, r5, r6, r7, pc}
 5784              	.L239:
 5785              		.align	2
 5786              	.L238:
 5787 0430 1F85EB51 		.word	1374389535
 5788              		.cfi_endproc
 5789              	.LFE177:
ARM GAS  /tmp/ccnvFOuI.s 			page 145


 5791              		.text
 5792              	.Letext0:
 5793              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 5794              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 5795              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f405xx.h"
 5796              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 5797              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 5798              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 5799              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 5800              		.file 9 "Drivers/CMSIS/Include/core_cm4.h"
ARM GAS  /tmp/ccnvFOuI.s 			page 146


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_hal_uart.c
     /tmp/ccnvFOuI.s:21     .text.HAL_UART_Init:0000000000000000 $t
     /tmp/ccnvFOuI.s:26     .text.HAL_UART_Init:0000000000000000 HAL_UART_Init
     /tmp/ccnvFOuI.s:621    .text.HAL_UART_MspInit:0000000000000000 HAL_UART_MspInit
     /tmp/ccnvFOuI.s:5279   .text.UART_SetConfig:0000000000000000 UART_SetConfig
     /tmp/ccnvFOuI.s:135    .text.HAL_HalfDuplex_Init:0000000000000000 $t
     /tmp/ccnvFOuI.s:140    .text.HAL_HalfDuplex_Init:0000000000000000 HAL_HalfDuplex_Init
     /tmp/ccnvFOuI.s:256    .text.HAL_LIN_Init:0000000000000000 $t
     /tmp/ccnvFOuI.s:261    .text.HAL_LIN_Init:0000000000000000 HAL_LIN_Init
     /tmp/ccnvFOuI.s:395    .text.HAL_MultiProcessor_Init:0000000000000000 $t
     /tmp/ccnvFOuI.s:400    .text.HAL_MultiProcessor_Init:0000000000000000 HAL_MultiProcessor_Init
     /tmp/ccnvFOuI.s:545    .text.HAL_UART_DeInit:0000000000000000 $t
     /tmp/ccnvFOuI.s:550    .text.HAL_UART_DeInit:0000000000000000 HAL_UART_DeInit
     /tmp/ccnvFOuI.s:661    .text.HAL_UART_MspDeInit:0000000000000000 HAL_UART_MspDeInit
     /tmp/ccnvFOuI.s:616    .text.HAL_UART_MspInit:0000000000000000 $t
     /tmp/ccnvFOuI.s:656    .text.HAL_UART_MspDeInit:0000000000000000 $t
     /tmp/ccnvFOuI.s:696    .text.HAL_UART_Transmit:0000000000000000 $t
     /tmp/ccnvFOuI.s:701    .text.HAL_UART_Transmit:0000000000000000 HAL_UART_Transmit
     /tmp/ccnvFOuI.s:4395   .text.UART_WaitOnFlagUntilTimeout:0000000000000000 UART_WaitOnFlagUntilTimeout
     /tmp/ccnvFOuI.s:909    .text.HAL_UART_Receive:0000000000000000 $t
     /tmp/ccnvFOuI.s:914    .text.HAL_UART_Receive:0000000000000000 HAL_UART_Receive
     /tmp/ccnvFOuI.s:1137   .text.HAL_UART_Transmit_IT:0000000000000000 $t
     /tmp/ccnvFOuI.s:1142   .text.HAL_UART_Transmit_IT:0000000000000000 HAL_UART_Transmit_IT
     /tmp/ccnvFOuI.s:1252   .text.HAL_UART_Receive_IT:0000000000000000 $t
     /tmp/ccnvFOuI.s:1257   .text.HAL_UART_Receive_IT:0000000000000000 HAL_UART_Receive_IT
     /tmp/ccnvFOuI.s:1375   .text.HAL_UART_Transmit_DMA:0000000000000000 $t
     /tmp/ccnvFOuI.s:1380   .text.HAL_UART_Transmit_DMA:0000000000000000 HAL_UART_Transmit_DMA
     /tmp/ccnvFOuI.s:1528   .text.HAL_UART_Transmit_DMA:00000000000000d4 $d
     /tmp/ccnvFOuI.s:4048   .text.UART_DMATransmitCplt:0000000000000000 UART_DMATransmitCplt
     /tmp/ccnvFOuI.s:4120   .text.UART_DMATxHalfCplt:0000000000000000 UART_DMATxHalfCplt
     /tmp/ccnvFOuI.s:4286   .text.UART_DMAError:0000000000000000 UART_DMAError
     /tmp/ccnvFOuI.s:1535   .text.HAL_UART_Receive_DMA:0000000000000000 $t
     /tmp/ccnvFOuI.s:1540   .text.HAL_UART_Receive_DMA:0000000000000000 HAL_UART_Receive_DMA
     /tmp/ccnvFOuI.s:1708   .text.HAL_UART_Receive_DMA:00000000000000f8 $d
     /tmp/ccnvFOuI.s:4162   .text.UART_DMAReceiveCplt:0000000000000000 UART_DMAReceiveCplt
     /tmp/ccnvFOuI.s:4244   .text.UART_DMARxHalfCplt:0000000000000000 UART_DMARxHalfCplt
     /tmp/ccnvFOuI.s:1715   .text.HAL_UART_DMAPause:0000000000000000 $t
     /tmp/ccnvFOuI.s:1720   .text.HAL_UART_DMAPause:0000000000000000 HAL_UART_DMAPause
     /tmp/ccnvFOuI.s:1855   .text.HAL_UART_DMAResume:0000000000000000 $t
     /tmp/ccnvFOuI.s:1860   .text.HAL_UART_DMAResume:0000000000000000 HAL_UART_DMAResume
     /tmp/ccnvFOuI.s:1976   .text.HAL_UART_DMAStop:0000000000000000 $t
     /tmp/ccnvFOuI.s:1981   .text.HAL_UART_DMAStop:0000000000000000 HAL_UART_DMAStop
     /tmp/ccnvFOuI.s:4506   .text.UART_EndTxTransfer:0000000000000000 UART_EndTxTransfer
     /tmp/ccnvFOuI.s:4557   .text.UART_EndRxTransfer:0000000000000000 UART_EndRxTransfer
     /tmp/ccnvFOuI.s:2106   .text.HAL_UART_Abort:0000000000000000 $t
     /tmp/ccnvFOuI.s:2111   .text.HAL_UART_Abort:0000000000000000 HAL_UART_Abort
     /tmp/ccnvFOuI.s:2243   .text.HAL_UART_AbortTransmit:0000000000000000 $t
     /tmp/ccnvFOuI.s:2248   .text.HAL_UART_AbortTransmit:0000000000000000 HAL_UART_AbortTransmit
     /tmp/ccnvFOuI.s:2329   .text.HAL_UART_AbortReceive:0000000000000000 $t
     /tmp/ccnvFOuI.s:2334   .text.HAL_UART_AbortReceive:0000000000000000 HAL_UART_AbortReceive
     /tmp/ccnvFOuI.s:2423   .text.HAL_UART_Abort_IT:0000000000000000 $t
     /tmp/ccnvFOuI.s:2428   .text.HAL_UART_Abort_IT:0000000000000000 HAL_UART_Abort_IT
     /tmp/ccnvFOuI.s:3411   .text.HAL_UART_AbortCpltCallback:0000000000000000 HAL_UART_AbortCpltCallback
     /tmp/ccnvFOuI.s:2639   .text.HAL_UART_Abort_IT:0000000000000140 $d
     /tmp/ccnvFOuI.s:4666   .text.UART_DMATxAbortCallback:0000000000000000 UART_DMATxAbortCallback
     /tmp/ccnvFOuI.s:4748   .text.UART_DMARxAbortCallback:0000000000000000 UART_DMARxAbortCallback
ARM GAS  /tmp/ccnvFOuI.s 			page 147


     /tmp/ccnvFOuI.s:2645   .text.HAL_UART_AbortTransmit_IT:0000000000000000 $t
     /tmp/ccnvFOuI.s:2650   .text.HAL_UART_AbortTransmit_IT:0000000000000000 HAL_UART_AbortTransmit_IT
     /tmp/ccnvFOuI.s:3451   .text.HAL_UART_AbortTransmitCpltCallback:0000000000000000 HAL_UART_AbortTransmitCpltCallback
     /tmp/ccnvFOuI.s:2759   .text.HAL_UART_AbortTransmit_IT:000000000000009c $d
     /tmp/ccnvFOuI.s:4830   .text.UART_DMATxOnlyAbortCallback:0000000000000000 UART_DMATxOnlyAbortCallback
     /tmp/ccnvFOuI.s:2764   .text.HAL_UART_AbortReceive_IT:0000000000000000 $t
     /tmp/ccnvFOuI.s:2769   .text.HAL_UART_AbortReceive_IT:0000000000000000 HAL_UART_AbortReceive_IT
     /tmp/ccnvFOuI.s:3491   .text.HAL_UART_AbortReceiveCpltCallback:0000000000000000 HAL_UART_AbortReceiveCpltCallback
     /tmp/ccnvFOuI.s:2886   .text.HAL_UART_AbortReceive_IT:00000000000000ac $d
     /tmp/ccnvFOuI.s:4880   .text.UART_DMARxOnlyAbortCallback:0000000000000000 UART_DMARxOnlyAbortCallback
     /tmp/ccnvFOuI.s:2891   .text.HAL_UART_IRQHandler:0000000000000000 $t
     /tmp/ccnvFOuI.s:2896   .text.HAL_UART_IRQHandler:0000000000000000 HAL_UART_IRQHandler
     /tmp/ccnvFOuI.s:5112   .text.UART_Receive_IT:0000000000000000 UART_Receive_IT
     /tmp/ccnvFOuI.s:3371   .text.HAL_UART_ErrorCallback:0000000000000000 HAL_UART_ErrorCallback
     /tmp/ccnvFOuI.s:4930   .text.UART_Transmit_IT:0000000000000000 UART_Transmit_IT
     /tmp/ccnvFOuI.s:5059   .text.UART_EndTransmit_IT:0000000000000000 UART_EndTransmit_IT
     /tmp/ccnvFOuI.s:3201   .text.HAL_UART_IRQHandler:00000000000001f0 $d
     /tmp/ccnvFOuI.s:4616   .text.UART_DMAAbortOnError:0000000000000000 UART_DMAAbortOnError
     /tmp/ccnvFOuI.s:3206   .text.HAL_UART_TxCpltCallback:0000000000000000 $t
     /tmp/ccnvFOuI.s:3211   .text.HAL_UART_TxCpltCallback:0000000000000000 HAL_UART_TxCpltCallback
     /tmp/ccnvFOuI.s:3246   .text.HAL_UART_TxHalfCpltCallback:0000000000000000 $t
     /tmp/ccnvFOuI.s:3251   .text.HAL_UART_TxHalfCpltCallback:0000000000000000 HAL_UART_TxHalfCpltCallback
     /tmp/ccnvFOuI.s:3286   .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/ccnvFOuI.s:3291   .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/ccnvFOuI.s:3326   .text.HAL_UART_RxHalfCpltCallback:0000000000000000 $t
     /tmp/ccnvFOuI.s:3331   .text.HAL_UART_RxHalfCpltCallback:0000000000000000 HAL_UART_RxHalfCpltCallback
     /tmp/ccnvFOuI.s:3366   .text.HAL_UART_ErrorCallback:0000000000000000 $t
     /tmp/ccnvFOuI.s:3406   .text.HAL_UART_AbortCpltCallback:0000000000000000 $t
     /tmp/ccnvFOuI.s:3446   .text.HAL_UART_AbortTransmitCpltCallback:0000000000000000 $t
     /tmp/ccnvFOuI.s:3486   .text.HAL_UART_AbortReceiveCpltCallback:0000000000000000 $t
     /tmp/ccnvFOuI.s:3526   .text.HAL_LIN_SendBreak:0000000000000000 $t
     /tmp/ccnvFOuI.s:3531   .text.HAL_LIN_SendBreak:0000000000000000 HAL_LIN_SendBreak
     /tmp/ccnvFOuI.s:3603   .text.HAL_MultiProcessor_EnterMuteMode:0000000000000000 $t
     /tmp/ccnvFOuI.s:3608   .text.HAL_MultiProcessor_EnterMuteMode:0000000000000000 HAL_MultiProcessor_EnterMuteMode
     /tmp/ccnvFOuI.s:3680   .text.HAL_MultiProcessor_ExitMuteMode:0000000000000000 $t
     /tmp/ccnvFOuI.s:3685   .text.HAL_MultiProcessor_ExitMuteMode:0000000000000000 HAL_MultiProcessor_ExitMuteMode
     /tmp/ccnvFOuI.s:3757   .text.HAL_HalfDuplex_EnableTransmitter:0000000000000000 $t
     /tmp/ccnvFOuI.s:3762   .text.HAL_HalfDuplex_EnableTransmitter:0000000000000000 HAL_HalfDuplex_EnableTransmitter
     /tmp/ccnvFOuI.s:3847   .text.HAL_HalfDuplex_EnableReceiver:0000000000000000 $t
     /tmp/ccnvFOuI.s:3852   .text.HAL_HalfDuplex_EnableReceiver:0000000000000000 HAL_HalfDuplex_EnableReceiver
     /tmp/ccnvFOuI.s:3937   .text.HAL_UART_GetState:0000000000000000 $t
     /tmp/ccnvFOuI.s:3942   .text.HAL_UART_GetState:0000000000000000 HAL_UART_GetState
     /tmp/ccnvFOuI.s:4000   .text.HAL_UART_GetError:0000000000000000 $t
     /tmp/ccnvFOuI.s:4005   .text.HAL_UART_GetError:0000000000000000 HAL_UART_GetError
     /tmp/ccnvFOuI.s:4044   .text.UART_DMATransmitCplt:0000000000000000 $t
     /tmp/ccnvFOuI.s:4116   .text.UART_DMATxHalfCplt:0000000000000000 $t
     /tmp/ccnvFOuI.s:4158   .text.UART_DMAReceiveCplt:0000000000000000 $t
     /tmp/ccnvFOuI.s:4240   .text.UART_DMARxHalfCplt:0000000000000000 $t
     /tmp/ccnvFOuI.s:4282   .text.UART_DMAError:0000000000000000 $t
     /tmp/ccnvFOuI.s:4391   .text.UART_WaitOnFlagUntilTimeout:0000000000000000 $t
     /tmp/ccnvFOuI.s:4502   .text.UART_EndTxTransfer:0000000000000000 $t
     /tmp/ccnvFOuI.s:4553   .text.UART_EndRxTransfer:0000000000000000 $t
     /tmp/ccnvFOuI.s:4612   .text.UART_DMAAbortOnError:0000000000000000 $t
     /tmp/ccnvFOuI.s:4662   .text.UART_DMATxAbortCallback:0000000000000000 $t
     /tmp/ccnvFOuI.s:4744   .text.UART_DMARxAbortCallback:0000000000000000 $t
     /tmp/ccnvFOuI.s:4826   .text.UART_DMATxOnlyAbortCallback:0000000000000000 $t
     /tmp/ccnvFOuI.s:4876   .text.UART_DMARxOnlyAbortCallback:0000000000000000 $t
ARM GAS  /tmp/ccnvFOuI.s 			page 148


     /tmp/ccnvFOuI.s:4926   .text.UART_Transmit_IT:0000000000000000 $t
     /tmp/ccnvFOuI.s:5055   .text.UART_EndTransmit_IT:0000000000000000 $t
     /tmp/ccnvFOuI.s:5108   .text.UART_Receive_IT:0000000000000000 $t
     /tmp/ccnvFOuI.s:5275   .text.UART_SetConfig:0000000000000000 $t
     /tmp/ccnvFOuI.s:5681   .text.UART_SetConfig:0000000000000348 $d
     /tmp/ccnvFOuI.s:5686   .text.UART_SetConfig:0000000000000354 $t
     /tmp/ccnvFOuI.s:5787   .text.UART_SetConfig:0000000000000430 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_DMA_Start_IT
HAL_DMA_Abort
HAL_DMA_Abort_IT
HAL_RCC_GetPCLK2Freq
HAL_RCC_GetPCLK1Freq
