ARM GAS  /tmp/ccqSH0iI.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"stm32f4xx_hal_can.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.HAL_CAN_Init,"ax",%progbits
  21              		.align	2
  22              		.global	HAL_CAN_Init
  23              		.thumb
  24              		.thumb_func
  26              	HAL_CAN_Init:
  27              	.LFB123:
  28              		.file 1 "Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c"
   1:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
   2:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ******************************************************************************
   3:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @file    stm32f4xx_hal_can.c
   4:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @author  MCD Application Team
   5:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief   CAN HAL module driver.
   6:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *          This file provides firmware functions to manage the following
   7:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *          functionalities of the Controller Area Network (CAN) peripheral:
   8:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           + Configuration functions
  10:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           + Control functions
  11:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           + Interrupts management
  12:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           + Callbacks functions
  13:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           + Peripheral State and Error functions
  14:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *
  15:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   @verbatim
  16:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
  17:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                         ##### How to use this driver #####
  18:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
  19:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]
  20:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Initialize the CAN low level resources by implementing the
  21:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_MspInit():
  22:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****          (++) Enable the CAN interface clock using __HAL_RCC_CANx_CLK_ENABLE()
  23:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****          (++) Configure CAN pins
  24:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****              (+++) Enable the clock for the CAN GPIOs
  25:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****              (+++) Configure CAN pins as alternate function open-drain
  26:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****          (++) In case of using interrupts (e.g. HAL_CAN_ActivateNotification())
  27:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****              (+++) Configure the CAN interrupt priority using
  28:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                    HAL_NVIC_SetPriority()
  29:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****              (+++) Enable the CAN IRQ handler using HAL_NVIC_EnableIRQ()
  30:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****              (+++) In CAN IRQ handler, call HAL_CAN_IRQHandler()
ARM GAS  /tmp/ccqSH0iI.s 			page 2


  31:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  32:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Initialize the CAN peripheral using HAL_CAN_Init() function. This
  33:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           function resorts to HAL_CAN_MspInit() for low-level initialization.
  34:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  35:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Configure the reception filters using the following configuration
  36:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           functions:
  37:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) HAL_CAN_ConfigFilter()
  38:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  39:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Start the CAN module using HAL_CAN_Start() function. At this level
  40:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           the node is active on the bus: it receive messages, and can send
  41:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           messages.
  42:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  43:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) To manage messages transmission, the following Tx control functions
  44:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           can be used:
  45:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) HAL_CAN_AddTxMessage() to request transmission of a new
  46:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  message.
  47:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) HAL_CAN_AbortTxRequest() to abort transmission of a pending
  48:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  message.
  49:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) HAL_CAN_GetTxMailboxesFreeLevel() to get the number of free Tx
  50:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  mailboxes.
  51:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) HAL_CAN_IsTxMessagePending() to check if a message is pending
  52:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  in a Tx mailbox.
  53:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) HAL_CAN_GetTxTimestamp() to get the timestamp of Tx message
  54:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  sent, if time triggered communication mode is enabled.
  55:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  56:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) When a message is received into the CAN Rx FIFOs, it can be retrieved
  57:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           using the HAL_CAN_GetRxMessage() function. The function
  58:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_GetRxFifoFillLevel() allows to know how many Rx message are
  59:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           stored in the Rx Fifo.
  60:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  61:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Calling the HAL_CAN_Stop() function stops the CAN module.
  62:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  63:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) The deinitialization is achieved with HAL_CAN_DeInit() function.
  64:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  65:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  66:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       *** Polling mode operation ***
  67:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       ==============================
  68:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]
  69:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Reception:
  70:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) Monitor reception of message using HAL_CAN_GetRxFifoFillLevel()
  71:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  until at least one message is received.
  72:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) Then get the message using HAL_CAN_GetRxMessage().
  73:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  74:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Transmission:
  75:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) Monitor the Tx mailboxes availability until at least one Tx
  76:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  mailbox is free, using HAL_CAN_GetTxMailboxesFreeLevel().
  77:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) Then request transmission of a message using
  78:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  HAL_CAN_AddTxMessage().
  79:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  80:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  81:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       *** Interrupt mode operation ***
  82:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       ================================
  83:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]
  84:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Notifications are activated using HAL_CAN_ActivateNotification()
  85:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           function. Then, the process can be controlled through the
  86:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           available user callbacks: HAL_CAN_xxxCallback(), using same APIs
  87:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_GetRxMessage() and HAL_CAN_AddTxMessage().
ARM GAS  /tmp/ccqSH0iI.s 			page 3


  88:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  89:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Notifications can be deactivated using
  90:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_DeactivateNotification() function.
  91:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  92:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Special care should be taken for CAN_IT_RX_FIFO0_MSG_PENDING and
  93:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           CAN_IT_RX_FIFO1_MSG_PENDING notifications. These notifications trig
  94:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           the callbacks HAL_CAN_RxFIFO0MsgPendingCallback() and
  95:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_RxFIFO1MsgPendingCallback(). User has two possible options
  96:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           here.
  97:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) Directly get the Rx message in the callback, using
  98:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  HAL_CAN_GetRxMessage().
  99:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) Or deactivate the notification in the callback without
 100:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  getting the Rx message. The Rx message can then be got later
 101:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  using HAL_CAN_GetRxMessage(). Once the Rx message have been
 102:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  read, the notification can be activated again.
 103:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 104:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 105:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       *** Sleep mode ***
 106:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       ==================
 107:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]
 108:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) The CAN peripheral can be put in sleep mode (low power), using
 109:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_RequestSleep(). The sleep mode will be entered as soon as the
 110:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           current CAN activity (transmission or reception of a CAN frame) will
 111:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           be completed.
 112:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 113:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) A notification can be activated to be informed when the sleep mode
 114:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           will be entered.
 115:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 116:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) It can be checked if the sleep mode is entered using
 117:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_IsSleepActive().
 118:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           Note that the CAN state (accessible from the API HAL_CAN_GetState())
 119:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           is HAL_CAN_STATE_SLEEP_PENDING as soon as the sleep mode request is
 120:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           submitted (the sleep mode is not yet entered), and become
 121:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_STATE_SLEEP_ACTIVE when the sleep mode is effective.
 122:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 123:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) The wake-up from sleep mode can be trigged by two ways:
 124:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) Using HAL_CAN_WakeUp(). When returning from this function,
 125:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  the sleep mode is exited (if return status is HAL_OK).
 126:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) When a start of Rx CAN frame is detected by the CAN peripheral,
 127:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  if automatic wake up mode is enabled.
 128:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 129:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   @endverbatim
 130:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ******************************************************************************
 131:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @attention
 132:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *
 133:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
 134:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *
 135:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * Redistribution and use in source and binary forms, with or without modification,
 136:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * are permitted provided that the following conditions are met:
 137:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 138:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *      this list of conditions and the following disclaimer.
 139:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 140:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *      this list of conditions and the following disclaimer in the documentation
 141:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *      and/or other materials provided with the distribution.
 142:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 143:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *      may be used to endorse or promote products derived from this software
 144:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *      without specific prior written permission.
ARM GAS  /tmp/ccqSH0iI.s 			page 4


 145:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *
 146:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 147:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 148:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 149:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 150:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 151:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 152:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 153:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 154:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 155:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 156:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *
 157:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ******************************************************************************
 158:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 159:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 160:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /* Includes ------------------------------------------------------------------*/
 161:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #include "stm32f4xx_hal.h"
 162:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 163:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @addtogroup STM32F4xx_HAL_Driver
 164:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
 165:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 166:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 167:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #if defined(CAN1)
 168:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 169:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @defgroup CAN CAN
 170:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief CAN driver modules
 171:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
 172:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 173:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 174:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #ifdef HAL_CAN_MODULE_ENABLED
 175:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 176:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #ifdef HAL_CAN_LEGACY_MODULE_ENABLED
 177:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   #error "The CAN driver cannot be used with its legacy, Please enable only one CAN module at once"
 178:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #endif
 179:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 180:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /* Private typedef -----------------------------------------------------------*/
 181:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /* Private define ------------------------------------------------------------*/
 182:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @defgroup CAN_Private_Constants CAN Private Constants
 183:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
 184:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 185:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #define CAN_TIMEOUT_VALUE 10U
 186:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 187:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @}
 188:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 189:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /* Private macro -------------------------------------------------------------*/
 190:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /* Private variables ---------------------------------------------------------*/
 191:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /* Private function prototypes -----------------------------------------------*/
 192:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /* Exported functions --------------------------------------------------------*/
 193:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 194:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions CAN Exported Functions
 195:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
 196:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 197:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 198:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group1 Initialization and de-initialization functions
 199:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *  @brief    Initialization and Configuration functions
 200:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *
 201:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @verbatim
ARM GAS  /tmp/ccqSH0iI.s 			page 5


 202:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
 203:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****               ##### Initialization and de-initialization functions #####
 204:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
 205:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]  This section provides functions allowing to:
 206:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_Init                       : Initialize and configure the CAN.
 207:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_DeInit                     : De-initialize the CAN.
 208:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_MspInit                    : Initialize the CAN MSP.
 209:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_MspDeInit                  : DeInitialize the CAN MSP.
 210:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 211:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @endverbatim
 212:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
 213:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 214:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 215:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 216:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Initializes the CAN peripheral according to the specified
 217:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         parameters in the CAN_InitStruct.
 218:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 219:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 220:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
 221:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 222:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
 223:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
  29              		.loc 1 223 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 16
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 80B5     		push	{r7, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 84B0     		sub	sp, sp, #16
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 24
  41 0004 00AF     		add	r7, sp, #0
  42              	.LCFI2:
  43              		.cfi_def_cfa_register 7
  44 0006 7860     		str	r0, [r7, #4]
 224:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t tickstart = 0U;
  45              		.loc 1 224 0
  46 0008 0023     		movs	r3, #0
  47 000a FB60     		str	r3, [r7, #12]
 225:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 226:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check CAN handle */
 227:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan == NULL)
  48              		.loc 1 227 0
  49 000c 7B68     		ldr	r3, [r7, #4]
  50 000e 002B     		cmp	r3, #0
  51 0010 01D1     		bne	.L2
 228:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 229:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
  52              		.loc 1 229 0
  53 0012 0123     		movs	r3, #1
  54 0014 ECE0     		b	.L3
  55              	.L2:
 230:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 231:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
ARM GAS  /tmp/ccqSH0iI.s 			page 6


 232:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check the parameters */
 233:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 234:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 235:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 236:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 237:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 238:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 239:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 240:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_MODE(hcan->Init.Mode));
 241:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 242:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 243:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 244:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 245:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 246:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_RESET)
  56              		.loc 1 246 0
  57 0016 7B68     		ldr	r3, [r7, #4]
  58 0018 93F82030 		ldrb	r3, [r3, #32]
  59 001c DBB2     		uxtb	r3, r3
  60 001e 002B     		cmp	r3, #0
  61 0020 02D1     		bne	.L4
 247:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 248:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Init the low level hardware: CLOCK, NVIC */
 249:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     HAL_CAN_MspInit(hcan);
  62              		.loc 1 249 0
  63 0022 7868     		ldr	r0, [r7, #4]
  64 0024 FFF7FEFF 		bl	HAL_CAN_MspInit
  65              	.L4:
 250:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 251:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 252:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Exit from sleep mode */
 253:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
  66              		.loc 1 253 0
  67 0028 7B68     		ldr	r3, [r7, #4]
  68 002a 1B68     		ldr	r3, [r3]
  69 002c 7A68     		ldr	r2, [r7, #4]
  70 002e 1268     		ldr	r2, [r2]
  71 0030 1268     		ldr	r2, [r2]
  72 0032 22F00202 		bic	r2, r2, #2
  73 0036 1A60     		str	r2, [r3]
 254:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 255:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Get tick */
 256:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   tickstart = HAL_GetTick();
  74              		.loc 1 256 0
  75 0038 FFF7FEFF 		bl	HAL_GetTick
  76 003c F860     		str	r0, [r7, #12]
 257:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 258:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check Sleep mode leave acknowledge */
 259:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   while ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET)
  77              		.loc 1 259 0
  78 003e 12E0     		b	.L5
  79              	.L6:
 260:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 261:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
  80              		.loc 1 261 0
  81 0040 FFF7FEFF 		bl	HAL_GetTick
  82 0044 0246     		mov	r2, r0
ARM GAS  /tmp/ccqSH0iI.s 			page 7


  83 0046 FB68     		ldr	r3, [r7, #12]
  84 0048 D31A     		subs	r3, r2, r3
  85 004a 0A2B     		cmp	r3, #10
  86 004c 0BD9     		bls	.L5
 262:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 263:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Update error code */
 264:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
  87              		.loc 1 264 0
  88 004e 7B68     		ldr	r3, [r7, #4]
  89 0050 5B6A     		ldr	r3, [r3, #36]
  90 0052 43F40032 		orr	r2, r3, #131072
  91 0056 7B68     		ldr	r3, [r7, #4]
  92 0058 5A62     		str	r2, [r3, #36]
 265:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 266:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Change CAN state */
 267:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       hcan->State = HAL_CAN_STATE_ERROR;
  93              		.loc 1 267 0
  94 005a 7B68     		ldr	r3, [r7, #4]
  95 005c 0522     		movs	r2, #5
  96 005e 83F82020 		strb	r2, [r3, #32]
 268:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 269:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       return HAL_ERROR;
  97              		.loc 1 269 0
  98 0062 0123     		movs	r3, #1
  99 0064 C4E0     		b	.L3
 100              	.L5:
 259:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 101              		.loc 1 259 0
 102 0066 7B68     		ldr	r3, [r7, #4]
 103 0068 1B68     		ldr	r3, [r3]
 104 006a 5B68     		ldr	r3, [r3, #4]
 105 006c 03F00203 		and	r3, r3, #2
 106 0070 002B     		cmp	r3, #0
 107 0072 E5D1     		bne	.L6
 270:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 271:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 272:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 273:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Request initialisation */
 274:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 108              		.loc 1 274 0
 109 0074 7B68     		ldr	r3, [r7, #4]
 110 0076 1B68     		ldr	r3, [r3]
 111 0078 7A68     		ldr	r2, [r7, #4]
 112 007a 1268     		ldr	r2, [r2]
 113 007c 1268     		ldr	r2, [r2]
 114 007e 42F00102 		orr	r2, r2, #1
 115 0082 1A60     		str	r2, [r3]
 275:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 276:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Get tick */
 277:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   tickstart = HAL_GetTick();
 116              		.loc 1 277 0
 117 0084 FFF7FEFF 		bl	HAL_GetTick
 118 0088 F860     		str	r0, [r7, #12]
 278:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 279:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Wait initialisation acknowledge */
 280:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   while ((hcan->Instance->MSR & CAN_MSR_INAK) == RESET)
 119              		.loc 1 280 0
ARM GAS  /tmp/ccqSH0iI.s 			page 8


 120 008a 12E0     		b	.L7
 121              	.L8:
 281:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 282:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 122              		.loc 1 282 0
 123 008c FFF7FEFF 		bl	HAL_GetTick
 124 0090 0246     		mov	r2, r0
 125 0092 FB68     		ldr	r3, [r7, #12]
 126 0094 D31A     		subs	r3, r2, r3
 127 0096 0A2B     		cmp	r3, #10
 128 0098 0BD9     		bls	.L7
 283:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 284:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Update error code */
 285:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 129              		.loc 1 285 0
 130 009a 7B68     		ldr	r3, [r7, #4]
 131 009c 5B6A     		ldr	r3, [r3, #36]
 132 009e 43F40032 		orr	r2, r3, #131072
 133 00a2 7B68     		ldr	r3, [r7, #4]
 134 00a4 5A62     		str	r2, [r3, #36]
 286:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 287:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Change CAN state */
 288:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       hcan->State = HAL_CAN_STATE_ERROR;
 135              		.loc 1 288 0
 136 00a6 7B68     		ldr	r3, [r7, #4]
 137 00a8 0522     		movs	r2, #5
 138 00aa 83F82020 		strb	r2, [r3, #32]
 289:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 290:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       return HAL_ERROR;
 139              		.loc 1 290 0
 140 00ae 0123     		movs	r3, #1
 141 00b0 9EE0     		b	.L3
 142              	.L7:
 280:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 143              		.loc 1 280 0
 144 00b2 7B68     		ldr	r3, [r7, #4]
 145 00b4 1B68     		ldr	r3, [r3]
 146 00b6 5B68     		ldr	r3, [r3, #4]
 147 00b8 03F00103 		and	r3, r3, #1
 148 00bc 002B     		cmp	r3, #0
 149 00be E5D0     		beq	.L8
 291:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 292:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 293:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 294:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Set the time triggered communication mode */
 295:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->Init.TimeTriggeredMode == ENABLE)
 150              		.loc 1 295 0
 151 00c0 7B68     		ldr	r3, [r7, #4]
 152 00c2 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 153 00c4 012B     		cmp	r3, #1
 154 00c6 08D1     		bne	.L9
 296:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 297:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 155              		.loc 1 297 0
 156 00c8 7B68     		ldr	r3, [r7, #4]
 157 00ca 1B68     		ldr	r3, [r3]
 158 00cc 7A68     		ldr	r2, [r7, #4]
ARM GAS  /tmp/ccqSH0iI.s 			page 9


 159 00ce 1268     		ldr	r2, [r2]
 160 00d0 1268     		ldr	r2, [r2]
 161 00d2 42F08002 		orr	r2, r2, #128
 162 00d6 1A60     		str	r2, [r3]
 163 00d8 07E0     		b	.L10
 164              	.L9:
 298:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 299:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 300:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 301:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 165              		.loc 1 301 0
 166 00da 7B68     		ldr	r3, [r7, #4]
 167 00dc 1B68     		ldr	r3, [r3]
 168 00de 7A68     		ldr	r2, [r7, #4]
 169 00e0 1268     		ldr	r2, [r2]
 170 00e2 1268     		ldr	r2, [r2]
 171 00e4 22F08002 		bic	r2, r2, #128
 172 00e8 1A60     		str	r2, [r3]
 173              	.L10:
 302:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 303:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 304:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Set the automatic bus-off management */
 305:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->Init.AutoBusOff == ENABLE)
 174              		.loc 1 305 0
 175 00ea 7B68     		ldr	r3, [r7, #4]
 176 00ec 5B7E     		ldrb	r3, [r3, #25]	@ zero_extendqisi2
 177 00ee 012B     		cmp	r3, #1
 178 00f0 08D1     		bne	.L11
 306:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 307:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 179              		.loc 1 307 0
 180 00f2 7B68     		ldr	r3, [r7, #4]
 181 00f4 1B68     		ldr	r3, [r3]
 182 00f6 7A68     		ldr	r2, [r7, #4]
 183 00f8 1268     		ldr	r2, [r2]
 184 00fa 1268     		ldr	r2, [r2]
 185 00fc 42F04002 		orr	r2, r2, #64
 186 0100 1A60     		str	r2, [r3]
 187 0102 07E0     		b	.L12
 188              	.L11:
 308:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 309:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 310:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 311:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 189              		.loc 1 311 0
 190 0104 7B68     		ldr	r3, [r7, #4]
 191 0106 1B68     		ldr	r3, [r3]
 192 0108 7A68     		ldr	r2, [r7, #4]
 193 010a 1268     		ldr	r2, [r2]
 194 010c 1268     		ldr	r2, [r2]
 195 010e 22F04002 		bic	r2, r2, #64
 196 0112 1A60     		str	r2, [r3]
 197              	.L12:
 312:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 313:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 314:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Set the automatic wake-up mode */
 315:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->Init.AutoWakeUp == ENABLE)
ARM GAS  /tmp/ccqSH0iI.s 			page 10


 198              		.loc 1 315 0
 199 0114 7B68     		ldr	r3, [r7, #4]
 200 0116 9B7E     		ldrb	r3, [r3, #26]	@ zero_extendqisi2
 201 0118 012B     		cmp	r3, #1
 202 011a 08D1     		bne	.L13
 316:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 317:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 203              		.loc 1 317 0
 204 011c 7B68     		ldr	r3, [r7, #4]
 205 011e 1B68     		ldr	r3, [r3]
 206 0120 7A68     		ldr	r2, [r7, #4]
 207 0122 1268     		ldr	r2, [r2]
 208 0124 1268     		ldr	r2, [r2]
 209 0126 42F02002 		orr	r2, r2, #32
 210 012a 1A60     		str	r2, [r3]
 211 012c 07E0     		b	.L14
 212              	.L13:
 318:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 319:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 320:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 321:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 213              		.loc 1 321 0
 214 012e 7B68     		ldr	r3, [r7, #4]
 215 0130 1B68     		ldr	r3, [r3]
 216 0132 7A68     		ldr	r2, [r7, #4]
 217 0134 1268     		ldr	r2, [r2]
 218 0136 1268     		ldr	r2, [r2]
 219 0138 22F02002 		bic	r2, r2, #32
 220 013c 1A60     		str	r2, [r3]
 221              	.L14:
 322:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 323:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 324:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Set the automatic retransmission */
 325:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->Init.AutoRetransmission == ENABLE)
 222              		.loc 1 325 0
 223 013e 7B68     		ldr	r3, [r7, #4]
 224 0140 DB7E     		ldrb	r3, [r3, #27]	@ zero_extendqisi2
 225 0142 012B     		cmp	r3, #1
 226 0144 08D1     		bne	.L15
 326:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 327:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 227              		.loc 1 327 0
 228 0146 7B68     		ldr	r3, [r7, #4]
 229 0148 1B68     		ldr	r3, [r3]
 230 014a 7A68     		ldr	r2, [r7, #4]
 231 014c 1268     		ldr	r2, [r2]
 232 014e 1268     		ldr	r2, [r2]
 233 0150 22F01002 		bic	r2, r2, #16
 234 0154 1A60     		str	r2, [r3]
 235 0156 07E0     		b	.L16
 236              	.L15:
 328:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 329:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 330:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 331:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 237              		.loc 1 331 0
 238 0158 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccqSH0iI.s 			page 11


 239 015a 1B68     		ldr	r3, [r3]
 240 015c 7A68     		ldr	r2, [r7, #4]
 241 015e 1268     		ldr	r2, [r2]
 242 0160 1268     		ldr	r2, [r2]
 243 0162 42F01002 		orr	r2, r2, #16
 244 0166 1A60     		str	r2, [r3]
 245              	.L16:
 332:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 333:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 334:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Set the receive FIFO locked mode */
 335:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->Init.ReceiveFifoLocked == ENABLE)
 246              		.loc 1 335 0
 247 0168 7B68     		ldr	r3, [r7, #4]
 248 016a 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 249 016c 012B     		cmp	r3, #1
 250 016e 08D1     		bne	.L17
 336:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 337:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 251              		.loc 1 337 0
 252 0170 7B68     		ldr	r3, [r7, #4]
 253 0172 1B68     		ldr	r3, [r3]
 254 0174 7A68     		ldr	r2, [r7, #4]
 255 0176 1268     		ldr	r2, [r2]
 256 0178 1268     		ldr	r2, [r2]
 257 017a 42F00802 		orr	r2, r2, #8
 258 017e 1A60     		str	r2, [r3]
 259 0180 07E0     		b	.L18
 260              	.L17:
 338:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 339:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 340:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 341:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 261              		.loc 1 341 0
 262 0182 7B68     		ldr	r3, [r7, #4]
 263 0184 1B68     		ldr	r3, [r3]
 264 0186 7A68     		ldr	r2, [r7, #4]
 265 0188 1268     		ldr	r2, [r2]
 266 018a 1268     		ldr	r2, [r2]
 267 018c 22F00802 		bic	r2, r2, #8
 268 0190 1A60     		str	r2, [r3]
 269              	.L18:
 342:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 343:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 344:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Set the transmit FIFO priority */
 345:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->Init.TransmitFifoPriority == ENABLE)
 270              		.loc 1 345 0
 271 0192 7B68     		ldr	r3, [r7, #4]
 272 0194 5B7F     		ldrb	r3, [r3, #29]	@ zero_extendqisi2
 273 0196 012B     		cmp	r3, #1
 274 0198 08D1     		bne	.L19
 346:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 347:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 275              		.loc 1 347 0
 276 019a 7B68     		ldr	r3, [r7, #4]
 277 019c 1B68     		ldr	r3, [r3]
 278 019e 7A68     		ldr	r2, [r7, #4]
 279 01a0 1268     		ldr	r2, [r2]
ARM GAS  /tmp/ccqSH0iI.s 			page 12


 280 01a2 1268     		ldr	r2, [r2]
 281 01a4 42F00402 		orr	r2, r2, #4
 282 01a8 1A60     		str	r2, [r3]
 283 01aa 07E0     		b	.L20
 284              	.L19:
 348:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 349:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 350:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 351:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 285              		.loc 1 351 0
 286 01ac 7B68     		ldr	r3, [r7, #4]
 287 01ae 1B68     		ldr	r3, [r3]
 288 01b0 7A68     		ldr	r2, [r7, #4]
 289 01b2 1268     		ldr	r2, [r2]
 290 01b4 1268     		ldr	r2, [r2]
 291 01b6 22F00402 		bic	r2, r2, #4
 292 01ba 1A60     		str	r2, [r3]
 293              	.L20:
 352:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 353:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 354:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Set the bit timing register */
 355:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 294              		.loc 1 355 0
 295 01bc 7B68     		ldr	r3, [r7, #4]
 296 01be 1B68     		ldr	r3, [r3]
 297 01c0 7A68     		ldr	r2, [r7, #4]
 298 01c2 9168     		ldr	r1, [r2, #8]
 299 01c4 7A68     		ldr	r2, [r7, #4]
 300 01c6 D268     		ldr	r2, [r2, #12]
 301 01c8 1143     		orrs	r1, r1, r2
 302 01ca 7A68     		ldr	r2, [r7, #4]
 303 01cc 1269     		ldr	r2, [r2, #16]
 304 01ce 1143     		orrs	r1, r1, r2
 305 01d0 7A68     		ldr	r2, [r7, #4]
 306 01d2 5269     		ldr	r2, [r2, #20]
 307 01d4 1143     		orrs	r1, r1, r2
 308 01d6 7A68     		ldr	r2, [r7, #4]
 309 01d8 5268     		ldr	r2, [r2, #4]
 310 01da 013A     		subs	r2, r2, #1
 311 01dc 0A43     		orrs	r2, r2, r1
 312 01de DA61     		str	r2, [r3, #28]
 356:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                             hcan->Init.SyncJumpWidth  |
 357:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                             hcan->Init.TimeSeg1       |
 358:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                             hcan->Init.TimeSeg2       |
 359:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                             (hcan->Init.Prescaler - 1U)));
 360:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 361:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Initialize the error code */
 362:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 313              		.loc 1 362 0
 314 01e0 7B68     		ldr	r3, [r7, #4]
 315 01e2 0022     		movs	r2, #0
 316 01e4 5A62     		str	r2, [r3, #36]
 363:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 364:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Initialize the CAN state */
 365:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   hcan->State = HAL_CAN_STATE_READY;
 317              		.loc 1 365 0
 318 01e6 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccqSH0iI.s 			page 13


 319 01e8 0122     		movs	r2, #1
 320 01ea 83F82020 		strb	r2, [r3, #32]
 366:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 367:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return function status */
 368:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return HAL_OK;
 321              		.loc 1 368 0
 322 01ee 0023     		movs	r3, #0
 323              	.L3:
 369:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 324              		.loc 1 369 0
 325 01f0 1846     		mov	r0, r3
 326 01f2 1037     		adds	r7, r7, #16
 327              	.LCFI3:
 328              		.cfi_def_cfa_offset 8
 329 01f4 BD46     		mov	sp, r7
 330              	.LCFI4:
 331              		.cfi_def_cfa_register 13
 332              		@ sp needed
 333 01f6 80BD     		pop	{r7, pc}
 334              		.cfi_endproc
 335              	.LFE123:
 337              		.section	.text.HAL_CAN_DeInit,"ax",%progbits
 338              		.align	2
 339              		.global	HAL_CAN_DeInit
 340              		.thumb
 341              		.thumb_func
 343              	HAL_CAN_DeInit:
 344              	.LFB124:
 370:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 371:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 372:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Deinitializes the CAN peripheral registers to their default
 373:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         reset values.
 374:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 375:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 376:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
 377:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 378:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
 379:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 345              		.loc 1 379 0
 346              		.cfi_startproc
 347              		@ args = 0, pretend = 0, frame = 8
 348              		@ frame_needed = 1, uses_anonymous_args = 0
 349 0000 80B5     		push	{r7, lr}
 350              	.LCFI5:
 351              		.cfi_def_cfa_offset 8
 352              		.cfi_offset 7, -8
 353              		.cfi_offset 14, -4
 354 0002 82B0     		sub	sp, sp, #8
 355              	.LCFI6:
 356              		.cfi_def_cfa_offset 16
 357 0004 00AF     		add	r7, sp, #0
 358              	.LCFI7:
 359              		.cfi_def_cfa_register 7
 360 0006 7860     		str	r0, [r7, #4]
 380:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check CAN handle */
 381:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan == NULL)
 361              		.loc 1 381 0
ARM GAS  /tmp/ccqSH0iI.s 			page 14


 362 0008 7B68     		ldr	r3, [r7, #4]
 363 000a 002B     		cmp	r3, #0
 364 000c 01D1     		bne	.L22
 382:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 383:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 365              		.loc 1 383 0
 366 000e 0123     		movs	r3, #1
 367 0010 15E0     		b	.L23
 368              	.L22:
 384:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 385:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 386:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check the parameters */
 387:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 388:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 389:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Stop the CAN module */
 390:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   HAL_CAN_Stop(hcan);
 369              		.loc 1 390 0
 370 0012 7868     		ldr	r0, [r7, #4]
 371 0014 FFF7FEFF 		bl	HAL_CAN_Stop
 391:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 392:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* DeInit the low level hardware: CLOCK, NVIC */
 393:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   HAL_CAN_MspDeInit(hcan);
 372              		.loc 1 393 0
 373 0018 7868     		ldr	r0, [r7, #4]
 374 001a FFF7FEFF 		bl	HAL_CAN_MspDeInit
 394:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 395:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Reset the CAN peripheral */
 396:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 375              		.loc 1 396 0
 376 001e 7B68     		ldr	r3, [r7, #4]
 377 0020 1B68     		ldr	r3, [r3]
 378 0022 7A68     		ldr	r2, [r7, #4]
 379 0024 1268     		ldr	r2, [r2]
 380 0026 1268     		ldr	r2, [r2]
 381 0028 42F40042 		orr	r2, r2, #32768
 382 002c 1A60     		str	r2, [r3]
 397:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 398:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Reset the CAN ErrorCode */
 399:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 383              		.loc 1 399 0
 384 002e 7B68     		ldr	r3, [r7, #4]
 385 0030 0022     		movs	r2, #0
 386 0032 5A62     		str	r2, [r3, #36]
 400:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 401:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Change CAN state */
 402:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   hcan->State = HAL_CAN_STATE_RESET;
 387              		.loc 1 402 0
 388 0034 7B68     		ldr	r3, [r7, #4]
 389 0036 0022     		movs	r2, #0
 390 0038 83F82020 		strb	r2, [r3, #32]
 403:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 404:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return function status */
 405:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return HAL_OK;
 391              		.loc 1 405 0
 392 003c 0023     		movs	r3, #0
 393              	.L23:
 406:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
ARM GAS  /tmp/ccqSH0iI.s 			page 15


 394              		.loc 1 406 0
 395 003e 1846     		mov	r0, r3
 396 0040 0837     		adds	r7, r7, #8
 397              	.LCFI8:
 398              		.cfi_def_cfa_offset 8
 399 0042 BD46     		mov	sp, r7
 400              	.LCFI9:
 401              		.cfi_def_cfa_register 13
 402              		@ sp needed
 403 0044 80BD     		pop	{r7, pc}
 404              		.cfi_endproc
 405              	.LFE124:
 407              		.section	.text.HAL_CAN_MspInit,"ax",%progbits
 408              		.align	2
 409              		.weak	HAL_CAN_MspInit
 410              		.thumb
 411              		.thumb_func
 413              	HAL_CAN_MspInit:
 414              	.LFB125:
 407:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 408:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 409:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Initializes the CAN MSP.
 410:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 411:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 412:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
 413:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 414:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
 415:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 415              		.loc 1 415 0
 416              		.cfi_startproc
 417              		@ args = 0, pretend = 0, frame = 8
 418              		@ frame_needed = 1, uses_anonymous_args = 0
 419              		@ link register save eliminated.
 420 0000 80B4     		push	{r7}
 421              	.LCFI10:
 422              		.cfi_def_cfa_offset 4
 423              		.cfi_offset 7, -4
 424 0002 83B0     		sub	sp, sp, #12
 425              	.LCFI11:
 426              		.cfi_def_cfa_offset 16
 427 0004 00AF     		add	r7, sp, #0
 428              	.LCFI12:
 429              		.cfi_def_cfa_register 7
 430 0006 7860     		str	r0, [r7, #4]
 416:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
 417:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
 418:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 419:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 420:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_MspInit could be implemented in the user file
 421:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
 422:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 431              		.loc 1 422 0
 432 0008 0C37     		adds	r7, r7, #12
 433              	.LCFI13:
 434              		.cfi_def_cfa_offset 4
 435 000a BD46     		mov	sp, r7
 436              	.LCFI14:
ARM GAS  /tmp/ccqSH0iI.s 			page 16


 437              		.cfi_def_cfa_register 13
 438              		@ sp needed
 439 000c 5DF8047B 		ldr	r7, [sp], #4
 440              	.LCFI15:
 441              		.cfi_restore 7
 442              		.cfi_def_cfa_offset 0
 443 0010 7047     		bx	lr
 444              		.cfi_endproc
 445              	.LFE125:
 447 0012 00BF     		.section	.text.HAL_CAN_MspDeInit,"ax",%progbits
 448              		.align	2
 449              		.weak	HAL_CAN_MspDeInit
 450              		.thumb
 451              		.thumb_func
 453              	HAL_CAN_MspDeInit:
 454              	.LFB126:
 423:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 424:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 425:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  DeInitializes the CAN MSP.
 426:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 427:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 428:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
 429:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 430:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_MspDeInit(CAN_HandleTypeDef *hcan)
 431:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 455              		.loc 1 431 0
 456              		.cfi_startproc
 457              		@ args = 0, pretend = 0, frame = 8
 458              		@ frame_needed = 1, uses_anonymous_args = 0
 459              		@ link register save eliminated.
 460 0000 80B4     		push	{r7}
 461              	.LCFI16:
 462              		.cfi_def_cfa_offset 4
 463              		.cfi_offset 7, -4
 464 0002 83B0     		sub	sp, sp, #12
 465              	.LCFI17:
 466              		.cfi_def_cfa_offset 16
 467 0004 00AF     		add	r7, sp, #0
 468              	.LCFI18:
 469              		.cfi_def_cfa_register 7
 470 0006 7860     		str	r0, [r7, #4]
 432:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
 433:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
 434:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 435:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 436:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_MspDeInit could be implemented in the user file
 437:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
 438:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 471              		.loc 1 438 0
 472 0008 0C37     		adds	r7, r7, #12
 473              	.LCFI19:
 474              		.cfi_def_cfa_offset 4
 475 000a BD46     		mov	sp, r7
 476              	.LCFI20:
 477              		.cfi_def_cfa_register 13
 478              		@ sp needed
 479 000c 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  /tmp/ccqSH0iI.s 			page 17


 480              	.LCFI21:
 481              		.cfi_restore 7
 482              		.cfi_def_cfa_offset 0
 483 0010 7047     		bx	lr
 484              		.cfi_endproc
 485              	.LFE126:
 487 0012 00BF     		.section	.text.HAL_CAN_ConfigFilter,"ax",%progbits
 488              		.align	2
 489              		.global	HAL_CAN_ConfigFilter
 490              		.thumb
 491              		.thumb_func
 493              	HAL_CAN_ConfigFilter:
 494              	.LFB127:
 439:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 440:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 441:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 442:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @}
 443:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 444:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 445:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group2 Configuration functions
 446:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *  @brief    Configuration functions.
 447:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *
 448:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @verbatim
 449:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
 450:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****               ##### Configuration functions #####
 451:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
 452:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]  This section provides functions allowing to:
 453:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_ConfigFilter            : Configure the CAN reception filters
 454:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 455:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @endverbatim
 456:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
 457:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 458:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 459:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 460:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Configures the CAN reception filter according to the specified
 461:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         parameters in the CAN_FilterInitStruct.
 462:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 463:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 464:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
 465:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         contains the filter configuration information.
 466:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
 467:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 468:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
 469:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 495              		.loc 1 469 0
 496              		.cfi_startproc
 497              		@ args = 0, pretend = 0, frame = 16
 498              		@ frame_needed = 1, uses_anonymous_args = 0
 499              		@ link register save eliminated.
 500 0000 80B4     		push	{r7}
 501              	.LCFI22:
 502              		.cfi_def_cfa_offset 4
 503              		.cfi_offset 7, -4
 504 0002 85B0     		sub	sp, sp, #20
 505              	.LCFI23:
 506              		.cfi_def_cfa_offset 24
 507 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccqSH0iI.s 			page 18


 508              	.LCFI24:
 509              		.cfi_def_cfa_register 7
 510 0006 7860     		str	r0, [r7, #4]
 511 0008 3960     		str	r1, [r7]
 470:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t filternbrbitpos = 0U;
 512              		.loc 1 470 0
 513 000a 0023     		movs	r3, #0
 514 000c FB60     		str	r3, [r7, #12]
 471:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   CAN_TypeDef *can_ip = hcan->Instance;
 515              		.loc 1 471 0
 516 000e 7B68     		ldr	r3, [r7, #4]
 517 0010 1B68     		ldr	r3, [r3]
 518 0012 BB60     		str	r3, [r7, #8]
 472:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 473:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 519              		.loc 1 473 0
 520 0014 7B68     		ldr	r3, [r7, #4]
 521 0016 93F82030 		ldrb	r3, [r3, #32]
 522 001a DBB2     		uxtb	r3, r3
 523 001c 012B     		cmp	r3, #1
 524 001e 06D0     		beq	.L27
 474:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 525              		.loc 1 474 0 discriminator 1
 526 0020 7B68     		ldr	r3, [r7, #4]
 527 0022 93F82030 		ldrb	r3, [r3, #32]
 528 0026 DBB2     		uxtb	r3, r3
 473:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 529              		.loc 1 473 0 discriminator 1
 530 0028 022B     		cmp	r3, #2
 531 002a 40F0BC80 		bne	.L28
 532              	.L27:
 475:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 476:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check the parameters */
 477:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdHigh));
 478:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 479:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 480:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 481:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 482:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 483:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 484:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_FUNCTIONAL_STATE(sFilterConfig->FilterActivation));
 485:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 486:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #if defined(CAN3)
 487:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check the CAN instance */
 488:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (hcan->Instance == CAN3)
 489:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 490:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* CAN3 is single instance with 14 dedicated filters banks */
 491:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 492:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check the parameters */
 493:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
 494:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 495:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     else
 496:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 497:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* CAN1 and CAN2 are dual instances with 28 common filters banks */
 498:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Select master instance to access the filter banks */
 499:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       can_ip = CAN1;
 500:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
ARM GAS  /tmp/ccqSH0iI.s 			page 19


 501:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check the parameters */
 502:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->FilterBank));
 503:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
 504:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 505:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #elif defined(CAN2)
 506:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* CAN1 and CAN2 are dual instances with 28 common filters banks */
 507:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Select master instance to access the filter banks */
 508:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     can_ip = CAN1;
 533              		.loc 1 508 0
 534 002e 644B     		ldr	r3, .L37
 535 0030 BB60     		str	r3, [r7, #8]
 509:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 510:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check the parameters */
 511:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->FilterBank));
 512:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
 513:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #else
 514:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* CAN1 is single instance with 14 dedicated filters banks */
 515:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 516:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check the parameters */
 517:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
 518:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #endif
 519:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 520:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Initialisation mode for the filter */
 521:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 536              		.loc 1 521 0
 537 0032 BB68     		ldr	r3, [r7, #8]
 538 0034 D3F80032 		ldr	r3, [r3, #512]
 539 0038 43F00102 		orr	r2, r3, #1
 540 003c BB68     		ldr	r3, [r7, #8]
 541 003e C3F80022 		str	r2, [r3, #512]
 522:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 523:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #if defined(CAN3)
 524:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check the CAN instance */
 525:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (can_ip == CAN1)
 526:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 527:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Select the start filter number of CAN2 slave instance */
 528:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 529:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 530:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 531:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 532:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #elif defined(CAN2)
 533:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Select the start filter number of CAN2 slave instance */
 534:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 542              		.loc 1 534 0
 543 0042 BB68     		ldr	r3, [r7, #8]
 544 0044 D3F80032 		ldr	r3, [r3, #512]
 545 0048 23F47C52 		bic	r2, r3, #16128
 546 004c BB68     		ldr	r3, [r7, #8]
 547 004e C3F80022 		str	r2, [r3, #512]
 535:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 548              		.loc 1 535 0
 549 0052 BB68     		ldr	r3, [r7, #8]
 550 0054 D3F80022 		ldr	r2, [r3, #512]
 551 0058 3B68     		ldr	r3, [r7]
 552 005a 5B6A     		ldr	r3, [r3, #36]
 553 005c 1B02     		lsls	r3, r3, #8
 554 005e 1A43     		orrs	r2, r2, r3
ARM GAS  /tmp/ccqSH0iI.s 			page 20


 555 0060 BB68     		ldr	r3, [r7, #8]
 556 0062 C3F80022 		str	r2, [r3, #512]
 536:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 537:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #endif
 538:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Convert filter number into bit position */
 539:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     filternbrbitpos = (1U) << sFilterConfig->FilterBank;
 557              		.loc 1 539 0
 558 0066 3B68     		ldr	r3, [r7]
 559 0068 5B69     		ldr	r3, [r3, #20]
 560 006a 1A46     		mov	r2, r3
 561 006c 0123     		movs	r3, #1
 562 006e 9340     		lsls	r3, r3, r2
 563 0070 FB60     		str	r3, [r7, #12]
 540:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 541:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Filter Deactivation */
 542:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 564              		.loc 1 542 0
 565 0072 BB68     		ldr	r3, [r7, #8]
 566 0074 D3F81C22 		ldr	r2, [r3, #540]
 567 0078 FB68     		ldr	r3, [r7, #12]
 568 007a DB43     		mvns	r3, r3
 569 007c 1A40     		ands	r2, r2, r3
 570 007e BB68     		ldr	r3, [r7, #8]
 571 0080 C3F81C22 		str	r2, [r3, #540]
 543:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 544:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Filter Scale */
 545:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 572              		.loc 1 545 0
 573 0084 3B68     		ldr	r3, [r7]
 574 0086 DB69     		ldr	r3, [r3, #28]
 575 0088 002B     		cmp	r3, #0
 576 008a 23D1     		bne	.L29
 546:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 547:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* 16-bit scale for the filter */
 548:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 577              		.loc 1 548 0
 578 008c BB68     		ldr	r3, [r7, #8]
 579 008e D3F80C22 		ldr	r2, [r3, #524]
 580 0092 FB68     		ldr	r3, [r7, #12]
 581 0094 DB43     		mvns	r3, r3
 582 0096 1A40     		ands	r2, r2, r3
 583 0098 BB68     		ldr	r3, [r7, #8]
 584 009a C3F80C22 		str	r2, [r3, #524]
 549:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 550:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* First 16-bit identifier and First 16-bit mask */
 551:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Or First 16-bit identifier and Second 16-bit identifier */
 552:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 585              		.loc 1 552 0
 586 009e 3B68     		ldr	r3, [r7]
 587 00a0 5A69     		ldr	r2, [r3, #20]
 553:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 588              		.loc 1 553 0
 589 00a2 3B68     		ldr	r3, [r7]
 590 00a4 DB68     		ldr	r3, [r3, #12]
 591 00a6 1904     		lsls	r1, r3, #16
 554:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 592              		.loc 1 554 0
ARM GAS  /tmp/ccqSH0iI.s 			page 21


 593 00a8 3B68     		ldr	r3, [r7]
 594 00aa 5B68     		ldr	r3, [r3, #4]
 595 00ac 9BB2     		uxth	r3, r3
 553:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 596              		.loc 1 553 0
 597 00ae 1943     		orrs	r1, r1, r3
 552:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 598              		.loc 1 552 0
 599 00b0 BB68     		ldr	r3, [r7, #8]
 600 00b2 4832     		adds	r2, r2, #72
 601 00b4 43F83210 		str	r1, [r3, r2, lsl #3]
 555:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 556:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Second 16-bit identifier and Second 16-bit mask */
 557:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Or Third 16-bit identifier and Fourth 16-bit identifier */
 558:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 602              		.loc 1 558 0
 603 00b8 3B68     		ldr	r3, [r7]
 604 00ba 5B69     		ldr	r3, [r3, #20]
 559:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 605              		.loc 1 559 0
 606 00bc 3A68     		ldr	r2, [r7]
 607 00be 9268     		ldr	r2, [r2, #8]
 608 00c0 1104     		lsls	r1, r2, #16
 560:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 609              		.loc 1 560 0
 610 00c2 3A68     		ldr	r2, [r7]
 611 00c4 1268     		ldr	r2, [r2]
 612 00c6 92B2     		uxth	r2, r2
 559:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 613              		.loc 1 559 0
 614 00c8 0A43     		orrs	r2, r2, r1
 558:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 615              		.loc 1 558 0
 616 00ca B968     		ldr	r1, [r7, #8]
 617 00cc 4833     		adds	r3, r3, #72
 618 00ce DB00     		lsls	r3, r3, #3
 619 00d0 0B44     		add	r3, r3, r1
 620 00d2 5A60     		str	r2, [r3, #4]
 621              	.L29:
 561:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 562:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 563:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 622              		.loc 1 563 0
 623 00d4 3B68     		ldr	r3, [r7]
 624 00d6 DB69     		ldr	r3, [r3, #28]
 625 00d8 012B     		cmp	r3, #1
 626 00da 22D1     		bne	.L30
 564:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 565:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* 32-bit scale for the filter */
 566:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(can_ip->FS1R, filternbrbitpos);
 627              		.loc 1 566 0
 628 00dc BB68     		ldr	r3, [r7, #8]
 629 00de D3F80C22 		ldr	r2, [r3, #524]
 630 00e2 FB68     		ldr	r3, [r7, #12]
 631 00e4 1A43     		orrs	r2, r2, r3
 632 00e6 BB68     		ldr	r3, [r7, #8]
 633 00e8 C3F80C22 		str	r2, [r3, #524]
ARM GAS  /tmp/ccqSH0iI.s 			page 22


 567:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 568:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* 32-bit identifier or First 32-bit identifier */
 569:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 634              		.loc 1 569 0
 635 00ec 3B68     		ldr	r3, [r7]
 636 00ee 5A69     		ldr	r2, [r3, #20]
 570:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 637              		.loc 1 570 0
 638 00f0 3B68     		ldr	r3, [r7]
 639 00f2 1B68     		ldr	r3, [r3]
 640 00f4 1904     		lsls	r1, r3, #16
 571:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 641              		.loc 1 571 0
 642 00f6 3B68     		ldr	r3, [r7]
 643 00f8 5B68     		ldr	r3, [r3, #4]
 644 00fa 9BB2     		uxth	r3, r3
 570:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 645              		.loc 1 570 0
 646 00fc 1943     		orrs	r1, r1, r3
 569:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 647              		.loc 1 569 0
 648 00fe BB68     		ldr	r3, [r7, #8]
 649 0100 4832     		adds	r2, r2, #72
 650 0102 43F83210 		str	r1, [r3, r2, lsl #3]
 572:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 573:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* 32-bit mask or Second 32-bit identifier */
 574:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 651              		.loc 1 574 0
 652 0106 3B68     		ldr	r3, [r7]
 653 0108 5B69     		ldr	r3, [r3, #20]
 575:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 654              		.loc 1 575 0
 655 010a 3A68     		ldr	r2, [r7]
 656 010c 9268     		ldr	r2, [r2, #8]
 657 010e 1104     		lsls	r1, r2, #16
 576:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 658              		.loc 1 576 0
 659 0110 3A68     		ldr	r2, [r7]
 660 0112 D268     		ldr	r2, [r2, #12]
 661 0114 92B2     		uxth	r2, r2
 575:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 662              		.loc 1 575 0
 663 0116 0A43     		orrs	r2, r2, r1
 574:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 664              		.loc 1 574 0
 665 0118 B968     		ldr	r1, [r7, #8]
 666 011a 4833     		adds	r3, r3, #72
 667 011c DB00     		lsls	r3, r3, #3
 668 011e 0B44     		add	r3, r3, r1
 669 0120 5A60     		str	r2, [r3, #4]
 670              	.L30:
 577:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 578:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 579:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Filter Mode */
 580:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 671              		.loc 1 580 0
 672 0122 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccqSH0iI.s 			page 23


 673 0124 9B69     		ldr	r3, [r3, #24]
 674 0126 002B     		cmp	r3, #0
 675 0128 09D1     		bne	.L31
 581:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 582:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Id/Mask mode for the filter*/
 583:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 676              		.loc 1 583 0
 677 012a BB68     		ldr	r3, [r7, #8]
 678 012c D3F80422 		ldr	r2, [r3, #516]
 679 0130 FB68     		ldr	r3, [r7, #12]
 680 0132 DB43     		mvns	r3, r3
 681 0134 1A40     		ands	r2, r2, r3
 682 0136 BB68     		ldr	r3, [r7, #8]
 683 0138 C3F80422 		str	r2, [r3, #516]
 684 013c 07E0     		b	.L32
 685              	.L31:
 584:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 585:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
 586:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 587:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Identifier list mode for the filter*/
 588:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(can_ip->FM1R, filternbrbitpos);
 686              		.loc 1 588 0
 687 013e BB68     		ldr	r3, [r7, #8]
 688 0140 D3F80422 		ldr	r2, [r3, #516]
 689 0144 FB68     		ldr	r3, [r7, #12]
 690 0146 1A43     		orrs	r2, r2, r3
 691 0148 BB68     		ldr	r3, [r7, #8]
 692 014a C3F80422 		str	r2, [r3, #516]
 693              	.L32:
 589:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 590:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 591:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Filter FIFO assignment */
 592:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 694              		.loc 1 592 0
 695 014e 3B68     		ldr	r3, [r7]
 696 0150 1B69     		ldr	r3, [r3, #16]
 697 0152 002B     		cmp	r3, #0
 698 0154 09D1     		bne	.L33
 593:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 594:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* FIFO 0 assignation for the filter */
 595:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 699              		.loc 1 595 0
 700 0156 BB68     		ldr	r3, [r7, #8]
 701 0158 D3F81422 		ldr	r2, [r3, #532]
 702 015c FB68     		ldr	r3, [r7, #12]
 703 015e DB43     		mvns	r3, r3
 704 0160 1A40     		ands	r2, r2, r3
 705 0162 BB68     		ldr	r3, [r7, #8]
 706 0164 C3F81422 		str	r2, [r3, #532]
 707 0168 07E0     		b	.L34
 708              	.L33:
 596:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 597:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     else
 598:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 599:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* FIFO 1 assignation for the filter */
 600:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(can_ip->FFA1R, filternbrbitpos);
 709              		.loc 1 600 0
ARM GAS  /tmp/ccqSH0iI.s 			page 24


 710 016a BB68     		ldr	r3, [r7, #8]
 711 016c D3F81422 		ldr	r2, [r3, #532]
 712 0170 FB68     		ldr	r3, [r7, #12]
 713 0172 1A43     		orrs	r2, r2, r3
 714 0174 BB68     		ldr	r3, [r7, #8]
 715 0176 C3F81422 		str	r2, [r3, #532]
 716              	.L34:
 601:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 602:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 603:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Filter activation */
 604:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (sFilterConfig->FilterActivation == ENABLE)
 717              		.loc 1 604 0
 718 017a 3B68     		ldr	r3, [r7]
 719 017c 1B6A     		ldr	r3, [r3, #32]
 720 017e 012B     		cmp	r3, #1
 721 0180 07D1     		bne	.L35
 605:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 606:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(can_ip->FA1R, filternbrbitpos);
 722              		.loc 1 606 0
 723 0182 BB68     		ldr	r3, [r7, #8]
 724 0184 D3F81C22 		ldr	r2, [r3, #540]
 725 0188 FB68     		ldr	r3, [r7, #12]
 726 018a 1A43     		orrs	r2, r2, r3
 727 018c BB68     		ldr	r3, [r7, #8]
 728 018e C3F81C22 		str	r2, [r3, #540]
 729              	.L35:
 607:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 608:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 609:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Leave the initialisation mode for the filter */
 610:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 730              		.loc 1 610 0
 731 0192 BB68     		ldr	r3, [r7, #8]
 732 0194 D3F80032 		ldr	r3, [r3, #512]
 733 0198 23F00102 		bic	r2, r3, #1
 734 019c BB68     		ldr	r3, [r7, #8]
 735 019e C3F80022 		str	r2, [r3, #512]
 611:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 612:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
 613:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_OK;
 736              		.loc 1 613 0
 737 01a2 0023     		movs	r3, #0
 738 01a4 06E0     		b	.L36
 739              	.L28:
 614:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 615:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 616:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 617:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
 618:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 740              		.loc 1 618 0
 741 01a6 7B68     		ldr	r3, [r7, #4]
 742 01a8 5B6A     		ldr	r3, [r3, #36]
 743 01aa 43F48022 		orr	r2, r3, #262144
 744 01ae 7B68     		ldr	r3, [r7, #4]
 745 01b0 5A62     		str	r2, [r3, #36]
 619:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 620:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 746              		.loc 1 620 0
ARM GAS  /tmp/ccqSH0iI.s 			page 25


 747 01b2 0123     		movs	r3, #1
 748              	.L36:
 621:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 622:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 749              		.loc 1 622 0
 750 01b4 1846     		mov	r0, r3
 751 01b6 1437     		adds	r7, r7, #20
 752              	.LCFI25:
 753              		.cfi_def_cfa_offset 4
 754 01b8 BD46     		mov	sp, r7
 755              	.LCFI26:
 756              		.cfi_def_cfa_register 13
 757              		@ sp needed
 758 01ba 5DF8047B 		ldr	r7, [sp], #4
 759              	.LCFI27:
 760              		.cfi_restore 7
 761              		.cfi_def_cfa_offset 0
 762 01be 7047     		bx	lr
 763              	.L38:
 764              		.align	2
 765              	.L37:
 766 01c0 00640040 		.word	1073767424
 767              		.cfi_endproc
 768              	.LFE127:
 770              		.section	.text.HAL_CAN_Start,"ax",%progbits
 771              		.align	2
 772              		.global	HAL_CAN_Start
 773              		.thumb
 774              		.thumb_func
 776              	HAL_CAN_Start:
 777              	.LFB128:
 623:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 624:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 625:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @}
 626:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 627:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 628:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group3 Control functions
 629:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *  @brief    Control functions
 630:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *
 631:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @verbatim
 632:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
 633:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                       ##### Control functions #####
 634:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
 635:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]  This section provides functions allowing to:
 636:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_Start                    : Start the CAN module
 637:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_Stop                     : Stop the CAN module
 638:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_RequestSleep             : Request sleep mode entry.
 639:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_WakeUp                   : Wake up from sleep mode.
 640:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_IsSleepActive            : Check is sleep mode is active.
 641:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_AddTxMessage             : Add a message to the Tx mailboxes
 642:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                              and activate the corresponding
 643:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                              transmission request
 644:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_AbortTxRequest           : Abort transmission request
 645:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_GetTxMailboxesFreeLevel  : Return Tx mailboxes free level
 646:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_IsTxMessagePending       : Check if a transmission request is
 647:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                              pending on the selected Tx mailbox
 648:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_GetRxMessage             : Get a CAN frame from the Rx FIFO
ARM GAS  /tmp/ccqSH0iI.s 			page 26


 649:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_GetRxFifoFillLevel       : Return Rx FIFO fill level
 650:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 651:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @endverbatim
 652:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
 653:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 654:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 655:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 656:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Start the CAN module.
 657:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
 658:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 659:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
 660:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 661:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
 662:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 778              		.loc 1 662 0
 779              		.cfi_startproc
 780              		@ args = 0, pretend = 0, frame = 16
 781              		@ frame_needed = 1, uses_anonymous_args = 0
 782 0000 80B5     		push	{r7, lr}
 783              	.LCFI28:
 784              		.cfi_def_cfa_offset 8
 785              		.cfi_offset 7, -8
 786              		.cfi_offset 14, -4
 787 0002 84B0     		sub	sp, sp, #16
 788              	.LCFI29:
 789              		.cfi_def_cfa_offset 24
 790 0004 00AF     		add	r7, sp, #0
 791              	.LCFI30:
 792              		.cfi_def_cfa_register 7
 793 0006 7860     		str	r0, [r7, #4]
 663:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t tickstart = 0U;
 794              		.loc 1 663 0
 795 0008 0023     		movs	r3, #0
 796 000a FB60     		str	r3, [r7, #12]
 664:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 665:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_READY)
 797              		.loc 1 665 0
 798 000c 7B68     		ldr	r3, [r7, #4]
 799 000e 93F82030 		ldrb	r3, [r3, #32]
 800 0012 DBB2     		uxtb	r3, r3
 801 0014 012B     		cmp	r3, #1
 802 0016 2ED1     		bne	.L40
 666:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 667:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Change CAN peripheral state */
 668:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->State = HAL_CAN_STATE_LISTENING;
 803              		.loc 1 668 0
 804 0018 7B68     		ldr	r3, [r7, #4]
 805 001a 0222     		movs	r2, #2
 806 001c 83F82020 		strb	r2, [r3, #32]
 669:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 670:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Request leave initialisation */
 671:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 807              		.loc 1 671 0
 808 0020 7B68     		ldr	r3, [r7, #4]
 809 0022 1B68     		ldr	r3, [r3]
 810 0024 7A68     		ldr	r2, [r7, #4]
 811 0026 1268     		ldr	r2, [r2]
ARM GAS  /tmp/ccqSH0iI.s 			page 27


 812 0028 1268     		ldr	r2, [r2]
 813 002a 22F00102 		bic	r2, r2, #1
 814 002e 1A60     		str	r2, [r3]
 672:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 673:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Get tick */
 674:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     tickstart = HAL_GetTick();
 815              		.loc 1 674 0
 816 0030 FFF7FEFF 		bl	HAL_GetTick
 817 0034 F860     		str	r0, [r7, #12]
 675:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 676:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Wait the acknowledge */
 677:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_INAK) != RESET)
 818              		.loc 1 677 0
 819 0036 12E0     		b	.L41
 820              	.L43:
 678:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 679:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check for the Timeout */
 680:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 821              		.loc 1 680 0
 822 0038 FFF7FEFF 		bl	HAL_GetTick
 823 003c 0246     		mov	r2, r0
 824 003e FB68     		ldr	r3, [r7, #12]
 825 0040 D31A     		subs	r3, r2, r3
 826 0042 0A2B     		cmp	r3, #10
 827 0044 0BD9     		bls	.L41
 681:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 682:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Update error code */
 683:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 828              		.loc 1 683 0
 829 0046 7B68     		ldr	r3, [r7, #4]
 830 0048 5B6A     		ldr	r3, [r3, #36]
 831 004a 43F40032 		orr	r2, r3, #131072
 832 004e 7B68     		ldr	r3, [r7, #4]
 833 0050 5A62     		str	r2, [r3, #36]
 684:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 685:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Change CAN state */
 686:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->State = HAL_CAN_STATE_ERROR;
 834              		.loc 1 686 0
 835 0052 7B68     		ldr	r3, [r7, #4]
 836 0054 0522     		movs	r2, #5
 837 0056 83F82020 		strb	r2, [r3, #32]
 687:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 688:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         return HAL_ERROR;
 838              		.loc 1 688 0
 839 005a 0123     		movs	r3, #1
 840 005c 12E0     		b	.L42
 841              	.L41:
 677:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 842              		.loc 1 677 0
 843 005e 7B68     		ldr	r3, [r7, #4]
 844 0060 1B68     		ldr	r3, [r3]
 845 0062 5B68     		ldr	r3, [r3, #4]
 846 0064 03F00103 		and	r3, r3, #1
 847 0068 002B     		cmp	r3, #0
 848 006a E5D1     		bne	.L43
 689:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 690:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
ARM GAS  /tmp/ccqSH0iI.s 			page 28


 691:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 692:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Reset the CAN ErrorCode */
 693:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 849              		.loc 1 693 0
 850 006c 7B68     		ldr	r3, [r7, #4]
 851 006e 0022     		movs	r2, #0
 852 0070 5A62     		str	r2, [r3, #36]
 694:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 695:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
 696:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_OK;
 853              		.loc 1 696 0
 854 0072 0023     		movs	r3, #0
 855 0074 06E0     		b	.L42
 856              	.L40:
 697:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 698:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 699:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 700:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
 701:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 857              		.loc 1 701 0
 858 0076 7B68     		ldr	r3, [r7, #4]
 859 0078 5B6A     		ldr	r3, [r3, #36]
 860 007a 43F40022 		orr	r2, r3, #524288
 861 007e 7B68     		ldr	r3, [r7, #4]
 862 0080 5A62     		str	r2, [r3, #36]
 702:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 703:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 863              		.loc 1 703 0
 864 0082 0123     		movs	r3, #1
 865              	.L42:
 704:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 705:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 866              		.loc 1 705 0
 867 0084 1846     		mov	r0, r3
 868 0086 1037     		adds	r7, r7, #16
 869              	.LCFI31:
 870              		.cfi_def_cfa_offset 8
 871 0088 BD46     		mov	sp, r7
 872              	.LCFI32:
 873              		.cfi_def_cfa_register 13
 874              		@ sp needed
 875 008a 80BD     		pop	{r7, pc}
 876              		.cfi_endproc
 877              	.LFE128:
 879              		.section	.text.HAL_CAN_Stop,"ax",%progbits
 880              		.align	2
 881              		.global	HAL_CAN_Stop
 882              		.thumb
 883              		.thumb_func
 885              	HAL_CAN_Stop:
 886              	.LFB129:
 706:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 707:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 708:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Stop the CAN module and enable access to configuration registers.
 709:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
 710:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 711:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
ARM GAS  /tmp/ccqSH0iI.s 			page 29


 712:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 713:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
 714:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 887              		.loc 1 714 0
 888              		.cfi_startproc
 889              		@ args = 0, pretend = 0, frame = 16
 890              		@ frame_needed = 1, uses_anonymous_args = 0
 891 0000 80B5     		push	{r7, lr}
 892              	.LCFI33:
 893              		.cfi_def_cfa_offset 8
 894              		.cfi_offset 7, -8
 895              		.cfi_offset 14, -4
 896 0002 84B0     		sub	sp, sp, #16
 897              	.LCFI34:
 898              		.cfi_def_cfa_offset 24
 899 0004 00AF     		add	r7, sp, #0
 900              	.LCFI35:
 901              		.cfi_def_cfa_register 7
 902 0006 7860     		str	r0, [r7, #4]
 715:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t tickstart = 0U;
 903              		.loc 1 715 0
 904 0008 0023     		movs	r3, #0
 905 000a FB60     		str	r3, [r7, #12]
 716:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 717:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_LISTENING)
 906              		.loc 1 717 0
 907 000c 7B68     		ldr	r3, [r7, #4]
 908 000e 93F82030 		ldrb	r3, [r3, #32]
 909 0012 DBB2     		uxtb	r3, r3
 910 0014 022B     		cmp	r3, #2
 911 0016 33D1     		bne	.L45
 718:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 719:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Request initialisation */
 720:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 912              		.loc 1 720 0
 913 0018 7B68     		ldr	r3, [r7, #4]
 914 001a 1B68     		ldr	r3, [r3]
 915 001c 7A68     		ldr	r2, [r7, #4]
 916 001e 1268     		ldr	r2, [r2]
 917 0020 1268     		ldr	r2, [r2]
 918 0022 42F00102 		orr	r2, r2, #1
 919 0026 1A60     		str	r2, [r3]
 721:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 722:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Get tick */
 723:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     tickstart = HAL_GetTick();
 920              		.loc 1 723 0
 921 0028 FFF7FEFF 		bl	HAL_GetTick
 922 002c F860     		str	r0, [r7, #12]
 724:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 725:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Wait the acknowledge */
 726:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_INAK) == RESET)
 923              		.loc 1 726 0
 924 002e 12E0     		b	.L46
 925              	.L48:
 727:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 728:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check for the Timeout */
 729:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
ARM GAS  /tmp/ccqSH0iI.s 			page 30


 926              		.loc 1 729 0
 927 0030 FFF7FEFF 		bl	HAL_GetTick
 928 0034 0246     		mov	r2, r0
 929 0036 FB68     		ldr	r3, [r7, #12]
 930 0038 D31A     		subs	r3, r2, r3
 931 003a 0A2B     		cmp	r3, #10
 932 003c 0BD9     		bls	.L46
 730:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 731:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Update error code */
 732:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 933              		.loc 1 732 0
 934 003e 7B68     		ldr	r3, [r7, #4]
 935 0040 5B6A     		ldr	r3, [r3, #36]
 936 0042 43F40032 		orr	r2, r3, #131072
 937 0046 7B68     		ldr	r3, [r7, #4]
 938 0048 5A62     		str	r2, [r3, #36]
 733:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 734:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Change CAN state */
 735:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->State = HAL_CAN_STATE_ERROR;
 939              		.loc 1 735 0
 940 004a 7B68     		ldr	r3, [r7, #4]
 941 004c 0522     		movs	r2, #5
 942 004e 83F82020 		strb	r2, [r3, #32]
 736:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 737:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         return HAL_ERROR;
 943              		.loc 1 737 0
 944 0052 0123     		movs	r3, #1
 945 0054 1BE0     		b	.L47
 946              	.L46:
 726:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 947              		.loc 1 726 0
 948 0056 7B68     		ldr	r3, [r7, #4]
 949 0058 1B68     		ldr	r3, [r3]
 950 005a 5B68     		ldr	r3, [r3, #4]
 951 005c 03F00103 		and	r3, r3, #1
 952 0060 002B     		cmp	r3, #0
 953 0062 E5D0     		beq	.L48
 738:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 739:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 740:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 741:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Exit from sleep mode */
 742:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 954              		.loc 1 742 0
 955 0064 7B68     		ldr	r3, [r7, #4]
 956 0066 1B68     		ldr	r3, [r3]
 957 0068 7A68     		ldr	r2, [r7, #4]
 958 006a 1268     		ldr	r2, [r2]
 959 006c 1268     		ldr	r2, [r2]
 960 006e 22F00202 		bic	r2, r2, #2
 961 0072 1A60     		str	r2, [r3]
 743:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 744:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Change CAN peripheral state */
 745:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->State = HAL_CAN_STATE_READY;
 962              		.loc 1 745 0
 963 0074 7B68     		ldr	r3, [r7, #4]
 964 0076 0122     		movs	r2, #1
 965 0078 83F82020 		strb	r2, [r3, #32]
ARM GAS  /tmp/ccqSH0iI.s 			page 31


 746:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 747:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
 748:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_OK;
 966              		.loc 1 748 0
 967 007c 0023     		movs	r3, #0
 968 007e 06E0     		b	.L47
 969              	.L45:
 749:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 750:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 751:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 752:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
 753:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 970              		.loc 1 753 0
 971 0080 7B68     		ldr	r3, [r7, #4]
 972 0082 5B6A     		ldr	r3, [r3, #36]
 973 0084 43F48012 		orr	r2, r3, #1048576
 974 0088 7B68     		ldr	r3, [r7, #4]
 975 008a 5A62     		str	r2, [r3, #36]
 754:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 755:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 976              		.loc 1 755 0
 977 008c 0123     		movs	r3, #1
 978              	.L47:
 756:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 757:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 979              		.loc 1 757 0
 980 008e 1846     		mov	r0, r3
 981 0090 1037     		adds	r7, r7, #16
 982              	.LCFI36:
 983              		.cfi_def_cfa_offset 8
 984 0092 BD46     		mov	sp, r7
 985              	.LCFI37:
 986              		.cfi_def_cfa_register 13
 987              		@ sp needed
 988 0094 80BD     		pop	{r7, pc}
 989              		.cfi_endproc
 990              	.LFE129:
 992 0096 00BF     		.section	.text.HAL_CAN_RequestSleep,"ax",%progbits
 993              		.align	2
 994              		.global	HAL_CAN_RequestSleep
 995              		.thumb
 996              		.thumb_func
 998              	HAL_CAN_RequestSleep:
 999              	.LFB130:
 758:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 759:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 760:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Request the sleep mode (low power) entry.
 761:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         When returning from this function, Sleep mode will be entered
 762:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         as soon as the current CAN activity (transmission or reception
 763:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         of a CAN frame) has been completed.
 764:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 765:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 766:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status.
 767:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 768:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_RequestSleep(CAN_HandleTypeDef *hcan)
 769:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1000              		.loc 1 769 0
ARM GAS  /tmp/ccqSH0iI.s 			page 32


 1001              		.cfi_startproc
 1002              		@ args = 0, pretend = 0, frame = 8
 1003              		@ frame_needed = 1, uses_anonymous_args = 0
 1004              		@ link register save eliminated.
 1005 0000 80B4     		push	{r7}
 1006              	.LCFI38:
 1007              		.cfi_def_cfa_offset 4
 1008              		.cfi_offset 7, -4
 1009 0002 83B0     		sub	sp, sp, #12
 1010              	.LCFI39:
 1011              		.cfi_def_cfa_offset 16
 1012 0004 00AF     		add	r7, sp, #0
 1013              	.LCFI40:
 1014              		.cfi_def_cfa_register 7
 1015 0006 7860     		str	r0, [r7, #4]
 770:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 1016              		.loc 1 770 0
 1017 0008 7B68     		ldr	r3, [r7, #4]
 1018 000a 93F82030 		ldrb	r3, [r3, #32]
 1019 000e DBB2     		uxtb	r3, r3
 1020 0010 012B     		cmp	r3, #1
 1021 0012 05D0     		beq	.L50
 771:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1022              		.loc 1 771 0 discriminator 1
 1023 0014 7B68     		ldr	r3, [r7, #4]
 1024 0016 93F82030 		ldrb	r3, [r3, #32]
 1025 001a DBB2     		uxtb	r3, r3
 770:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 1026              		.loc 1 770 0 discriminator 1
 1027 001c 022B     		cmp	r3, #2
 1028 001e 09D1     		bne	.L51
 1029              	.L50:
 772:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 773:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Request Sleep mode */
 774:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 1030              		.loc 1 774 0
 1031 0020 7B68     		ldr	r3, [r7, #4]
 1032 0022 1B68     		ldr	r3, [r3]
 1033 0024 7A68     		ldr	r2, [r7, #4]
 1034 0026 1268     		ldr	r2, [r2]
 1035 0028 1268     		ldr	r2, [r2]
 1036 002a 42F00202 		orr	r2, r2, #2
 1037 002e 1A60     		str	r2, [r3]
 775:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 776:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
 777:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_OK;
 1038              		.loc 1 777 0
 1039 0030 0023     		movs	r3, #0
 1040 0032 06E0     		b	.L52
 1041              	.L51:
 778:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 779:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 780:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 781:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
 782:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1042              		.loc 1 782 0
 1043 0034 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccqSH0iI.s 			page 33


 1044 0036 5B6A     		ldr	r3, [r3, #36]
 1045 0038 43F48022 		orr	r2, r3, #262144
 1046 003c 7B68     		ldr	r3, [r7, #4]
 1047 003e 5A62     		str	r2, [r3, #36]
 783:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 784:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
 785:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 1048              		.loc 1 785 0
 1049 0040 0123     		movs	r3, #1
 1050              	.L52:
 786:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 787:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1051              		.loc 1 787 0
 1052 0042 1846     		mov	r0, r3
 1053 0044 0C37     		adds	r7, r7, #12
 1054              	.LCFI41:
 1055              		.cfi_def_cfa_offset 4
 1056 0046 BD46     		mov	sp, r7
 1057              	.LCFI42:
 1058              		.cfi_def_cfa_register 13
 1059              		@ sp needed
 1060 0048 5DF8047B 		ldr	r7, [sp], #4
 1061              	.LCFI43:
 1062              		.cfi_restore 7
 1063              		.cfi_def_cfa_offset 0
 1064 004c 7047     		bx	lr
 1065              		.cfi_endproc
 1066              	.LFE130:
 1068 004e 00BF     		.section	.text.HAL_CAN_WakeUp,"ax",%progbits
 1069              		.align	2
 1070              		.global	HAL_CAN_WakeUp
 1071              		.thumb
 1072              		.thumb_func
 1074              	HAL_CAN_WakeUp:
 1075              	.LFB131:
 788:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 789:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 790:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Wake up from sleep mode.
 791:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         When returning with HAL_OK status from this function, Sleep mode
 792:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         is exited.
 793:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 794:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 795:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status.
 796:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 797:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_WakeUp(CAN_HandleTypeDef *hcan)
 798:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1076              		.loc 1 798 0
 1077              		.cfi_startproc
 1078              		@ args = 0, pretend = 0, frame = 16
 1079              		@ frame_needed = 1, uses_anonymous_args = 0
 1080              		@ link register save eliminated.
 1081 0000 80B4     		push	{r7}
 1082              	.LCFI44:
 1083              		.cfi_def_cfa_offset 4
 1084              		.cfi_offset 7, -4
 1085 0002 85B0     		sub	sp, sp, #20
 1086              	.LCFI45:
ARM GAS  /tmp/ccqSH0iI.s 			page 34


 1087              		.cfi_def_cfa_offset 24
 1088 0004 00AF     		add	r7, sp, #0
 1089              	.LCFI46:
 1090              		.cfi_def_cfa_register 7
 1091 0006 7860     		str	r0, [r7, #4]
 799:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   __IO uint32_t count = 0;
 1092              		.loc 1 799 0
 1093 0008 0023     		movs	r3, #0
 1094 000a BB60     		str	r3, [r7, #8]
 800:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t timeout = 1000000U;
 1095              		.loc 1 800 0
 1096 000c 1C4B     		ldr	r3, .L59
 1097 000e FB60     		str	r3, [r7, #12]
 801:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 802:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 1098              		.loc 1 802 0
 1099 0010 7B68     		ldr	r3, [r7, #4]
 1100 0012 93F82030 		ldrb	r3, [r3, #32]
 1101 0016 DBB2     		uxtb	r3, r3
 1102 0018 012B     		cmp	r3, #1
 1103 001a 05D0     		beq	.L54
 803:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1104              		.loc 1 803 0 discriminator 1
 1105 001c 7B68     		ldr	r3, [r7, #4]
 1106 001e 93F82030 		ldrb	r3, [r3, #32]
 1107 0022 DBB2     		uxtb	r3, r3
 802:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1108              		.loc 1 802 0 discriminator 1
 1109 0024 022B     		cmp	r3, #2
 1110 0026 1ED1     		bne	.L55
 1111              	.L54:
 804:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 805:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Wake up request */
 806:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 1112              		.loc 1 806 0
 1113 0028 7B68     		ldr	r3, [r7, #4]
 1114 002a 1B68     		ldr	r3, [r3]
 1115 002c 7A68     		ldr	r2, [r7, #4]
 1116 002e 1268     		ldr	r2, [r2]
 1117 0030 1268     		ldr	r2, [r2]
 1118 0032 22F00202 		bic	r2, r2, #2
 1119 0036 1A60     		str	r2, [r3]
 1120              	.L58:
 807:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 808:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Wait sleep mode is exited */
 809:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     do
 810:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 811:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check if timeout is reached */
 812:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if (++count > timeout)
 1121              		.loc 1 812 0
 1122 0038 BB68     		ldr	r3, [r7, #8]
 1123 003a 0133     		adds	r3, r3, #1
 1124 003c BB60     		str	r3, [r7, #8]
 1125 003e FA68     		ldr	r2, [r7, #12]
 1126 0040 9342     		cmp	r3, r2
 1127 0042 07D9     		bls	.L56
 813:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
ARM GAS  /tmp/ccqSH0iI.s 			page 35


 814:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Update error code */
 815:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 1128              		.loc 1 815 0
 1129 0044 7B68     		ldr	r3, [r7, #4]
 1130 0046 5B6A     		ldr	r3, [r3, #36]
 1131 0048 43F40032 		orr	r2, r3, #131072
 1132 004c 7B68     		ldr	r3, [r7, #4]
 1133 004e 5A62     		str	r2, [r3, #36]
 816:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 817:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         return HAL_ERROR;
 1134              		.loc 1 817 0
 1135 0050 0123     		movs	r3, #1
 1136 0052 0FE0     		b	.L57
 1137              	.L56:
 818:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 819:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 820:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET);
 1138              		.loc 1 820 0
 1139 0054 7B68     		ldr	r3, [r7, #4]
 1140 0056 1B68     		ldr	r3, [r3]
 1141 0058 5B68     		ldr	r3, [r3, #4]
 1142 005a 03F00203 		and	r3, r3, #2
 1143 005e 002B     		cmp	r3, #0
 1144 0060 EAD1     		bne	.L58
 821:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 822:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
 823:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_OK;
 1145              		.loc 1 823 0
 1146 0062 0023     		movs	r3, #0
 1147 0064 06E0     		b	.L57
 1148              	.L55:
 824:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 825:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 826:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 827:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
 828:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1149              		.loc 1 828 0
 1150 0066 7B68     		ldr	r3, [r7, #4]
 1151 0068 5B6A     		ldr	r3, [r3, #36]
 1152 006a 43F48022 		orr	r2, r3, #262144
 1153 006e 7B68     		ldr	r3, [r7, #4]
 1154 0070 5A62     		str	r2, [r3, #36]
 829:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 830:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 1155              		.loc 1 830 0
 1156 0072 0123     		movs	r3, #1
 1157              	.L57:
 831:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 832:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1158              		.loc 1 832 0
 1159 0074 1846     		mov	r0, r3
 1160 0076 1437     		adds	r7, r7, #20
 1161              	.LCFI47:
 1162              		.cfi_def_cfa_offset 4
 1163 0078 BD46     		mov	sp, r7
 1164              	.LCFI48:
 1165              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccqSH0iI.s 			page 36


 1166              		@ sp needed
 1167 007a 5DF8047B 		ldr	r7, [sp], #4
 1168              	.LCFI49:
 1169              		.cfi_restore 7
 1170              		.cfi_def_cfa_offset 0
 1171 007e 7047     		bx	lr
 1172              	.L60:
 1173              		.align	2
 1174              	.L59:
 1175 0080 40420F00 		.word	1000000
 1176              		.cfi_endproc
 1177              	.LFE131:
 1179              		.section	.text.HAL_CAN_IsSleepActive,"ax",%progbits
 1180              		.align	2
 1181              		.global	HAL_CAN_IsSleepActive
 1182              		.thumb
 1183              		.thumb_func
 1185              	HAL_CAN_IsSleepActive:
 1186              	.LFB132:
 833:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 834:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 835:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Check is sleep mode is active.
 836:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 837:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 838:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval Status
 839:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *          - 0 : Sleep mode is not active.
 840:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *          - 1 : Sleep mode is active.
 841:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 842:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** uint32_t HAL_CAN_IsSleepActive(CAN_HandleTypeDef *hcan)
 843:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1187              		.loc 1 843 0
 1188              		.cfi_startproc
 1189              		@ args = 0, pretend = 0, frame = 16
 1190              		@ frame_needed = 1, uses_anonymous_args = 0
 1191              		@ link register save eliminated.
 1192 0000 80B4     		push	{r7}
 1193              	.LCFI50:
 1194              		.cfi_def_cfa_offset 4
 1195              		.cfi_offset 7, -4
 1196 0002 85B0     		sub	sp, sp, #20
 1197              	.LCFI51:
 1198              		.cfi_def_cfa_offset 24
 1199 0004 00AF     		add	r7, sp, #0
 1200              	.LCFI52:
 1201              		.cfi_def_cfa_register 7
 1202 0006 7860     		str	r0, [r7, #4]
 844:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t status = 0U;
 1203              		.loc 1 844 0
 1204 0008 0023     		movs	r3, #0
 1205 000a FB60     		str	r3, [r7, #12]
 845:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 846:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 1206              		.loc 1 846 0
 1207 000c 7B68     		ldr	r3, [r7, #4]
 1208 000e 93F82030 		ldrb	r3, [r3, #32]
 1209 0012 DBB2     		uxtb	r3, r3
 1210 0014 012B     		cmp	r3, #1
ARM GAS  /tmp/ccqSH0iI.s 			page 37


 1211 0016 05D0     		beq	.L62
 847:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1212              		.loc 1 847 0 discriminator 1
 1213 0018 7B68     		ldr	r3, [r7, #4]
 1214 001a 93F82030 		ldrb	r3, [r3, #32]
 1215 001e DBB2     		uxtb	r3, r3
 846:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1216              		.loc 1 846 0 discriminator 1
 1217 0020 022B     		cmp	r3, #2
 1218 0022 08D1     		bne	.L63
 1219              	.L62:
 848:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 849:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check Sleep mode */
 850:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET)
 1220              		.loc 1 850 0
 1221 0024 7B68     		ldr	r3, [r7, #4]
 1222 0026 1B68     		ldr	r3, [r3]
 1223 0028 5B68     		ldr	r3, [r3, #4]
 1224 002a 03F00203 		and	r3, r3, #2
 1225 002e 002B     		cmp	r3, #0
 1226 0030 01D0     		beq	.L63
 851:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 852:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       status = 1U;
 1227              		.loc 1 852 0
 1228 0032 0123     		movs	r3, #1
 1229 0034 FB60     		str	r3, [r7, #12]
 1230              	.L63:
 853:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 854:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 855:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 856:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return function status */
 857:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return status;
 1231              		.loc 1 857 0
 1232 0036 FB68     		ldr	r3, [r7, #12]
 858:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1233              		.loc 1 858 0
 1234 0038 1846     		mov	r0, r3
 1235 003a 1437     		adds	r7, r7, #20
 1236              	.LCFI53:
 1237              		.cfi_def_cfa_offset 4
 1238 003c BD46     		mov	sp, r7
 1239              	.LCFI54:
 1240              		.cfi_def_cfa_register 13
 1241              		@ sp needed
 1242 003e 5DF8047B 		ldr	r7, [sp], #4
 1243              	.LCFI55:
 1244              		.cfi_restore 7
 1245              		.cfi_def_cfa_offset 0
 1246 0042 7047     		bx	lr
 1247              		.cfi_endproc
 1248              	.LFE132:
 1250              		.section	.text.HAL_CAN_AddTxMessage,"ax",%progbits
 1251              		.align	2
 1252              		.global	HAL_CAN_AddTxMessage
 1253              		.thumb
 1254              		.thumb_func
 1256              	HAL_CAN_AddTxMessage:
ARM GAS  /tmp/ccqSH0iI.s 			page 38


 1257              	.LFB133:
 859:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 860:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 861:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Add a message to the first free Tx mailbox and activate the
 862:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         corresponding transmission request.
 863:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 864:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 865:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  pHeader pointer to a CAN_TxHeaderTypeDef structure.
 866:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  aData array containing the payload of the Tx frame.
 867:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  pTxMailbox pointer to a variable where the function will return
 868:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the TxMailbox used to store the Tx message.
 869:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
 870:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
 871:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 872:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8
 873:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1258              		.loc 1 873 0
 1259              		.cfi_startproc
 1260              		@ args = 0, pretend = 0, frame = 24
 1261              		@ frame_needed = 1, uses_anonymous_args = 0
 1262              		@ link register save eliminated.
 1263 0000 80B4     		push	{r7}
 1264              	.LCFI56:
 1265              		.cfi_def_cfa_offset 4
 1266              		.cfi_offset 7, -4
 1267 0002 87B0     		sub	sp, sp, #28
 1268              	.LCFI57:
 1269              		.cfi_def_cfa_offset 32
 1270 0004 00AF     		add	r7, sp, #0
 1271              	.LCFI58:
 1272              		.cfi_def_cfa_register 7
 1273 0006 F860     		str	r0, [r7, #12]
 1274 0008 B960     		str	r1, [r7, #8]
 1275 000a 7A60     		str	r2, [r7, #4]
 1276 000c 3B60     		str	r3, [r7]
 874:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t transmitmailbox;
 875:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 876:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check the parameters */
 877:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_IDTYPE(pHeader->IDE));
 878:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_RTR(pHeader->RTR));
 879:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_DLC(pHeader->DLC));
 880:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (pHeader->IDE == CAN_ID_STD)
 881:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 882:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_STDID(pHeader->StdId));
 883:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 884:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 885:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 886:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_EXTID(pHeader->ExtId));
 887:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 888:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));
 889:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 890:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 1277              		.loc 1 890 0
 1278 000e FB68     		ldr	r3, [r7, #12]
 1279 0010 93F82030 		ldrb	r3, [r3, #32]
 1280 0014 DBB2     		uxtb	r3, r3
 1281 0016 012B     		cmp	r3, #1
ARM GAS  /tmp/ccqSH0iI.s 			page 39


 1282 0018 06D0     		beq	.L66
 891:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1283              		.loc 1 891 0 discriminator 1
 1284 001a FB68     		ldr	r3, [r7, #12]
 1285 001c 93F82030 		ldrb	r3, [r3, #32]
 1286 0020 DBB2     		uxtb	r3, r3
 890:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1287              		.loc 1 890 0 discriminator 1
 1288 0022 022B     		cmp	r3, #2
 1289 0024 40F0AE80 		bne	.L67
 1290              	.L66:
 892:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 893:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check that all the Tx mailboxes are not full */
 894:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (((hcan->Instance->TSR & CAN_TSR_TME0) != RESET) ||
 1291              		.loc 1 894 0
 1292 0028 FB68     		ldr	r3, [r7, #12]
 1293 002a 1B68     		ldr	r3, [r3]
 1294 002c 9B68     		ldr	r3, [r3, #8]
 1295 002e 03F08063 		and	r3, r3, #67108864
 1296 0032 002B     		cmp	r3, #0
 1297 0034 0ED1     		bne	.L68
 895:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET) ||
 1298              		.loc 1 895 0 discriminator 1
 1299 0036 FB68     		ldr	r3, [r7, #12]
 1300 0038 1B68     		ldr	r3, [r3]
 1301 003a 9B68     		ldr	r3, [r3, #8]
 1302 003c 03F00063 		and	r3, r3, #134217728
 894:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET) ||
 1303              		.loc 1 894 0 discriminator 1
 1304 0040 002B     		cmp	r3, #0
 1305 0042 07D1     		bne	.L68
 896:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((hcan->Instance->TSR & CAN_TSR_TME2) != RESET))
 1306              		.loc 1 896 0
 1307 0044 FB68     		ldr	r3, [r7, #12]
 1308 0046 1B68     		ldr	r3, [r3]
 1309 0048 9B68     		ldr	r3, [r3, #8]
 1310 004a 03F08053 		and	r3, r3, #268435456
 895:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET) ||
 1311              		.loc 1 895 0
 1312 004e 002B     		cmp	r3, #0
 1313 0050 00F09080 		beq	.L69
 1314              	.L68:
 897:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 898:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Select an empty transmit mailbox */
 899:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       transmitmailbox = (hcan->Instance->TSR & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 1315              		.loc 1 899 0
 1316 0054 FB68     		ldr	r3, [r7, #12]
 1317 0056 1B68     		ldr	r3, [r3]
 1318 0058 9B68     		ldr	r3, [r3, #8]
 1319 005a 03F04073 		and	r3, r3, #50331648
 1320 005e 1B0E     		lsrs	r3, r3, #24
 1321 0060 7B61     		str	r3, [r7, #20]
 900:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 901:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Store the Tx mailbox */
 902:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       *pTxMailbox = 1U << transmitmailbox;
 1322              		.loc 1 902 0
 1323 0062 7B69     		ldr	r3, [r7, #20]
ARM GAS  /tmp/ccqSH0iI.s 			page 40


 1324 0064 0122     		movs	r2, #1
 1325 0066 9A40     		lsls	r2, r2, r3
 1326 0068 3B68     		ldr	r3, [r7]
 1327 006a 1A60     		str	r2, [r3]
 903:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 904:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Set up the Id */
 905:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if (pHeader->IDE == CAN_ID_STD)
 1328              		.loc 1 905 0
 1329 006c BB68     		ldr	r3, [r7, #8]
 1330 006e 9B68     		ldr	r3, [r3, #8]
 1331 0070 002B     		cmp	r3, #0
 1332 0072 0DD1     		bne	.L70
 906:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 907:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 1333              		.loc 1 907 0
 1334 0074 FB68     		ldr	r3, [r7, #12]
 1335 0076 1968     		ldr	r1, [r3]
 1336 0078 BB68     		ldr	r3, [r7, #8]
 1337 007a 1B68     		ldr	r3, [r3]
 1338 007c 5A05     		lsls	r2, r3, #21
 908:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                                            pHeader->RTR);
 1339              		.loc 1 908 0
 1340 007e BB68     		ldr	r3, [r7, #8]
 1341 0080 DB68     		ldr	r3, [r3, #12]
 907:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                                            pHeader->RTR);
 1342              		.loc 1 907 0
 1343 0082 1A43     		orrs	r2, r2, r3
 1344 0084 7B69     		ldr	r3, [r7, #20]
 1345 0086 1833     		adds	r3, r3, #24
 1346 0088 1B01     		lsls	r3, r3, #4
 1347 008a 0B44     		add	r3, r3, r1
 1348 008c 1A60     		str	r2, [r3]
 1349 008e 0FE0     		b	.L71
 1350              	.L70:
 909:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 910:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       else
 911:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 912:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 1351              		.loc 1 912 0
 1352 0090 FB68     		ldr	r3, [r7, #12]
 1353 0092 1968     		ldr	r1, [r3]
 1354 0094 BB68     		ldr	r3, [r7, #8]
 1355 0096 5B68     		ldr	r3, [r3, #4]
 1356 0098 DA00     		lsls	r2, r3, #3
 913:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                                            pHeader->IDE |
 1357              		.loc 1 913 0
 1358 009a BB68     		ldr	r3, [r7, #8]
 1359 009c 9B68     		ldr	r3, [r3, #8]
 912:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                                            pHeader->IDE |
 1360              		.loc 1 912 0
 1361 009e 1A43     		orrs	r2, r2, r3
 914:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                                            pHeader->RTR);
 1362              		.loc 1 914 0
 1363 00a0 BB68     		ldr	r3, [r7, #8]
 1364 00a2 DB68     		ldr	r3, [r3, #12]
 913:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                                            pHeader->IDE |
 1365              		.loc 1 913 0
ARM GAS  /tmp/ccqSH0iI.s 			page 41


 1366 00a4 1A43     		orrs	r2, r2, r3
 912:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                                            pHeader->IDE |
 1367              		.loc 1 912 0
 1368 00a6 7B69     		ldr	r3, [r7, #20]
 1369 00a8 1833     		adds	r3, r3, #24
 1370 00aa 1B01     		lsls	r3, r3, #4
 1371 00ac 0B44     		add	r3, r3, r1
 1372 00ae 1A60     		str	r2, [r3]
 1373              	.L71:
 915:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 916:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 917:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Set up the DLC */
 918:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 1374              		.loc 1 918 0
 1375 00b0 FB68     		ldr	r3, [r7, #12]
 1376 00b2 1968     		ldr	r1, [r3]
 1377 00b4 BB68     		ldr	r3, [r7, #8]
 1378 00b6 1A69     		ldr	r2, [r3, #16]
 1379 00b8 7B69     		ldr	r3, [r7, #20]
 1380 00ba 1833     		adds	r3, r3, #24
 1381 00bc 1B01     		lsls	r3, r3, #4
 1382 00be 0B44     		add	r3, r3, r1
 1383 00c0 5A60     		str	r2, [r3, #4]
 919:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 920:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Set up the Transmit Global Time mode */
 921:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if (pHeader->TransmitGlobalTime == ENABLE)
 1384              		.loc 1 921 0
 1385 00c2 BB68     		ldr	r3, [r7, #8]
 1386 00c4 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 1387 00c6 012B     		cmp	r3, #1
 1388 00c8 0FD1     		bne	.L72
 922:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 923:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 1389              		.loc 1 923 0
 1390 00ca FB68     		ldr	r3, [r7, #12]
 1391 00cc 1968     		ldr	r1, [r3]
 1392 00ce FB68     		ldr	r3, [r7, #12]
 1393 00d0 1A68     		ldr	r2, [r3]
 1394 00d2 7B69     		ldr	r3, [r7, #20]
 1395 00d4 1833     		adds	r3, r3, #24
 1396 00d6 1B01     		lsls	r3, r3, #4
 1397 00d8 1344     		add	r3, r3, r2
 1398 00da 5B68     		ldr	r3, [r3, #4]
 1399 00dc 43F48072 		orr	r2, r3, #256
 1400 00e0 7B69     		ldr	r3, [r7, #20]
 1401 00e2 1833     		adds	r3, r3, #24
 1402 00e4 1B01     		lsls	r3, r3, #4
 1403 00e6 0B44     		add	r3, r3, r1
 1404 00e8 5A60     		str	r2, [r3, #4]
 1405              	.L72:
 924:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 925:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 926:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Set up the data field */
 927:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 1406              		.loc 1 927 0
 1407 00ea FB68     		ldr	r3, [r7, #12]
 1408 00ec 1968     		ldr	r1, [r3]
ARM GAS  /tmp/ccqSH0iI.s 			page 42


 1409 00ee 7B68     		ldr	r3, [r7, #4]
 1410 00f0 0733     		adds	r3, r3, #7
 1411 00f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1412 00f4 1A06     		lsls	r2, r3, #24
 1413 00f6 7B68     		ldr	r3, [r7, #4]
 1414 00f8 0633     		adds	r3, r3, #6
 1415 00fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1416 00fc 1B04     		lsls	r3, r3, #16
 1417 00fe 1A43     		orrs	r2, r2, r3
 1418 0100 7B68     		ldr	r3, [r7, #4]
 1419 0102 0533     		adds	r3, r3, #5
 1420 0104 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1421 0106 1B02     		lsls	r3, r3, #8
 1422 0108 1343     		orrs	r3, r3, r2
 1423 010a 7A68     		ldr	r2, [r7, #4]
 1424 010c 0432     		adds	r2, r2, #4
 1425 010e 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1426 0110 1A43     		orrs	r2, r2, r3
 1427 0112 7B69     		ldr	r3, [r7, #20]
 1428 0114 1B01     		lsls	r3, r3, #4
 1429 0116 0B44     		add	r3, r3, r1
 1430 0118 03F5C473 		add	r3, r3, #392
 1431 011c 5A60     		str	r2, [r3, #4]
 928:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                 ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
 929:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                 ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
 930:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                 ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
 931:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                 ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
 932:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 1432              		.loc 1 932 0
 1433 011e FB68     		ldr	r3, [r7, #12]
 1434 0120 1968     		ldr	r1, [r3]
 1435 0122 7B68     		ldr	r3, [r7, #4]
 1436 0124 0333     		adds	r3, r3, #3
 1437 0126 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1438 0128 1A06     		lsls	r2, r3, #24
 1439 012a 7B68     		ldr	r3, [r7, #4]
 1440 012c 0233     		adds	r3, r3, #2
 1441 012e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1442 0130 1B04     		lsls	r3, r3, #16
 1443 0132 1A43     		orrs	r2, r2, r3
 1444 0134 7B68     		ldr	r3, [r7, #4]
 1445 0136 0133     		adds	r3, r3, #1
 1446 0138 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1447 013a 1B02     		lsls	r3, r3, #8
 1448 013c 1343     		orrs	r3, r3, r2
 1449 013e 7A68     		ldr	r2, [r7, #4]
 1450 0140 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1451 0142 1A43     		orrs	r2, r2, r3
 1452 0144 7B69     		ldr	r3, [r7, #20]
 1453 0146 1B01     		lsls	r3, r3, #4
 1454 0148 0B44     		add	r3, r3, r1
 1455 014a 03F5C473 		add	r3, r3, #392
 1456 014e 1A60     		str	r2, [r3]
 933:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                 ((uint32_t)aData[3] << CAN_TDL0R_DATA3_Pos) |
 934:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                 ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
 935:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                 ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
 936:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                 ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));
ARM GAS  /tmp/ccqSH0iI.s 			page 43


 937:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 938:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Request transmission */
 939:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 1457              		.loc 1 939 0
 1458 0150 FB68     		ldr	r3, [r7, #12]
 1459 0152 1968     		ldr	r1, [r3]
 1460 0154 FB68     		ldr	r3, [r7, #12]
 1461 0156 1A68     		ldr	r2, [r3]
 1462 0158 7B69     		ldr	r3, [r7, #20]
 1463 015a 1833     		adds	r3, r3, #24
 1464 015c 1B01     		lsls	r3, r3, #4
 1465 015e 1344     		add	r3, r3, r2
 1466 0160 1B68     		ldr	r3, [r3]
 1467 0162 43F00102 		orr	r2, r3, #1
 1468 0166 7B69     		ldr	r3, [r7, #20]
 1469 0168 1833     		adds	r3, r3, #24
 1470 016a 1B01     		lsls	r3, r3, #4
 1471 016c 0B44     		add	r3, r3, r1
 1472 016e 1A60     		str	r2, [r3]
 940:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 941:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Return function status */
 942:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       return HAL_OK;
 1473              		.loc 1 942 0
 1474 0170 0023     		movs	r3, #0
 1475 0172 0EE0     		b	.L73
 1476              	.L69:
 943:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 944:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     else
 945:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 946:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Update error code */
 947:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 1477              		.loc 1 947 0
 1478 0174 FB68     		ldr	r3, [r7, #12]
 1479 0176 5B6A     		ldr	r3, [r3, #36]
 1480 0178 43F40012 		orr	r2, r3, #2097152
 1481 017c FB68     		ldr	r3, [r7, #12]
 1482 017e 5A62     		str	r2, [r3, #36]
 948:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 949:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       return HAL_ERROR;
 1483              		.loc 1 949 0
 1484 0180 0123     		movs	r3, #1
 1485 0182 06E0     		b	.L73
 1486              	.L67:
 950:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 951:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 952:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 953:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 954:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
 955:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1487              		.loc 1 955 0
 1488 0184 FB68     		ldr	r3, [r7, #12]
 1489 0186 5B6A     		ldr	r3, [r3, #36]
 1490 0188 43F48022 		orr	r2, r3, #262144
 1491 018c FB68     		ldr	r3, [r7, #12]
 1492 018e 5A62     		str	r2, [r3, #36]
 956:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 957:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
ARM GAS  /tmp/ccqSH0iI.s 			page 44


 1493              		.loc 1 957 0
 1494 0190 0123     		movs	r3, #1
 1495              	.L73:
 958:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 959:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1496              		.loc 1 959 0
 1497 0192 1846     		mov	r0, r3
 1498 0194 1C37     		adds	r7, r7, #28
 1499              	.LCFI59:
 1500              		.cfi_def_cfa_offset 4
 1501 0196 BD46     		mov	sp, r7
 1502              	.LCFI60:
 1503              		.cfi_def_cfa_register 13
 1504              		@ sp needed
 1505 0198 5DF8047B 		ldr	r7, [sp], #4
 1506              	.LCFI61:
 1507              		.cfi_restore 7
 1508              		.cfi_def_cfa_offset 0
 1509 019c 7047     		bx	lr
 1510              		.cfi_endproc
 1511              	.LFE133:
 1513 019e 00BF     		.section	.text.HAL_CAN_AbortTxRequest,"ax",%progbits
 1514              		.align	2
 1515              		.global	HAL_CAN_AbortTxRequest
 1516              		.thumb
 1517              		.thumb_func
 1519              	HAL_CAN_AbortTxRequest:
 1520              	.LFB134:
 960:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 961:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 962:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Abort transmission requests
 963:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
 964:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 965:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  TxMailboxes List of the Tx Mailboxes to abort.
 966:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
 967:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
 968:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 969:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
 970:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1521              		.loc 1 970 0
 1522              		.cfi_startproc
 1523              		@ args = 0, pretend = 0, frame = 8
 1524              		@ frame_needed = 1, uses_anonymous_args = 0
 1525              		@ link register save eliminated.
 1526 0000 80B4     		push	{r7}
 1527              	.LCFI62:
 1528              		.cfi_def_cfa_offset 4
 1529              		.cfi_offset 7, -4
 1530 0002 83B0     		sub	sp, sp, #12
 1531              	.LCFI63:
 1532              		.cfi_def_cfa_offset 16
 1533 0004 00AF     		add	r7, sp, #0
 1534              	.LCFI64:
 1535              		.cfi_def_cfa_register 7
 1536 0006 7860     		str	r0, [r7, #4]
 1537 0008 3960     		str	r1, [r7]
 971:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check function parameters */
ARM GAS  /tmp/ccqSH0iI.s 			page 45


 972:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));
 973:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 974:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 1538              		.loc 1 974 0
 1539 000a 7B68     		ldr	r3, [r7, #4]
 1540 000c 93F82030 		ldrb	r3, [r3, #32]
 1541 0010 DBB2     		uxtb	r3, r3
 1542 0012 012B     		cmp	r3, #1
 1543 0014 05D0     		beq	.L75
 975:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1544              		.loc 1 975 0 discriminator 1
 1545 0016 7B68     		ldr	r3, [r7, #4]
 1546 0018 93F82030 		ldrb	r3, [r3, #32]
 1547 001c DBB2     		uxtb	r3, r3
 974:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1548              		.loc 1 974 0 discriminator 1
 1549 001e 022B     		cmp	r3, #2
 1550 0020 28D1     		bne	.L76
 1551              	.L75:
 976:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 977:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check Tx Mailbox 0 */
 978:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX0) != RESET)
 1552              		.loc 1 978 0
 1553 0022 3B68     		ldr	r3, [r7]
 1554 0024 03F00103 		and	r3, r3, #1
 1555 0028 002B     		cmp	r3, #0
 1556 002a 07D0     		beq	.L77
 979:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 980:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 0 */
 981:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 1557              		.loc 1 981 0
 1558 002c 7B68     		ldr	r3, [r7, #4]
 1559 002e 1B68     		ldr	r3, [r3]
 1560 0030 7A68     		ldr	r2, [r7, #4]
 1561 0032 1268     		ldr	r2, [r2]
 1562 0034 9268     		ldr	r2, [r2, #8]
 1563 0036 42F08002 		orr	r2, r2, #128
 1564 003a 9A60     		str	r2, [r3, #8]
 1565              	.L77:
 982:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 983:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 984:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check Tx Mailbox 1 */
 985:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX1) != RESET)
 1566              		.loc 1 985 0
 1567 003c 3B68     		ldr	r3, [r7]
 1568 003e 03F00203 		and	r3, r3, #2
 1569 0042 002B     		cmp	r3, #0
 1570 0044 07D0     		beq	.L78
 986:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 987:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 1 */
 988:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 1571              		.loc 1 988 0
 1572 0046 7B68     		ldr	r3, [r7, #4]
 1573 0048 1B68     		ldr	r3, [r3]
 1574 004a 7A68     		ldr	r2, [r7, #4]
 1575 004c 1268     		ldr	r2, [r2]
 1576 004e 9268     		ldr	r2, [r2, #8]
ARM GAS  /tmp/ccqSH0iI.s 			page 46


 1577 0050 42F40042 		orr	r2, r2, #32768
 1578 0054 9A60     		str	r2, [r3, #8]
 1579              	.L78:
 989:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 990:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 991:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check Tx Mailbox 2 */
 992:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX2) != RESET)
 1580              		.loc 1 992 0
 1581 0056 3B68     		ldr	r3, [r7]
 1582 0058 03F00403 		and	r3, r3, #4
 1583 005c 002B     		cmp	r3, #0
 1584 005e 07D0     		beq	.L79
 993:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 994:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 2 */
 995:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 1585              		.loc 1 995 0
 1586 0060 7B68     		ldr	r3, [r7, #4]
 1587 0062 1B68     		ldr	r3, [r3]
 1588 0064 7A68     		ldr	r2, [r7, #4]
 1589 0066 1268     		ldr	r2, [r2]
 1590 0068 9268     		ldr	r2, [r2, #8]
 1591 006a 42F40002 		orr	r2, r2, #8388608
 1592 006e 9A60     		str	r2, [r3, #8]
 1593              	.L79:
 996:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 997:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 998:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
 999:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_OK;
 1594              		.loc 1 999 0
 1595 0070 0023     		movs	r3, #0
 1596 0072 06E0     		b	.L80
 1597              	.L76:
1000:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1001:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
1002:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1003:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
1004:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1598              		.loc 1 1004 0
 1599 0074 7B68     		ldr	r3, [r7, #4]
 1600 0076 5B6A     		ldr	r3, [r3, #36]
 1601 0078 43F48022 		orr	r2, r3, #262144
 1602 007c 7B68     		ldr	r3, [r7, #4]
 1603 007e 5A62     		str	r2, [r3, #36]
1005:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1006:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 1604              		.loc 1 1006 0
 1605 0080 0123     		movs	r3, #1
 1606              	.L80:
1007:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1008:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1607              		.loc 1 1008 0
 1608 0082 1846     		mov	r0, r3
 1609 0084 0C37     		adds	r7, r7, #12
 1610              	.LCFI65:
 1611              		.cfi_def_cfa_offset 4
 1612 0086 BD46     		mov	sp, r7
 1613              	.LCFI66:
ARM GAS  /tmp/ccqSH0iI.s 			page 47


 1614              		.cfi_def_cfa_register 13
 1615              		@ sp needed
 1616 0088 5DF8047B 		ldr	r7, [sp], #4
 1617              	.LCFI67:
 1618              		.cfi_restore 7
 1619              		.cfi_def_cfa_offset 0
 1620 008c 7047     		bx	lr
 1621              		.cfi_endproc
 1622              	.LFE134:
 1624 008e 00BF     		.section	.text.HAL_CAN_GetTxMailboxesFreeLevel,"ax",%progbits
 1625              		.align	2
 1626              		.global	HAL_CAN_GetTxMailboxesFreeLevel
 1627              		.thumb
 1628              		.thumb_func
 1630              	HAL_CAN_GetTxMailboxesFreeLevel:
 1631              	.LFB135:
1009:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1010:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1011:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Return Tx Mailboxes free level: number of free Tx Mailboxes.
1012:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1013:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1014:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval Number of free Tx Mailboxes.
1015:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1016:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
1017:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1632              		.loc 1 1017 0
 1633              		.cfi_startproc
 1634              		@ args = 0, pretend = 0, frame = 16
 1635              		@ frame_needed = 1, uses_anonymous_args = 0
 1636              		@ link register save eliminated.
 1637 0000 80B4     		push	{r7}
 1638              	.LCFI68:
 1639              		.cfi_def_cfa_offset 4
 1640              		.cfi_offset 7, -4
 1641 0002 85B0     		sub	sp, sp, #20
 1642              	.LCFI69:
 1643              		.cfi_def_cfa_offset 24
 1644 0004 00AF     		add	r7, sp, #0
 1645              	.LCFI70:
 1646              		.cfi_def_cfa_register 7
 1647 0006 7860     		str	r0, [r7, #4]
1018:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t freelevel = 0U;
 1648              		.loc 1 1018 0
 1649 0008 0023     		movs	r3, #0
 1650 000a FB60     		str	r3, [r7, #12]
1019:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1020:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 1651              		.loc 1 1020 0
 1652 000c 7B68     		ldr	r3, [r7, #4]
 1653 000e 93F82030 		ldrb	r3, [r3, #32]
 1654 0012 DBB2     		uxtb	r3, r3
 1655 0014 012B     		cmp	r3, #1
 1656 0016 05D0     		beq	.L82
1021:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1657              		.loc 1 1021 0 discriminator 1
 1658 0018 7B68     		ldr	r3, [r7, #4]
 1659 001a 93F82030 		ldrb	r3, [r3, #32]
ARM GAS  /tmp/ccqSH0iI.s 			page 48


 1660 001e DBB2     		uxtb	r3, r3
1020:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1661              		.loc 1 1020 0 discriminator 1
 1662 0020 022B     		cmp	r3, #2
 1663 0022 1DD1     		bne	.L83
 1664              	.L82:
1022:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1023:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check Tx Mailbox 0 status */
1024:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME0) != RESET)
 1665              		.loc 1 1024 0
 1666 0024 7B68     		ldr	r3, [r7, #4]
 1667 0026 1B68     		ldr	r3, [r3]
 1668 0028 9B68     		ldr	r3, [r3, #8]
 1669 002a 03F08063 		and	r3, r3, #67108864
 1670 002e 002B     		cmp	r3, #0
 1671 0030 02D0     		beq	.L84
1025:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1026:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       freelevel++;
 1672              		.loc 1 1026 0
 1673 0032 FB68     		ldr	r3, [r7, #12]
 1674 0034 0133     		adds	r3, r3, #1
 1675 0036 FB60     		str	r3, [r7, #12]
 1676              	.L84:
1027:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1028:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1029:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check Tx Mailbox 1 status */
1030:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET)
 1677              		.loc 1 1030 0
 1678 0038 7B68     		ldr	r3, [r7, #4]
 1679 003a 1B68     		ldr	r3, [r3]
 1680 003c 9B68     		ldr	r3, [r3, #8]
 1681 003e 03F00063 		and	r3, r3, #134217728
 1682 0042 002B     		cmp	r3, #0
 1683 0044 02D0     		beq	.L85
1031:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1032:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       freelevel++;
 1684              		.loc 1 1032 0
 1685 0046 FB68     		ldr	r3, [r7, #12]
 1686 0048 0133     		adds	r3, r3, #1
 1687 004a FB60     		str	r3, [r7, #12]
 1688              	.L85:
1033:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1034:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1035:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check Tx Mailbox 2 status */
1036:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME2) != RESET)
 1689              		.loc 1 1036 0
 1690 004c 7B68     		ldr	r3, [r7, #4]
 1691 004e 1B68     		ldr	r3, [r3]
 1692 0050 9B68     		ldr	r3, [r3, #8]
 1693 0052 03F08053 		and	r3, r3, #268435456
 1694 0056 002B     		cmp	r3, #0
 1695 0058 02D0     		beq	.L83
1037:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1038:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       freelevel++;
 1696              		.loc 1 1038 0
 1697 005a FB68     		ldr	r3, [r7, #12]
 1698 005c 0133     		adds	r3, r3, #1
ARM GAS  /tmp/ccqSH0iI.s 			page 49


 1699 005e FB60     		str	r3, [r7, #12]
 1700              	.L83:
1039:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1040:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1041:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1042:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return Tx Mailboxes free level */
1043:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return freelevel;
 1701              		.loc 1 1043 0
 1702 0060 FB68     		ldr	r3, [r7, #12]
1044:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1703              		.loc 1 1044 0
 1704 0062 1846     		mov	r0, r3
 1705 0064 1437     		adds	r7, r7, #20
 1706              	.LCFI71:
 1707              		.cfi_def_cfa_offset 4
 1708 0066 BD46     		mov	sp, r7
 1709              	.LCFI72:
 1710              		.cfi_def_cfa_register 13
 1711              		@ sp needed
 1712 0068 5DF8047B 		ldr	r7, [sp], #4
 1713              	.LCFI73:
 1714              		.cfi_restore 7
 1715              		.cfi_def_cfa_offset 0
 1716 006c 7047     		bx	lr
 1717              		.cfi_endproc
 1718              	.LFE135:
 1720 006e 00BF     		.section	.text.HAL_CAN_IsTxMessagePending,"ax",%progbits
 1721              		.align	2
 1722              		.global	HAL_CAN_IsTxMessagePending
 1723              		.thumb
 1724              		.thumb_func
 1726              	HAL_CAN_IsTxMessagePending:
 1727              	.LFB136:
1045:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1046:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1047:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Check if a transmission request is pending on the selected Tx
1048:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         Mailboxes.
1049:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1050:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1051:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  TxMailboxes List of Tx Mailboxes to check.
1052:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
1053:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval Status
1054:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *          - 0 : No pending transmission request on any selected Tx Mailboxes.
1055:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *          - 1 : Pending transmission request on at least one of the selected
1056:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *                Tx Mailbox.
1057:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1058:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
1059:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1728              		.loc 1 1059 0
 1729              		.cfi_startproc
 1730              		@ args = 0, pretend = 0, frame = 16
 1731              		@ frame_needed = 1, uses_anonymous_args = 0
 1732              		@ link register save eliminated.
 1733 0000 80B4     		push	{r7}
 1734              	.LCFI74:
 1735              		.cfi_def_cfa_offset 4
 1736              		.cfi_offset 7, -4
ARM GAS  /tmp/ccqSH0iI.s 			page 50


 1737 0002 85B0     		sub	sp, sp, #20
 1738              	.LCFI75:
 1739              		.cfi_def_cfa_offset 24
 1740 0004 00AF     		add	r7, sp, #0
 1741              	.LCFI76:
 1742              		.cfi_def_cfa_register 7
 1743 0006 7860     		str	r0, [r7, #4]
 1744 0008 3960     		str	r1, [r7]
1060:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t status = 0U;
 1745              		.loc 1 1060 0
 1746 000a 0023     		movs	r3, #0
 1747 000c FB60     		str	r3, [r7, #12]
1061:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1062:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check function parameters */
1063:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));
1064:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1065:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 1748              		.loc 1 1065 0
 1749 000e 7B68     		ldr	r3, [r7, #4]
 1750 0010 93F82030 		ldrb	r3, [r3, #32]
 1751 0014 DBB2     		uxtb	r3, r3
 1752 0016 012B     		cmp	r3, #1
 1753 0018 05D0     		beq	.L88
1066:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1754              		.loc 1 1066 0 discriminator 1
 1755 001a 7B68     		ldr	r3, [r7, #4]
 1756 001c 93F82030 		ldrb	r3, [r3, #32]
 1757 0020 DBB2     		uxtb	r3, r3
1065:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1758              		.loc 1 1065 0 discriminator 1
 1759 0022 022B     		cmp	r3, #2
 1760 0024 0BD1     		bne	.L89
 1761              	.L88:
1067:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1068:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check pending transmission request on the selected Tx Mailboxes */
1069:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_P
 1762              		.loc 1 1069 0
 1763 0026 7B68     		ldr	r3, [r7, #4]
 1764 0028 1B68     		ldr	r3, [r3]
 1765 002a 9A68     		ldr	r2, [r3, #8]
 1766 002c 3B68     		ldr	r3, [r7]
 1767 002e 9B06     		lsls	r3, r3, #26
 1768 0030 1A40     		ands	r2, r2, r3
 1769 0032 3B68     		ldr	r3, [r7]
 1770 0034 9B06     		lsls	r3, r3, #26
 1771 0036 9A42     		cmp	r2, r3
 1772 0038 01D0     		beq	.L89
1070:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1071:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       status = 1U;
 1773              		.loc 1 1071 0
 1774 003a 0123     		movs	r3, #1
 1775 003c FB60     		str	r3, [r7, #12]
 1776              	.L89:
1072:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1073:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1074:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1075:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return status */
ARM GAS  /tmp/ccqSH0iI.s 			page 51


1076:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return status;
 1777              		.loc 1 1076 0
 1778 003e FB68     		ldr	r3, [r7, #12]
1077:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1779              		.loc 1 1077 0
 1780 0040 1846     		mov	r0, r3
 1781 0042 1437     		adds	r7, r7, #20
 1782              	.LCFI77:
 1783              		.cfi_def_cfa_offset 4
 1784 0044 BD46     		mov	sp, r7
 1785              	.LCFI78:
 1786              		.cfi_def_cfa_register 13
 1787              		@ sp needed
 1788 0046 5DF8047B 		ldr	r7, [sp], #4
 1789              	.LCFI79:
 1790              		.cfi_restore 7
 1791              		.cfi_def_cfa_offset 0
 1792 004a 7047     		bx	lr
 1793              		.cfi_endproc
 1794              	.LFE136:
 1796              		.section	.text.HAL_CAN_GetTxTimestamp,"ax",%progbits
 1797              		.align	2
 1798              		.global	HAL_CAN_GetTxTimestamp
 1799              		.thumb
 1800              		.thumb_func
 1802              	HAL_CAN_GetTxTimestamp:
 1803              	.LFB137:
1078:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1079:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1080:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Return timestamp of Tx message sent, if time triggered communication
1081:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             mode is enabled.
1082:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1083:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1084:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  TxMailbox Tx Mailbox where the timestamp of message sent will be
1085:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         read.
1086:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         This parameter can be one value of @arg CAN_Tx_Mailboxes.
1087:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval Timestamp of message sent from Tx Mailbox.
1088:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1089:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** uint32_t HAL_CAN_GetTxTimestamp(CAN_HandleTypeDef *hcan, uint32_t TxMailbox)
1090:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1804              		.loc 1 1090 0
 1805              		.cfi_startproc
 1806              		@ args = 0, pretend = 0, frame = 24
 1807              		@ frame_needed = 1, uses_anonymous_args = 0
 1808              		@ link register save eliminated.
 1809 0000 80B4     		push	{r7}
 1810              	.LCFI80:
 1811              		.cfi_def_cfa_offset 4
 1812              		.cfi_offset 7, -4
 1813 0002 87B0     		sub	sp, sp, #28
 1814              	.LCFI81:
 1815              		.cfi_def_cfa_offset 32
 1816 0004 00AF     		add	r7, sp, #0
 1817              	.LCFI82:
 1818              		.cfi_def_cfa_register 7
 1819 0006 7860     		str	r0, [r7, #4]
 1820 0008 3960     		str	r1, [r7]
ARM GAS  /tmp/ccqSH0iI.s 			page 52


1091:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t timestamp = 0U;
 1821              		.loc 1 1091 0
 1822 000a 0023     		movs	r3, #0
 1823 000c 7B61     		str	r3, [r7, #20]
1092:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t transmitmailbox;
1093:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1094:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check function parameters */
1095:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX(TxMailbox));
1096:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1097:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 1824              		.loc 1 1097 0
 1825 000e 7B68     		ldr	r3, [r7, #4]
 1826 0010 93F82030 		ldrb	r3, [r3, #32]
 1827 0014 DBB2     		uxtb	r3, r3
 1828 0016 012B     		cmp	r3, #1
 1829 0018 05D0     		beq	.L92
1098:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1830              		.loc 1 1098 0 discriminator 1
 1831 001a 7B68     		ldr	r3, [r7, #4]
 1832 001c 93F82030 		ldrb	r3, [r3, #32]
 1833 0020 DBB2     		uxtb	r3, r3
1097:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1834              		.loc 1 1097 0 discriminator 1
 1835 0022 022B     		cmp	r3, #2
 1836 0024 12D1     		bne	.L93
 1837              	.L92:
 1838 0026 3B68     		ldr	r3, [r7]
 1839 0028 FB60     		str	r3, [r7, #12]
 1840              	.LBB4:
 1841              	.LBB5:
 1842              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
ARM GAS  /tmp/ccqSH0iI.s 			page 53


  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccqSH0iI.s 			page 54


  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccqSH0iI.s 			page 55


 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
ARM GAS  /tmp/ccqSH0iI.s 			page 56


 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccqSH0iI.s 			page 57


 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
ARM GAS  /tmp/ccqSH0iI.s 			page 58


 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccqSH0iI.s 			page 59


 369:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
ARM GAS  /tmp/ccqSH0iI.s 			page 60


 426:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 441:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 455:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 459:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 463:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 467:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 475:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 478:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 479:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order in signed short value
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a signed short value with sign extension to integer.
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 482:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
ARM GAS  /tmp/ccqSH0iI.s 			page 61


 483:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (short)__builtin_bswap16(value);
 488:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t result;
 490:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Number of Bits to rotate
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 505:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 516:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 526:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 528:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 529:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 1843              		.loc 2 531 0
 1844 002a FB68     		ldr	r3, [r7, #12]
 1845              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1846 002c 93FAA3F3 		rbit r3, r3
 1847              	@ 0 "" 2
 1848              		.thumb
 1849 0030 BB60     		str	r3, [r7, #8]
 532:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
ARM GAS  /tmp/ccqSH0iI.s 			page 62


 533:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t s = 4 /*sizeof(v)*/ * 8 - 1; /* extra shift needed at end */
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 536:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value; value >>= 1U)
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 541:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 544:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 1850              		.loc 2 544 0
 1851 0032 BB68     		ldr	r3, [r7, #8]
 1852              	.LBE5:
 1853              	.LBE4:
1099:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1100:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Select the Tx mailbox */
1101:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     transmitmailbox = POSITION_VAL(TxMailbox);
 1854              		.loc 1 1101 0
 1855 0034 B3FA83F3 		clz	r3, r3
 1856 0038 3B61     		str	r3, [r7, #16]
1102:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1103:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Get timestamp */
1104:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     timestamp = (hcan->Instance->sTxMailBox[transmitmailbox].TDTR & CAN_TDT0R_TIME) >> CAN_TDT0R_TI
 1857              		.loc 1 1104 0
 1858 003a 7B68     		ldr	r3, [r7, #4]
 1859 003c 1A68     		ldr	r2, [r3]
 1860 003e 3B69     		ldr	r3, [r7, #16]
 1861 0040 1833     		adds	r3, r3, #24
 1862 0042 1B01     		lsls	r3, r3, #4
 1863 0044 1344     		add	r3, r3, r2
 1864 0046 5B68     		ldr	r3, [r3, #4]
 1865 0048 1B0C     		lsrs	r3, r3, #16
 1866 004a 7B61     		str	r3, [r7, #20]
 1867              	.L93:
1105:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1106:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1107:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return the timestamp */
1108:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return timestamp;
 1868              		.loc 1 1108 0
 1869 004c 7B69     		ldr	r3, [r7, #20]
1109:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1870              		.loc 1 1109 0
 1871 004e 1846     		mov	r0, r3
 1872 0050 1C37     		adds	r7, r7, #28
 1873              	.LCFI83:
 1874              		.cfi_def_cfa_offset 4
 1875 0052 BD46     		mov	sp, r7
 1876              	.LCFI84:
 1877              		.cfi_def_cfa_register 13
 1878              		@ sp needed
 1879 0054 5DF8047B 		ldr	r7, [sp], #4
 1880              	.LCFI85:
 1881              		.cfi_restore 7
 1882              		.cfi_def_cfa_offset 0
 1883 0058 7047     		bx	lr
ARM GAS  /tmp/ccqSH0iI.s 			page 63


 1884              		.cfi_endproc
 1885              	.LFE137:
 1887 005a 00BF     		.section	.text.HAL_CAN_GetRxMessage,"ax",%progbits
 1888              		.align	2
 1889              		.global	HAL_CAN_GetRxMessage
 1890              		.thumb
 1891              		.thumb_func
 1893              	HAL_CAN_GetRxMessage:
 1894              	.LFB138:
1110:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1111:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1112:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Get an CAN frame from the Rx FIFO zone into the message RAM.
1113:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1114:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1115:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  RxFifo Fifo number of the received message to be read.
1116:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_receive_FIFO_number.
1117:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  pHeader pointer to a CAN_RxHeaderTypeDef structure where the header
1118:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         of the Rx frame will be stored.
1119:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  aData array where the payload of the Rx frame will be stored.
1120:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
1121:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1122:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDe
1123:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1895              		.loc 1 1123 0
 1896              		.cfi_startproc
 1897              		@ args = 0, pretend = 0, frame = 16
 1898              		@ frame_needed = 1, uses_anonymous_args = 0
 1899              		@ link register save eliminated.
 1900 0000 80B4     		push	{r7}
 1901              	.LCFI86:
 1902              		.cfi_def_cfa_offset 4
 1903              		.cfi_offset 7, -4
 1904 0002 85B0     		sub	sp, sp, #20
 1905              	.LCFI87:
 1906              		.cfi_def_cfa_offset 24
 1907 0004 00AF     		add	r7, sp, #0
 1908              	.LCFI88:
 1909              		.cfi_def_cfa_register 7
 1910 0006 F860     		str	r0, [r7, #12]
 1911 0008 B960     		str	r1, [r7, #8]
 1912 000a 7A60     		str	r2, [r7, #4]
 1913 000c 3B60     		str	r3, [r7]
1124:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_RX_FIFO(RxFifo));
1125:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1126:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 1914              		.loc 1 1126 0
 1915 000e FB68     		ldr	r3, [r7, #12]
 1916 0010 93F82030 		ldrb	r3, [r3, #32]
 1917 0014 DBB2     		uxtb	r3, r3
 1918 0016 012B     		cmp	r3, #1
 1919 0018 06D0     		beq	.L97
1127:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1920              		.loc 1 1127 0 discriminator 1
 1921 001a FB68     		ldr	r3, [r7, #12]
 1922 001c 93F82030 		ldrb	r3, [r3, #32]
 1923 0020 DBB2     		uxtb	r3, r3
1126:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
ARM GAS  /tmp/ccqSH0iI.s 			page 64


 1924              		.loc 1 1126 0 discriminator 1
 1925 0022 022B     		cmp	r3, #2
 1926 0024 40F0FB80 		bne	.L98
 1927              	.L97:
1128:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1129:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check the Rx FIFO */
1130:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 1928              		.loc 1 1130 0
 1929 0028 BB68     		ldr	r3, [r7, #8]
 1930 002a 002B     		cmp	r3, #0
 1931 002c 0ED1     		bne	.L99
1131:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1132:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check that the Rx FIFO 0 is not empty */
1133:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == RESET)
 1932              		.loc 1 1133 0
 1933 002e FB68     		ldr	r3, [r7, #12]
 1934 0030 1B68     		ldr	r3, [r3]
 1935 0032 DB68     		ldr	r3, [r3, #12]
 1936 0034 03F00303 		and	r3, r3, #3
 1937 0038 002B     		cmp	r3, #0
 1938 003a 19D1     		bne	.L100
1134:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1135:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Update error code */
1136:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 1939              		.loc 1 1136 0
 1940 003c FB68     		ldr	r3, [r7, #12]
 1941 003e 5B6A     		ldr	r3, [r3, #36]
 1942 0040 43F40012 		orr	r2, r3, #2097152
 1943 0044 FB68     		ldr	r3, [r7, #12]
 1944 0046 5A62     		str	r2, [r3, #36]
1137:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1138:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         return HAL_ERROR;
 1945              		.loc 1 1138 0
 1946 0048 0123     		movs	r3, #1
 1947 004a EFE0     		b	.L101
 1948              	.L99:
1139:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1140:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1141:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     else if (RxFifo == CAN_RX_FIFO1) /* Rx element is assigned to Rx FIFO 1 */
 1949              		.loc 1 1141 0
 1950 004c BB68     		ldr	r3, [r7, #8]
 1951 004e 012B     		cmp	r3, #1
 1952 0050 0ED1     		bne	.L100
1142:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1143:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check that the Rx FIFO 1 is not empty */
1144:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == RESET)
 1953              		.loc 1 1144 0
 1954 0052 FB68     		ldr	r3, [r7, #12]
 1955 0054 1B68     		ldr	r3, [r3]
 1956 0056 1B69     		ldr	r3, [r3, #16]
 1957 0058 03F00303 		and	r3, r3, #3
 1958 005c 002B     		cmp	r3, #0
 1959 005e 07D1     		bne	.L100
1145:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1146:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Update error code */
1147:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 1960              		.loc 1 1147 0
ARM GAS  /tmp/ccqSH0iI.s 			page 65


 1961 0060 FB68     		ldr	r3, [r7, #12]
 1962 0062 5B6A     		ldr	r3, [r3, #36]
 1963 0064 43F40012 		orr	r2, r3, #2097152
 1964 0068 FB68     		ldr	r3, [r7, #12]
 1965 006a 5A62     		str	r2, [r3, #36]
1148:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1149:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         return HAL_ERROR;
 1966              		.loc 1 1149 0
 1967 006c 0123     		movs	r3, #1
 1968 006e DDE0     		b	.L101
 1969              	.L100:
1150:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1151:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1152:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1153:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Get the header */
1154:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 1970              		.loc 1 1154 0
 1971 0070 FB68     		ldr	r3, [r7, #12]
 1972 0072 1A68     		ldr	r2, [r3]
 1973 0074 BB68     		ldr	r3, [r7, #8]
 1974 0076 1B33     		adds	r3, r3, #27
 1975 0078 1B01     		lsls	r3, r3, #4
 1976 007a 1344     		add	r3, r3, r2
 1977 007c 1B68     		ldr	r3, [r3]
 1978 007e 03F00402 		and	r2, r3, #4
 1979 0082 7B68     		ldr	r3, [r7, #4]
 1980 0084 9A60     		str	r2, [r3, #8]
1155:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (pHeader->IDE == CAN_ID_STD)
 1981              		.loc 1 1155 0
 1982 0086 7B68     		ldr	r3, [r7, #4]
 1983 0088 9B68     		ldr	r3, [r3, #8]
 1984 008a 002B     		cmp	r3, #0
 1985 008c 0AD1     		bne	.L102
1156:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1157:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_
 1986              		.loc 1 1157 0
 1987 008e FB68     		ldr	r3, [r7, #12]
 1988 0090 1A68     		ldr	r2, [r3]
 1989 0092 BB68     		ldr	r3, [r7, #8]
 1990 0094 1B33     		adds	r3, r3, #27
 1991 0096 1B01     		lsls	r3, r3, #4
 1992 0098 1344     		add	r3, r3, r2
 1993 009a 1B68     		ldr	r3, [r3]
 1994 009c 5A0D     		lsrs	r2, r3, #21
 1995 009e 7B68     		ldr	r3, [r7, #4]
 1996 00a0 1A60     		str	r2, [r3]
 1997 00a2 09E0     		b	.L103
 1998              	.L102:
1158:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1159:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     else
1160:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1161:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR)
 1999              		.loc 1 1161 0
 2000 00a4 FB68     		ldr	r3, [r7, #12]
 2001 00a6 1A68     		ldr	r2, [r3]
 2002 00a8 BB68     		ldr	r3, [r7, #8]
 2003 00aa 1B33     		adds	r3, r3, #27
ARM GAS  /tmp/ccqSH0iI.s 			page 66


 2004 00ac 1B01     		lsls	r3, r3, #4
 2005 00ae 1344     		add	r3, r3, r2
 2006 00b0 1B68     		ldr	r3, [r3]
 2007 00b2 DA08     		lsrs	r2, r3, #3
 2008 00b4 7B68     		ldr	r3, [r7, #4]
 2009 00b6 5A60     		str	r2, [r3, #4]
 2010              	.L103:
1162:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1163:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 2011              		.loc 1 1163 0
 2012 00b8 FB68     		ldr	r3, [r7, #12]
 2013 00ba 1A68     		ldr	r2, [r3]
 2014 00bc BB68     		ldr	r3, [r7, #8]
 2015 00be 1B33     		adds	r3, r3, #27
 2016 00c0 1B01     		lsls	r3, r3, #4
 2017 00c2 1344     		add	r3, r3, r2
 2018 00c4 1B68     		ldr	r3, [r3]
 2019 00c6 03F00203 		and	r3, r3, #2
 2020 00ca 5A08     		lsrs	r2, r3, #1
 2021 00cc 7B68     		ldr	r3, [r7, #4]
 2022 00ce DA60     		str	r2, [r3, #12]
1164:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos
 2023              		.loc 1 1164 0
 2024 00d0 FB68     		ldr	r3, [r7, #12]
 2025 00d2 1A68     		ldr	r2, [r3]
 2026 00d4 BB68     		ldr	r3, [r7, #8]
 2027 00d6 1B33     		adds	r3, r3, #27
 2028 00d8 1B01     		lsls	r3, r3, #4
 2029 00da 1344     		add	r3, r3, r2
 2030 00dc 5B68     		ldr	r3, [r3, #4]
 2031 00de 03F00F02 		and	r2, r3, #15
 2032 00e2 7B68     		ldr	r3, [r7, #4]
 2033 00e4 1A61     		str	r2, [r3, #16]
1165:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_
 2034              		.loc 1 1165 0
 2035 00e6 FB68     		ldr	r3, [r7, #12]
 2036 00e8 1A68     		ldr	r2, [r3]
 2037 00ea BB68     		ldr	r3, [r7, #8]
 2038 00ec 1B33     		adds	r3, r3, #27
 2039 00ee 1B01     		lsls	r3, r3, #4
 2040 00f0 1344     		add	r3, r3, r2
 2041 00f2 5B68     		ldr	r3, [r3, #4]
 2042 00f4 03F47F43 		and	r3, r3, #65280
 2043 00f8 1A0A     		lsrs	r2, r3, #8
 2044 00fa 7B68     		ldr	r3, [r7, #4]
 2045 00fc 9A61     		str	r2, [r3, #24]
1166:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_
 2046              		.loc 1 1166 0
 2047 00fe FB68     		ldr	r3, [r7, #12]
 2048 0100 1A68     		ldr	r2, [r3]
 2049 0102 BB68     		ldr	r3, [r7, #8]
 2050 0104 1B33     		adds	r3, r3, #27
 2051 0106 1B01     		lsls	r3, r3, #4
 2052 0108 1344     		add	r3, r3, r2
 2053 010a 5B68     		ldr	r3, [r3, #4]
 2054 010c 1A0C     		lsrs	r2, r3, #16
 2055 010e 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccqSH0iI.s 			page 67


 2056 0110 5A61     		str	r2, [r3, #20]
1167:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1168:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Get the data */
1169:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     aData[0] = (CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos
 2057              		.loc 1 1169 0
 2058 0112 FB68     		ldr	r3, [r7, #12]
 2059 0114 1A68     		ldr	r2, [r3]
 2060 0116 BB68     		ldr	r3, [r7, #8]
 2061 0118 1B01     		lsls	r3, r3, #4
 2062 011a 1344     		add	r3, r3, r2
 2063 011c 03F5DC73 		add	r3, r3, #440
 2064 0120 1B68     		ldr	r3, [r3]
 2065 0122 DAB2     		uxtb	r2, r3
 2066 0124 3B68     		ldr	r3, [r7]
 2067 0126 1A70     		strb	r2, [r3]
1170:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     aData[1] = (CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos
 2068              		.loc 1 1170 0
 2069 0128 3B68     		ldr	r3, [r7]
 2070 012a 0133     		adds	r3, r3, #1
 2071 012c FA68     		ldr	r2, [r7, #12]
 2072 012e 1168     		ldr	r1, [r2]
 2073 0130 BA68     		ldr	r2, [r7, #8]
 2074 0132 1201     		lsls	r2, r2, #4
 2075 0134 0A44     		add	r2, r2, r1
 2076 0136 02F5DC72 		add	r2, r2, #440
 2077 013a 1268     		ldr	r2, [r2]
 2078 013c 02F47F42 		and	r2, r2, #65280
 2079 0140 120A     		lsrs	r2, r2, #8
 2080 0142 D2B2     		uxtb	r2, r2
 2081 0144 1A70     		strb	r2, [r3]
1171:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     aData[2] = (CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos
 2082              		.loc 1 1171 0
 2083 0146 3B68     		ldr	r3, [r7]
 2084 0148 0233     		adds	r3, r3, #2
 2085 014a FA68     		ldr	r2, [r7, #12]
 2086 014c 1168     		ldr	r1, [r2]
 2087 014e BA68     		ldr	r2, [r7, #8]
 2088 0150 1201     		lsls	r2, r2, #4
 2089 0152 0A44     		add	r2, r2, r1
 2090 0154 02F5DC72 		add	r2, r2, #440
 2091 0158 1268     		ldr	r2, [r2]
 2092 015a 02F47F02 		and	r2, r2, #16711680
 2093 015e 120C     		lsrs	r2, r2, #16
 2094 0160 D2B2     		uxtb	r2, r2
 2095 0162 1A70     		strb	r2, [r3]
1172:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     aData[3] = (CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos
 2096              		.loc 1 1172 0
 2097 0164 3B68     		ldr	r3, [r7]
 2098 0166 0333     		adds	r3, r3, #3
 2099 0168 FA68     		ldr	r2, [r7, #12]
 2100 016a 1168     		ldr	r1, [r2]
 2101 016c BA68     		ldr	r2, [r7, #8]
 2102 016e 1201     		lsls	r2, r2, #4
 2103 0170 0A44     		add	r2, r2, r1
 2104 0172 02F5DC72 		add	r2, r2, #440
 2105 0176 1268     		ldr	r2, [r2]
 2106 0178 120E     		lsrs	r2, r2, #24
ARM GAS  /tmp/ccqSH0iI.s 			page 68


 2107 017a D2B2     		uxtb	r2, r2
 2108 017c 1A70     		strb	r2, [r3]
1173:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     aData[4] = (CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos
 2109              		.loc 1 1173 0
 2110 017e 3B68     		ldr	r3, [r7]
 2111 0180 0433     		adds	r3, r3, #4
 2112 0182 FA68     		ldr	r2, [r7, #12]
 2113 0184 1168     		ldr	r1, [r2]
 2114 0186 BA68     		ldr	r2, [r7, #8]
 2115 0188 1201     		lsls	r2, r2, #4
 2116 018a 0A44     		add	r2, r2, r1
 2117 018c 02F5DC72 		add	r2, r2, #440
 2118 0190 5268     		ldr	r2, [r2, #4]
 2119 0192 D2B2     		uxtb	r2, r2
 2120 0194 1A70     		strb	r2, [r3]
1174:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     aData[5] = (CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos
 2121              		.loc 1 1174 0
 2122 0196 3B68     		ldr	r3, [r7]
 2123 0198 0533     		adds	r3, r3, #5
 2124 019a FA68     		ldr	r2, [r7, #12]
 2125 019c 1168     		ldr	r1, [r2]
 2126 019e BA68     		ldr	r2, [r7, #8]
 2127 01a0 1201     		lsls	r2, r2, #4
 2128 01a2 0A44     		add	r2, r2, r1
 2129 01a4 02F5DC72 		add	r2, r2, #440
 2130 01a8 5268     		ldr	r2, [r2, #4]
 2131 01aa 02F47F42 		and	r2, r2, #65280
 2132 01ae 120A     		lsrs	r2, r2, #8
 2133 01b0 D2B2     		uxtb	r2, r2
 2134 01b2 1A70     		strb	r2, [r3]
1175:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     aData[6] = (CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos
 2135              		.loc 1 1175 0
 2136 01b4 3B68     		ldr	r3, [r7]
 2137 01b6 0633     		adds	r3, r3, #6
 2138 01b8 FA68     		ldr	r2, [r7, #12]
 2139 01ba 1168     		ldr	r1, [r2]
 2140 01bc BA68     		ldr	r2, [r7, #8]
 2141 01be 1201     		lsls	r2, r2, #4
 2142 01c0 0A44     		add	r2, r2, r1
 2143 01c2 02F5DC72 		add	r2, r2, #440
 2144 01c6 5268     		ldr	r2, [r2, #4]
 2145 01c8 02F47F02 		and	r2, r2, #16711680
 2146 01cc 120C     		lsrs	r2, r2, #16
 2147 01ce D2B2     		uxtb	r2, r2
 2148 01d0 1A70     		strb	r2, [r3]
1176:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     aData[7] = (CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos
 2149              		.loc 1 1176 0
 2150 01d2 3B68     		ldr	r3, [r7]
 2151 01d4 0733     		adds	r3, r3, #7
 2152 01d6 FA68     		ldr	r2, [r7, #12]
 2153 01d8 1168     		ldr	r1, [r2]
 2154 01da BA68     		ldr	r2, [r7, #8]
 2155 01dc 1201     		lsls	r2, r2, #4
 2156 01de 0A44     		add	r2, r2, r1
 2157 01e0 02F5DC72 		add	r2, r2, #440
 2158 01e4 5268     		ldr	r2, [r2, #4]
 2159 01e6 120E     		lsrs	r2, r2, #24
ARM GAS  /tmp/ccqSH0iI.s 			page 69


 2160 01e8 D2B2     		uxtb	r2, r2
 2161 01ea 1A70     		strb	r2, [r3]
1177:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1178:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Release the FIFO */
1179:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 2162              		.loc 1 1179 0
 2163 01ec BB68     		ldr	r3, [r7, #8]
 2164 01ee 002B     		cmp	r3, #0
 2165 01f0 08D1     		bne	.L104
1180:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1181:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Release RX FIFO 0 */
1182:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 2166              		.loc 1 1182 0
 2167 01f2 FB68     		ldr	r3, [r7, #12]
 2168 01f4 1B68     		ldr	r3, [r3]
 2169 01f6 FA68     		ldr	r2, [r7, #12]
 2170 01f8 1268     		ldr	r2, [r2]
 2171 01fa D268     		ldr	r2, [r2, #12]
 2172 01fc 42F02002 		orr	r2, r2, #32
 2173 0200 DA60     		str	r2, [r3, #12]
 2174 0202 0AE0     		b	.L105
 2175              	.L104:
1183:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1184:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     else if (RxFifo == CAN_RX_FIFO1) /* Rx element is assigned to Rx FIFO 1 */
 2176              		.loc 1 1184 0
 2177 0204 BB68     		ldr	r3, [r7, #8]
 2178 0206 012B     		cmp	r3, #1
 2179 0208 07D1     		bne	.L105
1185:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1186:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Release RX FIFO 1 */
1187:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 2180              		.loc 1 1187 0
 2181 020a FB68     		ldr	r3, [r7, #12]
 2182 020c 1B68     		ldr	r3, [r3]
 2183 020e FA68     		ldr	r2, [r7, #12]
 2184 0210 1268     		ldr	r2, [r2]
 2185 0212 1269     		ldr	r2, [r2, #16]
 2186 0214 42F02002 		orr	r2, r2, #32
 2187 0218 1A61     		str	r2, [r3, #16]
 2188              	.L105:
1188:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1189:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1190:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
1191:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_OK;
 2189              		.loc 1 1191 0
 2190 021a 0023     		movs	r3, #0
 2191 021c 06E0     		b	.L101
 2192              	.L98:
1192:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1193:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
1194:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1195:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
1196:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 2193              		.loc 1 1196 0
 2194 021e FB68     		ldr	r3, [r7, #12]
 2195 0220 5B6A     		ldr	r3, [r3, #36]
 2196 0222 43F48022 		orr	r2, r3, #262144
ARM GAS  /tmp/ccqSH0iI.s 			page 70


 2197 0226 FB68     		ldr	r3, [r7, #12]
 2198 0228 5A62     		str	r2, [r3, #36]
1197:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1198:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 2199              		.loc 1 1198 0
 2200 022a 0123     		movs	r3, #1
 2201              	.L101:
1199:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1200:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 2202              		.loc 1 1200 0
 2203 022c 1846     		mov	r0, r3
 2204 022e 1437     		adds	r7, r7, #20
 2205              	.LCFI89:
 2206              		.cfi_def_cfa_offset 4
 2207 0230 BD46     		mov	sp, r7
 2208              	.LCFI90:
 2209              		.cfi_def_cfa_register 13
 2210              		@ sp needed
 2211 0232 5DF8047B 		ldr	r7, [sp], #4
 2212              	.LCFI91:
 2213              		.cfi_restore 7
 2214              		.cfi_def_cfa_offset 0
 2215 0236 7047     		bx	lr
 2216              		.cfi_endproc
 2217              	.LFE138:
 2219              		.section	.text.HAL_CAN_GetRxFifoFillLevel,"ax",%progbits
 2220              		.align	2
 2221              		.global	HAL_CAN_GetRxFifoFillLevel
 2222              		.thumb
 2223              		.thumb_func
 2225              	HAL_CAN_GetRxFifoFillLevel:
 2226              	.LFB139:
1201:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1202:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1203:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Return Rx FIFO fill level.
1204:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1205:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1206:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  RxFifo Rx FIFO.
1207:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_receive_FIFO_number.
1208:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval Number of messages available in Rx FIFO.
1209:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1210:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
1211:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 2227              		.loc 1 1211 0
 2228              		.cfi_startproc
 2229              		@ args = 0, pretend = 0, frame = 16
 2230              		@ frame_needed = 1, uses_anonymous_args = 0
 2231              		@ link register save eliminated.
 2232 0000 80B4     		push	{r7}
 2233              	.LCFI92:
 2234              		.cfi_def_cfa_offset 4
 2235              		.cfi_offset 7, -4
 2236 0002 85B0     		sub	sp, sp, #20
 2237              	.LCFI93:
 2238              		.cfi_def_cfa_offset 24
 2239 0004 00AF     		add	r7, sp, #0
 2240              	.LCFI94:
ARM GAS  /tmp/ccqSH0iI.s 			page 71


 2241              		.cfi_def_cfa_register 7
 2242 0006 7860     		str	r0, [r7, #4]
 2243 0008 3960     		str	r1, [r7]
1212:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t filllevel = 0U;
 2244              		.loc 1 1212 0
 2245 000a 0023     		movs	r3, #0
 2246 000c FB60     		str	r3, [r7, #12]
1213:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1214:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check function parameters */
1215:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_RX_FIFO(RxFifo));
1216:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1217:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 2247              		.loc 1 1217 0
 2248 000e 7B68     		ldr	r3, [r7, #4]
 2249 0010 93F82030 		ldrb	r3, [r3, #32]
 2250 0014 DBB2     		uxtb	r3, r3
 2251 0016 012B     		cmp	r3, #1
 2252 0018 05D0     		beq	.L107
1218:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 2253              		.loc 1 1218 0 discriminator 1
 2254 001a 7B68     		ldr	r3, [r7, #4]
 2255 001c 93F82030 		ldrb	r3, [r3, #32]
 2256 0020 DBB2     		uxtb	r3, r3
1217:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 2257              		.loc 1 1217 0 discriminator 1
 2258 0022 022B     		cmp	r3, #2
 2259 0024 0FD1     		bne	.L108
 2260              	.L107:
1219:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1220:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0)
 2261              		.loc 1 1220 0
 2262 0026 3B68     		ldr	r3, [r7]
 2263 0028 002B     		cmp	r3, #0
 2264 002a 06D1     		bne	.L109
1221:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1222:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 2265              		.loc 1 1222 0
 2266 002c 7B68     		ldr	r3, [r7, #4]
 2267 002e 1B68     		ldr	r3, [r3]
 2268 0030 DB68     		ldr	r3, [r3, #12]
 2269 0032 03F00303 		and	r3, r3, #3
 2270 0036 FB60     		str	r3, [r7, #12]
 2271 0038 05E0     		b	.L108
 2272              	.L109:
1223:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1224:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     else /* RxFifo == CAN_RX_FIFO1 */
1225:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1226:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 2273              		.loc 1 1226 0
 2274 003a 7B68     		ldr	r3, [r7, #4]
 2275 003c 1B68     		ldr	r3, [r3]
 2276 003e 1B69     		ldr	r3, [r3, #16]
 2277 0040 03F00303 		and	r3, r3, #3
 2278 0044 FB60     		str	r3, [r7, #12]
 2279              	.L108:
1227:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1228:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
ARM GAS  /tmp/ccqSH0iI.s 			page 72


1229:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1230:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return Rx FIFO fill level */
1231:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return filllevel;
 2280              		.loc 1 1231 0
 2281 0046 FB68     		ldr	r3, [r7, #12]
1232:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 2282              		.loc 1 1232 0
 2283 0048 1846     		mov	r0, r3
 2284 004a 1437     		adds	r7, r7, #20
 2285              	.LCFI95:
 2286              		.cfi_def_cfa_offset 4
 2287 004c BD46     		mov	sp, r7
 2288              	.LCFI96:
 2289              		.cfi_def_cfa_register 13
 2290              		@ sp needed
 2291 004e 5DF8047B 		ldr	r7, [sp], #4
 2292              	.LCFI97:
 2293              		.cfi_restore 7
 2294              		.cfi_def_cfa_offset 0
 2295 0052 7047     		bx	lr
 2296              		.cfi_endproc
 2297              	.LFE139:
 2299              		.section	.text.HAL_CAN_ActivateNotification,"ax",%progbits
 2300              		.align	2
 2301              		.global	HAL_CAN_ActivateNotification
 2302              		.thumb
 2303              		.thumb_func
 2305              	HAL_CAN_ActivateNotification:
 2306              	.LFB140:
1233:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1234:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1235:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @}
1236:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1237:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1238:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group4 Interrupts management
1239:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *  @brief    Interrupts management
1240:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *
1241:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @verbatim
1242:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
1243:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                        ##### Interrupts management #####
1244:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
1245:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]  This section provides functions allowing to:
1246:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_ActivateNotification      : Enable interrupts
1247:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_DeactivateNotification    : Disable interrupts
1248:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_IRQHandler                : Handles CAN interrupt request
1249:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1250:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @endverbatim
1251:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
1252:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1253:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1254:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1255:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Enable interrupts.
1256:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1257:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1258:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  ActiveITs indicates which interrupts will be enabled.
1259:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Interrupts.
1260:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
ARM GAS  /tmp/ccqSH0iI.s 			page 73


1261:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1262:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
1263:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 2307              		.loc 1 1263 0
 2308              		.cfi_startproc
 2309              		@ args = 0, pretend = 0, frame = 8
 2310              		@ frame_needed = 1, uses_anonymous_args = 0
 2311              		@ link register save eliminated.
 2312 0000 80B4     		push	{r7}
 2313              	.LCFI98:
 2314              		.cfi_def_cfa_offset 4
 2315              		.cfi_offset 7, -4
 2316 0002 83B0     		sub	sp, sp, #12
 2317              	.LCFI99:
 2318              		.cfi_def_cfa_offset 16
 2319 0004 00AF     		add	r7, sp, #0
 2320              	.LCFI100:
 2321              		.cfi_def_cfa_register 7
 2322 0006 7860     		str	r0, [r7, #4]
 2323 0008 3960     		str	r1, [r7]
1264:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check function parameters */
1265:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_IT(ActiveITs));
1266:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1267:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 2324              		.loc 1 1267 0
 2325 000a 7B68     		ldr	r3, [r7, #4]
 2326 000c 93F82030 		ldrb	r3, [r3, #32]
 2327 0010 DBB2     		uxtb	r3, r3
 2328 0012 012B     		cmp	r3, #1
 2329 0014 05D0     		beq	.L112
1268:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 2330              		.loc 1 1268 0 discriminator 1
 2331 0016 7B68     		ldr	r3, [r7, #4]
 2332 0018 93F82030 		ldrb	r3, [r3, #32]
 2333 001c DBB2     		uxtb	r3, r3
1267:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 2334              		.loc 1 1267 0 discriminator 1
 2335 001e 022B     		cmp	r3, #2
 2336 0020 09D1     		bne	.L113
 2337              	.L112:
1269:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1270:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Enable the selected interrupts */
1271:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 2338              		.loc 1 1271 0
 2339 0022 7B68     		ldr	r3, [r7, #4]
 2340 0024 1B68     		ldr	r3, [r3]
 2341 0026 7A68     		ldr	r2, [r7, #4]
 2342 0028 1268     		ldr	r2, [r2]
 2343 002a 5169     		ldr	r1, [r2, #20]
 2344 002c 3A68     		ldr	r2, [r7]
 2345 002e 0A43     		orrs	r2, r2, r1
 2346 0030 5A61     		str	r2, [r3, #20]
1272:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1273:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
1274:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_OK;
 2347              		.loc 1 1274 0
 2348 0032 0023     		movs	r3, #0
ARM GAS  /tmp/ccqSH0iI.s 			page 74


 2349 0034 06E0     		b	.L114
 2350              	.L113:
1275:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1276:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
1277:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1278:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
1279:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 2351              		.loc 1 1279 0
 2352 0036 7B68     		ldr	r3, [r7, #4]
 2353 0038 5B6A     		ldr	r3, [r3, #36]
 2354 003a 43F48022 		orr	r2, r3, #262144
 2355 003e 7B68     		ldr	r3, [r7, #4]
 2356 0040 5A62     		str	r2, [r3, #36]
1280:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1281:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 2357              		.loc 1 1281 0
 2358 0042 0123     		movs	r3, #1
 2359              	.L114:
1282:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1283:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 2360              		.loc 1 1283 0
 2361 0044 1846     		mov	r0, r3
 2362 0046 0C37     		adds	r7, r7, #12
 2363              	.LCFI101:
 2364              		.cfi_def_cfa_offset 4
 2365 0048 BD46     		mov	sp, r7
 2366              	.LCFI102:
 2367              		.cfi_def_cfa_register 13
 2368              		@ sp needed
 2369 004a 5DF8047B 		ldr	r7, [sp], #4
 2370              	.LCFI103:
 2371              		.cfi_restore 7
 2372              		.cfi_def_cfa_offset 0
 2373 004e 7047     		bx	lr
 2374              		.cfi_endproc
 2375              	.LFE140:
 2377              		.section	.text.HAL_CAN_DeactivateNotification,"ax",%progbits
 2378              		.align	2
 2379              		.global	HAL_CAN_DeactivateNotification
 2380              		.thumb
 2381              		.thumb_func
 2383              	HAL_CAN_DeactivateNotification:
 2384              	.LFB141:
1284:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1285:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1286:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Disable interrupts.
1287:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1288:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1289:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  InactiveITs indicates which interrupts will be disabled.
1290:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Interrupts.
1291:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
1292:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1293:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
1294:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 2385              		.loc 1 1294 0
 2386              		.cfi_startproc
 2387              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccqSH0iI.s 			page 75


 2388              		@ frame_needed = 1, uses_anonymous_args = 0
 2389              		@ link register save eliminated.
 2390 0000 80B4     		push	{r7}
 2391              	.LCFI104:
 2392              		.cfi_def_cfa_offset 4
 2393              		.cfi_offset 7, -4
 2394 0002 83B0     		sub	sp, sp, #12
 2395              	.LCFI105:
 2396              		.cfi_def_cfa_offset 16
 2397 0004 00AF     		add	r7, sp, #0
 2398              	.LCFI106:
 2399              		.cfi_def_cfa_register 7
 2400 0006 7860     		str	r0, [r7, #4]
 2401 0008 3960     		str	r1, [r7]
1295:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check function parameters */
1296:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_IT(InactiveITs));
1297:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1298:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 2402              		.loc 1 1298 0
 2403 000a 7B68     		ldr	r3, [r7, #4]
 2404 000c 93F82030 		ldrb	r3, [r3, #32]
 2405 0010 DBB2     		uxtb	r3, r3
 2406 0012 012B     		cmp	r3, #1
 2407 0014 05D0     		beq	.L116
1299:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 2408              		.loc 1 1299 0 discriminator 1
 2409 0016 7B68     		ldr	r3, [r7, #4]
 2410 0018 93F82030 		ldrb	r3, [r3, #32]
 2411 001c DBB2     		uxtb	r3, r3
1298:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 2412              		.loc 1 1298 0 discriminator 1
 2413 001e 022B     		cmp	r3, #2
 2414 0020 0AD1     		bne	.L117
 2415              	.L116:
1300:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1301:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Disable the selected interrupts */
1302:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 2416              		.loc 1 1302 0
 2417 0022 7B68     		ldr	r3, [r7, #4]
 2418 0024 1B68     		ldr	r3, [r3]
 2419 0026 7A68     		ldr	r2, [r7, #4]
 2420 0028 1268     		ldr	r2, [r2]
 2421 002a 5169     		ldr	r1, [r2, #20]
 2422 002c 3A68     		ldr	r2, [r7]
 2423 002e D243     		mvns	r2, r2
 2424 0030 0A40     		ands	r2, r2, r1
 2425 0032 5A61     		str	r2, [r3, #20]
1303:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1304:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
1305:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_OK;
 2426              		.loc 1 1305 0
 2427 0034 0023     		movs	r3, #0
 2428 0036 06E0     		b	.L118
 2429              	.L117:
1306:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1307:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
1308:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
ARM GAS  /tmp/ccqSH0iI.s 			page 76


1309:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
1310:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 2430              		.loc 1 1310 0
 2431 0038 7B68     		ldr	r3, [r7, #4]
 2432 003a 5B6A     		ldr	r3, [r3, #36]
 2433 003c 43F48022 		orr	r2, r3, #262144
 2434 0040 7B68     		ldr	r3, [r7, #4]
 2435 0042 5A62     		str	r2, [r3, #36]
1311:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1312:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 2436              		.loc 1 1312 0
 2437 0044 0123     		movs	r3, #1
 2438              	.L118:
1313:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1314:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 2439              		.loc 1 1314 0
 2440 0046 1846     		mov	r0, r3
 2441 0048 0C37     		adds	r7, r7, #12
 2442              	.LCFI107:
 2443              		.cfi_def_cfa_offset 4
 2444 004a BD46     		mov	sp, r7
 2445              	.LCFI108:
 2446              		.cfi_def_cfa_register 13
 2447              		@ sp needed
 2448 004c 5DF8047B 		ldr	r7, [sp], #4
 2449              	.LCFI109:
 2450              		.cfi_restore 7
 2451              		.cfi_def_cfa_offset 0
 2452 0050 7047     		bx	lr
 2453              		.cfi_endproc
 2454              	.LFE141:
 2456 0052 00BF     		.section	.text.HAL_CAN_IRQHandler,"ax",%progbits
 2457              		.align	2
 2458              		.global	HAL_CAN_IRQHandler
 2459              		.thumb
 2460              		.thumb_func
 2462              	HAL_CAN_IRQHandler:
 2463              	.LFB142:
1315:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1316:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1317:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Handles CAN interrupt request
1318:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1319:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1320:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1321:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1322:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
1323:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 2464              		.loc 1 1323 0
 2465              		.cfi_startproc
 2466              		@ args = 0, pretend = 0, frame = 40
 2467              		@ frame_needed = 1, uses_anonymous_args = 0
 2468 0000 80B5     		push	{r7, lr}
 2469              	.LCFI110:
 2470              		.cfi_def_cfa_offset 8
 2471              		.cfi_offset 7, -8
 2472              		.cfi_offset 14, -4
 2473 0002 8AB0     		sub	sp, sp, #40
ARM GAS  /tmp/ccqSH0iI.s 			page 77


 2474              	.LCFI111:
 2475              		.cfi_def_cfa_offset 48
 2476 0004 00AF     		add	r7, sp, #0
 2477              	.LCFI112:
 2478              		.cfi_def_cfa_register 7
 2479 0006 7860     		str	r0, [r7, #4]
1324:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t errorcode = HAL_CAN_ERROR_NONE;
 2480              		.loc 1 1324 0
 2481 0008 0023     		movs	r3, #0
 2482 000a 7B62     		str	r3, [r7, #36]
1325:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
 2483              		.loc 1 1325 0
 2484 000c 7B68     		ldr	r3, [r7, #4]
 2485 000e 1B68     		ldr	r3, [r3]
 2486 0010 5B69     		ldr	r3, [r3, #20]
 2487 0012 3B62     		str	r3, [r7, #32]
1326:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 2488              		.loc 1 1326 0
 2489 0014 7B68     		ldr	r3, [r7, #4]
 2490 0016 1B68     		ldr	r3, [r3]
 2491 0018 5B68     		ldr	r3, [r3, #4]
 2492 001a FB61     		str	r3, [r7, #28]
1327:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 2493              		.loc 1 1327 0
 2494 001c 7B68     		ldr	r3, [r7, #4]
 2495 001e 1B68     		ldr	r3, [r3]
 2496 0020 9B68     		ldr	r3, [r3, #8]
 2497 0022 BB61     		str	r3, [r7, #24]
1328:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 2498              		.loc 1 1328 0
 2499 0024 7B68     		ldr	r3, [r7, #4]
 2500 0026 1B68     		ldr	r3, [r3]
 2501 0028 DB68     		ldr	r3, [r3, #12]
 2502 002a 7B61     		str	r3, [r7, #20]
1329:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 2503              		.loc 1 1329 0
 2504 002c 7B68     		ldr	r3, [r7, #4]
 2505 002e 1B68     		ldr	r3, [r3]
 2506 0030 1B69     		ldr	r3, [r3, #16]
 2507 0032 3B61     		str	r3, [r7, #16]
1330:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 2508              		.loc 1 1330 0
 2509 0034 7B68     		ldr	r3, [r7, #4]
 2510 0036 1B68     		ldr	r3, [r3]
 2511 0038 9B69     		ldr	r3, [r3, #24]
 2512 003a FB60     		str	r3, [r7, #12]
1331:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1332:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Transmit Mailbox empty interrupt management *****************************/
1333:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != RESET)
 2513              		.loc 1 1333 0
 2514 003c 3B6A     		ldr	r3, [r7, #32]
 2515 003e 03F00103 		and	r3, r3, #1
 2516 0042 002B     		cmp	r3, #0
 2517 0044 7CD0     		beq	.L120
1334:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1335:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Transmit Mailbox 0 management *****************************************/
1336:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP0) != RESET)
ARM GAS  /tmp/ccqSH0iI.s 			page 78


 2518              		.loc 1 1336 0
 2519 0046 BB69     		ldr	r3, [r7, #24]
 2520 0048 03F00103 		and	r3, r3, #1
 2521 004c 002B     		cmp	r3, #0
 2522 004e 23D0     		beq	.L121
1337:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1338:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
1339:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 2523              		.loc 1 1339 0
 2524 0050 7B68     		ldr	r3, [r7, #4]
 2525 0052 1B68     		ldr	r3, [r3]
 2526 0054 0122     		movs	r2, #1
 2527 0056 9A60     		str	r2, [r3, #8]
1340:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1341:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK0) != RESET)
 2528              		.loc 1 1341 0
 2529 0058 BB69     		ldr	r3, [r7, #24]
 2530 005a 03F00203 		and	r3, r3, #2
 2531 005e 002B     		cmp	r3, #0
 2532 0060 03D0     		beq	.L122
1342:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1343:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Transmission Mailbox 0 complete callback */
1344:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Call weak (surcharged) callback */
1345:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         HAL_CAN_TxMailbox0CompleteCallback(hcan);
 2533              		.loc 1 1345 0
 2534 0062 7868     		ldr	r0, [r7, #4]
 2535 0064 FFF7FEFF 		bl	HAL_CAN_TxMailbox0CompleteCallback
 2536 0068 16E0     		b	.L121
 2537              	.L122:
1346:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1347:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       else
1348:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1349:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST0) != RESET)
 2538              		.loc 1 1349 0
 2539 006a BB69     		ldr	r3, [r7, #24]
 2540 006c 03F00403 		and	r3, r3, #4
 2541 0070 002B     		cmp	r3, #0
 2542 0072 04D0     		beq	.L123
1350:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1351:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Update error code */
1352:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST0;
 2543              		.loc 1 1352 0
 2544 0074 7B6A     		ldr	r3, [r7, #36]
 2545 0076 43F40063 		orr	r3, r3, #2048
 2546 007a 7B62     		str	r3, [r7, #36]
 2547 007c 0CE0     		b	.L121
 2548              	.L123:
1353:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1354:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR0) != RESET)
 2549              		.loc 1 1354 0
 2550 007e BB69     		ldr	r3, [r7, #24]
 2551 0080 03F00803 		and	r3, r3, #8
 2552 0084 002B     		cmp	r3, #0
 2553 0086 04D0     		beq	.L124
1355:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1356:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Update error code */
1357:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR0;
ARM GAS  /tmp/ccqSH0iI.s 			page 79


 2554              		.loc 1 1357 0
 2555 0088 7B6A     		ldr	r3, [r7, #36]
 2556 008a 43F48053 		orr	r3, r3, #4096
 2557 008e 7B62     		str	r3, [r7, #36]
 2558 0090 02E0     		b	.L121
 2559              	.L124:
1358:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1359:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         else
1360:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1361:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Transmission Mailbox 0 abort callback */
1362:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Call weak (surcharged) callback */
1363:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_TxMailbox0AbortCallback(hcan);
 2560              		.loc 1 1363 0
 2561 0092 7868     		ldr	r0, [r7, #4]
 2562 0094 FFF7FEFF 		bl	HAL_CAN_TxMailbox0AbortCallback
 2563              	.L121:
1364:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1365:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1366:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1367:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1368:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Transmit Mailbox 1 management *****************************************/
1369:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP1) != RESET)
 2564              		.loc 1 1369 0
 2565 0098 BB69     		ldr	r3, [r7, #24]
 2566 009a 03F48073 		and	r3, r3, #256
 2567 009e 002B     		cmp	r3, #0
 2568 00a0 24D0     		beq	.L125
1370:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1371:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
1372:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 2569              		.loc 1 1372 0
 2570 00a2 7B68     		ldr	r3, [r7, #4]
 2571 00a4 1B68     		ldr	r3, [r3]
 2572 00a6 4FF48072 		mov	r2, #256
 2573 00aa 9A60     		str	r2, [r3, #8]
1373:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1374:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK1) != RESET)
 2574              		.loc 1 1374 0
 2575 00ac BB69     		ldr	r3, [r7, #24]
 2576 00ae 03F40073 		and	r3, r3, #512
 2577 00b2 002B     		cmp	r3, #0
 2578 00b4 03D0     		beq	.L126
1375:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1376:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Transmission Mailbox 1 complete callback */
1377:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Call weak (surcharged) callback */
1378:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         HAL_CAN_TxMailbox1CompleteCallback(hcan);
 2579              		.loc 1 1378 0
 2580 00b6 7868     		ldr	r0, [r7, #4]
 2581 00b8 FFF7FEFF 		bl	HAL_CAN_TxMailbox1CompleteCallback
 2582 00bc 16E0     		b	.L125
 2583              	.L126:
1379:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1380:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       else
1381:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1382:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST1) != RESET)
 2584              		.loc 1 1382 0
 2585 00be BB69     		ldr	r3, [r7, #24]
ARM GAS  /tmp/ccqSH0iI.s 			page 80


 2586 00c0 03F48063 		and	r3, r3, #1024
 2587 00c4 002B     		cmp	r3, #0
 2588 00c6 04D0     		beq	.L127
1383:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1384:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Update error code */
1385:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST1;
 2589              		.loc 1 1385 0
 2590 00c8 7B6A     		ldr	r3, [r7, #36]
 2591 00ca 43F40053 		orr	r3, r3, #8192
 2592 00ce 7B62     		str	r3, [r7, #36]
 2593 00d0 0CE0     		b	.L125
 2594              	.L127:
1386:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1387:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR1) != RESET)
 2595              		.loc 1 1387 0
 2596 00d2 BB69     		ldr	r3, [r7, #24]
 2597 00d4 03F40063 		and	r3, r3, #2048
 2598 00d8 002B     		cmp	r3, #0
 2599 00da 04D0     		beq	.L128
1388:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1389:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Update error code */
1390:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR1;
 2600              		.loc 1 1390 0
 2601 00dc 7B6A     		ldr	r3, [r7, #36]
 2602 00de 43F48043 		orr	r3, r3, #16384
 2603 00e2 7B62     		str	r3, [r7, #36]
 2604 00e4 02E0     		b	.L125
 2605              	.L128:
1391:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1392:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         else
1393:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1394:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Transmission Mailbox 1 abort callback */
1395:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Call weak (surcharged) callback */
1396:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_TxMailbox1AbortCallback(hcan);
 2606              		.loc 1 1396 0
 2607 00e6 7868     		ldr	r0, [r7, #4]
 2608 00e8 FFF7FEFF 		bl	HAL_CAN_TxMailbox1AbortCallback
 2609              	.L125:
1397:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1398:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1399:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1400:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1401:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Transmit Mailbox 2 management *****************************************/
1402:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP2) != RESET)
 2610              		.loc 1 1402 0
 2611 00ec BB69     		ldr	r3, [r7, #24]
 2612 00ee 03F48033 		and	r3, r3, #65536
 2613 00f2 002B     		cmp	r3, #0
 2614 00f4 24D0     		beq	.L120
1403:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1404:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
1405:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 2615              		.loc 1 1405 0
 2616 00f6 7B68     		ldr	r3, [r7, #4]
 2617 00f8 1B68     		ldr	r3, [r3]
 2618 00fa 4FF48032 		mov	r2, #65536
 2619 00fe 9A60     		str	r2, [r3, #8]
ARM GAS  /tmp/ccqSH0iI.s 			page 81


1406:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1407:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK2) != RESET)
 2620              		.loc 1 1407 0
 2621 0100 BB69     		ldr	r3, [r7, #24]
 2622 0102 03F40033 		and	r3, r3, #131072
 2623 0106 002B     		cmp	r3, #0
 2624 0108 03D0     		beq	.L129
1408:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1409:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Transmission Mailbox 2 complete callback */
1410:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Call weak (surcharged) callback */
1411:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         HAL_CAN_TxMailbox2CompleteCallback(hcan);
 2625              		.loc 1 1411 0
 2626 010a 7868     		ldr	r0, [r7, #4]
 2627 010c FFF7FEFF 		bl	HAL_CAN_TxMailbox2CompleteCallback
 2628 0110 16E0     		b	.L120
 2629              	.L129:
1412:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1413:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       else
1414:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1415:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST2) != RESET)
 2630              		.loc 1 1415 0
 2631 0112 BB69     		ldr	r3, [r7, #24]
 2632 0114 03F48023 		and	r3, r3, #262144
 2633 0118 002B     		cmp	r3, #0
 2634 011a 04D0     		beq	.L130
1416:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1417:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Update error code */
1418:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST2;
 2635              		.loc 1 1418 0
 2636 011c 7B6A     		ldr	r3, [r7, #36]
 2637 011e 43F40043 		orr	r3, r3, #32768
 2638 0122 7B62     		str	r3, [r7, #36]
 2639 0124 0CE0     		b	.L120
 2640              	.L130:
1419:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1420:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR2) != RESET)
 2641              		.loc 1 1420 0
 2642 0126 BB69     		ldr	r3, [r7, #24]
 2643 0128 03F40023 		and	r3, r3, #524288
 2644 012c 002B     		cmp	r3, #0
 2645 012e 04D0     		beq	.L131
1421:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1422:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Update error code */
1423:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR2;
 2646              		.loc 1 1423 0
 2647 0130 7B6A     		ldr	r3, [r7, #36]
 2648 0132 43F48033 		orr	r3, r3, #65536
 2649 0136 7B62     		str	r3, [r7, #36]
 2650 0138 02E0     		b	.L120
 2651              	.L131:
1424:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1425:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         else
1426:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1427:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Transmission Mailbox 2 abort callback */
1428:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Call weak (surcharged) callback */
1429:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_TxMailbox2AbortCallback(hcan);
 2652              		.loc 1 1429 0
ARM GAS  /tmp/ccqSH0iI.s 			page 82


 2653 013a 7868     		ldr	r0, [r7, #4]
 2654 013c FFF7FEFF 		bl	HAL_CAN_TxMailbox2AbortCallback
 2655              	.L120:
1430:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1431:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1432:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1433:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1434:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1435:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Receive FIFO 0 overrun interrupt management *****************************/
1436:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != RESET)
 2656              		.loc 1 1436 0
 2657 0140 3B6A     		ldr	r3, [r7, #32]
 2658 0142 03F00803 		and	r3, r3, #8
 2659 0146 002B     		cmp	r3, #0
 2660 0148 0CD0     		beq	.L132
1437:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1438:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((rf0rflags & CAN_RF0R_FOVR0) != RESET)
 2661              		.loc 1 1438 0
 2662 014a 7B69     		ldr	r3, [r7, #20]
 2663 014c 03F01003 		and	r3, r3, #16
 2664 0150 002B     		cmp	r3, #0
 2665 0152 07D0     		beq	.L132
1439:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1440:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Set CAN error code to Rx Fifo 0 overrun error */
1441:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       errorcode |= HAL_CAN_ERROR_RX_FOV0;
 2666              		.loc 1 1441 0
 2667 0154 7B6A     		ldr	r3, [r7, #36]
 2668 0156 43F40073 		orr	r3, r3, #512
 2669 015a 7B62     		str	r3, [r7, #36]
1442:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1443:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Clear FIFO0 Overrun Flag */
1444:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 2670              		.loc 1 1444 0
 2671 015c 7B68     		ldr	r3, [r7, #4]
 2672 015e 1B68     		ldr	r3, [r3]
 2673 0160 1022     		movs	r2, #16
 2674 0162 DA60     		str	r2, [r3, #12]
 2675              	.L132:
1445:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1446:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1447:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1448:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Receive FIFO 0 full interrupt management ********************************/
1449:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_FULL) != RESET)
 2676              		.loc 1 1449 0
 2677 0164 3B6A     		ldr	r3, [r7, #32]
 2678 0166 03F00403 		and	r3, r3, #4
 2679 016a 002B     		cmp	r3, #0
 2680 016c 0BD0     		beq	.L133
1450:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1451:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((rf0rflags & CAN_RF0R_FULL0) != RESET)
 2681              		.loc 1 1451 0
 2682 016e 7B69     		ldr	r3, [r7, #20]
 2683 0170 03F00803 		and	r3, r3, #8
 2684 0174 002B     		cmp	r3, #0
 2685 0176 06D0     		beq	.L133
1452:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1453:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Clear FIFO 0 full Flag */
ARM GAS  /tmp/ccqSH0iI.s 			page 83


1454:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 2686              		.loc 1 1454 0
 2687 0178 7B68     		ldr	r3, [r7, #4]
 2688 017a 1B68     		ldr	r3, [r3]
 2689 017c 0822     		movs	r2, #8
 2690 017e DA60     		str	r2, [r3, #12]
1455:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1456:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Receive FIFO 0 full Callback */
1457:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Call weak (surcharged) callback */
1458:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       HAL_CAN_RxFifo0FullCallback(hcan);
 2691              		.loc 1 1458 0
 2692 0180 7868     		ldr	r0, [r7, #4]
 2693 0182 FFF7FEFF 		bl	HAL_CAN_RxFifo0FullCallback
 2694              	.L133:
1459:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1460:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1461:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1462:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Receive FIFO 0 message pending interrupt management *********************/
1463:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != RESET)
 2695              		.loc 1 1463 0
 2696 0186 3B6A     		ldr	r3, [r7, #32]
 2697 0188 03F00203 		and	r3, r3, #2
 2698 018c 002B     		cmp	r3, #0
 2699 018e 09D0     		beq	.L134
1464:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1465:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check if message is still pending */
1466:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != RESET)
 2700              		.loc 1 1466 0
 2701 0190 7B68     		ldr	r3, [r7, #4]
 2702 0192 1B68     		ldr	r3, [r3]
 2703 0194 DB68     		ldr	r3, [r3, #12]
 2704 0196 03F00303 		and	r3, r3, #3
 2705 019a 002B     		cmp	r3, #0
 2706 019c 02D0     		beq	.L134
1467:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1468:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Receive FIFO 0 mesage pending Callback */
1469:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Call weak (surcharged) callback */
1470:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 2707              		.loc 1 1470 0
 2708 019e 7868     		ldr	r0, [r7, #4]
 2709 01a0 FFF7FEFF 		bl	HAL_CAN_RxFifo0MsgPendingCallback
 2710              	.L134:
1471:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1472:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1473:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1474:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Receive FIFO 1 overrun interrupt management *****************************/
1475:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != RESET)
 2711              		.loc 1 1475 0
 2712 01a4 3B6A     		ldr	r3, [r7, #32]
 2713 01a6 03F04003 		and	r3, r3, #64
 2714 01aa 002B     		cmp	r3, #0
 2715 01ac 0CD0     		beq	.L135
1476:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1477:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((rf1rflags & CAN_RF1R_FOVR1) != RESET)
 2716              		.loc 1 1477 0
 2717 01ae 3B69     		ldr	r3, [r7, #16]
 2718 01b0 03F01003 		and	r3, r3, #16
ARM GAS  /tmp/ccqSH0iI.s 			page 84


 2719 01b4 002B     		cmp	r3, #0
 2720 01b6 07D0     		beq	.L135
1478:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1479:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Set CAN error code to Rx Fifo 1 overrun error */
1480:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       errorcode |= HAL_CAN_ERROR_RX_FOV1;
 2721              		.loc 1 1480 0
 2722 01b8 7B6A     		ldr	r3, [r7, #36]
 2723 01ba 43F48063 		orr	r3, r3, #1024
 2724 01be 7B62     		str	r3, [r7, #36]
1481:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1482:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Clear FIFO1 Overrun Flag */
1483:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 2725              		.loc 1 1483 0
 2726 01c0 7B68     		ldr	r3, [r7, #4]
 2727 01c2 1B68     		ldr	r3, [r3]
 2728 01c4 1022     		movs	r2, #16
 2729 01c6 1A61     		str	r2, [r3, #16]
 2730              	.L135:
1484:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1485:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1486:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1487:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Receive FIFO 1 full interrupt management ********************************/
1488:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_FULL) != RESET)
 2731              		.loc 1 1488 0
 2732 01c8 3B6A     		ldr	r3, [r7, #32]
 2733 01ca 03F02003 		and	r3, r3, #32
 2734 01ce 002B     		cmp	r3, #0
 2735 01d0 0BD0     		beq	.L136
1489:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1490:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((rf1rflags & CAN_RF1R_FULL1) != RESET)
 2736              		.loc 1 1490 0
 2737 01d2 3B69     		ldr	r3, [r7, #16]
 2738 01d4 03F00803 		and	r3, r3, #8
 2739 01d8 002B     		cmp	r3, #0
 2740 01da 06D0     		beq	.L136
1491:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1492:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Clear FIFO 1 full Flag */
1493:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 2741              		.loc 1 1493 0
 2742 01dc 7B68     		ldr	r3, [r7, #4]
 2743 01de 1B68     		ldr	r3, [r3]
 2744 01e0 0822     		movs	r2, #8
 2745 01e2 1A61     		str	r2, [r3, #16]
1494:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1495:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Receive FIFO 1 full Callback */
1496:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Call weak (surcharged) callback */
1497:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       HAL_CAN_RxFifo1FullCallback(hcan);
 2746              		.loc 1 1497 0
 2747 01e4 7868     		ldr	r0, [r7, #4]
 2748 01e6 FFF7FEFF 		bl	HAL_CAN_RxFifo1FullCallback
 2749              	.L136:
1498:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1499:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1500:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1501:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Receive FIFO 1 message pending interrupt management *********************/
1502:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != RESET)
 2750              		.loc 1 1502 0
ARM GAS  /tmp/ccqSH0iI.s 			page 85


 2751 01ea 3B6A     		ldr	r3, [r7, #32]
 2752 01ec 03F01003 		and	r3, r3, #16
 2753 01f0 002B     		cmp	r3, #0
 2754 01f2 09D0     		beq	.L137
1503:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1504:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check if message is still pending */
1505:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != RESET)
 2755              		.loc 1 1505 0
 2756 01f4 7B68     		ldr	r3, [r7, #4]
 2757 01f6 1B68     		ldr	r3, [r3]
 2758 01f8 1B69     		ldr	r3, [r3, #16]
 2759 01fa 03F00303 		and	r3, r3, #3
 2760 01fe 002B     		cmp	r3, #0
 2761 0200 02D0     		beq	.L137
1506:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1507:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Receive FIFO 1 mesage pending Callback */
1508:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Call weak (surcharged) callback */
1509:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 2762              		.loc 1 1509 0
 2763 0202 7868     		ldr	r0, [r7, #4]
 2764 0204 FFF7FEFF 		bl	HAL_CAN_RxFifo1MsgPendingCallback
 2765              	.L137:
1510:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1511:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1512:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1513:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Sleep interrupt management *********************************************/
1514:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_SLEEP_ACK) != RESET)
 2766              		.loc 1 1514 0
 2767 0208 3B6A     		ldr	r3, [r7, #32]
 2768 020a 03F40033 		and	r3, r3, #131072
 2769 020e 002B     		cmp	r3, #0
 2770 0210 0BD0     		beq	.L138
1515:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1516:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((msrflags & CAN_MSR_SLAKI) != RESET)
 2771              		.loc 1 1516 0
 2772 0212 FB69     		ldr	r3, [r7, #28]
 2773 0214 03F01003 		and	r3, r3, #16
 2774 0218 002B     		cmp	r3, #0
 2775 021a 06D0     		beq	.L138
1517:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1518:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Clear Sleep interrupt Flag */
1519:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 2776              		.loc 1 1519 0
 2777 021c 7B68     		ldr	r3, [r7, #4]
 2778 021e 1B68     		ldr	r3, [r3]
 2779 0220 1022     		movs	r2, #16
 2780 0222 5A60     		str	r2, [r3, #4]
1520:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1521:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Sleep Callback */
1522:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Call weak (surcharged) callback */
1523:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       HAL_CAN_SleepCallback(hcan);
 2781              		.loc 1 1523 0
 2782 0224 7868     		ldr	r0, [r7, #4]
 2783 0226 FFF7FEFF 		bl	HAL_CAN_SleepCallback
 2784              	.L138:
1524:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1525:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
ARM GAS  /tmp/ccqSH0iI.s 			page 86


1526:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1527:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* WakeUp interrupt management *********************************************/
1528:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_WAKEUP) != RESET)
 2785              		.loc 1 1528 0
 2786 022a 3B6A     		ldr	r3, [r7, #32]
 2787 022c 03F48033 		and	r3, r3, #65536
 2788 0230 002B     		cmp	r3, #0
 2789 0232 0BD0     		beq	.L139
1529:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1530:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((msrflags & CAN_MSR_WKUI) != RESET)
 2790              		.loc 1 1530 0
 2791 0234 FB69     		ldr	r3, [r7, #28]
 2792 0236 03F00803 		and	r3, r3, #8
 2793 023a 002B     		cmp	r3, #0
 2794 023c 06D0     		beq	.L139
1531:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1532:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Clear WakeUp Flag */
1533:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 2795              		.loc 1 1533 0
 2796 023e 7B68     		ldr	r3, [r7, #4]
 2797 0240 1B68     		ldr	r3, [r3]
 2798 0242 0822     		movs	r2, #8
 2799 0244 5A60     		str	r2, [r3, #4]
1534:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1535:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* WakeUp Callback */
1536:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Call weak (surcharged) callback */
1537:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 2800              		.loc 1 1537 0
 2801 0246 7868     		ldr	r0, [r7, #4]
 2802 0248 FFF7FEFF 		bl	HAL_CAN_WakeUpFromRxMsgCallback
 2803              	.L139:
1538:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1539:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1540:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1541:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Error interrupts management *********************************************/
1542:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_ERROR) != RESET)
 2804              		.loc 1 1542 0
 2805 024c 3B6A     		ldr	r3, [r7, #32]
 2806 024e 03F40043 		and	r3, r3, #32768
 2807 0252 002B     		cmp	r3, #0
 2808 0254 75D0     		beq	.L140
1543:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1544:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((msrflags & CAN_MSR_ERRI) != RESET)
 2809              		.loc 1 1544 0
 2810 0256 FB69     		ldr	r3, [r7, #28]
 2811 0258 03F00403 		and	r3, r3, #4
 2812 025c 002B     		cmp	r3, #0
 2813 025e 6CD0     		beq	.L141
1545:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1546:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check Error Warning Flag */
1547:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if (((interrupts & CAN_IT_ERROR_WARNING) != RESET) &&
 2814              		.loc 1 1547 0
 2815 0260 3B6A     		ldr	r3, [r7, #32]
 2816 0262 03F48073 		and	r3, r3, #256
 2817 0266 002B     		cmp	r3, #0
 2818 0268 08D0     		beq	.L142
1548:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != RESET))
ARM GAS  /tmp/ccqSH0iI.s 			page 87


 2819              		.loc 1 1548 0 discriminator 1
 2820 026a FB68     		ldr	r3, [r7, #12]
 2821 026c 03F00103 		and	r3, r3, #1
1547:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != RESET))
 2822              		.loc 1 1547 0 discriminator 1
 2823 0270 002B     		cmp	r3, #0
 2824 0272 03D0     		beq	.L142
1549:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1550:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Set CAN error code to Error Warning */
1551:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_EWG;
 2825              		.loc 1 1551 0
 2826 0274 7B6A     		ldr	r3, [r7, #36]
 2827 0276 43F00103 		orr	r3, r3, #1
 2828 027a 7B62     		str	r3, [r7, #36]
 2829              	.L142:
1552:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1553:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* No need for clear of Error Warning Flag as read-only */
1554:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1555:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1556:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check Error Passive Flag */
1557:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if (((interrupts & CAN_IT_ERROR_PASSIVE) != RESET) &&
 2830              		.loc 1 1557 0
 2831 027c 3B6A     		ldr	r3, [r7, #32]
 2832 027e 03F40073 		and	r3, r3, #512
 2833 0282 002B     		cmp	r3, #0
 2834 0284 08D0     		beq	.L143
1558:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != RESET))
 2835              		.loc 1 1558 0 discriminator 1
 2836 0286 FB68     		ldr	r3, [r7, #12]
 2837 0288 03F00203 		and	r3, r3, #2
1557:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != RESET))
 2838              		.loc 1 1557 0 discriminator 1
 2839 028c 002B     		cmp	r3, #0
 2840 028e 03D0     		beq	.L143
1559:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1560:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Set CAN error code to Error Passive */
1561:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_EPV;
 2841              		.loc 1 1561 0
 2842 0290 7B6A     		ldr	r3, [r7, #36]
 2843 0292 43F00203 		orr	r3, r3, #2
 2844 0296 7B62     		str	r3, [r7, #36]
 2845              	.L143:
1562:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1563:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* No need for clear of Error Passive Flag as read-only */
1564:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1565:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1566:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check Bus-off Flag */
1567:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if (((interrupts & CAN_IT_BUSOFF) != RESET) &&
 2846              		.loc 1 1567 0
 2847 0298 3B6A     		ldr	r3, [r7, #32]
 2848 029a 03F48063 		and	r3, r3, #1024
 2849 029e 002B     		cmp	r3, #0
 2850 02a0 08D0     		beq	.L144
1568:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != RESET))
 2851              		.loc 1 1568 0 discriminator 1
 2852 02a2 FB68     		ldr	r3, [r7, #12]
 2853 02a4 03F00403 		and	r3, r3, #4
ARM GAS  /tmp/ccqSH0iI.s 			page 88


1567:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != RESET))
 2854              		.loc 1 1567 0 discriminator 1
 2855 02a8 002B     		cmp	r3, #0
 2856 02aa 03D0     		beq	.L144
1569:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1570:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Set CAN error code to Bus-Off */
1571:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_BOF;
 2857              		.loc 1 1571 0
 2858 02ac 7B6A     		ldr	r3, [r7, #36]
 2859 02ae 43F00403 		orr	r3, r3, #4
 2860 02b2 7B62     		str	r3, [r7, #36]
 2861              	.L144:
1572:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1573:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* No need for clear of Error Bus-Off as read-only */
1574:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1575:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1576:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check Last Error Code Flag */
1577:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if (((interrupts & CAN_IT_LAST_ERROR_CODE) != RESET) &&
 2862              		.loc 1 1577 0
 2863 02b4 3B6A     		ldr	r3, [r7, #32]
 2864 02b6 03F40063 		and	r3, r3, #2048
 2865 02ba 002B     		cmp	r3, #0
 2866 02bc 3DD0     		beq	.L141
1578:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != RESET))
 2867              		.loc 1 1578 0 discriminator 1
 2868 02be FB68     		ldr	r3, [r7, #12]
 2869 02c0 03F07003 		and	r3, r3, #112
1577:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != RESET))
 2870              		.loc 1 1577 0 discriminator 1
 2871 02c4 002B     		cmp	r3, #0
 2872 02c6 38D0     		beq	.L141
1579:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1580:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         switch (esrflags & CAN_ESR_LEC)
 2873              		.loc 1 1580 0
 2874 02c8 FB68     		ldr	r3, [r7, #12]
 2875 02ca 03F07003 		and	r3, r3, #112
 2876 02ce 302B     		cmp	r3, #48
 2877 02d0 17D0     		beq	.L146
 2878 02d2 302B     		cmp	r3, #48
 2879 02d4 04D8     		bhi	.L147
 2880 02d6 102B     		cmp	r3, #16
 2881 02d8 09D0     		beq	.L148
 2882 02da 202B     		cmp	r3, #32
 2883 02dc 0CD0     		beq	.L149
1581:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1582:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_0):
1583:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             /* Set CAN error code to Stuff error */
1584:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_STF;
1585:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
1586:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_1):
1587:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             /* Set CAN error code to Form error */
1588:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_FOR;
1589:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
1590:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
1591:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             /* Set CAN error code to Acknowledgement error */
1592:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_ACK;
1593:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
ARM GAS  /tmp/ccqSH0iI.s 			page 89


1594:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_2):
1595:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             /* Set CAN error code to Bit recessive error */
1596:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_BR;
1597:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
1598:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_0):
1599:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             /* Set CAN error code to Bit Dominant error */
1600:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_BD;
1601:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
1602:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
1603:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             /* Set CAN error code to CRC error */
1604:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_CRC;
1605:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
1606:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           default:
1607:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
 2884              		.loc 1 1607 0
 2885 02de 24E0     		b	.L153
 2886              	.L147:
1580:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
 2887              		.loc 1 1580 0
 2888 02e0 502B     		cmp	r3, #80
 2889 02e2 18D0     		beq	.L150
 2890 02e4 602B     		cmp	r3, #96
 2891 02e6 1BD0     		beq	.L151
 2892 02e8 402B     		cmp	r3, #64
 2893 02ea 0FD0     		beq	.L152
 2894              		.loc 1 1607 0
 2895 02ec 1DE0     		b	.L153
 2896              	.L148:
1584:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
 2897              		.loc 1 1584 0
 2898 02ee 7B6A     		ldr	r3, [r7, #36]
 2899 02f0 43F00803 		orr	r3, r3, #8
 2900 02f4 7B62     		str	r3, [r7, #36]
1585:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_1):
 2901              		.loc 1 1585 0
 2902 02f6 18E0     		b	.L153
 2903              	.L149:
1588:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
 2904              		.loc 1 1588 0
 2905 02f8 7B6A     		ldr	r3, [r7, #36]
 2906 02fa 43F01003 		orr	r3, r3, #16
 2907 02fe 7B62     		str	r3, [r7, #36]
1589:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
 2908              		.loc 1 1589 0
 2909 0300 13E0     		b	.L153
 2910              	.L146:
1592:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
 2911              		.loc 1 1592 0
 2912 0302 7B6A     		ldr	r3, [r7, #36]
 2913 0304 43F02003 		orr	r3, r3, #32
 2914 0308 7B62     		str	r3, [r7, #36]
1593:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_2):
 2915              		.loc 1 1593 0
 2916 030a 0EE0     		b	.L153
 2917              	.L152:
1596:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
 2918              		.loc 1 1596 0
ARM GAS  /tmp/ccqSH0iI.s 			page 90


 2919 030c 7B6A     		ldr	r3, [r7, #36]
 2920 030e 43F04003 		orr	r3, r3, #64
 2921 0312 7B62     		str	r3, [r7, #36]
1597:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_0):
 2922              		.loc 1 1597 0
 2923 0314 09E0     		b	.L153
 2924              	.L150:
1600:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
 2925              		.loc 1 1600 0
 2926 0316 7B6A     		ldr	r3, [r7, #36]
 2927 0318 43F08003 		orr	r3, r3, #128
 2928 031c 7B62     		str	r3, [r7, #36]
1601:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
 2929              		.loc 1 1601 0
 2930 031e 04E0     		b	.L153
 2931              	.L151:
1604:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
 2932              		.loc 1 1604 0
 2933 0320 7B6A     		ldr	r3, [r7, #36]
 2934 0322 43F48073 		orr	r3, r3, #256
 2935 0326 7B62     		str	r3, [r7, #36]
1605:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           default:
 2936              		.loc 1 1605 0
 2937 0328 00BF     		nop
 2938              	.L153:
1608:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1609:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1610:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Clear Last error code Flag */
1611:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 2939              		.loc 1 1611 0
 2940 032a 7B68     		ldr	r3, [r7, #4]
 2941 032c 1B68     		ldr	r3, [r3]
 2942 032e 7A68     		ldr	r2, [r7, #4]
 2943 0330 1268     		ldr	r2, [r2]
 2944 0332 9269     		ldr	r2, [r2, #24]
 2945 0334 22F07002 		bic	r2, r2, #112
 2946 0338 9A61     		str	r2, [r3, #24]
 2947              	.L141:
1612:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1613:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1614:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1615:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Clear ERRI Flag */
1616:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 2948              		.loc 1 1616 0
 2949 033a 7B68     		ldr	r3, [r7, #4]
 2950 033c 1B68     		ldr	r3, [r3]
 2951 033e 0422     		movs	r2, #4
 2952 0340 5A60     		str	r2, [r3, #4]
 2953              	.L140:
1617:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1618:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1619:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Call the Error call Back in case of Errors */
1620:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (errorcode != HAL_CAN_ERROR_NONE)
 2954              		.loc 1 1620 0
 2955 0342 7B6A     		ldr	r3, [r7, #36]
 2956 0344 002B     		cmp	r3, #0
 2957 0346 08D0     		beq	.L119
ARM GAS  /tmp/ccqSH0iI.s 			page 91


1621:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1622:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code in handle */
1623:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= errorcode;
 2958              		.loc 1 1623 0
 2959 0348 7B68     		ldr	r3, [r7, #4]
 2960 034a 5A6A     		ldr	r2, [r3, #36]
 2961 034c 7B6A     		ldr	r3, [r7, #36]
 2962 034e 1A43     		orrs	r2, r2, r3
 2963 0350 7B68     		ldr	r3, [r7, #4]
 2964 0352 5A62     		str	r2, [r3, #36]
1624:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1625:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Call Error callback function */
1626:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Call weak (surcharged) callback */
1627:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     HAL_CAN_ErrorCallback(hcan);
 2965              		.loc 1 1627 0
 2966 0354 7868     		ldr	r0, [r7, #4]
 2967 0356 FFF7FEFF 		bl	HAL_CAN_ErrorCallback
 2968              	.L119:
1628:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1629:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 2969              		.loc 1 1629 0
 2970 035a 2837     		adds	r7, r7, #40
 2971              	.LCFI113:
 2972              		.cfi_def_cfa_offset 8
 2973 035c BD46     		mov	sp, r7
 2974              	.LCFI114:
 2975              		.cfi_def_cfa_register 13
 2976              		@ sp needed
 2977 035e 80BD     		pop	{r7, pc}
 2978              		.cfi_endproc
 2979              	.LFE142:
 2981              		.section	.text.HAL_CAN_TxMailbox0CompleteCallback,"ax",%progbits
 2982              		.align	2
 2983              		.weak	HAL_CAN_TxMailbox0CompleteCallback
 2984              		.thumb
 2985              		.thumb_func
 2987              	HAL_CAN_TxMailbox0CompleteCallback:
 2988              	.LFB143:
1630:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1631:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1632:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @}
1633:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1634:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1635:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group5 Callback functions
1636:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *  @brief   CAN Callback functions
1637:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *
1638:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @verbatim
1639:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
1640:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                           ##### Callback functions #####
1641:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
1642:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]
1643:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     This subsection provides the following callback functions:
1644:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox0CompleteCallback
1645:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox1CompleteCallback
1646:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox2CompleteCallback
1647:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox0AbortCallback
1648:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox1AbortCallback
ARM GAS  /tmp/ccqSH0iI.s 			page 92


1649:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox2AbortCallback
1650:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_RxFifo0MsgPendingCallback
1651:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_RxFifo0FullCallback
1652:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_RxFifo1MsgPendingCallback
1653:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_RxFifo1FullCallback
1654:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_SleepCallback
1655:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_WakeUpFromRxMsgCallback
1656:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_ErrorCallback
1657:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1658:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @endverbatim
1659:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
1660:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1661:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1662:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1663:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Transmission Mailbox 0 complete callback.
1664:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1665:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1666:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1667:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1668:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
1669:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 2989              		.loc 1 1669 0
 2990              		.cfi_startproc
 2991              		@ args = 0, pretend = 0, frame = 8
 2992              		@ frame_needed = 1, uses_anonymous_args = 0
 2993              		@ link register save eliminated.
 2994 0000 80B4     		push	{r7}
 2995              	.LCFI115:
 2996              		.cfi_def_cfa_offset 4
 2997              		.cfi_offset 7, -4
 2998 0002 83B0     		sub	sp, sp, #12
 2999              	.LCFI116:
 3000              		.cfi_def_cfa_offset 16
 3001 0004 00AF     		add	r7, sp, #0
 3002              	.LCFI117:
 3003              		.cfi_def_cfa_register 7
 3004 0006 7860     		str	r0, [r7, #4]
1670:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1671:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1672:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1673:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1674:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
1675:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             user file
1676:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1677:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 3005              		.loc 1 1677 0
 3006 0008 0C37     		adds	r7, r7, #12
 3007              	.LCFI118:
 3008              		.cfi_def_cfa_offset 4
 3009 000a BD46     		mov	sp, r7
 3010              	.LCFI119:
 3011              		.cfi_def_cfa_register 13
 3012              		@ sp needed
 3013 000c 5DF8047B 		ldr	r7, [sp], #4
 3014              	.LCFI120:
 3015              		.cfi_restore 7
 3016              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccqSH0iI.s 			page 93


 3017 0010 7047     		bx	lr
 3018              		.cfi_endproc
 3019              	.LFE143:
 3021 0012 00BF     		.section	.text.HAL_CAN_TxMailbox1CompleteCallback,"ax",%progbits
 3022              		.align	2
 3023              		.weak	HAL_CAN_TxMailbox1CompleteCallback
 3024              		.thumb
 3025              		.thumb_func
 3027              	HAL_CAN_TxMailbox1CompleteCallback:
 3028              	.LFB144:
1678:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1679:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1680:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Transmission Mailbox 1 complete callback.
1681:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1682:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1683:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1684:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1685:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
1686:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 3029              		.loc 1 1686 0
 3030              		.cfi_startproc
 3031              		@ args = 0, pretend = 0, frame = 8
 3032              		@ frame_needed = 1, uses_anonymous_args = 0
 3033              		@ link register save eliminated.
 3034 0000 80B4     		push	{r7}
 3035              	.LCFI121:
 3036              		.cfi_def_cfa_offset 4
 3037              		.cfi_offset 7, -4
 3038 0002 83B0     		sub	sp, sp, #12
 3039              	.LCFI122:
 3040              		.cfi_def_cfa_offset 16
 3041 0004 00AF     		add	r7, sp, #0
 3042              	.LCFI123:
 3043              		.cfi_def_cfa_register 7
 3044 0006 7860     		str	r0, [r7, #4]
1687:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1688:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1689:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1690:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1691:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
1692:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             user file
1693:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1694:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 3045              		.loc 1 1694 0
 3046 0008 0C37     		adds	r7, r7, #12
 3047              	.LCFI124:
 3048              		.cfi_def_cfa_offset 4
 3049 000a BD46     		mov	sp, r7
 3050              	.LCFI125:
 3051              		.cfi_def_cfa_register 13
 3052              		@ sp needed
 3053 000c 5DF8047B 		ldr	r7, [sp], #4
 3054              	.LCFI126:
 3055              		.cfi_restore 7
 3056              		.cfi_def_cfa_offset 0
 3057 0010 7047     		bx	lr
 3058              		.cfi_endproc
ARM GAS  /tmp/ccqSH0iI.s 			page 94


 3059              	.LFE144:
 3061 0012 00BF     		.section	.text.HAL_CAN_TxMailbox2CompleteCallback,"ax",%progbits
 3062              		.align	2
 3063              		.weak	HAL_CAN_TxMailbox2CompleteCallback
 3064              		.thumb
 3065              		.thumb_func
 3067              	HAL_CAN_TxMailbox2CompleteCallback:
 3068              	.LFB145:
1695:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1696:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1697:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Transmission Mailbox 2 complete callback.
1698:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1699:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1700:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1701:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1702:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
1703:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 3069              		.loc 1 1703 0
 3070              		.cfi_startproc
 3071              		@ args = 0, pretend = 0, frame = 8
 3072              		@ frame_needed = 1, uses_anonymous_args = 0
 3073              		@ link register save eliminated.
 3074 0000 80B4     		push	{r7}
 3075              	.LCFI127:
 3076              		.cfi_def_cfa_offset 4
 3077              		.cfi_offset 7, -4
 3078 0002 83B0     		sub	sp, sp, #12
 3079              	.LCFI128:
 3080              		.cfi_def_cfa_offset 16
 3081 0004 00AF     		add	r7, sp, #0
 3082              	.LCFI129:
 3083              		.cfi_def_cfa_register 7
 3084 0006 7860     		str	r0, [r7, #4]
1704:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1705:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1706:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1707:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1708:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
1709:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             user file
1710:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1711:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 3085              		.loc 1 1711 0
 3086 0008 0C37     		adds	r7, r7, #12
 3087              	.LCFI130:
 3088              		.cfi_def_cfa_offset 4
 3089 000a BD46     		mov	sp, r7
 3090              	.LCFI131:
 3091              		.cfi_def_cfa_register 13
 3092              		@ sp needed
 3093 000c 5DF8047B 		ldr	r7, [sp], #4
 3094              	.LCFI132:
 3095              		.cfi_restore 7
 3096              		.cfi_def_cfa_offset 0
 3097 0010 7047     		bx	lr
 3098              		.cfi_endproc
 3099              	.LFE145:
 3101 0012 00BF     		.section	.text.HAL_CAN_TxMailbox0AbortCallback,"ax",%progbits
ARM GAS  /tmp/ccqSH0iI.s 			page 95


 3102              		.align	2
 3103              		.weak	HAL_CAN_TxMailbox0AbortCallback
 3104              		.thumb
 3105              		.thumb_func
 3107              	HAL_CAN_TxMailbox0AbortCallback:
 3108              	.LFB146:
1712:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1713:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1714:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Transmission Mailbox 0 Cancellation callback.
1715:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1716:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1717:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1718:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1719:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
1720:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 3109              		.loc 1 1720 0
 3110              		.cfi_startproc
 3111              		@ args = 0, pretend = 0, frame = 8
 3112              		@ frame_needed = 1, uses_anonymous_args = 0
 3113              		@ link register save eliminated.
 3114 0000 80B4     		push	{r7}
 3115              	.LCFI133:
 3116              		.cfi_def_cfa_offset 4
 3117              		.cfi_offset 7, -4
 3118 0002 83B0     		sub	sp, sp, #12
 3119              	.LCFI134:
 3120              		.cfi_def_cfa_offset 16
 3121 0004 00AF     		add	r7, sp, #0
 3122              	.LCFI135:
 3123              		.cfi_def_cfa_register 7
 3124 0006 7860     		str	r0, [r7, #4]
1721:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1722:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1723:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1724:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1725:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
1726:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             user file
1727:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1728:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 3125              		.loc 1 1728 0
 3126 0008 0C37     		adds	r7, r7, #12
 3127              	.LCFI136:
 3128              		.cfi_def_cfa_offset 4
 3129 000a BD46     		mov	sp, r7
 3130              	.LCFI137:
 3131              		.cfi_def_cfa_register 13
 3132              		@ sp needed
 3133 000c 5DF8047B 		ldr	r7, [sp], #4
 3134              	.LCFI138:
 3135              		.cfi_restore 7
 3136              		.cfi_def_cfa_offset 0
 3137 0010 7047     		bx	lr
 3138              		.cfi_endproc
 3139              	.LFE146:
 3141 0012 00BF     		.section	.text.HAL_CAN_TxMailbox1AbortCallback,"ax",%progbits
 3142              		.align	2
 3143              		.weak	HAL_CAN_TxMailbox1AbortCallback
ARM GAS  /tmp/ccqSH0iI.s 			page 96


 3144              		.thumb
 3145              		.thumb_func
 3147              	HAL_CAN_TxMailbox1AbortCallback:
 3148              	.LFB147:
1729:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1730:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1731:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Transmission Mailbox 1 Cancellation callback.
1732:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1733:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1734:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1735:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1736:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
1737:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 3149              		.loc 1 1737 0
 3150              		.cfi_startproc
 3151              		@ args = 0, pretend = 0, frame = 8
 3152              		@ frame_needed = 1, uses_anonymous_args = 0
 3153              		@ link register save eliminated.
 3154 0000 80B4     		push	{r7}
 3155              	.LCFI139:
 3156              		.cfi_def_cfa_offset 4
 3157              		.cfi_offset 7, -4
 3158 0002 83B0     		sub	sp, sp, #12
 3159              	.LCFI140:
 3160              		.cfi_def_cfa_offset 16
 3161 0004 00AF     		add	r7, sp, #0
 3162              	.LCFI141:
 3163              		.cfi_def_cfa_register 7
 3164 0006 7860     		str	r0, [r7, #4]
1738:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1739:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1740:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1741:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1742:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
1743:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             user file
1744:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1745:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 3165              		.loc 1 1745 0
 3166 0008 0C37     		adds	r7, r7, #12
 3167              	.LCFI142:
 3168              		.cfi_def_cfa_offset 4
 3169 000a BD46     		mov	sp, r7
 3170              	.LCFI143:
 3171              		.cfi_def_cfa_register 13
 3172              		@ sp needed
 3173 000c 5DF8047B 		ldr	r7, [sp], #4
 3174              	.LCFI144:
 3175              		.cfi_restore 7
 3176              		.cfi_def_cfa_offset 0
 3177 0010 7047     		bx	lr
 3178              		.cfi_endproc
 3179              	.LFE147:
 3181 0012 00BF     		.section	.text.HAL_CAN_TxMailbox2AbortCallback,"ax",%progbits
 3182              		.align	2
 3183              		.weak	HAL_CAN_TxMailbox2AbortCallback
 3184              		.thumb
 3185              		.thumb_func
ARM GAS  /tmp/ccqSH0iI.s 			page 97


 3187              	HAL_CAN_TxMailbox2AbortCallback:
 3188              	.LFB148:
1746:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1747:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1748:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Transmission Mailbox 2 Cancellation callback.
1749:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1750:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1751:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1752:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1753:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
1754:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 3189              		.loc 1 1754 0
 3190              		.cfi_startproc
 3191              		@ args = 0, pretend = 0, frame = 8
 3192              		@ frame_needed = 1, uses_anonymous_args = 0
 3193              		@ link register save eliminated.
 3194 0000 80B4     		push	{r7}
 3195              	.LCFI145:
 3196              		.cfi_def_cfa_offset 4
 3197              		.cfi_offset 7, -4
 3198 0002 83B0     		sub	sp, sp, #12
 3199              	.LCFI146:
 3200              		.cfi_def_cfa_offset 16
 3201 0004 00AF     		add	r7, sp, #0
 3202              	.LCFI147:
 3203              		.cfi_def_cfa_register 7
 3204 0006 7860     		str	r0, [r7, #4]
1755:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1756:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1757:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1758:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1759:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
1760:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             user file
1761:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1762:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 3205              		.loc 1 1762 0
 3206 0008 0C37     		adds	r7, r7, #12
 3207              	.LCFI148:
 3208              		.cfi_def_cfa_offset 4
 3209 000a BD46     		mov	sp, r7
 3210              	.LCFI149:
 3211              		.cfi_def_cfa_register 13
 3212              		@ sp needed
 3213 000c 5DF8047B 		ldr	r7, [sp], #4
 3214              	.LCFI150:
 3215              		.cfi_restore 7
 3216              		.cfi_def_cfa_offset 0
 3217 0010 7047     		bx	lr
 3218              		.cfi_endproc
 3219              	.LFE148:
 3221 0012 00BF     		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
 3222              		.align	2
 3223              		.weak	HAL_CAN_RxFifo0MsgPendingCallback
 3224              		.thumb
 3225              		.thumb_func
 3227              	HAL_CAN_RxFifo0MsgPendingCallback:
 3228              	.LFB149:
ARM GAS  /tmp/ccqSH0iI.s 			page 98


1763:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1764:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1765:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Rx FIFO 0 message pending callback.
1766:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1767:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1768:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1769:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1770:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
1771:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 3229              		.loc 1 1771 0
 3230              		.cfi_startproc
 3231              		@ args = 0, pretend = 0, frame = 8
 3232              		@ frame_needed = 1, uses_anonymous_args = 0
 3233              		@ link register save eliminated.
 3234 0000 80B4     		push	{r7}
 3235              	.LCFI151:
 3236              		.cfi_def_cfa_offset 4
 3237              		.cfi_offset 7, -4
 3238 0002 83B0     		sub	sp, sp, #12
 3239              	.LCFI152:
 3240              		.cfi_def_cfa_offset 16
 3241 0004 00AF     		add	r7, sp, #0
 3242              	.LCFI153:
 3243              		.cfi_def_cfa_register 7
 3244 0006 7860     		str	r0, [r7, #4]
1772:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1773:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1774:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1775:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1776:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
1777:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             user file
1778:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1779:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 3245              		.loc 1 1779 0
 3246 0008 0C37     		adds	r7, r7, #12
 3247              	.LCFI154:
 3248              		.cfi_def_cfa_offset 4
 3249 000a BD46     		mov	sp, r7
 3250              	.LCFI155:
 3251              		.cfi_def_cfa_register 13
 3252              		@ sp needed
 3253 000c 5DF8047B 		ldr	r7, [sp], #4
 3254              	.LCFI156:
 3255              		.cfi_restore 7
 3256              		.cfi_def_cfa_offset 0
 3257 0010 7047     		bx	lr
 3258              		.cfi_endproc
 3259              	.LFE149:
 3261 0012 00BF     		.section	.text.HAL_CAN_RxFifo0FullCallback,"ax",%progbits
 3262              		.align	2
 3263              		.weak	HAL_CAN_RxFifo0FullCallback
 3264              		.thumb
 3265              		.thumb_func
 3267              	HAL_CAN_RxFifo0FullCallback:
 3268              	.LFB150:
1780:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1781:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
ARM GAS  /tmp/ccqSH0iI.s 			page 99


1782:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Rx FIFO 0 full callback.
1783:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1784:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1785:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1786:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1787:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
1788:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 3269              		.loc 1 1788 0
 3270              		.cfi_startproc
 3271              		@ args = 0, pretend = 0, frame = 8
 3272              		@ frame_needed = 1, uses_anonymous_args = 0
 3273              		@ link register save eliminated.
 3274 0000 80B4     		push	{r7}
 3275              	.LCFI157:
 3276              		.cfi_def_cfa_offset 4
 3277              		.cfi_offset 7, -4
 3278 0002 83B0     		sub	sp, sp, #12
 3279              	.LCFI158:
 3280              		.cfi_def_cfa_offset 16
 3281 0004 00AF     		add	r7, sp, #0
 3282              	.LCFI159:
 3283              		.cfi_def_cfa_register 7
 3284 0006 7860     		str	r0, [r7, #4]
1789:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1790:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1791:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1792:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1793:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_RxFifo0FullCallback could be implemented in the user
1794:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             file
1795:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1796:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 3285              		.loc 1 1796 0
 3286 0008 0C37     		adds	r7, r7, #12
 3287              	.LCFI160:
 3288              		.cfi_def_cfa_offset 4
 3289 000a BD46     		mov	sp, r7
 3290              	.LCFI161:
 3291              		.cfi_def_cfa_register 13
 3292              		@ sp needed
 3293 000c 5DF8047B 		ldr	r7, [sp], #4
 3294              	.LCFI162:
 3295              		.cfi_restore 7
 3296              		.cfi_def_cfa_offset 0
 3297 0010 7047     		bx	lr
 3298              		.cfi_endproc
 3299              	.LFE150:
 3301 0012 00BF     		.section	.text.HAL_CAN_RxFifo1MsgPendingCallback,"ax",%progbits
 3302              		.align	2
 3303              		.weak	HAL_CAN_RxFifo1MsgPendingCallback
 3304              		.thumb
 3305              		.thumb_func
 3307              	HAL_CAN_RxFifo1MsgPendingCallback:
 3308              	.LFB151:
1797:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1798:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1799:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Rx FIFO 1 message pending callback.
1800:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
ARM GAS  /tmp/ccqSH0iI.s 			page 100


1801:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1802:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1803:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1804:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
1805:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 3309              		.loc 1 1805 0
 3310              		.cfi_startproc
 3311              		@ args = 0, pretend = 0, frame = 8
 3312              		@ frame_needed = 1, uses_anonymous_args = 0
 3313              		@ link register save eliminated.
 3314 0000 80B4     		push	{r7}
 3315              	.LCFI163:
 3316              		.cfi_def_cfa_offset 4
 3317              		.cfi_offset 7, -4
 3318 0002 83B0     		sub	sp, sp, #12
 3319              	.LCFI164:
 3320              		.cfi_def_cfa_offset 16
 3321 0004 00AF     		add	r7, sp, #0
 3322              	.LCFI165:
 3323              		.cfi_def_cfa_register 7
 3324 0006 7860     		str	r0, [r7, #4]
1806:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1807:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1808:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1809:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1810:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
1811:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             user file
1812:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1813:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 3325              		.loc 1 1813 0
 3326 0008 0C37     		adds	r7, r7, #12
 3327              	.LCFI166:
 3328              		.cfi_def_cfa_offset 4
 3329 000a BD46     		mov	sp, r7
 3330              	.LCFI167:
 3331              		.cfi_def_cfa_register 13
 3332              		@ sp needed
 3333 000c 5DF8047B 		ldr	r7, [sp], #4
 3334              	.LCFI168:
 3335              		.cfi_restore 7
 3336              		.cfi_def_cfa_offset 0
 3337 0010 7047     		bx	lr
 3338              		.cfi_endproc
 3339              	.LFE151:
 3341 0012 00BF     		.section	.text.HAL_CAN_RxFifo1FullCallback,"ax",%progbits
 3342              		.align	2
 3343              		.weak	HAL_CAN_RxFifo1FullCallback
 3344              		.thumb
 3345              		.thumb_func
 3347              	HAL_CAN_RxFifo1FullCallback:
 3348              	.LFB152:
1814:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1815:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1816:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Rx FIFO 1 full callback.
1817:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1818:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1819:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
ARM GAS  /tmp/ccqSH0iI.s 			page 101


1820:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1821:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
1822:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 3349              		.loc 1 1822 0
 3350              		.cfi_startproc
 3351              		@ args = 0, pretend = 0, frame = 8
 3352              		@ frame_needed = 1, uses_anonymous_args = 0
 3353              		@ link register save eliminated.
 3354 0000 80B4     		push	{r7}
 3355              	.LCFI169:
 3356              		.cfi_def_cfa_offset 4
 3357              		.cfi_offset 7, -4
 3358 0002 83B0     		sub	sp, sp, #12
 3359              	.LCFI170:
 3360              		.cfi_def_cfa_offset 16
 3361 0004 00AF     		add	r7, sp, #0
 3362              	.LCFI171:
 3363              		.cfi_def_cfa_register 7
 3364 0006 7860     		str	r0, [r7, #4]
1823:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1824:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1825:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1826:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1827:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_RxFifo1FullCallback could be implemented in the user
1828:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             file
1829:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1830:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 3365              		.loc 1 1830 0
 3366 0008 0C37     		adds	r7, r7, #12
 3367              	.LCFI172:
 3368              		.cfi_def_cfa_offset 4
 3369 000a BD46     		mov	sp, r7
 3370              	.LCFI173:
 3371              		.cfi_def_cfa_register 13
 3372              		@ sp needed
 3373 000c 5DF8047B 		ldr	r7, [sp], #4
 3374              	.LCFI174:
 3375              		.cfi_restore 7
 3376              		.cfi_def_cfa_offset 0
 3377 0010 7047     		bx	lr
 3378              		.cfi_endproc
 3379              	.LFE152:
 3381 0012 00BF     		.section	.text.HAL_CAN_SleepCallback,"ax",%progbits
 3382              		.align	2
 3383              		.weak	HAL_CAN_SleepCallback
 3384              		.thumb
 3385              		.thumb_func
 3387              	HAL_CAN_SleepCallback:
 3388              	.LFB153:
1831:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1832:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1833:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Sleep callback.
1834:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1835:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1836:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1837:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1838:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
ARM GAS  /tmp/ccqSH0iI.s 			page 102


1839:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 3389              		.loc 1 1839 0
 3390              		.cfi_startproc
 3391              		@ args = 0, pretend = 0, frame = 8
 3392              		@ frame_needed = 1, uses_anonymous_args = 0
 3393              		@ link register save eliminated.
 3394 0000 80B4     		push	{r7}
 3395              	.LCFI175:
 3396              		.cfi_def_cfa_offset 4
 3397              		.cfi_offset 7, -4
 3398 0002 83B0     		sub	sp, sp, #12
 3399              	.LCFI176:
 3400              		.cfi_def_cfa_offset 16
 3401 0004 00AF     		add	r7, sp, #0
 3402              	.LCFI177:
 3403              		.cfi_def_cfa_register 7
 3404 0006 7860     		str	r0, [r7, #4]
1840:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1841:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1842:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1843:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1844:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_SleepCallback could be implemented in the user file
1845:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1846:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 3405              		.loc 1 1846 0
 3406 0008 0C37     		adds	r7, r7, #12
 3407              	.LCFI178:
 3408              		.cfi_def_cfa_offset 4
 3409 000a BD46     		mov	sp, r7
 3410              	.LCFI179:
 3411              		.cfi_def_cfa_register 13
 3412              		@ sp needed
 3413 000c 5DF8047B 		ldr	r7, [sp], #4
 3414              	.LCFI180:
 3415              		.cfi_restore 7
 3416              		.cfi_def_cfa_offset 0
 3417 0010 7047     		bx	lr
 3418              		.cfi_endproc
 3419              	.LFE153:
 3421 0012 00BF     		.section	.text.HAL_CAN_WakeUpFromRxMsgCallback,"ax",%progbits
 3422              		.align	2
 3423              		.weak	HAL_CAN_WakeUpFromRxMsgCallback
 3424              		.thumb
 3425              		.thumb_func
 3427              	HAL_CAN_WakeUpFromRxMsgCallback:
 3428              	.LFB154:
1847:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1848:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1849:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  WakeUp from Rx message callback.
1850:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1851:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1852:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1853:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1854:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
1855:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 3429              		.loc 1 1855 0
 3430              		.cfi_startproc
ARM GAS  /tmp/ccqSH0iI.s 			page 103


 3431              		@ args = 0, pretend = 0, frame = 8
 3432              		@ frame_needed = 1, uses_anonymous_args = 0
 3433              		@ link register save eliminated.
 3434 0000 80B4     		push	{r7}
 3435              	.LCFI181:
 3436              		.cfi_def_cfa_offset 4
 3437              		.cfi_offset 7, -4
 3438 0002 83B0     		sub	sp, sp, #12
 3439              	.LCFI182:
 3440              		.cfi_def_cfa_offset 16
 3441 0004 00AF     		add	r7, sp, #0
 3442              	.LCFI183:
 3443              		.cfi_def_cfa_register 7
 3444 0006 7860     		str	r0, [r7, #4]
1856:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1857:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1858:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1859:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1860:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
1861:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             user file
1862:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1863:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 3445              		.loc 1 1863 0
 3446 0008 0C37     		adds	r7, r7, #12
 3447              	.LCFI184:
 3448              		.cfi_def_cfa_offset 4
 3449 000a BD46     		mov	sp, r7
 3450              	.LCFI185:
 3451              		.cfi_def_cfa_register 13
 3452              		@ sp needed
 3453 000c 5DF8047B 		ldr	r7, [sp], #4
 3454              	.LCFI186:
 3455              		.cfi_restore 7
 3456              		.cfi_def_cfa_offset 0
 3457 0010 7047     		bx	lr
 3458              		.cfi_endproc
 3459              	.LFE154:
 3461 0012 00BF     		.section	.text.HAL_CAN_ErrorCallback,"ax",%progbits
 3462              		.align	2
 3463              		.weak	HAL_CAN_ErrorCallback
 3464              		.thumb
 3465              		.thumb_func
 3467              	HAL_CAN_ErrorCallback:
 3468              	.LFB155:
1864:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1865:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1866:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Error CAN callback.
1867:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1868:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1869:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1870:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1871:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
1872:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 3469              		.loc 1 1872 0
 3470              		.cfi_startproc
 3471              		@ args = 0, pretend = 0, frame = 8
 3472              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccqSH0iI.s 			page 104


 3473              		@ link register save eliminated.
 3474 0000 80B4     		push	{r7}
 3475              	.LCFI187:
 3476              		.cfi_def_cfa_offset 4
 3477              		.cfi_offset 7, -4
 3478 0002 83B0     		sub	sp, sp, #12
 3479              	.LCFI188:
 3480              		.cfi_def_cfa_offset 16
 3481 0004 00AF     		add	r7, sp, #0
 3482              	.LCFI189:
 3483              		.cfi_def_cfa_register 7
 3484 0006 7860     		str	r0, [r7, #4]
1873:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1874:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1875:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1876:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1877:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_ErrorCallback could be implemented in the user file
1878:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1879:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 3485              		.loc 1 1879 0
 3486 0008 0C37     		adds	r7, r7, #12
 3487              	.LCFI190:
 3488              		.cfi_def_cfa_offset 4
 3489 000a BD46     		mov	sp, r7
 3490              	.LCFI191:
 3491              		.cfi_def_cfa_register 13
 3492              		@ sp needed
 3493 000c 5DF8047B 		ldr	r7, [sp], #4
 3494              	.LCFI192:
 3495              		.cfi_restore 7
 3496              		.cfi_def_cfa_offset 0
 3497 0010 7047     		bx	lr
 3498              		.cfi_endproc
 3499              	.LFE155:
 3501 0012 00BF     		.section	.text.HAL_CAN_GetState,"ax",%progbits
 3502              		.align	2
 3503              		.global	HAL_CAN_GetState
 3504              		.thumb
 3505              		.thumb_func
 3507              	HAL_CAN_GetState:
 3508              	.LFB156:
1880:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1881:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1882:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @}
1883:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1884:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1885:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group6 Peripheral State and Error functions
1886:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *  @brief   CAN Peripheral State functions
1887:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *
1888:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @verbatim
1889:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
1890:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             ##### Peripheral State and Error functions #####
1891:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
1892:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]
1893:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     This subsection provides functions allowing to :
1894:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_GetState()  : Return the CAN state.
1895:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_GetError()  : Return the CAN error codes if any.
ARM GAS  /tmp/ccqSH0iI.s 			page 105


1896:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_ResetError(): Reset the CAN error codes if any.
1897:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1898:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @endverbatim
1899:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
1900:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1901:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1902:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1903:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Return the CAN state.
1904:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1905:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1906:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL state
1907:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1908:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_CAN_StateTypeDef HAL_CAN_GetState(CAN_HandleTypeDef *hcan)
1909:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 3509              		.loc 1 1909 0
 3510              		.cfi_startproc
 3511              		@ args = 0, pretend = 0, frame = 16
 3512              		@ frame_needed = 1, uses_anonymous_args = 0
 3513              		@ link register save eliminated.
 3514 0000 80B4     		push	{r7}
 3515              	.LCFI193:
 3516              		.cfi_def_cfa_offset 4
 3517              		.cfi_offset 7, -4
 3518 0002 85B0     		sub	sp, sp, #20
 3519              	.LCFI194:
 3520              		.cfi_def_cfa_offset 24
 3521 0004 00AF     		add	r7, sp, #0
 3522              	.LCFI195:
 3523              		.cfi_def_cfa_register 7
 3524 0006 7860     		str	r0, [r7, #4]
1910:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 3525              		.loc 1 1910 0
 3526 0008 7B68     		ldr	r3, [r7, #4]
 3527 000a 93F82030 		ldrb	r3, [r3, #32]
 3528 000e FB73     		strb	r3, [r7, #15]
1911:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1912:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 3529              		.loc 1 1912 0
 3530 0010 7B68     		ldr	r3, [r7, #4]
 3531 0012 93F82030 		ldrb	r3, [r3, #32]
 3532 0016 DBB2     		uxtb	r3, r3
 3533 0018 012B     		cmp	r3, #1
 3534 001a 05D0     		beq	.L169
1913:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 3535              		.loc 1 1913 0 discriminator 1
 3536 001c 7B68     		ldr	r3, [r7, #4]
 3537 001e 93F82030 		ldrb	r3, [r3, #32]
 3538 0022 DBB2     		uxtb	r3, r3
1912:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 3539              		.loc 1 1912 0 discriminator 1
 3540 0024 022B     		cmp	r3, #2
 3541 0026 12D1     		bne	.L170
 3542              	.L169:
1914:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1915:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check sleep mode acknowledge flag */
1916:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET)
 3543              		.loc 1 1916 0
ARM GAS  /tmp/ccqSH0iI.s 			page 106


 3544 0028 7B68     		ldr	r3, [r7, #4]
 3545 002a 1B68     		ldr	r3, [r3]
 3546 002c 5B68     		ldr	r3, [r3, #4]
 3547 002e 03F00203 		and	r3, r3, #2
 3548 0032 002B     		cmp	r3, #0
 3549 0034 02D0     		beq	.L171
1917:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1918:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Sleep mode is active */
1919:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       state = HAL_CAN_STATE_SLEEP_ACTIVE;
 3550              		.loc 1 1919 0
 3551 0036 0423     		movs	r3, #4
 3552 0038 FB73     		strb	r3, [r7, #15]
 3553 003a 08E0     		b	.L170
 3554              	.L171:
1920:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1921:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check sleep mode request flag */
1922:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     else if ((hcan->Instance->MCR & CAN_MCR_SLEEP) != RESET)
 3555              		.loc 1 1922 0
 3556 003c 7B68     		ldr	r3, [r7, #4]
 3557 003e 1B68     		ldr	r3, [r3]
 3558 0040 1B68     		ldr	r3, [r3]
 3559 0042 03F00203 		and	r3, r3, #2
 3560 0046 002B     		cmp	r3, #0
 3561 0048 01D0     		beq	.L170
1923:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1924:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Sleep mode request is pending */
1925:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       state = HAL_CAN_STATE_SLEEP_PENDING;
 3562              		.loc 1 1925 0
 3563 004a 0323     		movs	r3, #3
 3564 004c FB73     		strb	r3, [r7, #15]
 3565              	.L170:
1926:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1927:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1928:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1929:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return CAN state */
1930:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return state;
 3566              		.loc 1 1930 0
 3567 004e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1931:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 3568              		.loc 1 1931 0
 3569 0050 1846     		mov	r0, r3
 3570 0052 1437     		adds	r7, r7, #20
 3571              	.LCFI196:
 3572              		.cfi_def_cfa_offset 4
 3573 0054 BD46     		mov	sp, r7
 3574              	.LCFI197:
 3575              		.cfi_def_cfa_register 13
 3576              		@ sp needed
 3577 0056 5DF8047B 		ldr	r7, [sp], #4
 3578              	.LCFI198:
 3579              		.cfi_restore 7
 3580              		.cfi_def_cfa_offset 0
 3581 005a 7047     		bx	lr
 3582              		.cfi_endproc
 3583              	.LFE156:
 3585              		.section	.text.HAL_CAN_GetError,"ax",%progbits
 3586              		.align	2
ARM GAS  /tmp/ccqSH0iI.s 			page 107


 3587              		.global	HAL_CAN_GetError
 3588              		.thumb
 3589              		.thumb_func
 3591              	HAL_CAN_GetError:
 3592              	.LFB157:
1932:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1933:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1934:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Return the CAN error code.
1935:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1936:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1937:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval CAN Error Code
1938:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1939:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** uint32_t HAL_CAN_GetError(CAN_HandleTypeDef *hcan)
1940:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 3593              		.loc 1 1940 0
 3594              		.cfi_startproc
 3595              		@ args = 0, pretend = 0, frame = 8
 3596              		@ frame_needed = 1, uses_anonymous_args = 0
 3597              		@ link register save eliminated.
 3598 0000 80B4     		push	{r7}
 3599              	.LCFI199:
 3600              		.cfi_def_cfa_offset 4
 3601              		.cfi_offset 7, -4
 3602 0002 83B0     		sub	sp, sp, #12
 3603              	.LCFI200:
 3604              		.cfi_def_cfa_offset 16
 3605 0004 00AF     		add	r7, sp, #0
 3606              	.LCFI201:
 3607              		.cfi_def_cfa_register 7
 3608 0006 7860     		str	r0, [r7, #4]
1941:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return CAN error code */
1942:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return hcan->ErrorCode;
 3609              		.loc 1 1942 0
 3610 0008 7B68     		ldr	r3, [r7, #4]
 3611 000a 5B6A     		ldr	r3, [r3, #36]
1943:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 3612              		.loc 1 1943 0
 3613 000c 1846     		mov	r0, r3
 3614 000e 0C37     		adds	r7, r7, #12
 3615              	.LCFI202:
 3616              		.cfi_def_cfa_offset 4
 3617 0010 BD46     		mov	sp, r7
 3618              	.LCFI203:
 3619              		.cfi_def_cfa_register 13
 3620              		@ sp needed
 3621 0012 5DF8047B 		ldr	r7, [sp], #4
 3622              	.LCFI204:
 3623              		.cfi_restore 7
 3624              		.cfi_def_cfa_offset 0
 3625 0016 7047     		bx	lr
 3626              		.cfi_endproc
 3627              	.LFE157:
 3629              		.section	.text.HAL_CAN_ResetError,"ax",%progbits
 3630              		.align	2
 3631              		.global	HAL_CAN_ResetError
 3632              		.thumb
 3633              		.thumb_func
ARM GAS  /tmp/ccqSH0iI.s 			page 108


 3635              	HAL_CAN_ResetError:
 3636              	.LFB158:
1944:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1945:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1946:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Reset the CAN error code.
1947:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1948:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1949:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
1950:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1951:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
1952:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 3637              		.loc 1 1952 0
 3638              		.cfi_startproc
 3639              		@ args = 0, pretend = 0, frame = 16
 3640              		@ frame_needed = 1, uses_anonymous_args = 0
 3641              		@ link register save eliminated.
 3642 0000 80B4     		push	{r7}
 3643              	.LCFI205:
 3644              		.cfi_def_cfa_offset 4
 3645              		.cfi_offset 7, -4
 3646 0002 85B0     		sub	sp, sp, #20
 3647              	.LCFI206:
 3648              		.cfi_def_cfa_offset 24
 3649 0004 00AF     		add	r7, sp, #0
 3650              	.LCFI207:
 3651              		.cfi_def_cfa_register 7
 3652 0006 7860     		str	r0, [r7, #4]
1953:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   HAL_StatusTypeDef status = HAL_OK;
 3653              		.loc 1 1953 0
 3654 0008 0023     		movs	r3, #0
 3655 000a FB73     		strb	r3, [r7, #15]
1954:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1955:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 3656              		.loc 1 1955 0
 3657 000c 7B68     		ldr	r3, [r7, #4]
 3658 000e 93F82030 		ldrb	r3, [r3, #32]
 3659 0012 DBB2     		uxtb	r3, r3
 3660 0014 012B     		cmp	r3, #1
 3661 0016 05D0     		beq	.L176
1956:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 3662              		.loc 1 1956 0 discriminator 1
 3663 0018 7B68     		ldr	r3, [r7, #4]
 3664 001a 93F82030 		ldrb	r3, [r3, #32]
 3665 001e DBB2     		uxtb	r3, r3
1955:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 3666              		.loc 1 1955 0 discriminator 1
 3667 0020 022B     		cmp	r3, #2
 3668 0022 03D1     		bne	.L177
 3669              	.L176:
1957:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1958:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Reset CAN error code */
1959:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode = 0U;
 3670              		.loc 1 1959 0
 3671 0024 7B68     		ldr	r3, [r7, #4]
 3672 0026 0022     		movs	r2, #0
 3673 0028 5A62     		str	r2, [r3, #36]
 3674 002a 07E0     		b	.L178
ARM GAS  /tmp/ccqSH0iI.s 			page 109


 3675              	.L177:
1960:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1961:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
1962:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1963:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
1964:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 3676              		.loc 1 1964 0
 3677 002c 7B68     		ldr	r3, [r7, #4]
 3678 002e 5B6A     		ldr	r3, [r3, #36]
 3679 0030 43F48022 		orr	r2, r3, #262144
 3680 0034 7B68     		ldr	r3, [r7, #4]
 3681 0036 5A62     		str	r2, [r3, #36]
1965:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1966:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     status = HAL_ERROR;
 3682              		.loc 1 1966 0
 3683 0038 0123     		movs	r3, #1
 3684 003a FB73     		strb	r3, [r7, #15]
 3685              	.L178:
1967:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1968:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1969:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return the status */
1970:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return status;
 3686              		.loc 1 1970 0
 3687 003c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1971:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 3688              		.loc 1 1971 0
 3689 003e 1846     		mov	r0, r3
 3690 0040 1437     		adds	r7, r7, #20
 3691              	.LCFI208:
 3692              		.cfi_def_cfa_offset 4
 3693 0042 BD46     		mov	sp, r7
 3694              	.LCFI209:
 3695              		.cfi_def_cfa_register 13
 3696              		@ sp needed
 3697 0044 5DF8047B 		ldr	r7, [sp], #4
 3698              	.LCFI210:
 3699              		.cfi_restore 7
 3700              		.cfi_def_cfa_offset 0
 3701 0048 7047     		bx	lr
 3702              		.cfi_endproc
 3703              	.LFE158:
 3705 004a 00BF     		.text
 3706              	.Letext0:
 3707              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 3708              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 3709              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f405xx.h"
 3710              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 3711              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 3712              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 3713              		.file 9 "Drivers/CMSIS/Include/core_cm4.h"
ARM GAS  /tmp/ccqSH0iI.s 			page 110


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_hal_can.c
     /tmp/ccqSH0iI.s:21     .text.HAL_CAN_Init:0000000000000000 $t
     /tmp/ccqSH0iI.s:26     .text.HAL_CAN_Init:0000000000000000 HAL_CAN_Init
     /tmp/ccqSH0iI.s:413    .text.HAL_CAN_MspInit:0000000000000000 HAL_CAN_MspInit
     /tmp/ccqSH0iI.s:338    .text.HAL_CAN_DeInit:0000000000000000 $t
     /tmp/ccqSH0iI.s:343    .text.HAL_CAN_DeInit:0000000000000000 HAL_CAN_DeInit
     /tmp/ccqSH0iI.s:885    .text.HAL_CAN_Stop:0000000000000000 HAL_CAN_Stop
     /tmp/ccqSH0iI.s:453    .text.HAL_CAN_MspDeInit:0000000000000000 HAL_CAN_MspDeInit
     /tmp/ccqSH0iI.s:408    .text.HAL_CAN_MspInit:0000000000000000 $t
     /tmp/ccqSH0iI.s:448    .text.HAL_CAN_MspDeInit:0000000000000000 $t
     /tmp/ccqSH0iI.s:488    .text.HAL_CAN_ConfigFilter:0000000000000000 $t
     /tmp/ccqSH0iI.s:493    .text.HAL_CAN_ConfigFilter:0000000000000000 HAL_CAN_ConfigFilter
     /tmp/ccqSH0iI.s:766    .text.HAL_CAN_ConfigFilter:00000000000001c0 $d
     /tmp/ccqSH0iI.s:771    .text.HAL_CAN_Start:0000000000000000 $t
     /tmp/ccqSH0iI.s:776    .text.HAL_CAN_Start:0000000000000000 HAL_CAN_Start
     /tmp/ccqSH0iI.s:880    .text.HAL_CAN_Stop:0000000000000000 $t
     /tmp/ccqSH0iI.s:993    .text.HAL_CAN_RequestSleep:0000000000000000 $t
     /tmp/ccqSH0iI.s:998    .text.HAL_CAN_RequestSleep:0000000000000000 HAL_CAN_RequestSleep
     /tmp/ccqSH0iI.s:1069   .text.HAL_CAN_WakeUp:0000000000000000 $t
     /tmp/ccqSH0iI.s:1074   .text.HAL_CAN_WakeUp:0000000000000000 HAL_CAN_WakeUp
     /tmp/ccqSH0iI.s:1175   .text.HAL_CAN_WakeUp:0000000000000080 $d
     /tmp/ccqSH0iI.s:1180   .text.HAL_CAN_IsSleepActive:0000000000000000 $t
     /tmp/ccqSH0iI.s:1185   .text.HAL_CAN_IsSleepActive:0000000000000000 HAL_CAN_IsSleepActive
     /tmp/ccqSH0iI.s:1251   .text.HAL_CAN_AddTxMessage:0000000000000000 $t
     /tmp/ccqSH0iI.s:1256   .text.HAL_CAN_AddTxMessage:0000000000000000 HAL_CAN_AddTxMessage
     /tmp/ccqSH0iI.s:1514   .text.HAL_CAN_AbortTxRequest:0000000000000000 $t
     /tmp/ccqSH0iI.s:1519   .text.HAL_CAN_AbortTxRequest:0000000000000000 HAL_CAN_AbortTxRequest
     /tmp/ccqSH0iI.s:1625   .text.HAL_CAN_GetTxMailboxesFreeLevel:0000000000000000 $t
     /tmp/ccqSH0iI.s:1630   .text.HAL_CAN_GetTxMailboxesFreeLevel:0000000000000000 HAL_CAN_GetTxMailboxesFreeLevel
     /tmp/ccqSH0iI.s:1721   .text.HAL_CAN_IsTxMessagePending:0000000000000000 $t
     /tmp/ccqSH0iI.s:1726   .text.HAL_CAN_IsTxMessagePending:0000000000000000 HAL_CAN_IsTxMessagePending
     /tmp/ccqSH0iI.s:1797   .text.HAL_CAN_GetTxTimestamp:0000000000000000 $t
     /tmp/ccqSH0iI.s:1802   .text.HAL_CAN_GetTxTimestamp:0000000000000000 HAL_CAN_GetTxTimestamp
     /tmp/ccqSH0iI.s:1888   .text.HAL_CAN_GetRxMessage:0000000000000000 $t
     /tmp/ccqSH0iI.s:1893   .text.HAL_CAN_GetRxMessage:0000000000000000 HAL_CAN_GetRxMessage
     /tmp/ccqSH0iI.s:2220   .text.HAL_CAN_GetRxFifoFillLevel:0000000000000000 $t
     /tmp/ccqSH0iI.s:2225   .text.HAL_CAN_GetRxFifoFillLevel:0000000000000000 HAL_CAN_GetRxFifoFillLevel
     /tmp/ccqSH0iI.s:2300   .text.HAL_CAN_ActivateNotification:0000000000000000 $t
     /tmp/ccqSH0iI.s:2305   .text.HAL_CAN_ActivateNotification:0000000000000000 HAL_CAN_ActivateNotification
     /tmp/ccqSH0iI.s:2378   .text.HAL_CAN_DeactivateNotification:0000000000000000 $t
     /tmp/ccqSH0iI.s:2383   .text.HAL_CAN_DeactivateNotification:0000000000000000 HAL_CAN_DeactivateNotification
     /tmp/ccqSH0iI.s:2457   .text.HAL_CAN_IRQHandler:0000000000000000 $t
     /tmp/ccqSH0iI.s:2462   .text.HAL_CAN_IRQHandler:0000000000000000 HAL_CAN_IRQHandler
     /tmp/ccqSH0iI.s:2987   .text.HAL_CAN_TxMailbox0CompleteCallback:0000000000000000 HAL_CAN_TxMailbox0CompleteCallback
     /tmp/ccqSH0iI.s:3107   .text.HAL_CAN_TxMailbox0AbortCallback:0000000000000000 HAL_CAN_TxMailbox0AbortCallback
     /tmp/ccqSH0iI.s:3027   .text.HAL_CAN_TxMailbox1CompleteCallback:0000000000000000 HAL_CAN_TxMailbox1CompleteCallback
     /tmp/ccqSH0iI.s:3147   .text.HAL_CAN_TxMailbox1AbortCallback:0000000000000000 HAL_CAN_TxMailbox1AbortCallback
     /tmp/ccqSH0iI.s:3067   .text.HAL_CAN_TxMailbox2CompleteCallback:0000000000000000 HAL_CAN_TxMailbox2CompleteCallback
     /tmp/ccqSH0iI.s:3187   .text.HAL_CAN_TxMailbox2AbortCallback:0000000000000000 HAL_CAN_TxMailbox2AbortCallback
     /tmp/ccqSH0iI.s:3267   .text.HAL_CAN_RxFifo0FullCallback:0000000000000000 HAL_CAN_RxFifo0FullCallback
     /tmp/ccqSH0iI.s:3227   .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo0MsgPendingCallback
     /tmp/ccqSH0iI.s:3347   .text.HAL_CAN_RxFifo1FullCallback:0000000000000000 HAL_CAN_RxFifo1FullCallback
     /tmp/ccqSH0iI.s:3307   .text.HAL_CAN_RxFifo1MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo1MsgPendingCallback
     /tmp/ccqSH0iI.s:3387   .text.HAL_CAN_SleepCallback:0000000000000000 HAL_CAN_SleepCallback
     /tmp/ccqSH0iI.s:3427   .text.HAL_CAN_WakeUpFromRxMsgCallback:0000000000000000 HAL_CAN_WakeUpFromRxMsgCallback
     /tmp/ccqSH0iI.s:3467   .text.HAL_CAN_ErrorCallback:0000000000000000 HAL_CAN_ErrorCallback
ARM GAS  /tmp/ccqSH0iI.s 			page 111


     /tmp/ccqSH0iI.s:2982   .text.HAL_CAN_TxMailbox0CompleteCallback:0000000000000000 $t
     /tmp/ccqSH0iI.s:3022   .text.HAL_CAN_TxMailbox1CompleteCallback:0000000000000000 $t
     /tmp/ccqSH0iI.s:3062   .text.HAL_CAN_TxMailbox2CompleteCallback:0000000000000000 $t
     /tmp/ccqSH0iI.s:3102   .text.HAL_CAN_TxMailbox0AbortCallback:0000000000000000 $t
     /tmp/ccqSH0iI.s:3142   .text.HAL_CAN_TxMailbox1AbortCallback:0000000000000000 $t
     /tmp/ccqSH0iI.s:3182   .text.HAL_CAN_TxMailbox2AbortCallback:0000000000000000 $t
     /tmp/ccqSH0iI.s:3222   .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 $t
     /tmp/ccqSH0iI.s:3262   .text.HAL_CAN_RxFifo0FullCallback:0000000000000000 $t
     /tmp/ccqSH0iI.s:3302   .text.HAL_CAN_RxFifo1MsgPendingCallback:0000000000000000 $t
     /tmp/ccqSH0iI.s:3342   .text.HAL_CAN_RxFifo1FullCallback:0000000000000000 $t
     /tmp/ccqSH0iI.s:3382   .text.HAL_CAN_SleepCallback:0000000000000000 $t
     /tmp/ccqSH0iI.s:3422   .text.HAL_CAN_WakeUpFromRxMsgCallback:0000000000000000 $t
     /tmp/ccqSH0iI.s:3462   .text.HAL_CAN_ErrorCallback:0000000000000000 $t
     /tmp/ccqSH0iI.s:3502   .text.HAL_CAN_GetState:0000000000000000 $t
     /tmp/ccqSH0iI.s:3507   .text.HAL_CAN_GetState:0000000000000000 HAL_CAN_GetState
     /tmp/ccqSH0iI.s:3586   .text.HAL_CAN_GetError:0000000000000000 $t
     /tmp/ccqSH0iI.s:3591   .text.HAL_CAN_GetError:0000000000000000 HAL_CAN_GetError
     /tmp/ccqSH0iI.s:3630   .text.HAL_CAN_ResetError:0000000000000000 $t
     /tmp/ccqSH0iI.s:3635   .text.HAL_CAN_ResetError:0000000000000000 HAL_CAN_ResetError
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
