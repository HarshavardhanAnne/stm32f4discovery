ARM GAS  /tmp/ccJ0Dfhq.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"tasks.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.global	pxCurrentTCB
  21              		.section	.bss.pxCurrentTCB,"aw",%nobits
  22              		.align	2
  25              	pxCurrentTCB:
  26 0000 00000000 		.space	4
  27              		.section	.bss.pxReadyTasksLists,"aw",%nobits
  28              		.align	2
  31              	pxReadyTasksLists:
  32 0000 00000000 		.space	140
  32      00000000 
  32      00000000 
  32      00000000 
  32      00000000 
  33              		.section	.bss.xDelayedTaskList1,"aw",%nobits
  34              		.align	2
  37              	xDelayedTaskList1:
  38 0000 00000000 		.space	20
  38      00000000 
  38      00000000 
  38      00000000 
  38      00000000 
  39              		.section	.bss.xDelayedTaskList2,"aw",%nobits
  40              		.align	2
  43              	xDelayedTaskList2:
  44 0000 00000000 		.space	20
  44      00000000 
  44      00000000 
  44      00000000 
  44      00000000 
  45              		.section	.bss.pxDelayedTaskList,"aw",%nobits
  46              		.align	2
  49              	pxDelayedTaskList:
  50 0000 00000000 		.space	4
  51              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
  52              		.align	2
  55              	pxOverflowDelayedTaskList:
  56 0000 00000000 		.space	4
  57              		.section	.bss.xPendingReadyList,"aw",%nobits
ARM GAS  /tmp/ccJ0Dfhq.s 			page 2


  58              		.align	2
  61              	xPendingReadyList:
  62 0000 00000000 		.space	20
  62      00000000 
  62      00000000 
  62      00000000 
  62      00000000 
  63              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
  64              		.align	2
  67              	xTasksWaitingTermination:
  68 0000 00000000 		.space	20
  68      00000000 
  68      00000000 
  68      00000000 
  68      00000000 
  69              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
  70              		.align	2
  73              	uxDeletedTasksWaitingCleanUp:
  74 0000 00000000 		.space	4
  75              		.section	.bss.xSuspendedTaskList,"aw",%nobits
  76              		.align	2
  79              	xSuspendedTaskList:
  80 0000 00000000 		.space	20
  80      00000000 
  80      00000000 
  80      00000000 
  80      00000000 
  81              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
  82              		.align	2
  85              	uxCurrentNumberOfTasks:
  86 0000 00000000 		.space	4
  87              		.section	.bss.xTickCount,"aw",%nobits
  88              		.align	2
  91              	xTickCount:
  92 0000 00000000 		.space	4
  93              		.section	.bss.uxTopReadyPriority,"aw",%nobits
  94              		.align	2
  97              	uxTopReadyPriority:
  98 0000 00000000 		.space	4
  99              		.section	.bss.xSchedulerRunning,"aw",%nobits
 100              		.align	2
 103              	xSchedulerRunning:
 104 0000 00000000 		.space	4
 105              		.section	.bss.uxPendedTicks,"aw",%nobits
 106              		.align	2
 109              	uxPendedTicks:
 110 0000 00000000 		.space	4
 111              		.section	.bss.xYieldPending,"aw",%nobits
 112              		.align	2
 115              	xYieldPending:
 116 0000 00000000 		.space	4
 117              		.section	.bss.xNumOfOverflows,"aw",%nobits
 118              		.align	2
 121              	xNumOfOverflows:
 122 0000 00000000 		.space	4
 123              		.section	.bss.uxTaskNumber,"aw",%nobits
 124              		.align	2
ARM GAS  /tmp/ccJ0Dfhq.s 			page 3


 127              	uxTaskNumber:
 128 0000 00000000 		.space	4
 129              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 130              		.align	2
 133              	xNextTaskUnblockTime:
 134 0000 00000000 		.space	4
 135              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 136              		.align	2
 139              	xIdleTaskHandle:
 140 0000 00000000 		.space	4
 141              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 142              		.align	2
 145              	uxSchedulerSuspended:
 146 0000 00000000 		.space	4
 147              		.section	.text.xTaskCreate,"ax",%progbits
 148              		.align	2
 149              		.global	xTaskCreate
 150              		.thumb
 151              		.thumb_func
 153              	xTaskCreate:
 154              	.LFB5:
 155              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *                                                                       *
  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    tutorial book, reference manual, or both:                          *
  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    http://www.FreeRTOS.org/Documentation                              *
ARM GAS  /tmp/ccJ0Dfhq.s 			page 4


  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *                                                                       *
  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     mission critical applications that require provable dependability.
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "StackMacros.h"
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** header files above, but not in this file, in order to generate the correct
  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** privileged Vs unprivileged linkage and placement. */
  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
ARM GAS  /tmp/ccJ0Dfhq.s 			page 5


  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** settings allow a task to be created using either statically or dynamically
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** made to free the RAM that was allocated statically.
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** a statically allocated stack and a dynamically allocated TCB. */
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE ( ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && (
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
ARM GAS  /tmp/ccJ0Dfhq.s 			page 6


 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
ARM GAS  /tmp/ccJ0Dfhq.s 			page 7


 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
ARM GAS  /tmp/ccJ0Dfhq.s 			page 8


 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the end of the stack on architectures where the stack 
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
ARM GAS  /tmp/ccJ0Dfhq.s 			page 9


 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void *pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments above the definition of
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static variables must be declared volatile. */
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
ARM GAS  /tmp/ccJ0Dfhq.s 			page 10


 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_INITIALIZED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) 0U;
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle 
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFA
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_INITIALIZED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a t
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_INITIALIZED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of e
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint +e956 */
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void );
ARM GAS  /tmp/ccJ0Dfhq.s 			page 11


 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask );
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_FUNCTION static void prvInitialiseTaskLists( void );
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static void prvDeleteTCB( TCB_t *pxTCB );
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_FUNCTION static void prvCheckTasksWaitingTermination( void );
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
ARM GAS  /tmp/ccJ0Dfhq.s 			page 12


 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_FUNCTION static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const Base
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArr
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcN
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte );
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static TickType_t prvGetExpectedIdleTime( void );
 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
ARM GAS  /tmp/ccJ0Dfhq.s 			page 13


 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName );
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_FUNCTION static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ); /*lint !e971 Unqualified char types are allowed f
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_FUNCTION static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB );
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer ) /*lint !e971 Unqualified char types are allowed for st
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
ARM GAS  /tmp/ccJ0Dfhq.s 			page 14


 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( portUSING_MPU_WRAPPERS == 1 )
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				this task had a statically allocated stack in case it is
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				later deleted.  The TCB was allocated dynamically. */
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccJ0Dfhq.s 			page 15


 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const uint16_t usStackDepth,
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for str
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 156              		.loc 1 682 0
 157              		.cfi_startproc
 158              		@ args = 8, pretend = 0, frame = 32
 159              		@ frame_needed = 1, uses_anonymous_args = 0
 160 0000 80B5     		push	{r7, lr}
 161              	.LCFI0:
 162              		.cfi_def_cfa_offset 8
 163              		.cfi_offset 7, -8
 164              		.cfi_offset 14, -4
 165 0002 8CB0     		sub	sp, sp, #48
 166              	.LCFI1:
 167              		.cfi_def_cfa_offset 56
 168 0004 04AF     		add	r7, sp, #16
 169              	.LCFI2:
 170              		.cfi_def_cfa 7, 40
 171 0006 F860     		str	r0, [r7, #12]
 172 0008 B960     		str	r1, [r7, #8]
 173 000a 3B60     		str	r3, [r7]
 174 000c 1346     		mov	r3, r2	@ movhi
 175 000e FB80     		strh	r3, [r7, #6]	@ movhi
 176              	.LBB97:
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
ARM GAS  /tmp/ccJ0Dfhq.s 			page 16


 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
 177              		.loc 1 716 0
 178 0010 FB88     		ldrh	r3, [r7, #6]
 179 0012 9B00     		lsls	r3, r3, #2
 180 0014 1846     		mov	r0, r3
 181 0016 FFF7FEFF 		bl	pvPortMalloc
 182 001a 7861     		str	r0, [r7, #20]
 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 183              		.loc 1 718 0
 184 001c 7B69     		ldr	r3, [r7, #20]
 185 001e 002B     		cmp	r3, #0
 186 0020 0ED0     		beq	.L2
 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
 187              		.loc 1 721 0
 188 0022 5420     		movs	r0, #84
 189 0024 FFF7FEFF 		bl	pvPortMalloc
 190 0028 F861     		str	r0, [r7, #28]
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 191              		.loc 1 723 0
 192 002a FB69     		ldr	r3, [r7, #28]
 193 002c 002B     		cmp	r3, #0
 194 002e 03D0     		beq	.L3
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 195              		.loc 1 726 0
 196 0030 FB69     		ldr	r3, [r7, #28]
 197 0032 7A69     		ldr	r2, [r7, #20]
 198 0034 1A63     		str	r2, [r3, #48]
 199 0036 05E0     		b	.L5
 200              	.L3:
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
ARM GAS  /tmp/ccJ0Dfhq.s 			page 17


 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 201              		.loc 1 732 0
 202 0038 7869     		ldr	r0, [r7, #20]
 203 003a FFF7FEFF 		bl	vPortFree
 204 003e 01E0     		b	.L5
 205              	.L2:
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 206              		.loc 1 737 0
 207 0040 0023     		movs	r3, #0
 208 0042 FB61     		str	r3, [r7, #28]
 209              	.L5:
 210              	.LBE97:
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 211              		.loc 1 742 0
 212 0044 FB69     		ldr	r3, [r7, #28]
 213 0046 002B     		cmp	r3, #0
 214 0048 13D0     		beq	.L6
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 215              		.loc 1 752 0
 216 004a FA88     		ldrh	r2, [r7, #6]
 217 004c BB6A     		ldr	r3, [r7, #40]
 218 004e 0093     		str	r3, [sp]
 219 0050 FB6A     		ldr	r3, [r7, #44]
 220 0052 0193     		str	r3, [sp, #4]
 221 0054 FB69     		ldr	r3, [r7, #28]
 222 0056 0293     		str	r3, [sp, #8]
 223 0058 0023     		movs	r3, #0
 224 005a 0393     		str	r3, [sp, #12]
 225 005c F868     		ldr	r0, [r7, #12]
 226 005e B968     		ldr	r1, [r7, #8]
 227 0060 3B68     		ldr	r3, [r7]
 228 0062 FFF7FEFF 		bl	prvInitialiseNewTask
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 229              		.loc 1 753 0
 230 0066 F869     		ldr	r0, [r7, #28]
 231 0068 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 232              		.loc 1 754 0
 233 006c 0123     		movs	r3, #1
 234 006e BB61     		str	r3, [r7, #24]
ARM GAS  /tmp/ccJ0Dfhq.s 			page 18


 235 0070 02E0     		b	.L7
 236              	.L6:
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 237              		.loc 1 758 0
 238 0072 4FF0FF33 		mov	r3, #-1
 239 0076 BB61     		str	r3, [r7, #24]
 240              	.L7:
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 241              		.loc 1 761 0
 242 0078 BB69     		ldr	r3, [r7, #24]
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 243              		.loc 1 762 0
 244 007a 1846     		mov	r0, r3
 245 007c 2037     		adds	r7, r7, #32
 246              	.LCFI3:
 247              		.cfi_def_cfa_offset 8
 248 007e BD46     		mov	sp, r7
 249              	.LCFI4:
 250              		.cfi_def_cfa_register 13
 251              		@ sp needed
 252 0080 80BD     		pop	{r7, pc}
 253              		.cfi_endproc
 254              	.LFE5:
 256 0082 00BF     		.section	.text.prvInitialiseNewTask,"ax",%progbits
 257              		.align	2
 258              		.thumb
 259              		.thumb_func
 261              	prvInitialiseNewTask:
 262              	.LFB6:
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed fo
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 263              		.loc 1 775 0
 264              		.cfi_startproc
 265              		@ args = 16, pretend = 0, frame = 32
 266              		@ frame_needed = 1, uses_anonymous_args = 0
 267 0000 80B5     		push	{r7, lr}
 268              	.LCFI5:
 269              		.cfi_def_cfa_offset 8
 270              		.cfi_offset 7, -8
 271              		.cfi_offset 14, -4
 272 0002 88B0     		sub	sp, sp, #32
ARM GAS  /tmp/ccJ0Dfhq.s 			page 19


 273              	.LCFI6:
 274              		.cfi_def_cfa_offset 40
 275 0004 00AF     		add	r7, sp, #0
 276              	.LCFI7:
 277              		.cfi_def_cfa_register 7
 278 0006 F860     		str	r0, [r7, #12]
 279 0008 B960     		str	r1, [r7, #8]
 280 000a 7A60     		str	r2, [r7, #4]
 281 000c 3B60     		str	r3, [r7]
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTa
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INC
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 282              		.loc 1 807 0
 283 000e 3B6B     		ldr	r3, [r7, #48]
 284 0010 1A6B     		ldr	r2, [r3, #48]
 285 0012 7B68     		ldr	r3, [r7, #4]
 286 0014 03F18043 		add	r3, r3, #1073741824
 287 0018 013B     		subs	r3, r3, #1
 288 001a 9B00     		lsls	r3, r3, #2
 289 001c 1344     		add	r3, r3, r2
 290 001e BB61     		str	r3, [r7, #24]
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 291              		.loc 1 808 0
 292 0020 BB69     		ldr	r3, [r7, #24]
 293 0022 23F00703 		bic	r3, r3, #7
 294 0026 BB61     		str	r3, [r7, #24]
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
ARM GAS  /tmp/ccJ0Dfhq.s 			page 20


 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 295              		.loc 1 811 0
 296 0028 BB69     		ldr	r3, [r7, #24]
 297 002a 03F00703 		and	r3, r3, #7
 298 002e 002B     		cmp	r3, #0
 299 0030 09D0     		beq	.L10
 300              	.LBB98:
 301              	.LBB99:
 302              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
ARM GAS  /tmp/ccJ0Dfhq.s 			page 21


  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     mission critical applications that require provable dependability.
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
ARM GAS  /tmp/ccJ0Dfhq.s 			page 22


 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccJ0Dfhq.s 			page 23


 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
ARM GAS  /tmp/ccJ0Dfhq.s 			page 24


 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 230:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 231:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 232:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 235:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 236:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 303              		.loc 2 237 0 discriminator 1
 304              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 305 0032 4FF05003 			mov r3, #80												
 306 0036 83F31188 		msr basepri, r3											
 307 003a BFF36F8F 		isb														
 308 003e BFF34F8F 		dsb														
 309              	
 310              	@ 0 "" 2
 311              		.thumb
 312 0042 7B61     		str	r3, [r7, #20]
 313              	.L11:
 314              	.LBE99:
 315              	.LBE98:
 316              		.loc 1 811 0 discriminator 1
 317 0044 FEE7     		b	.L11
 318              	.L10:
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 319              		.loc 1 827 0
 320 0046 0023     		movs	r3, #0
 321 0048 FB61     		str	r3, [r7, #28]
 322 004a 13E0     		b	.L12
 323              	.L15:
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
ARM GAS  /tmp/ccJ0Dfhq.s 			page 25


 324              		.loc 1 829 0
 325 004c BA68     		ldr	r2, [r7, #8]
 326 004e FB69     		ldr	r3, [r7, #28]
 327 0050 1344     		add	r3, r3, r2
 328 0052 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 329 0054 3A6B     		ldr	r2, [r7, #48]
 330 0056 FB69     		ldr	r3, [r7, #28]
 331 0058 1344     		add	r3, r3, r2
 332 005a 3033     		adds	r3, r3, #48
 333 005c 0A46     		mov	r2, r1
 334 005e 1A71     		strb	r2, [r3, #4]
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		string is not accessible (extremely unlikely). */
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pcName[ x ] == 0x00 )
 335              		.loc 1 834 0
 336 0060 BA68     		ldr	r2, [r7, #8]
 337 0062 FB69     		ldr	r3, [r7, #28]
 338 0064 1344     		add	r3, r3, r2
 339 0066 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 340 0068 002B     		cmp	r3, #0
 341 006a 00D1     		bne	.L13
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			break;
 342              		.loc 1 836 0
 343 006c 05E0     		b	.L14
 344              	.L13:
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 345              		.loc 1 827 0 discriminator 2
 346 006e FB69     		ldr	r3, [r7, #28]
 347 0070 0133     		adds	r3, r3, #1
 348 0072 FB61     		str	r3, [r7, #28]
 349              	.L12:
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 350              		.loc 1 827 0 is_stmt 0 discriminator 1
 351 0074 FB69     		ldr	r3, [r7, #28]
 352 0076 0F2B     		cmp	r3, #15
 353 0078 E8D9     		bls	.L15
 354              	.L14:
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 355              		.loc 1 846 0 is_stmt 1
 356 007a 3B6B     		ldr	r3, [r7, #48]
 357 007c 0022     		movs	r2, #0
 358 007e 83F84320 		strb	r2, [r3, #67]
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
ARM GAS  /tmp/ccJ0Dfhq.s 			page 26


 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 359              		.loc 1 850 0
 360 0082 BB6A     		ldr	r3, [r7, #40]
 361 0084 062B     		cmp	r3, #6
 362 0086 01D9     		bls	.L16
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 363              		.loc 1 852 0
 364 0088 0623     		movs	r3, #6
 365 008a BB62     		str	r3, [r7, #40]
 366              	.L16:
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 367              		.loc 1 859 0
 368 008c 3B6B     		ldr	r3, [r7, #48]
 369 008e BA6A     		ldr	r2, [r7, #40]
 370 0090 DA62     		str	r2, [r3, #44]
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 371              		.loc 1 862 0
 372 0092 3B6B     		ldr	r3, [r7, #48]
 373 0094 BA6A     		ldr	r2, [r7, #40]
 374 0096 5A64     		str	r2, [r3, #68]
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 375              		.loc 1 863 0
 376 0098 3B6B     		ldr	r3, [r7, #48]
 377 009a 0022     		movs	r2, #0
 378 009c 9A64     		str	r2, [r3, #72]
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 379              		.loc 1 867 0
 380 009e 3B6B     		ldr	r3, [r7, #48]
 381 00a0 0433     		adds	r3, r3, #4
 382 00a2 1846     		mov	r0, r3
 383 00a4 FFF7FEFF 		bl	vListInitialiseItem
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 384              		.loc 1 868 0
 385 00a8 3B6B     		ldr	r3, [r7, #48]
 386 00aa 1833     		adds	r3, r3, #24
 387 00ac 1846     		mov	r0, r3
 388 00ae FFF7FEFF 		bl	vListInitialiseItem
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 389              		.loc 1 872 0
 390 00b2 3B6B     		ldr	r3, [r7, #48]
 391 00b4 3A6B     		ldr	r2, [r7, #48]
 392 00b6 1A61     		str	r2, [r3, #16]
ARM GAS  /tmp/ccJ0Dfhq.s 			page 27


 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 393              		.loc 1 875 0
 394 00b8 BB6A     		ldr	r3, [r7, #40]
 395 00ba C3F10702 		rsb	r2, r3, #7
 396 00be 3B6B     		ldr	r3, [r7, #48]
 397 00c0 9A61     		str	r2, [r3, #24]
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 398              		.loc 1 876 0
 399 00c2 3B6B     		ldr	r3, [r7, #48]
 400 00c4 3A6B     		ldr	r2, [r7, #48]
 401 00c6 5A62     		str	r2, [r3, #36]
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 402              		.loc 1 918 0
 403 00c8 3B6B     		ldr	r3, [r7, #48]
ARM GAS  /tmp/ccJ0Dfhq.s 			page 28


 404 00ca 0022     		movs	r2, #0
 405 00cc DA64     		str	r2, [r3, #76]
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 406              		.loc 1 919 0
 407 00ce 3B6B     		ldr	r3, [r7, #48]
 408 00d0 0022     		movs	r2, #0
 409 00d2 83F85020 		strb	r2, [r3, #80]
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the	top of stack variable is updated. */
 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 410              		.loc 1 946 0
 411 00d6 B869     		ldr	r0, [r7, #24]
 412 00d8 F968     		ldr	r1, [r7, #12]
 413 00da 3A68     		ldr	r2, [r7]
 414 00dc FFF7FEFF 		bl	pxPortInitialiseStack
 415 00e0 0246     		mov	r2, r0
 416 00e2 3B6B     		ldr	r3, [r7, #48]
 417 00e4 1A60     		str	r2, [r3]
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
 418              		.loc 1 950 0
 419 00e6 FB6A     		ldr	r3, [r7, #44]
 420 00e8 002B     		cmp	r3, #0
 421 00ea 02D0     		beq	.L9
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 422              		.loc 1 954 0
 423 00ec FB6A     		ldr	r3, [r7, #44]
 424 00ee 3A6B     		ldr	r2, [r7, #48]
ARM GAS  /tmp/ccJ0Dfhq.s 			page 29


 425 00f0 1A60     		str	r2, [r3]
 426              	.L9:
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 427              		.loc 1 960 0
 428 00f2 2037     		adds	r7, r7, #32
 429              	.LCFI8:
 430              		.cfi_def_cfa_offset 8
 431 00f4 BD46     		mov	sp, r7
 432              	.LCFI9:
 433              		.cfi_def_cfa_register 13
 434              		@ sp needed
 435 00f6 80BD     		pop	{r7, pc}
 436              		.cfi_endproc
 437              	.LFE6:
 439              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 440              		.align	2
 441              		.thumb
 442              		.thumb_func
 444              	prvAddNewTaskToReadyList:
 445              	.LFB7:
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 446              		.loc 1 964 0
 447              		.cfi_startproc
 448              		@ args = 0, pretend = 0, frame = 8
 449              		@ frame_needed = 1, uses_anonymous_args = 0
 450 0000 80B5     		push	{r7, lr}
 451              	.LCFI10:
 452              		.cfi_def_cfa_offset 8
 453              		.cfi_offset 7, -8
 454              		.cfi_offset 14, -4
 455 0002 82B0     		sub	sp, sp, #8
 456              	.LCFI11:
 457              		.cfi_def_cfa_offset 16
 458 0004 00AF     		add	r7, sp, #0
 459              	.LCFI12:
 460              		.cfi_def_cfa_register 7
 461 0006 7860     		str	r0, [r7, #4]
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 462              		.loc 1 967 0
 463 0008 FFF7FEFF 		bl	vPortEnterCritical
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
 464              		.loc 1 969 0
 465 000c 2B4B     		ldr	r3, .L22
 466 000e 1B68     		ldr	r3, [r3]
 467 0010 0133     		adds	r3, r3, #1
 468 0012 2A4A     		ldr	r2, .L22
ARM GAS  /tmp/ccJ0Dfhq.s 			page 30


 469 0014 1360     		str	r3, [r2]
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 470              		.loc 1 970 0
 471 0016 2A4B     		ldr	r3, .L22+4
 472 0018 1B68     		ldr	r3, [r3]
 473 001a 002B     		cmp	r3, #0
 474 001c 09D1     		bne	.L19
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 475              		.loc 1 974 0
 476 001e 284A     		ldr	r2, .L22+4
 477 0020 7B68     		ldr	r3, [r7, #4]
 478 0022 1360     		str	r3, [r2]
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 479              		.loc 1 976 0
 480 0024 254B     		ldr	r3, .L22
 481 0026 1B68     		ldr	r3, [r3]
 482 0028 012B     		cmp	r3, #1
 483 002a 10D1     		bne	.L20
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
 484              		.loc 1 981 0
 485 002c FFF7FEFF 		bl	prvInitialiseTaskLists
 486 0030 0DE0     		b	.L20
 487              	.L19:
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 488              		.loc 1 993 0
 489 0032 244B     		ldr	r3, .L22+8
 490 0034 1B68     		ldr	r3, [r3]
 491 0036 002B     		cmp	r3, #0
 492 0038 09D1     		bne	.L20
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 493              		.loc 1 995 0
 494 003a 214B     		ldr	r3, .L22+4
 495 003c 1B68     		ldr	r3, [r3]
 496 003e DA6A     		ldr	r2, [r3, #44]
 497 0040 7B68     		ldr	r3, [r7, #4]
 498 0042 DB6A     		ldr	r3, [r3, #44]
 499 0044 9A42     		cmp	r2, r3
ARM GAS  /tmp/ccJ0Dfhq.s 			page 31


 500 0046 02D8     		bhi	.L20
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 501              		.loc 1 997 0
 502 0048 1D4A     		ldr	r2, .L22+4
 503 004a 7B68     		ldr	r3, [r7, #4]
 504 004c 1360     		str	r3, [r2]
 505              	.L20:
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
 506              		.loc 1 1010 0
 507 004e 1E4B     		ldr	r3, .L22+12
 508 0050 1B68     		ldr	r3, [r3]
 509 0052 0133     		adds	r3, r3, #1
 510 0054 1C4A     		ldr	r2, .L22+12
 511 0056 1360     		str	r3, [r2]
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
 512              		.loc 1 1020 0
 513 0058 7B68     		ldr	r3, [r7, #4]
 514 005a DB6A     		ldr	r3, [r3, #44]
 515 005c 1A46     		mov	r2, r3
 516 005e 0123     		movs	r3, #1
 517 0060 03FA02F2 		lsl	r2, r3, r2
 518 0064 194B     		ldr	r3, .L22+16
 519 0066 1B68     		ldr	r3, [r3]
 520 0068 1343     		orrs	r3, r3, r2
 521 006a 184A     		ldr	r2, .L22+16
 522 006c 1360     		str	r3, [r2]
 523 006e 7B68     		ldr	r3, [r7, #4]
 524 0070 DA6A     		ldr	r2, [r3, #44]
 525 0072 1346     		mov	r3, r2
 526 0074 9B00     		lsls	r3, r3, #2
 527 0076 1344     		add	r3, r3, r2
 528 0078 9B00     		lsls	r3, r3, #2
 529 007a 154A     		ldr	r2, .L22+20
 530 007c 1A44     		add	r2, r2, r3
 531 007e 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccJ0Dfhq.s 			page 32


 532 0080 0433     		adds	r3, r3, #4
 533 0082 1046     		mov	r0, r2
 534 0084 1946     		mov	r1, r3
 535 0086 FFF7FEFF 		bl	vListInsertEnd
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 536              		.loc 1 1024 0
 537 008a FFF7FEFF 		bl	vPortExitCritical
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
 538              		.loc 1 1026 0
 539 008e 0D4B     		ldr	r3, .L22+8
 540 0090 1B68     		ldr	r3, [r3]
 541 0092 002B     		cmp	r3, #0
 542 0094 0ED0     		beq	.L18
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 543              		.loc 1 1030 0
 544 0096 0A4B     		ldr	r3, .L22+4
 545 0098 1B68     		ldr	r3, [r3]
 546 009a DA6A     		ldr	r2, [r3, #44]
 547 009c 7B68     		ldr	r3, [r7, #4]
 548 009e DB6A     		ldr	r3, [r3, #44]
 549 00a0 9A42     		cmp	r2, r3
 550 00a2 07D2     		bcs	.L18
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
 551              		.loc 1 1032 0
 552 00a4 0B4B     		ldr	r3, .L22+24
 553 00a6 4FF08052 		mov	r2, #268435456
 554 00aa 1A60     		str	r2, [r3]
 555              	@ 1032 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 556 00ac BFF34F8F 		dsb
 557              	@ 0 "" 2
 558              	@ 1032 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 559 00b0 BFF36F8F 		isb
 560              	@ 0 "" 2
 561              		.thumb
 562              	.L18:
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 563              		.loc 1 1043 0
 564 00b4 0837     		adds	r7, r7, #8
 565              	.LCFI13:
ARM GAS  /tmp/ccJ0Dfhq.s 			page 33


 566              		.cfi_def_cfa_offset 8
 567 00b6 BD46     		mov	sp, r7
 568              	.LCFI14:
 569              		.cfi_def_cfa_register 13
 570              		@ sp needed
 571 00b8 80BD     		pop	{r7, pc}
 572              	.L23:
 573 00ba 00BF     		.align	2
 574              	.L22:
 575 00bc 00000000 		.word	uxCurrentNumberOfTasks
 576 00c0 00000000 		.word	pxCurrentTCB
 577 00c4 00000000 		.word	xSchedulerRunning
 578 00c8 00000000 		.word	uxTaskNumber
 579 00cc 00000000 		.word	uxTopReadyPriority
 580 00d0 00000000 		.word	pxReadyTasksLists
 581 00d4 04ED00E0 		.word	-536810236
 582              		.cfi_endproc
 583              	.LFE7:
 585              		.section	.text.vTaskDelete,"ax",%progbits
 586              		.align	2
 587              		.global	vTaskDelete
 588              		.thumb
 589              		.thumb_func
 591              	vTaskDelete:
 592              	.LFB8:
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 593              		.loc 1 1049 0
 594              		.cfi_startproc
 595              		@ args = 0, pretend = 0, frame = 16
 596              		@ frame_needed = 1, uses_anonymous_args = 0
 597 0000 80B5     		push	{r7, lr}
 598              	.LCFI15:
 599              		.cfi_def_cfa_offset 8
 600              		.cfi_offset 7, -8
 601              		.cfi_offset 14, -4
 602 0002 84B0     		sub	sp, sp, #16
 603              	.LCFI16:
 604              		.cfi_def_cfa_offset 24
 605 0004 00AF     		add	r7, sp, #0
 606              	.LCFI17:
 607              		.cfi_def_cfa_register 7
 608 0006 7860     		str	r0, [r7, #4]
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 609              		.loc 1 1052 0
 610 0008 FFF7FEFF 		bl	vPortEnterCritical
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 611              		.loc 1 1056 0
ARM GAS  /tmp/ccJ0Dfhq.s 			page 34


 612 000c 7B68     		ldr	r3, [r7, #4]
 613 000e 002B     		cmp	r3, #0
 614 0010 02D1     		bne	.L25
 615              		.loc 1 1056 0 is_stmt 0 discriminator 1
 616 0012 384B     		ldr	r3, .L35
 617 0014 1B68     		ldr	r3, [r3]
 618 0016 00E0     		b	.L26
 619              	.L25:
 620              		.loc 1 1056 0 discriminator 2
 621 0018 7B68     		ldr	r3, [r7, #4]
 622              	.L26:
 623              		.loc 1 1056 0 discriminator 4
 624 001a FB60     		str	r3, [r7, #12]
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list. */
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 625              		.loc 1 1059 0 is_stmt 1 discriminator 4
 626 001c FB68     		ldr	r3, [r7, #12]
 627 001e 0433     		adds	r3, r3, #4
 628 0020 1846     		mov	r0, r3
 629 0022 FFF7FEFF 		bl	uxListRemove
 630 0026 0346     		mov	r3, r0
 631 0028 002B     		cmp	r3, #0
 632 002a 15D1     		bne	.L27
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 633              		.loc 1 1061 0
 634 002c FB68     		ldr	r3, [r7, #12]
 635 002e DA6A     		ldr	r2, [r3, #44]
 636 0030 3149     		ldr	r1, .L35+4
 637 0032 1346     		mov	r3, r2
 638 0034 9B00     		lsls	r3, r3, #2
 639 0036 1344     		add	r3, r3, r2
 640 0038 9B00     		lsls	r3, r3, #2
 641 003a 0B44     		add	r3, r3, r1
 642 003c 1B68     		ldr	r3, [r3]
 643 003e 002B     		cmp	r3, #0
 644 0040 0AD1     		bne	.L27
 645              		.loc 1 1061 0 is_stmt 0 discriminator 1
 646 0042 FB68     		ldr	r3, [r7, #12]
 647 0044 DB6A     		ldr	r3, [r3, #44]
 648 0046 1A46     		mov	r2, r3
 649 0048 0123     		movs	r3, #1
 650 004a 9340     		lsls	r3, r3, r2
 651 004c DA43     		mvns	r2, r3
 652 004e 2B4B     		ldr	r3, .L35+8
 653 0050 1B68     		ldr	r3, [r3]
 654 0052 1340     		ands	r3, r3, r2
 655 0054 294A     		ldr	r2, .L35+8
 656 0056 1360     		str	r3, [r2]
 657              	.L27:
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccJ0Dfhq.s 			page 35


1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 658              		.loc 1 1069 0 is_stmt 1
 659 0058 FB68     		ldr	r3, [r7, #12]
 660 005a 9B6A     		ldr	r3, [r3, #40]
 661 005c 002B     		cmp	r3, #0
 662 005e 04D0     		beq	.L29
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 663              		.loc 1 1071 0
 664 0060 FB68     		ldr	r3, [r7, #12]
 665 0062 1833     		adds	r3, r3, #24
 666 0064 1846     		mov	r0, r3
 667 0066 FFF7FEFF 		bl	uxListRemove
 668              	.L29:
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
 669              		.loc 1 1082 0
 670 006a 254B     		ldr	r3, .L35+12
 671 006c 1B68     		ldr	r3, [r3]
 672 006e 0133     		adds	r3, r3, #1
 673 0070 234A     		ldr	r2, .L35+12
 674 0072 1360     		str	r3, [r2]
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 675              		.loc 1 1084 0
 676 0074 1F4B     		ldr	r3, .L35
 677 0076 1B68     		ldr	r3, [r3]
 678 0078 FA68     		ldr	r2, [r7, #12]
 679 007a 9A42     		cmp	r2, r3
 680 007c 0BD1     		bne	.L30
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 681              		.loc 1 1091 0
 682 007e FB68     		ldr	r3, [r7, #12]
 683 0080 0433     		adds	r3, r3, #4
 684 0082 2048     		ldr	r0, .L35+16
 685 0084 1946     		mov	r1, r3
 686 0086 FFF7FEFF 		bl	vListInsertEnd
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
ARM GAS  /tmp/ccJ0Dfhq.s 			page 36


1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
 687              		.loc 1 1096 0
 688 008a 1F4B     		ldr	r3, .L35+20
 689 008c 1B68     		ldr	r3, [r3]
 690 008e 0133     		adds	r3, r3, #1
 691 0090 1D4A     		ldr	r2, .L35+20
 692 0092 1360     		str	r3, [r2]
 693 0094 09E0     		b	.L31
 694              	.L30:
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 695              		.loc 1 1107 0
 696 0096 1D4B     		ldr	r3, .L35+24
 697 0098 1B68     		ldr	r3, [r3]
 698 009a 013B     		subs	r3, r3, #1
 699 009c 1B4A     		ldr	r2, .L35+24
 700 009e 1360     		str	r3, [r2]
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 701              		.loc 1 1108 0
 702 00a0 F868     		ldr	r0, [r7, #12]
 703 00a2 FFF7FEFF 		bl	prvDeleteTCB
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 704              		.loc 1 1112 0
 705 00a6 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 706              	.L31:
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 707              		.loc 1 1117 0
 708 00aa FFF7FEFF 		bl	vPortExitCritical
1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 709              		.loc 1 1121 0
 710 00ae 184B     		ldr	r3, .L35+28
 711 00b0 1B68     		ldr	r3, [r3]
 712 00b2 002B     		cmp	r3, #0
 713 00b4 1AD0     		beq	.L24
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 714              		.loc 1 1123 0
 715 00b6 0F4B     		ldr	r3, .L35
ARM GAS  /tmp/ccJ0Dfhq.s 			page 37


 716 00b8 1B68     		ldr	r3, [r3]
 717 00ba FA68     		ldr	r2, [r7, #12]
 718 00bc 9A42     		cmp	r2, r3
 719 00be 15D1     		bne	.L24
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 720              		.loc 1 1125 0
 721 00c0 144B     		ldr	r3, .L35+32
 722 00c2 1B68     		ldr	r3, [r3]
 723 00c4 002B     		cmp	r3, #0
 724 00c6 09D0     		beq	.L33
 725              	.LBB100:
 726              	.LBB101:
 727              		.loc 2 237 0 discriminator 1
 728              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 729 00c8 4FF05003 			mov r3, #80												
 730 00cc 83F31188 		msr basepri, r3											
 731 00d0 BFF36F8F 		isb														
 732 00d4 BFF34F8F 		dsb														
 733              	
 734              	@ 0 "" 2
 735              		.thumb
 736 00d8 BB60     		str	r3, [r7, #8]
 737              	.L34:
 738              	.LBE101:
 739              	.LBE100:
 740              		.loc 1 1125 0 discriminator 1
 741 00da FEE7     		b	.L34
 742              	.L33:
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 743              		.loc 1 1126 0
 744 00dc 0E4B     		ldr	r3, .L35+36
 745 00de 4FF08052 		mov	r2, #268435456
 746 00e2 1A60     		str	r2, [r3]
 747              	@ 1126 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 748 00e4 BFF34F8F 		dsb
 749              	@ 0 "" 2
 750              	@ 1126 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 751 00e8 BFF36F8F 		isb
 752              	@ 0 "" 2
 753              		.thumb
 754              	.L24:
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 755              		.loc 1 1133 0
 756 00ec 1037     		adds	r7, r7, #16
 757              	.LCFI18:
 758              		.cfi_def_cfa_offset 8
 759 00ee BD46     		mov	sp, r7
 760              	.LCFI19:
 761              		.cfi_def_cfa_register 13
 762              		@ sp needed
ARM GAS  /tmp/ccJ0Dfhq.s 			page 38


 763 00f0 80BD     		pop	{r7, pc}
 764              	.L36:
 765 00f2 00BF     		.align	2
 766              	.L35:
 767 00f4 00000000 		.word	pxCurrentTCB
 768 00f8 00000000 		.word	pxReadyTasksLists
 769 00fc 00000000 		.word	uxTopReadyPriority
 770 0100 00000000 		.word	uxTaskNumber
 771 0104 00000000 		.word	xTasksWaitingTermination
 772 0108 00000000 		.word	uxDeletedTasksWaitingCleanUp
 773 010c 00000000 		.word	uxCurrentNumberOfTasks
 774 0110 00000000 		.word	xSchedulerRunning
 775 0114 00000000 		.word	uxSchedulerSuspended
 776 0118 04ED00E0 		.word	-536810236
 777              		.cfi_endproc
 778              	.LFE8:
 780              		.section	.text.vTaskDelayUntil,"ax",%progbits
 781              		.align	2
 782              		.global	vTaskDelayUntil
 783              		.thumb
 784              		.thumb_func
 786              	vTaskDelayUntil:
 787              	.LFB9:
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( 1 == 1 )
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 788              		.loc 1 1141 0
 789              		.cfi_startproc
 790              		@ args = 0, pretend = 0, frame = 40
 791              		@ frame_needed = 1, uses_anonymous_args = 0
 792 0000 80B5     		push	{r7, lr}
 793              	.LCFI20:
 794              		.cfi_def_cfa_offset 8
 795              		.cfi_offset 7, -8
 796              		.cfi_offset 14, -4
 797 0002 8AB0     		sub	sp, sp, #40
 798              	.LCFI21:
 799              		.cfi_def_cfa_offset 48
 800 0004 00AF     		add	r7, sp, #0
 801              	.LCFI22:
 802              		.cfi_def_cfa_register 7
 803 0006 7860     		str	r0, [r7, #4]
 804 0008 3960     		str	r1, [r7]
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 805              		.loc 1 1143 0
 806 000a 0023     		movs	r3, #0
 807 000c 7B62     		str	r3, [r7, #36]
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
 808              		.loc 1 1145 0
 809 000e 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccJ0Dfhq.s 			page 39


 810 0010 002B     		cmp	r3, #0
 811 0012 09D1     		bne	.L38
 812              	.LBB102:
 813              	.LBB103:
 814              		.loc 2 237 0 discriminator 1
 815              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 816 0014 4FF05003 			mov r3, #80												
 817 0018 83F31188 		msr basepri, r3											
 818 001c BFF36F8F 		isb														
 819 0020 BFF34F8F 		dsb														
 820              	
 821              	@ 0 "" 2
 822              		.thumb
 823 0024 7B61     		str	r3, [r7, #20]
 824              	.L39:
 825              	.LBE103:
 826              	.LBE102:
 827              		.loc 1 1145 0 discriminator 1
 828 0026 FEE7     		b	.L39
 829              	.L38:
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 830              		.loc 1 1146 0
 831 0028 3B68     		ldr	r3, [r7]
 832 002a 002B     		cmp	r3, #0
 833 002c 09D1     		bne	.L40
 834              	.LBB104:
 835              	.LBB105:
 836              		.loc 2 237 0 discriminator 1
 837              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 838 002e 4FF05003 			mov r3, #80												
 839 0032 83F31188 		msr basepri, r3											
 840 0036 BFF36F8F 		isb														
 841 003a BFF34F8F 		dsb														
 842              	
 843              	@ 0 "" 2
 844              		.thumb
 845 003e 3B61     		str	r3, [r7, #16]
 846              	.L41:
 847              	.LBE105:
 848              	.LBE104:
 849              		.loc 1 1146 0 discriminator 2
 850 0040 FEE7     		b	.L41
 851              	.L40:
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 852              		.loc 1 1147 0
 853 0042 294B     		ldr	r3, .L49
 854 0044 1B68     		ldr	r3, [r3]
 855 0046 002B     		cmp	r3, #0
 856 0048 09D0     		beq	.L42
 857              	.LBB106:
 858              	.LBB107:
 859              		.loc 2 237 0 discriminator 1
 860              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 861 004a 4FF05003 			mov r3, #80												
 862 004e 83F31188 		msr basepri, r3											
 863 0052 BFF36F8F 		isb														
 864 0056 BFF34F8F 		dsb														
ARM GAS  /tmp/ccJ0Dfhq.s 			page 40


 865              	
 866              	@ 0 "" 2
 867              		.thumb
 868 005a FB60     		str	r3, [r7, #12]
 869              	.L43:
 870              	.LBE107:
 871              	.LBE106:
 872              		.loc 1 1147 0 discriminator 3
 873 005c FEE7     		b	.L43
 874              	.L42:
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 875              		.loc 1 1149 0
 876 005e FFF7FEFF 		bl	vTaskSuspendAll
 877              	.LBB108:
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
 878              		.loc 1 1153 0
 879 0062 224B     		ldr	r3, .L49+4
 880 0064 1B68     		ldr	r3, [r3]
 881 0066 3B62     		str	r3, [r7, #32]
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 882              		.loc 1 1156 0
 883 0068 7B68     		ldr	r3, [r7, #4]
 884 006a 1A68     		ldr	r2, [r3]
 885 006c 3B68     		ldr	r3, [r7]
 886 006e 1344     		add	r3, r3, r2
 887 0070 FB61     		str	r3, [r7, #28]
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
 888              		.loc 1 1158 0
 889 0072 7B68     		ldr	r3, [r7, #4]
 890 0074 1A68     		ldr	r2, [r3]
 891 0076 3B6A     		ldr	r3, [r7, #32]
 892 0078 9A42     		cmp	r2, r3
 893 007a 0BD9     		bls	.L44
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 894              		.loc 1 1165 0
 895 007c 7B68     		ldr	r3, [r7, #4]
 896 007e 1A68     		ldr	r2, [r3]
 897 0080 FB69     		ldr	r3, [r7, #28]
 898 0082 9A42     		cmp	r2, r3
 899 0084 11D9     		bls	.L45
 900              		.loc 1 1165 0 is_stmt 0 discriminator 1
 901 0086 FA69     		ldr	r2, [r7, #28]
 902 0088 3B6A     		ldr	r3, [r7, #32]
 903 008a 9A42     		cmp	r2, r3
ARM GAS  /tmp/ccJ0Dfhq.s 			page 41


 904 008c 0DD9     		bls	.L45
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 905              		.loc 1 1167 0 is_stmt 1
 906 008e 0123     		movs	r3, #1
 907 0090 7B62     		str	r3, [r7, #36]
 908 0092 0AE0     		b	.L45
 909              	.L44:
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 910              		.loc 1 1179 0
 911 0094 7B68     		ldr	r3, [r7, #4]
 912 0096 1A68     		ldr	r2, [r3]
 913 0098 FB69     		ldr	r3, [r7, #28]
 914 009a 9A42     		cmp	r2, r3
 915 009c 03D8     		bhi	.L46
 916              		.loc 1 1179 0 is_stmt 0 discriminator 1
 917 009e FA69     		ldr	r2, [r7, #28]
 918 00a0 3B6A     		ldr	r3, [r7, #32]
 919 00a2 9A42     		cmp	r2, r3
 920 00a4 01D9     		bls	.L45
 921              	.L46:
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 922              		.loc 1 1181 0 is_stmt 1
 923 00a6 0123     		movs	r3, #1
 924 00a8 7B62     		str	r3, [r7, #36]
 925              	.L45:
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 926              		.loc 1 1190 0
 927 00aa 7B68     		ldr	r3, [r7, #4]
 928 00ac FA69     		ldr	r2, [r7, #28]
 929 00ae 1A60     		str	r2, [r3]
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
 930              		.loc 1 1192 0
 931 00b0 7B6A     		ldr	r3, [r7, #36]
 932 00b2 002B     		cmp	r3, #0
 933 00b4 06D0     		beq	.L47
ARM GAS  /tmp/ccJ0Dfhq.s 			page 42


1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 934              		.loc 1 1198 0
 935 00b6 FA69     		ldr	r2, [r7, #28]
 936 00b8 3B6A     		ldr	r3, [r7, #32]
 937 00ba D31A     		subs	r3, r2, r3
 938 00bc 1846     		mov	r0, r3
 939 00be 0021     		movs	r1, #0
 940 00c0 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 941              	.L47:
 942              	.LBE108:
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 943              		.loc 1 1205 0
 944 00c4 FFF7FEFF 		bl	xTaskResumeAll
 945 00c8 B861     		str	r0, [r7, #24]
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 946              		.loc 1 1209 0
 947 00ca BB69     		ldr	r3, [r7, #24]
 948 00cc 002B     		cmp	r3, #0
 949 00ce 07D1     		bne	.L37
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 950              		.loc 1 1211 0
 951 00d0 074B     		ldr	r3, .L49+8
 952 00d2 4FF08052 		mov	r2, #268435456
 953 00d6 1A60     		str	r2, [r3]
 954              	@ 1211 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 955 00d8 BFF34F8F 		dsb
 956              	@ 0 "" 2
 957              	@ 1211 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 958 00dc BFF36F8F 		isb
 959              	@ 0 "" 2
 960              		.thumb
 961              	.L37:
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 962              		.loc 1 1217 0
 963 00e0 2837     		adds	r7, r7, #40
 964              	.LCFI23:
 965              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccJ0Dfhq.s 			page 43


 966 00e2 BD46     		mov	sp, r7
 967              	.LCFI24:
 968              		.cfi_def_cfa_register 13
 969              		@ sp needed
 970 00e4 80BD     		pop	{r7, pc}
 971              	.L50:
 972 00e6 00BF     		.align	2
 973              	.L49:
 974 00e8 00000000 		.word	uxSchedulerSuspended
 975 00ec 00000000 		.word	xTickCount
 976 00f0 04ED00E0 		.word	-536810236
 977              		.cfi_endproc
 978              	.LFE9:
 980              		.section	.text.vTaskDelay,"ax",%progbits
 981              		.align	2
 982              		.global	vTaskDelay
 983              		.thumb
 984              		.thumb_func
 986              	vTaskDelay:
 987              	.LFB10:
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 988              		.loc 1 1225 0
 989              		.cfi_startproc
 990              		@ args = 0, pretend = 0, frame = 16
 991              		@ frame_needed = 1, uses_anonymous_args = 0
 992 0000 80B5     		push	{r7, lr}
 993              	.LCFI25:
 994              		.cfi_def_cfa_offset 8
 995              		.cfi_offset 7, -8
 996              		.cfi_offset 14, -4
 997 0002 84B0     		sub	sp, sp, #16
 998              	.LCFI26:
 999              		.cfi_def_cfa_offset 24
 1000 0004 00AF     		add	r7, sp, #0
 1001              	.LCFI27:
 1002              		.cfi_def_cfa_register 7
 1003 0006 7860     		str	r0, [r7, #4]
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 1004              		.loc 1 1226 0
 1005 0008 0023     		movs	r3, #0
 1006 000a FB60     		str	r3, [r7, #12]
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
 1007              		.loc 1 1229 0
 1008 000c 7B68     		ldr	r3, [r7, #4]
 1009 000e 002B     		cmp	r3, #0
 1010 0010 16D0     		beq	.L52
1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
ARM GAS  /tmp/ccJ0Dfhq.s 			page 44


 1011              		.loc 1 1231 0
 1012 0012 124B     		ldr	r3, .L56
 1013 0014 1B68     		ldr	r3, [r3]
 1014 0016 002B     		cmp	r3, #0
 1015 0018 09D0     		beq	.L53
 1016              	.LBB109:
 1017              	.LBB110:
 1018              		.loc 2 237 0 discriminator 1
 1019              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1020 001a 4FF05003 			mov r3, #80												
 1021 001e 83F31188 		msr basepri, r3											
 1022 0022 BFF36F8F 		isb														
 1023 0026 BFF34F8F 		dsb														
 1024              	
 1025              	@ 0 "" 2
 1026              		.thumb
 1027 002a BB60     		str	r3, [r7, #8]
 1028              	.L54:
 1029              	.LBE110:
 1030              	.LBE109:
 1031              		.loc 1 1231 0 discriminator 1
 1032 002c FEE7     		b	.L54
 1033              	.L53:
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 1034              		.loc 1 1232 0
 1035 002e FFF7FEFF 		bl	vTaskSuspendAll
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 1036              		.loc 1 1243 0
 1037 0032 7868     		ldr	r0, [r7, #4]
 1038 0034 0021     		movs	r1, #0
 1039 0036 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 1040              		.loc 1 1245 0
 1041 003a FFF7FEFF 		bl	xTaskResumeAll
 1042 003e F860     		str	r0, [r7, #12]
 1043              	.L52:
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 1044              		.loc 1 1254 0
ARM GAS  /tmp/ccJ0Dfhq.s 			page 45


 1045 0040 FB68     		ldr	r3, [r7, #12]
 1046 0042 002B     		cmp	r3, #0
 1047 0044 07D1     		bne	.L51
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 1048              		.loc 1 1256 0
 1049 0046 064B     		ldr	r3, .L56+4
 1050 0048 4FF08052 		mov	r2, #268435456
 1051 004c 1A60     		str	r2, [r3]
 1052              	@ 1256 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1053 004e BFF34F8F 		dsb
 1054              	@ 0 "" 2
 1055              	@ 1256 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1056 0052 BFF36F8F 		isb
 1057              	@ 0 "" 2
 1058              		.thumb
 1059              	.L51:
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1060              		.loc 1 1262 0
 1061 0056 1037     		adds	r7, r7, #16
 1062              	.LCFI28:
 1063              		.cfi_def_cfa_offset 8
 1064 0058 BD46     		mov	sp, r7
 1065              	.LCFI29:
 1066              		.cfi_def_cfa_register 13
 1067              		@ sp needed
 1068 005a 80BD     		pop	{r7, pc}
 1069              	.L57:
 1070              		.align	2
 1071              	.L56:
 1072 005c 00000000 		.word	uxSchedulerSuspended
 1073 0060 04ED00E0 		.word	-536810236
 1074              		.cfi_endproc
 1075              	.LFE10:
 1077              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1078              		.align	2
 1079              		.global	uxTaskPriorityGet
 1080              		.thumb
 1081              		.thumb_func
 1083              	uxTaskPriorityGet:
 1084              	.LFB11:
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxStateList;
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
ARM GAS  /tmp/ccJ0Dfhq.s 			page 46


1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it block
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eSuspended;
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccJ0Dfhq.s 			page 47


1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1085              		.loc 1 1341 0
 1086              		.cfi_startproc
 1087              		@ args = 0, pretend = 0, frame = 16
 1088              		@ frame_needed = 1, uses_anonymous_args = 0
 1089 0000 80B5     		push	{r7, lr}
 1090              	.LCFI30:
 1091              		.cfi_def_cfa_offset 8
 1092              		.cfi_offset 7, -8
 1093              		.cfi_offset 14, -4
 1094 0002 84B0     		sub	sp, sp, #16
 1095              	.LCFI31:
 1096              		.cfi_def_cfa_offset 24
 1097 0004 00AF     		add	r7, sp, #0
 1098              	.LCFI32:
 1099              		.cfi_def_cfa_register 7
 1100 0006 7860     		str	r0, [r7, #4]
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1101              		.loc 1 1345 0
 1102 0008 FFF7FEFF 		bl	vPortEnterCritical
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1103              		.loc 1 1349 0
 1104 000c 7B68     		ldr	r3, [r7, #4]
 1105 000e 002B     		cmp	r3, #0
 1106 0010 02D1     		bne	.L59
 1107              		.loc 1 1349 0 is_stmt 0 discriminator 1
 1108 0012 074B     		ldr	r3, .L62
 1109 0014 1B68     		ldr	r3, [r3]
 1110 0016 00E0     		b	.L60
 1111              	.L59:
 1112              		.loc 1 1349 0 discriminator 2
 1113 0018 7B68     		ldr	r3, [r7, #4]
 1114              	.L60:
 1115              		.loc 1 1349 0 discriminator 4
 1116 001a FB60     		str	r3, [r7, #12]
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1117              		.loc 1 1350 0 is_stmt 1 discriminator 4
 1118 001c FB68     		ldr	r3, [r7, #12]
 1119 001e DB6A     		ldr	r3, [r3, #44]
 1120 0020 BB60     		str	r3, [r7, #8]
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccJ0Dfhq.s 			page 48


1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1121              		.loc 1 1352 0 discriminator 4
 1122 0022 FFF7FEFF 		bl	vPortExitCritical
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 1123              		.loc 1 1354 0 discriminator 4
 1124 0026 BB68     		ldr	r3, [r7, #8]
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1125              		.loc 1 1355 0 discriminator 4
 1126 0028 1846     		mov	r0, r3
 1127 002a 1037     		adds	r7, r7, #16
 1128              	.LCFI33:
 1129              		.cfi_def_cfa_offset 8
 1130 002c BD46     		mov	sp, r7
 1131              	.LCFI34:
 1132              		.cfi_def_cfa_register 13
 1133              		@ sp needed
 1134 002e 80BD     		pop	{r7, pc}
 1135              	.L63:
 1136              		.align	2
 1137              	.L62:
 1138 0030 00000000 		.word	pxCurrentTCB
 1139              		.cfi_endproc
 1140              	.LFE11:
 1142              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1143              		.align	2
 1144              		.global	uxTaskPriorityGetFromISR
 1145              		.thumb
 1146              		.thumb_func
 1148              	uxTaskPriorityGetFromISR:
 1149              	.LFB12:
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1150              		.loc 1 1363 0
 1151              		.cfi_startproc
 1152              		@ args = 0, pretend = 0, frame = 32
 1153              		@ frame_needed = 1, uses_anonymous_args = 0
 1154 0000 80B5     		push	{r7, lr}
 1155              	.LCFI35:
 1156              		.cfi_def_cfa_offset 8
 1157              		.cfi_offset 7, -8
 1158              		.cfi_offset 14, -4
 1159 0002 88B0     		sub	sp, sp, #32
 1160              	.LCFI36:
 1161              		.cfi_def_cfa_offset 40
 1162 0004 00AF     		add	r7, sp, #0
 1163              	.LCFI37:
 1164              		.cfi_def_cfa_register 7
 1165 0006 7860     		str	r0, [r7, #4]
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
ARM GAS  /tmp/ccJ0Dfhq.s 			page 49


1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1166              		.loc 1 1383 0
 1167 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1168              	.LBB111:
 1169              	.LBB112:
 238:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 239:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 240:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 241:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 242:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 243:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 244:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 245:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 246:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 247:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 248:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 249:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 250:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 251:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 252:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1170              		.loc 2 253 0
 1171              	@ 253 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1172 000c EFF31182 			mrs r2, basepri											
 1173 0010 4FF05003 		mov r3, #80												
 1174 0014 83F31188 		msr basepri, r3											
 1175 0018 BFF36F8F 		isb														
 1176 001c BFF34F8F 		dsb														
 1177              	
 1178              	@ 0 "" 2
 1179              		.thumb
 1180 0020 3A61     		str	r2, [r7, #16]
 1181 0022 FB60     		str	r3, [r7, #12]
 254:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 255:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 256:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 257:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 258:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 259:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 260:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
ARM GAS  /tmp/ccJ0Dfhq.s 			page 50


 261:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 262:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 263:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 264:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 265:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 1182              		.loc 2 265 0
 1183 0024 3B69     		ldr	r3, [r7, #16]
 1184              	.LBE112:
 1185              	.LBE111:
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 1186              		.loc 1 1385 0
 1187 0026 FB61     		str	r3, [r7, #28]
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1188              		.loc 1 1389 0
 1189 0028 7B68     		ldr	r3, [r7, #4]
 1190 002a 002B     		cmp	r3, #0
 1191 002c 02D1     		bne	.L66
 1192              		.loc 1 1389 0 is_stmt 0 discriminator 1
 1193 002e 094B     		ldr	r3, .L69
 1194 0030 1B68     		ldr	r3, [r3]
 1195 0032 00E0     		b	.L67
 1196              	.L66:
 1197              		.loc 1 1389 0 discriminator 2
 1198 0034 7B68     		ldr	r3, [r7, #4]
 1199              	.L67:
 1200              		.loc 1 1389 0 discriminator 4
 1201 0036 BB61     		str	r3, [r7, #24]
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1202              		.loc 1 1390 0 is_stmt 1 discriminator 4
 1203 0038 BB69     		ldr	r3, [r7, #24]
 1204 003a DB6A     		ldr	r3, [r3, #44]
 1205 003c 7B61     		str	r3, [r7, #20]
 1206 003e FB69     		ldr	r3, [r7, #28]
 1207 0040 BB60     		str	r3, [r7, #8]
 1208              	.LBB113:
 1209              	.LBB114:
 266:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 267:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 268:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 269:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 270:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 271:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1210              		.loc 2 271 0 discriminator 4
 1211 0042 BB68     		ldr	r3, [r7, #8]
 1212              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1213 0044 83F31188 			msr basepri, r3	
 1214              	@ 0 "" 2
 1215              		.thumb
 1216              	.LBE114:
 1217              	.LBE113:
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccJ0Dfhq.s 			page 51


1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 1218              		.loc 1 1394 0 discriminator 4
 1219 0048 7B69     		ldr	r3, [r7, #20]
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1220              		.loc 1 1395 0 discriminator 4
 1221 004a 1846     		mov	r0, r3
 1222 004c 2037     		adds	r7, r7, #32
 1223              	.LCFI38:
 1224              		.cfi_def_cfa_offset 8
 1225 004e BD46     		mov	sp, r7
 1226              	.LCFI39:
 1227              		.cfi_def_cfa_register 13
 1228              		@ sp needed
 1229 0050 80BD     		pop	{r7, pc}
 1230              	.L70:
 1231 0052 00BF     		.align	2
 1232              	.L69:
 1233 0054 00000000 		.word	pxCurrentTCB
 1234              		.cfi_endproc
 1235              	.LFE12:
 1237              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1238              		.align	2
 1239              		.global	vTaskPrioritySet
 1240              		.thumb
 1241              		.thumb_func
 1243              	vTaskPrioritySet:
 1244              	.LFB13:
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1245              		.loc 1 1403 0
 1246              		.cfi_startproc
 1247              		@ args = 0, pretend = 0, frame = 32
 1248              		@ frame_needed = 1, uses_anonymous_args = 0
 1249 0000 80B5     		push	{r7, lr}
 1250              	.LCFI40:
 1251              		.cfi_def_cfa_offset 8
 1252              		.cfi_offset 7, -8
 1253              		.cfi_offset 14, -4
 1254 0002 88B0     		sub	sp, sp, #32
 1255              	.LCFI41:
 1256              		.cfi_def_cfa_offset 40
 1257 0004 00AF     		add	r7, sp, #0
 1258              	.LCFI42:
 1259              		.cfi_def_cfa_register 7
 1260 0006 7860     		str	r0, [r7, #4]
 1261 0008 3960     		str	r1, [r7]
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1262              		.loc 1 1406 0
 1263 000a 0023     		movs	r3, #0
ARM GAS  /tmp/ccJ0Dfhq.s 			page 52


 1264 000c FB61     		str	r3, [r7, #28]
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 1265              		.loc 1 1408 0
 1266 000e 3B68     		ldr	r3, [r7]
 1267 0010 062B     		cmp	r3, #6
 1268 0012 09D9     		bls	.L72
 1269              	.LBB115:
 1270              	.LBB116:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1271              		.loc 2 237 0 discriminator 1
 1272              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1273 0014 4FF05003 			mov r3, #80												
 1274 0018 83F31188 		msr basepri, r3											
 1275 001c BFF36F8F 		isb														
 1276 0020 BFF34F8F 		dsb														
 1277              	
 1278              	@ 0 "" 2
 1279              		.thumb
 1280 0024 FB60     		str	r3, [r7, #12]
 1281              	.L73:
 1282              	.LBE116:
 1283              	.LBE115:
 1284              		.loc 1 1408 0 discriminator 1
 1285 0026 FEE7     		b	.L73
 1286              	.L72:
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 1287              		.loc 1 1411 0
 1288 0028 3B68     		ldr	r3, [r7]
 1289 002a 062B     		cmp	r3, #6
 1290 002c 01D9     		bls	.L74
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1291              		.loc 1 1413 0
 1292 002e 0623     		movs	r3, #6
 1293 0030 3B60     		str	r3, [r7]
 1294              	.L74:
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1295              		.loc 1 1420 0
 1296 0032 FFF7FEFF 		bl	vPortEnterCritical
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1297              		.loc 1 1424 0
 1298 0036 7B68     		ldr	r3, [r7, #4]
 1299 0038 002B     		cmp	r3, #0
 1300 003a 02D1     		bne	.L75
 1301              		.loc 1 1424 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccJ0Dfhq.s 			page 53


 1302 003c 434B     		ldr	r3, .L86
 1303 003e 1B68     		ldr	r3, [r3]
 1304 0040 00E0     		b	.L76
 1305              	.L75:
 1306              		.loc 1 1424 0 discriminator 2
 1307 0042 7B68     		ldr	r3, [r7, #4]
 1308              	.L76:
 1309              		.loc 1 1424 0 discriminator 4
 1310 0044 BB61     		str	r3, [r7, #24]
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
 1311              		.loc 1 1430 0 is_stmt 1 discriminator 4
 1312 0046 BB69     		ldr	r3, [r7, #24]
 1313 0048 5B6C     		ldr	r3, [r3, #68]
 1314 004a 7B61     		str	r3, [r7, #20]
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
 1315              		.loc 1 1438 0 discriminator 4
 1316 004c 7A69     		ldr	r2, [r7, #20]
 1317 004e 3B68     		ldr	r3, [r7]
 1318 0050 9A42     		cmp	r2, r3
 1319 0052 76D0     		beq	.L77
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
 1320              		.loc 1 1442 0
 1321 0054 3A68     		ldr	r2, [r7]
 1322 0056 7B69     		ldr	r3, [r7, #20]
 1323 0058 9A42     		cmp	r2, r3
 1324 005a 0DD9     		bls	.L78
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
 1325              		.loc 1 1444 0
 1326 005c 3B4B     		ldr	r3, .L86
 1327 005e 1B68     		ldr	r3, [r3]
 1328 0060 BA69     		ldr	r2, [r7, #24]
 1329 0062 9A42     		cmp	r2, r3
 1330 0064 0FD0     		beq	.L79
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 1331              		.loc 1 1449 0
 1332 0066 394B     		ldr	r3, .L86
 1333 0068 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccJ0Dfhq.s 			page 54


 1334 006a DA6A     		ldr	r2, [r3, #44]
 1335 006c 3B68     		ldr	r3, [r7]
 1336 006e 9A42     		cmp	r2, r3
 1337 0070 09D8     		bhi	.L79
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
 1338              		.loc 1 1451 0
 1339 0072 0123     		movs	r3, #1
 1340 0074 FB61     		str	r3, [r7, #28]
 1341 0076 06E0     		b	.L79
 1342              	.L78:
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
 1343              		.loc 1 1465 0
 1344 0078 344B     		ldr	r3, .L86
 1345 007a 1B68     		ldr	r3, [r3]
 1346 007c BA69     		ldr	r2, [r7, #24]
 1347 007e 9A42     		cmp	r2, r3
 1348 0080 01D1     		bne	.L79
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
 1349              		.loc 1 1470 0
 1350 0082 0123     		movs	r3, #1
 1351 0084 FB61     		str	r3, [r7, #28]
 1352              	.L79:
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1353              		.loc 1 1482 0
 1354 0086 BB69     		ldr	r3, [r7, #24]
 1355 0088 DB6A     		ldr	r3, [r3, #44]
 1356 008a 3B61     		str	r3, [r7, #16]
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccJ0Dfhq.s 			page 55


1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 1357              		.loc 1 1488 0
 1358 008c BB69     		ldr	r3, [r7, #24]
 1359 008e 5A6C     		ldr	r2, [r3, #68]
 1360 0090 BB69     		ldr	r3, [r7, #24]
 1361 0092 DB6A     		ldr	r3, [r3, #44]
 1362 0094 9A42     		cmp	r2, r3
 1363 0096 02D1     		bne	.L80
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 1364              		.loc 1 1490 0
 1365 0098 BB69     		ldr	r3, [r7, #24]
 1366 009a 3A68     		ldr	r2, [r7]
 1367 009c DA62     		str	r2, [r3, #44]
 1368              	.L80:
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 1369              		.loc 1 1498 0
 1370 009e BB69     		ldr	r3, [r7, #24]
 1371 00a0 3A68     		ldr	r2, [r7]
 1372 00a2 5A64     		str	r2, [r3, #68]
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 1373              		.loc 1 1508 0
 1374 00a4 BB69     		ldr	r3, [r7, #24]
 1375 00a6 9B69     		ldr	r3, [r3, #24]
 1376 00a8 002B     		cmp	r3, #0
 1377 00aa 04DB     		blt	.L81
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
 1378              		.loc 1 1510 0
 1379 00ac 3B68     		ldr	r3, [r7]
 1380 00ae C3F10702 		rsb	r2, r3, #7
 1381 00b2 BB69     		ldr	r3, [r7, #24]
 1382 00b4 9A61     		str	r2, [r3, #24]
 1383              	.L81:
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccJ0Dfhq.s 			page 56


1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change it's priority variable. However, if
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
 1384              		.loc 1 1521 0
 1385 00b6 BB69     		ldr	r3, [r7, #24]
 1386 00b8 5969     		ldr	r1, [r3, #20]
 1387 00ba 3A69     		ldr	r2, [r7, #16]
 1388 00bc 1346     		mov	r3, r2
 1389 00be 9B00     		lsls	r3, r3, #2
 1390 00c0 1344     		add	r3, r3, r2
 1391 00c2 9B00     		lsls	r3, r3, #2
 1392 00c4 224A     		ldr	r2, .L86+4
 1393 00c6 1344     		add	r3, r3, r2
 1394 00c8 9942     		cmp	r1, r3
 1395 00ca 01D1     		bne	.L82
 1396              		.loc 1 1521 0 is_stmt 0 discriminator 1
 1397 00cc 0123     		movs	r3, #1
 1398 00ce 00E0     		b	.L83
 1399              	.L82:
 1400              		.loc 1 1521 0 discriminator 2
 1401 00d0 0023     		movs	r3, #0
 1402              	.L83:
 1403              		.loc 1 1521 0 discriminator 4
 1404 00d2 002B     		cmp	r3, #0
 1405 00d4 2AD0     		beq	.L84
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before adding
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					can do this even if the scheduler is suspended. */
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1406              		.loc 1 1526 0 is_stmt 1
 1407 00d6 BB69     		ldr	r3, [r7, #24]
 1408 00d8 0433     		adds	r3, r3, #4
 1409 00da 1846     		mov	r0, r3
 1410 00dc FFF7FEFF 		bl	uxListRemove
 1411 00e0 0346     		mov	r3, r0
 1412 00e2 002B     		cmp	r3, #0
 1413 00e4 09D1     		bne	.L85
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 1414              		.loc 1 1531 0
 1415 00e6 3B69     		ldr	r3, [r7, #16]
 1416 00e8 0122     		movs	r2, #1
 1417 00ea 02FA03F3 		lsl	r3, r2, r3
 1418 00ee DA43     		mvns	r2, r3
 1419 00f0 184B     		ldr	r3, .L86+8
 1420 00f2 1B68     		ldr	r3, [r3]
 1421 00f4 1340     		ands	r3, r3, r2
 1422 00f6 174A     		ldr	r2, .L86+8
ARM GAS  /tmp/ccJ0Dfhq.s 			page 57


 1423 00f8 1360     		str	r3, [r2]
 1424              	.L85:
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1425              		.loc 1 1537 0
 1426 00fa BB69     		ldr	r3, [r7, #24]
 1427 00fc DB6A     		ldr	r3, [r3, #44]
 1428 00fe 1A46     		mov	r2, r3
 1429 0100 0123     		movs	r3, #1
 1430 0102 03FA02F2 		lsl	r2, r3, r2
 1431 0106 134B     		ldr	r3, .L86+8
 1432 0108 1B68     		ldr	r3, [r3]
 1433 010a 1343     		orrs	r3, r3, r2
 1434 010c 114A     		ldr	r2, .L86+8
 1435 010e 1360     		str	r3, [r2]
 1436 0110 BB69     		ldr	r3, [r7, #24]
 1437 0112 DA6A     		ldr	r2, [r3, #44]
 1438 0114 1346     		mov	r3, r2
 1439 0116 9B00     		lsls	r3, r3, #2
 1440 0118 1344     		add	r3, r3, r2
 1441 011a 9B00     		lsls	r3, r3, #2
 1442 011c 0C4A     		ldr	r2, .L86+4
 1443 011e 1A44     		add	r2, r2, r3
 1444 0120 BB69     		ldr	r3, [r7, #24]
 1445 0122 0433     		adds	r3, r3, #4
 1446 0124 1046     		mov	r0, r2
 1447 0126 1946     		mov	r1, r3
 1448 0128 FFF7FEFF 		bl	vListInsertEnd
 1449              	.L84:
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
 1450              		.loc 1 1544 0
 1451 012c FB69     		ldr	r3, [r7, #28]
 1452 012e 002B     		cmp	r3, #0
 1453 0130 07D0     		beq	.L77
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 1454              		.loc 1 1546 0
 1455 0132 094B     		ldr	r3, .L86+12
 1456 0134 4FF08052 		mov	r2, #268435456
 1457 0138 1A60     		str	r2, [r3]
 1458              	@ 1546 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1459 013a BFF34F8F 		dsb
 1460              	@ 0 "" 2
 1461              	@ 1546 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1462 013e BFF36F8F 		isb
 1463              	@ 0 "" 2
 1464              		.thumb
ARM GAS  /tmp/ccJ0Dfhq.s 			page 58


 1465              	.L77:
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1466              		.loc 1 1558 0
 1467 0142 FFF7FEFF 		bl	vPortExitCritical
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1468              		.loc 1 1559 0
 1469 0146 2037     		adds	r7, r7, #32
 1470              	.LCFI43:
 1471              		.cfi_def_cfa_offset 8
 1472 0148 BD46     		mov	sp, r7
 1473              	.LCFI44:
 1474              		.cfi_def_cfa_register 13
 1475              		@ sp needed
 1476 014a 80BD     		pop	{r7, pc}
 1477              	.L87:
 1478              		.align	2
 1479              	.L86:
 1480 014c 00000000 		.word	pxCurrentTCB
 1481 0150 00000000 		.word	pxReadyTasksLists
 1482 0154 00000000 		.word	uxTopReadyPriority
 1483 0158 04ED00E0 		.word	-536810236
 1484              		.cfi_endproc
 1485              	.LFE13:
 1487              		.section	.text.vTaskSuspend,"ax",%progbits
 1488              		.align	2
 1489              		.global	vTaskSuspend
 1490              		.thumb
 1491              		.thumb_func
 1493              	vTaskSuspend:
 1494              	.LFB14:
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1495              		.loc 1 1567 0
 1496              		.cfi_startproc
 1497              		@ args = 0, pretend = 0, frame = 16
 1498              		@ frame_needed = 1, uses_anonymous_args = 0
 1499 0000 80B5     		push	{r7, lr}
 1500              	.LCFI45:
 1501              		.cfi_def_cfa_offset 8
 1502              		.cfi_offset 7, -8
ARM GAS  /tmp/ccJ0Dfhq.s 			page 59


 1503              		.cfi_offset 14, -4
 1504 0002 84B0     		sub	sp, sp, #16
 1505              	.LCFI46:
 1506              		.cfi_def_cfa_offset 24
 1507 0004 00AF     		add	r7, sp, #0
 1508              	.LCFI47:
 1509              		.cfi_def_cfa_register 7
 1510 0006 7860     		str	r0, [r7, #4]
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1511              		.loc 1 1570 0
 1512 0008 FFF7FEFF 		bl	vPortEnterCritical
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1513              		.loc 1 1574 0
 1514 000c 7B68     		ldr	r3, [r7, #4]
 1515 000e 002B     		cmp	r3, #0
 1516 0010 02D1     		bne	.L89
 1517              		.loc 1 1574 0 is_stmt 0 discriminator 1
 1518 0012 364B     		ldr	r3, .L101
 1519 0014 1B68     		ldr	r3, [r3]
 1520 0016 00E0     		b	.L90
 1521              	.L89:
 1522              		.loc 1 1574 0 discriminator 2
 1523 0018 7B68     		ldr	r3, [r7, #4]
 1524              	.L90:
 1525              		.loc 1 1574 0 discriminator 4
 1526 001a FB60     		str	r3, [r7, #12]
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1527              		.loc 1 1580 0 is_stmt 1 discriminator 4
 1528 001c FB68     		ldr	r3, [r7, #12]
 1529 001e 0433     		adds	r3, r3, #4
 1530 0020 1846     		mov	r0, r3
 1531 0022 FFF7FEFF 		bl	uxListRemove
 1532 0026 0346     		mov	r3, r0
 1533 0028 002B     		cmp	r3, #0
 1534 002a 15D1     		bne	.L91
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 1535              		.loc 1 1582 0
 1536 002c FB68     		ldr	r3, [r7, #12]
 1537 002e DA6A     		ldr	r2, [r3, #44]
 1538 0030 2F49     		ldr	r1, .L101+4
 1539 0032 1346     		mov	r3, r2
 1540 0034 9B00     		lsls	r3, r3, #2
 1541 0036 1344     		add	r3, r3, r2
 1542 0038 9B00     		lsls	r3, r3, #2
 1543 003a 0B44     		add	r3, r3, r1
 1544 003c 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccJ0Dfhq.s 			page 60


 1545 003e 002B     		cmp	r3, #0
 1546 0040 0AD1     		bne	.L91
 1547              		.loc 1 1582 0 is_stmt 0 discriminator 1
 1548 0042 FB68     		ldr	r3, [r7, #12]
 1549 0044 DB6A     		ldr	r3, [r3, #44]
 1550 0046 1A46     		mov	r2, r3
 1551 0048 0123     		movs	r3, #1
 1552 004a 9340     		lsls	r3, r3, r2
 1553 004c DA43     		mvns	r2, r3
 1554 004e 294B     		ldr	r3, .L101+8
 1555 0050 1B68     		ldr	r3, [r3]
 1556 0052 1340     		ands	r3, r3, r2
 1557 0054 274A     		ldr	r2, .L101+8
 1558 0056 1360     		str	r3, [r2]
 1559              	.L91:
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1560              		.loc 1 1590 0 is_stmt 1
 1561 0058 FB68     		ldr	r3, [r7, #12]
 1562 005a 9B6A     		ldr	r3, [r3, #40]
 1563 005c 002B     		cmp	r3, #0
 1564 005e 04D0     		beq	.L93
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1565              		.loc 1 1592 0
 1566 0060 FB68     		ldr	r3, [r7, #12]
 1567 0062 1833     		adds	r3, r3, #24
 1568 0064 1846     		mov	r0, r3
 1569 0066 FFF7FEFF 		bl	uxListRemove
 1570              	.L93:
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 1571              		.loc 1 1599 0
 1572 006a FB68     		ldr	r3, [r7, #12]
 1573 006c 0433     		adds	r3, r3, #4
 1574 006e 2248     		ldr	r0, .L101+12
 1575 0070 1946     		mov	r1, r3
 1576 0072 FFF7FEFF 		bl	vListInsertEnd
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1577              		.loc 1 1601 0
 1578 0076 FFF7FEFF 		bl	vPortExitCritical
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 1579              		.loc 1 1603 0
 1580 007a 204B     		ldr	r3, .L101+16
ARM GAS  /tmp/ccJ0Dfhq.s 			page 61


 1581 007c 1B68     		ldr	r3, [r3]
 1582 007e 002B     		cmp	r3, #0
 1583 0080 05D0     		beq	.L94
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 1584              		.loc 1 1607 0
 1585 0082 FFF7FEFF 		bl	vPortEnterCritical
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 1586              		.loc 1 1609 0
 1587 0086 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 1588              		.loc 1 1611 0
 1589 008a FFF7FEFF 		bl	vPortExitCritical
 1590              	.L94:
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1591              		.loc 1 1618 0
 1592 008e 174B     		ldr	r3, .L101
 1593 0090 1B68     		ldr	r3, [r3]
 1594 0092 FA68     		ldr	r2, [r7, #12]
 1595 0094 9A42     		cmp	r2, r3
 1596 0096 26D1     		bne	.L88
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 1597              		.loc 1 1620 0
 1598 0098 184B     		ldr	r3, .L101+16
 1599 009a 1B68     		ldr	r3, [r3]
 1600 009c 002B     		cmp	r3, #0
 1601 009e 16D0     		beq	.L96
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 1602              		.loc 1 1623 0
 1603 00a0 174B     		ldr	r3, .L101+20
 1604 00a2 1B68     		ldr	r3, [r3]
 1605 00a4 002B     		cmp	r3, #0
 1606 00a6 09D0     		beq	.L97
 1607              	.LBB117:
 1608              	.LBB118:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1609              		.loc 2 237 0 discriminator 1
 1610              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1611 00a8 4FF05003 			mov r3, #80												
 1612 00ac 83F31188 		msr basepri, r3											
 1613 00b0 BFF36F8F 		isb														
 1614 00b4 BFF34F8F 		dsb														
 1615              	
 1616              	@ 0 "" 2
ARM GAS  /tmp/ccJ0Dfhq.s 			page 62


 1617              		.thumb
 1618 00b8 BB60     		str	r3, [r7, #8]
 1619              	.L98:
 1620              	.LBE118:
 1621              	.LBE117:
 1622              		.loc 1 1623 0 discriminator 1
 1623 00ba FEE7     		b	.L98
 1624              	.L97:
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1625              		.loc 1 1624 0
 1626 00bc 114B     		ldr	r3, .L101+24
 1627 00be 4FF08052 		mov	r2, #268435456
 1628 00c2 1A60     		str	r2, [r3]
 1629              	@ 1624 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1630 00c4 BFF34F8F 		dsb
 1631              	@ 0 "" 2
 1632              	@ 1624 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1633 00c8 BFF36F8F 		isb
 1634              	@ 0 "" 2
 1635              		.thumb
 1636 00cc 0BE0     		b	.L88
 1637              	.L96:
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 1638              		.loc 1 1631 0
 1639 00ce 0A4B     		ldr	r3, .L101+12
 1640 00d0 1A68     		ldr	r2, [r3]
 1641 00d2 0D4B     		ldr	r3, .L101+28
 1642 00d4 1B68     		ldr	r3, [r3]
 1643 00d6 9A42     		cmp	r2, r3
 1644 00d8 03D1     		bne	.L100
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
 1645              		.loc 1 1637 0
 1646 00da 044B     		ldr	r3, .L101
 1647 00dc 0022     		movs	r2, #0
 1648 00de 1A60     		str	r2, [r3]
 1649 00e0 01E0     		b	.L88
 1650              	.L100:
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
 1651              		.loc 1 1641 0
 1652 00e2 FFF7FEFF 		bl	vTaskSwitchContext
 1653              	.L88:
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccJ0Dfhq.s 			page 63


1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1654              		.loc 1 1649 0
 1655 00e6 1037     		adds	r7, r7, #16
 1656              	.LCFI48:
 1657              		.cfi_def_cfa_offset 8
 1658 00e8 BD46     		mov	sp, r7
 1659              	.LCFI49:
 1660              		.cfi_def_cfa_register 13
 1661              		@ sp needed
 1662 00ea 80BD     		pop	{r7, pc}
 1663              	.L102:
 1664              		.align	2
 1665              	.L101:
 1666 00ec 00000000 		.word	pxCurrentTCB
 1667 00f0 00000000 		.word	pxReadyTasksLists
 1668 00f4 00000000 		.word	uxTopReadyPriority
 1669 00f8 00000000 		.word	xSuspendedTaskList
 1670 00fc 00000000 		.word	xSchedulerRunning
 1671 0100 00000000 		.word	uxSchedulerSuspended
 1672 0104 04ED00E0 		.word	-536810236
 1673 0108 00000000 		.word	uxCurrentNumberOfTasks
 1674              		.cfi_endproc
 1675              	.LFE14:
 1677              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
 1678              		.align	2
 1679              		.thumb
 1680              		.thumb_func
 1682              	prvTaskIsTaskSuspended:
 1683              	.LFB15:
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1684              		.loc 1 1657 0
 1685              		.cfi_startproc
 1686              		@ args = 0, pretend = 0, frame = 24
 1687              		@ frame_needed = 1, uses_anonymous_args = 0
 1688              		@ link register save eliminated.
 1689 0000 80B4     		push	{r7}
 1690              	.LCFI50:
 1691              		.cfi_def_cfa_offset 4
 1692              		.cfi_offset 7, -4
 1693 0002 87B0     		sub	sp, sp, #28
 1694              	.LCFI51:
 1695              		.cfi_def_cfa_offset 32
 1696 0004 00AF     		add	r7, sp, #0
 1697              	.LCFI52:
 1698              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccJ0Dfhq.s 			page 64


 1699 0006 7860     		str	r0, [r7, #4]
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 1700              		.loc 1 1658 0
 1701 0008 0023     		movs	r3, #0
 1702 000a 7B61     		str	r3, [r7, #20]
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 1703              		.loc 1 1659 0
 1704 000c 7B68     		ldr	r3, [r7, #4]
 1705 000e 3B61     		str	r3, [r7, #16]
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
 1706              		.loc 1 1665 0
 1707 0010 7B68     		ldr	r3, [r7, #4]
 1708 0012 002B     		cmp	r3, #0
 1709 0014 09D1     		bne	.L104
 1710              	.LBB119:
 1711              	.LBB120:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1712              		.loc 2 237 0 discriminator 1
 1713              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1714 0016 4FF05003 			mov r3, #80												
 1715 001a 83F31188 		msr basepri, r3											
 1716 001e BFF36F8F 		isb														
 1717 0022 BFF34F8F 		dsb														
 1718              	
 1719              	@ 0 "" 2
 1720              		.thumb
 1721 0026 FB60     		str	r3, [r7, #12]
 1722              	.L105:
 1723              	.LBE120:
 1724              	.LBE119:
 1725              		.loc 1 1665 0 discriminator 1
 1726 0028 FEE7     		b	.L105
 1727              	.L104:
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 1728              		.loc 1 1668 0
 1729 002a 3B69     		ldr	r3, [r7, #16]
 1730 002c 5B69     		ldr	r3, [r3, #20]
 1731 002e 0F4A     		ldr	r2, .L112
 1732 0030 9342     		cmp	r3, r2
 1733 0032 01D1     		bne	.L106
 1734              		.loc 1 1668 0 is_stmt 0 discriminator 1
 1735 0034 0123     		movs	r3, #1
 1736 0036 00E0     		b	.L107
 1737              	.L106:
 1738              		.loc 1 1668 0 discriminator 2
 1739 0038 0023     		movs	r3, #0
 1740              	.L107:
 1741              		.loc 1 1668 0 discriminator 4
 1742 003a 002B     		cmp	r3, #0
 1743 003c 0FD0     		beq	.L108
ARM GAS  /tmp/ccJ0Dfhq.s 			page 65


1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 1744              		.loc 1 1671 0 is_stmt 1
 1745 003e 3B69     		ldr	r3, [r7, #16]
 1746 0040 9B6A     		ldr	r3, [r3, #40]
 1747 0042 0B4A     		ldr	r2, .L112+4
 1748 0044 9342     		cmp	r3, r2
 1749 0046 0AD0     		beq	.L108
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 1750              		.loc 1 1675 0
 1751 0048 3B69     		ldr	r3, [r7, #16]
 1752 004a 9B6A     		ldr	r3, [r3, #40]
 1753 004c 002B     		cmp	r3, #0
 1754 004e 01D1     		bne	.L109
 1755              		.loc 1 1675 0 is_stmt 0 discriminator 1
 1756 0050 0123     		movs	r3, #1
 1757 0052 00E0     		b	.L110
 1758              	.L109:
 1759              		.loc 1 1675 0 discriminator 2
 1760 0054 0023     		movs	r3, #0
 1761              	.L110:
 1762              		.loc 1 1675 0 discriminator 4
 1763 0056 002B     		cmp	r3, #0
 1764 0058 01D0     		beq	.L108
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 1765              		.loc 1 1677 0 is_stmt 1
 1766 005a 0123     		movs	r3, #1
 1767 005c 7B61     		str	r3, [r7, #20]
 1768              	.L108:
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 1769              		.loc 1 1694 0
 1770 005e 7B69     		ldr	r3, [r7, #20]
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1771              		.loc 1 1695 0
 1772 0060 1846     		mov	r0, r3
 1773 0062 1C37     		adds	r7, r7, #28
ARM GAS  /tmp/ccJ0Dfhq.s 			page 66


 1774              	.LCFI53:
 1775              		.cfi_def_cfa_offset 4
 1776 0064 BD46     		mov	sp, r7
 1777              	.LCFI54:
 1778              		.cfi_def_cfa_register 13
 1779              		@ sp needed
 1780 0066 5DF8047B 		ldr	r7, [sp], #4
 1781              	.LCFI55:
 1782              		.cfi_restore 7
 1783              		.cfi_def_cfa_offset 0
 1784 006a 7047     		bx	lr
 1785              	.L113:
 1786              		.align	2
 1787              	.L112:
 1788 006c 00000000 		.word	xSuspendedTaskList
 1789 0070 00000000 		.word	xPendingReadyList
 1790              		.cfi_endproc
 1791              	.LFE15:
 1793              		.section	.text.vTaskResume,"ax",%progbits
 1794              		.align	2
 1795              		.global	vTaskResume
 1796              		.thumb
 1797              		.thumb_func
 1799              	vTaskResume:
 1800              	.LFB16:
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1801              		.loc 1 1703 0
 1802              		.cfi_startproc
 1803              		@ args = 0, pretend = 0, frame = 16
 1804              		@ frame_needed = 1, uses_anonymous_args = 0
 1805 0000 80B5     		push	{r7, lr}
 1806              	.LCFI56:
 1807              		.cfi_def_cfa_offset 8
 1808              		.cfi_offset 7, -8
 1809              		.cfi_offset 14, -4
 1810 0002 84B0     		sub	sp, sp, #16
 1811              	.LCFI57:
 1812              		.cfi_def_cfa_offset 24
 1813 0004 00AF     		add	r7, sp, #0
 1814              	.LCFI58:
 1815              		.cfi_def_cfa_register 7
 1816 0006 7860     		str	r0, [r7, #4]
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1817              		.loc 1 1704 0
 1818 0008 7B68     		ldr	r3, [r7, #4]
 1819 000a FB60     		str	r3, [r7, #12]
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 1820              		.loc 1 1707 0
ARM GAS  /tmp/ccJ0Dfhq.s 			page 67


 1821 000c 7B68     		ldr	r3, [r7, #4]
 1822 000e 002B     		cmp	r3, #0
 1823 0010 09D1     		bne	.L115
 1824              	.LBB121:
 1825              	.LBB122:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1826              		.loc 2 237 0 discriminator 1
 1827              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1828 0012 4FF05003 			mov r3, #80												
 1829 0016 83F31188 		msr basepri, r3											
 1830 001a BFF36F8F 		isb														
 1831 001e BFF34F8F 		dsb														
 1832              	
 1833              	@ 0 "" 2
 1834              		.thumb
 1835 0022 BB60     		str	r3, [r7, #8]
 1836              	.L116:
 1837              	.LBE122:
 1838              	.LBE121:
 1839              		.loc 1 1707 0 discriminator 1
 1840 0024 FEE7     		b	.L116
 1841              	.L115:
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 1842              		.loc 1 1711 0
 1843 0026 FB68     		ldr	r3, [r7, #12]
 1844 0028 002B     		cmp	r3, #0
 1845 002a 3BD0     		beq	.L114
 1846              		.loc 1 1711 0 is_stmt 0 discriminator 1
 1847 002c 1F4B     		ldr	r3, .L119
 1848 002e 1B68     		ldr	r3, [r3]
 1849 0030 FA68     		ldr	r2, [r7, #12]
 1850 0032 9A42     		cmp	r2, r3
 1851 0034 36D0     		beq	.L114
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 1852              		.loc 1 1713 0 is_stmt 1
 1853 0036 FFF7FEFF 		bl	vPortEnterCritical
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 1854              		.loc 1 1715 0
 1855 003a F868     		ldr	r0, [r7, #12]
 1856 003c FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1857 0040 0346     		mov	r3, r0
 1858 0042 002B     		cmp	r3, #0
 1859 0044 2CD0     		beq	.L118
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* As we are in a critical section we can access the ready
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					lists even if the scheduler is suspended. */
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 1860              		.loc 1 1721 0
 1861 0046 FB68     		ldr	r3, [r7, #12]
 1862 0048 0433     		adds	r3, r3, #4
ARM GAS  /tmp/ccJ0Dfhq.s 			page 68


 1863 004a 1846     		mov	r0, r3
 1864 004c FFF7FEFF 		bl	uxListRemove
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1865              		.loc 1 1722 0
 1866 0050 FB68     		ldr	r3, [r7, #12]
 1867 0052 DB6A     		ldr	r3, [r3, #44]
 1868 0054 1A46     		mov	r2, r3
 1869 0056 0123     		movs	r3, #1
 1870 0058 03FA02F2 		lsl	r2, r3, r2
 1871 005c 144B     		ldr	r3, .L119+4
 1872 005e 1B68     		ldr	r3, [r3]
 1873 0060 1343     		orrs	r3, r3, r2
 1874 0062 134A     		ldr	r2, .L119+4
 1875 0064 1360     		str	r3, [r2]
 1876 0066 FB68     		ldr	r3, [r7, #12]
 1877 0068 DA6A     		ldr	r2, [r3, #44]
 1878 006a 1346     		mov	r3, r2
 1879 006c 9B00     		lsls	r3, r3, #2
 1880 006e 1344     		add	r3, r3, r2
 1881 0070 9B00     		lsls	r3, r3, #2
 1882 0072 104A     		ldr	r2, .L119+8
 1883 0074 1A44     		add	r2, r2, r3
 1884 0076 FB68     		ldr	r3, [r7, #12]
 1885 0078 0433     		adds	r3, r3, #4
 1886 007a 1046     		mov	r0, r2
 1887 007c 1946     		mov	r1, r3
 1888 007e FFF7FEFF 		bl	vListInsertEnd
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* We may have just resumed a higher priority task. */
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1889              		.loc 1 1725 0
 1890 0082 FB68     		ldr	r3, [r7, #12]
 1891 0084 DA6A     		ldr	r2, [r3, #44]
 1892 0086 094B     		ldr	r3, .L119
 1893 0088 1B68     		ldr	r3, [r3]
 1894 008a DB6A     		ldr	r3, [r3, #44]
 1895 008c 9A42     		cmp	r2, r3
 1896 008e 07D3     		bcc	.L118
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
 1897              		.loc 1 1730 0
 1898 0090 094B     		ldr	r3, .L119+12
 1899 0092 4FF08052 		mov	r2, #268435456
 1900 0096 1A60     		str	r2, [r3]
 1901              	@ 1730 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1902 0098 BFF34F8F 		dsb
 1903              	@ 0 "" 2
 1904              	@ 1730 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1905 009c BFF36F8F 		isb
 1906              	@ 0 "" 2
 1907              		.thumb
 1908              	.L118:
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
ARM GAS  /tmp/ccJ0Dfhq.s 			page 69


1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 1909              		.loc 1 1742 0
 1910 00a0 FFF7FEFF 		bl	vPortExitCritical
 1911              	.L114:
1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1912              		.loc 1 1748 0
 1913 00a4 1037     		adds	r7, r7, #16
 1914              	.LCFI59:
 1915              		.cfi_def_cfa_offset 8
 1916 00a6 BD46     		mov	sp, r7
 1917              	.LCFI60:
 1918              		.cfi_def_cfa_register 13
 1919              		@ sp needed
 1920 00a8 80BD     		pop	{r7, pc}
 1921              	.L120:
 1922 00aa 00BF     		.align	2
 1923              	.L119:
 1924 00ac 00000000 		.word	pxCurrentTCB
 1925 00b0 00000000 		.word	uxTopReadyPriority
 1926 00b4 00000000 		.word	pxReadyTasksLists
 1927 00b8 04ED00E0 		.word	-536810236
 1928              		.cfi_endproc
 1929              	.LFE16:
 1931              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1932              		.align	2
 1933              		.global	xTaskResumeFromISR
 1934              		.thumb
 1935              		.thumb_func
 1937              	xTaskResumeFromISR:
 1938              	.LFB17:
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1939              		.loc 1 1757 0
 1940              		.cfi_startproc
 1941              		@ args = 0, pretend = 0, frame = 40
 1942              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccJ0Dfhq.s 			page 70


 1943 0000 80B5     		push	{r7, lr}
 1944              	.LCFI61:
 1945              		.cfi_def_cfa_offset 8
 1946              		.cfi_offset 7, -8
 1947              		.cfi_offset 14, -4
 1948 0002 8AB0     		sub	sp, sp, #40
 1949              	.LCFI62:
 1950              		.cfi_def_cfa_offset 48
 1951 0004 00AF     		add	r7, sp, #0
 1952              	.LCFI63:
 1953              		.cfi_def_cfa_register 7
 1954 0006 7860     		str	r0, [r7, #4]
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1955              		.loc 1 1758 0
 1956 0008 0023     		movs	r3, #0
 1957 000a 7B62     		str	r3, [r7, #36]
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1958              		.loc 1 1759 0
 1959 000c 7B68     		ldr	r3, [r7, #4]
 1960 000e 3B62     		str	r3, [r7, #32]
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 1961              		.loc 1 1762 0
 1962 0010 7B68     		ldr	r3, [r7, #4]
 1963 0012 002B     		cmp	r3, #0
 1964 0014 09D1     		bne	.L122
 1965              	.LBB123:
 1966              	.LBB124:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1967              		.loc 2 237 0 discriminator 1
 1968              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1969 0016 4FF05003 			mov r3, #80												
 1970 001a 83F31188 		msr basepri, r3											
 1971 001e BFF36F8F 		isb														
 1972 0022 BFF34F8F 		dsb														
 1973              	
 1974              	@ 0 "" 2
 1975              		.thumb
 1976 0026 BB61     		str	r3, [r7, #24]
 1977              	.L123:
 1978              	.LBE124:
 1979              	.LBE123:
 1980              		.loc 1 1762 0 discriminator 1
 1981 0028 FEE7     		b	.L123
 1982              	.L122:
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
ARM GAS  /tmp/ccJ0Dfhq.s 			page 71


1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1983              		.loc 1 1780 0
 1984 002a FFF7FEFF 		bl	vPortValidateInterruptPriority
 1985              	.LBB125:
 1986              	.LBB126:
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1987              		.loc 2 253 0
 1988              	@ 253 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1989 002e EFF31182 			mrs r2, basepri											
 1990 0032 4FF05003 		mov r3, #80												
 1991 0036 83F31188 		msr basepri, r3											
 1992 003a BFF36F8F 		isb														
 1993 003e BFF34F8F 		dsb														
 1994              	
 1995              	@ 0 "" 2
 1996              		.thumb
 1997 0042 7A61     		str	r2, [r7, #20]
 1998 0044 3B61     		str	r3, [r7, #16]
 265:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 1999              		.loc 2 265 0
 2000 0046 7B69     		ldr	r3, [r7, #20]
 2001              	.LBE126:
 2002              	.LBE125:
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 2003              		.loc 1 1782 0
 2004 0048 FB61     		str	r3, [r7, #28]
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2005              		.loc 1 1784 0
 2006 004a 386A     		ldr	r0, [r7, #32]
 2007 004c FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2008 0050 0346     		mov	r3, r0
 2009 0052 002B     		cmp	r3, #0
 2010 0054 31D0     		beq	.L125
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2011              		.loc 1 1789 0
 2012 0056 1E4B     		ldr	r3, .L130
 2013 0058 1B68     		ldr	r3, [r3]
 2014 005a 002B     		cmp	r3, #0
 2015 005c 27D1     		bne	.L126
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2016              		.loc 1 1793 0
 2017 005e 3B6A     		ldr	r3, [r7, #32]
ARM GAS  /tmp/ccJ0Dfhq.s 			page 72


 2018 0060 DA6A     		ldr	r2, [r3, #44]
 2019 0062 1C4B     		ldr	r3, .L130+4
 2020 0064 1B68     		ldr	r3, [r3]
 2021 0066 DB6A     		ldr	r3, [r3, #44]
 2022 0068 9A42     		cmp	r2, r3
 2023 006a 01D3     		bcc	.L127
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
 2024              		.loc 1 1795 0
 2025 006c 0123     		movs	r3, #1
 2026 006e 7B62     		str	r3, [r7, #36]
 2027              	.L127:
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2028              		.loc 1 1802 0
 2029 0070 3B6A     		ldr	r3, [r7, #32]
 2030 0072 0433     		adds	r3, r3, #4
 2031 0074 1846     		mov	r0, r3
 2032 0076 FFF7FEFF 		bl	uxListRemove
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2033              		.loc 1 1803 0
 2034 007a 3B6A     		ldr	r3, [r7, #32]
 2035 007c DB6A     		ldr	r3, [r3, #44]
 2036 007e 1A46     		mov	r2, r3
 2037 0080 0123     		movs	r3, #1
 2038 0082 03FA02F2 		lsl	r2, r3, r2
 2039 0086 144B     		ldr	r3, .L130+8
 2040 0088 1B68     		ldr	r3, [r3]
 2041 008a 1343     		orrs	r3, r3, r2
 2042 008c 124A     		ldr	r2, .L130+8
 2043 008e 1360     		str	r3, [r2]
 2044 0090 3B6A     		ldr	r3, [r7, #32]
 2045 0092 DA6A     		ldr	r2, [r3, #44]
 2046 0094 1346     		mov	r3, r2
 2047 0096 9B00     		lsls	r3, r3, #2
 2048 0098 1344     		add	r3, r3, r2
 2049 009a 9B00     		lsls	r3, r3, #2
 2050 009c 0F4A     		ldr	r2, .L130+12
 2051 009e 1A44     		add	r2, r2, r3
 2052 00a0 3B6A     		ldr	r3, [r7, #32]
 2053 00a2 0433     		adds	r3, r3, #4
 2054 00a4 1046     		mov	r0, r2
 2055 00a6 1946     		mov	r1, r3
 2056 00a8 FFF7FEFF 		bl	vListInsertEnd
 2057 00ac 05E0     		b	.L125
 2058              	.L126:
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
ARM GAS  /tmp/ccJ0Dfhq.s 			page 73


1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 2059              		.loc 1 1810 0
 2060 00ae 3B6A     		ldr	r3, [r7, #32]
 2061 00b0 1833     		adds	r3, r3, #24
 2062 00b2 0B48     		ldr	r0, .L130+16
 2063 00b4 1946     		mov	r1, r3
 2064 00b6 FFF7FEFF 		bl	vListInsertEnd
 2065              	.L125:
 2066 00ba FB69     		ldr	r3, [r7, #28]
 2067 00bc FB60     		str	r3, [r7, #12]
 2068              	.LBB127:
 2069              	.LBB128:
 2070              		.loc 2 271 0
 2071 00be FB68     		ldr	r3, [r7, #12]
 2072              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2073 00c0 83F31188 			msr basepri, r3	
 2074              	@ 0 "" 2
 2075              		.thumb
 2076              	.LBE128:
 2077              	.LBE127:
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
 2078              		.loc 1 1820 0
 2079 00c4 7B6A     		ldr	r3, [r7, #36]
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2080              		.loc 1 1821 0
 2081 00c6 1846     		mov	r0, r3
 2082 00c8 2837     		adds	r7, r7, #40
 2083              	.LCFI64:
 2084              		.cfi_def_cfa_offset 8
 2085 00ca BD46     		mov	sp, r7
 2086              	.LCFI65:
 2087              		.cfi_def_cfa_register 13
 2088              		@ sp needed
 2089 00cc 80BD     		pop	{r7, pc}
 2090              	.L131:
 2091 00ce 00BF     		.align	2
 2092              	.L130:
 2093 00d0 00000000 		.word	uxSchedulerSuspended
 2094 00d4 00000000 		.word	pxCurrentTCB
 2095 00d8 00000000 		.word	uxTopReadyPriority
 2096 00dc 00000000 		.word	pxReadyTasksLists
 2097 00e0 00000000 		.word	xPendingReadyList
 2098              		.cfi_endproc
 2099              	.LFE17:
 2101              		.section	.rodata
 2102              		.align	2
 2103              	.LC0:
 2104 0000 49444C45 		.ascii	"IDLE\000"
ARM GAS  /tmp/ccJ0Dfhq.s 			page 74


 2104      00
 2105              		.section	.text.vTaskStartScheduler,"ax",%progbits
 2106              		.align	2
 2107              		.global	vTaskStartScheduler
 2108              		.thumb
 2109              		.thumb_func
 2111              	vTaskStartScheduler:
 2112              	.LFB18:
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2113              		.loc 1 1827 0
 2114              		.cfi_startproc
 2115              		@ args = 0, pretend = 0, frame = 16
 2116              		@ frame_needed = 1, uses_anonymous_args = 0
 2117 0000 80B5     		push	{r7, lr}
 2118              	.LCFI66:
 2119              		.cfi_def_cfa_offset 8
 2120              		.cfi_offset 7, -8
 2121              		.cfi_offset 14, -4
 2122 0002 86B0     		sub	sp, sp, #24
 2123              	.LCFI67:
 2124              		.cfi_def_cfa_offset 32
 2125 0004 02AF     		add	r7, sp, #8
 2126              	.LCFI68:
 2127              		.cfi_def_cfa 7, 24
1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												"IDLE",
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL,
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccJ0Dfhq.s 			page 75


1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
 2128              		.loc 1 1860 0
 2129 0006 0023     		movs	r3, #0
 2130 0008 0093     		str	r3, [sp]
 2131 000a 194B     		ldr	r3, .L136
 2132 000c 0193     		str	r3, [sp, #4]
 2133 000e 1948     		ldr	r0, .L136+4
 2134 0010 1949     		ldr	r1, .L136+8
 2135 0012 8022     		movs	r2, #128
 2136 0014 0023     		movs	r3, #0
 2137 0016 FFF7FEFF 		bl	xTaskCreate
 2138 001a F860     		str	r0, [r7, #12]
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								"IDLE", configMINIMAL_STACK_SIZE,
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
 2139              		.loc 1 1881 0
 2140 001c FB68     		ldr	r3, [r7, #12]
 2141 001e 012B     		cmp	r3, #1
 2142 0020 15D1     		bne	.L133
 2143              	.LBB129:
 2144              	.LBB130:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2145              		.loc 2 237 0
 2146              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2147 0022 4FF05003 			mov r3, #80												
 2148 0026 83F31188 		msr basepri, r3											
 2149 002a BFF36F8F 		isb														
 2150 002e BFF34F8F 		dsb														
 2151              	
 2152              	@ 0 "" 2
 2153              		.thumb
 2154 0032 BB60     		str	r3, [r7, #8]
 2155              	.LBE130:
 2156              	.LBE129:
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccJ0Dfhq.s 			page 76


1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first. */
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 2157              		.loc 1 1898 0
 2158 0034 114B     		ldr	r3, .L136+12
 2159 0036 4FF0FF32 		mov	r2, #-1
 2160 003a 1A60     		str	r2, [r3]
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2161              		.loc 1 1899 0
 2162 003c 104B     		ldr	r3, .L136+16
 2163 003e 0122     		movs	r2, #1
 2164 0040 1A60     		str	r2, [r3]
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 2165              		.loc 1 1900 0
 2166 0042 104B     		ldr	r3, .L136+20
 2167 0044 0022     		movs	r2, #0
 2168 0046 1A60     		str	r2, [r3]
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base. */
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 2169              		.loc 1 1909 0
 2170 0048 FFF7FEFF 		bl	xPortStartScheduler
 2171 004c 0DE0     		b	.L132
 2172              	.L133:
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
ARM GAS  /tmp/ccJ0Dfhq.s 			page 77


1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 2173              		.loc 1 1924 0
 2174 004e FB68     		ldr	r3, [r7, #12]
 2175 0050 B3F1FF3F 		cmp	r3, #-1
 2176 0054 09D1     		bne	.L132
 2177              	.LBB131:
 2178              	.LBB132:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2179              		.loc 2 237 0 discriminator 1
 2180              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2181 0056 4FF05003 			mov r3, #80												
 2182 005a 83F31188 		msr basepri, r3											
 2183 005e BFF36F8F 		isb														
 2184 0062 BFF34F8F 		dsb														
 2185              	
 2186              	@ 0 "" 2
 2187              		.thumb
 2188 0066 7B60     		str	r3, [r7, #4]
 2189              	.L135:
 2190              	.LBE132:
 2191              	.LBE131:
 2192              		.loc 1 1924 0 discriminator 2
 2193 0068 FEE7     		b	.L135
 2194              	.L132:
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2195              		.loc 1 1930 0
 2196 006a 1037     		adds	r7, r7, #16
 2197              	.LCFI69:
 2198              		.cfi_def_cfa_offset 8
 2199 006c BD46     		mov	sp, r7
 2200              	.LCFI70:
 2201              		.cfi_def_cfa_register 13
 2202              		@ sp needed
 2203 006e 80BD     		pop	{r7, pc}
 2204              	.L137:
 2205              		.align	2
 2206              	.L136:
 2207 0070 00000000 		.word	xIdleTaskHandle
 2208 0074 00000000 		.word	prvIdleTask
 2209 0078 00000000 		.word	.LC0
 2210 007c 00000000 		.word	xNextTaskUnblockTime
 2211 0080 00000000 		.word	xSchedulerRunning
 2212 0084 00000000 		.word	xTickCount
 2213              		.cfi_endproc
 2214              	.LFE18:
 2216              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2217              		.align	2
 2218              		.global	vTaskEndScheduler
 2219              		.thumb
 2220              		.thumb_func
 2222              	vTaskEndScheduler:
 2223              	.LFB19:
ARM GAS  /tmp/ccJ0Dfhq.s 			page 78


1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2224              		.loc 1 1934 0
 2225              		.cfi_startproc
 2226              		@ args = 0, pretend = 0, frame = 8
 2227              		@ frame_needed = 1, uses_anonymous_args = 0
 2228 0000 80B5     		push	{r7, lr}
 2229              	.LCFI71:
 2230              		.cfi_def_cfa_offset 8
 2231              		.cfi_offset 7, -8
 2232              		.cfi_offset 14, -4
 2233 0002 82B0     		sub	sp, sp, #8
 2234              	.LCFI72:
 2235              		.cfi_def_cfa_offset 16
 2236 0004 00AF     		add	r7, sp, #0
 2237              	.LCFI73:
 2238              		.cfi_def_cfa_register 7
 2239              	.LBB133:
 2240              	.LBB134:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2241              		.loc 2 237 0
 2242              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2243 0006 4FF05003 			mov r3, #80												
 2244 000a 83F31188 		msr basepri, r3											
 2245 000e BFF36F8F 		isb														
 2246 0012 BFF34F8F 		dsb														
 2247              	
 2248              	@ 0 "" 2
 2249              		.thumb
 2250 0016 7B60     		str	r3, [r7, #4]
 2251              	.LBE134:
 2252              	.LBE133:
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 2253              		.loc 1 1939 0
 2254 0018 034B     		ldr	r3, .L139
 2255 001a 0022     		movs	r2, #0
 2256 001c 1A60     		str	r2, [r3]
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 2257              		.loc 1 1940 0
 2258 001e FFF7FEFF 		bl	vPortEndScheduler
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2259              		.loc 1 1941 0
 2260 0022 0837     		adds	r7, r7, #8
 2261              	.LCFI74:
 2262              		.cfi_def_cfa_offset 8
 2263 0024 BD46     		mov	sp, r7
 2264              	.LCFI75:
 2265              		.cfi_def_cfa_register 13
 2266              		@ sp needed
 2267 0026 80BD     		pop	{r7, pc}
 2268              	.L140:
ARM GAS  /tmp/ccJ0Dfhq.s 			page 79


 2269              		.align	2
 2270              	.L139:
 2271 0028 00000000 		.word	xSchedulerRunning
 2272              		.cfi_endproc
 2273              	.LFE19:
 2275              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2276              		.align	2
 2277              		.global	vTaskSuspendAll
 2278              		.thumb
 2279              		.thumb_func
 2281              	vTaskSuspendAll:
 2282              	.LFB20:
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2283              		.loc 1 1945 0
 2284              		.cfi_startproc
 2285              		@ args = 0, pretend = 0, frame = 0
 2286              		@ frame_needed = 1, uses_anonymous_args = 0
 2287              		@ link register save eliminated.
 2288 0000 80B4     		push	{r7}
 2289              	.LCFI76:
 2290              		.cfi_def_cfa_offset 4
 2291              		.cfi_offset 7, -4
 2292 0002 00AF     		add	r7, sp, #0
 2293              	.LCFI77:
 2294              		.cfi_def_cfa_register 7
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
 2295              		.loc 1 1950 0
 2296 0004 044B     		ldr	r3, .L142
 2297 0006 1B68     		ldr	r3, [r3]
 2298 0008 0133     		adds	r3, r3, #1
 2299 000a 034A     		ldr	r2, .L142
 2300 000c 1360     		str	r3, [r2]
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2301              		.loc 1 1951 0
 2302 000e BD46     		mov	sp, r7
 2303              	.LCFI78:
 2304              		.cfi_def_cfa_register 13
 2305              		@ sp needed
 2306 0010 5DF8047B 		ldr	r7, [sp], #4
 2307              	.LCFI79:
 2308              		.cfi_restore 7
 2309              		.cfi_def_cfa_offset 0
 2310 0014 7047     		bx	lr
 2311              	.L143:
 2312 0016 00BF     		.align	2
 2313              	.L142:
 2314 0018 00000000 		.word	uxSchedulerSuspended
 2315              		.cfi_endproc
 2316              	.LFE20:
 2318              		.section	.text.xTaskResumeAll,"ax",%progbits
ARM GAS  /tmp/ccJ0Dfhq.s 			page 80


 2319              		.align	2
 2320              		.global	xTaskResumeAll
 2321              		.thumb
 2322              		.thumb_func
 2324              	xTaskResumeAll:
 2325              	.LFB21:
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
ARM GAS  /tmp/ccJ0Dfhq.s 			page 81


2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2326              		.loc 1 2018 0
 2327              		.cfi_startproc
 2328              		@ args = 0, pretend = 0, frame = 16
 2329              		@ frame_needed = 1, uses_anonymous_args = 0
 2330 0000 80B5     		push	{r7, lr}
 2331              	.LCFI80:
 2332              		.cfi_def_cfa_offset 8
 2333              		.cfi_offset 7, -8
 2334              		.cfi_offset 14, -4
 2335 0002 84B0     		sub	sp, sp, #16
 2336              	.LCFI81:
 2337              		.cfi_def_cfa_offset 24
 2338 0004 00AF     		add	r7, sp, #0
 2339              	.LCFI82:
 2340              		.cfi_def_cfa_register 7
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2341              		.loc 1 2019 0
 2342 0006 0023     		movs	r3, #0
 2343 0008 FB60     		str	r3, [r7, #12]
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2344              		.loc 1 2020 0
 2345 000a 0023     		movs	r3, #0
 2346 000c BB60     		str	r3, [r7, #8]
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
 2347              		.loc 1 2024 0
 2348 000e 424B     		ldr	r3, .L155
 2349 0010 1B68     		ldr	r3, [r3]
 2350 0012 002B     		cmp	r3, #0
 2351 0014 09D1     		bne	.L145
 2352              	.LBB135:
 2353              	.LBB136:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2354              		.loc 2 237 0 discriminator 1
 2355              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2356 0016 4FF05003 			mov r3, #80												
 2357 001a 83F31188 		msr basepri, r3											
 2358 001e BFF36F8F 		isb														
 2359 0022 BFF34F8F 		dsb														
ARM GAS  /tmp/ccJ0Dfhq.s 			page 82


 2360              	
 2361              	@ 0 "" 2
 2362              		.thumb
 2363 0026 3B60     		str	r3, [r7]
 2364              	.L146:
 2365              	.LBE136:
 2366              	.LBE135:
 2367              		.loc 1 2024 0 discriminator 1
 2368 0028 FEE7     		b	.L146
 2369              	.L145:
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 2370              		.loc 1 2031 0
 2371 002a FFF7FEFF 		bl	vPortEnterCritical
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
 2372              		.loc 1 2033 0
 2373 002e 3A4B     		ldr	r3, .L155
 2374 0030 1B68     		ldr	r3, [r3]
 2375 0032 013B     		subs	r3, r3, #1
 2376 0034 384A     		ldr	r2, .L155
 2377 0036 1360     		str	r3, [r2]
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2378              		.loc 1 2035 0
 2379 0038 374B     		ldr	r3, .L155
 2380 003a 1B68     		ldr	r3, [r3]
 2381 003c 002B     		cmp	r3, #0
 2382 003e 63D1     		bne	.L147
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 2383              		.loc 1 2037 0
 2384 0040 364B     		ldr	r3, .L155+4
 2385 0042 1B68     		ldr	r3, [r3]
 2386 0044 002B     		cmp	r3, #0
 2387 0046 5FD0     		beq	.L147
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 2388              		.loc 1 2041 0
 2389 0048 30E0     		b	.L148
 2390              	.L149:
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 2391              		.loc 1 2043 0
 2392 004a 354B     		ldr	r3, .L155+8
 2393 004c DB68     		ldr	r3, [r3, #12]
 2394 004e DB68     		ldr	r3, [r3, #12]
 2395 0050 FB60     		str	r3, [r7, #12]
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2396              		.loc 1 2044 0
ARM GAS  /tmp/ccJ0Dfhq.s 			page 83


 2397 0052 FB68     		ldr	r3, [r7, #12]
 2398 0054 1833     		adds	r3, r3, #24
 2399 0056 1846     		mov	r0, r3
 2400 0058 FFF7FEFF 		bl	uxListRemove
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2401              		.loc 1 2045 0
 2402 005c FB68     		ldr	r3, [r7, #12]
 2403 005e 0433     		adds	r3, r3, #4
 2404 0060 1846     		mov	r0, r3
 2405 0062 FFF7FEFF 		bl	uxListRemove
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2406              		.loc 1 2046 0
 2407 0066 FB68     		ldr	r3, [r7, #12]
 2408 0068 DB6A     		ldr	r3, [r3, #44]
 2409 006a 1A46     		mov	r2, r3
 2410 006c 0123     		movs	r3, #1
 2411 006e 03FA02F2 		lsl	r2, r3, r2
 2412 0072 2C4B     		ldr	r3, .L155+12
 2413 0074 1B68     		ldr	r3, [r3]
 2414 0076 1343     		orrs	r3, r3, r2
 2415 0078 2A4A     		ldr	r2, .L155+12
 2416 007a 1360     		str	r3, [r2]
 2417 007c FB68     		ldr	r3, [r7, #12]
 2418 007e DA6A     		ldr	r2, [r3, #44]
 2419 0080 1346     		mov	r3, r2
 2420 0082 9B00     		lsls	r3, r3, #2
 2421 0084 1344     		add	r3, r3, r2
 2422 0086 9B00     		lsls	r3, r3, #2
 2423 0088 274A     		ldr	r2, .L155+16
 2424 008a 1A44     		add	r2, r2, r3
 2425 008c FB68     		ldr	r3, [r7, #12]
 2426 008e 0433     		adds	r3, r3, #4
 2427 0090 1046     		mov	r0, r2
 2428 0092 1946     		mov	r1, r3
 2429 0094 FFF7FEFF 		bl	vListInsertEnd
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2430              		.loc 1 2050 0
 2431 0098 FB68     		ldr	r3, [r7, #12]
 2432 009a DA6A     		ldr	r2, [r3, #44]
 2433 009c 234B     		ldr	r3, .L155+20
 2434 009e 1B68     		ldr	r3, [r3]
 2435 00a0 DB6A     		ldr	r3, [r3, #44]
 2436 00a2 9A42     		cmp	r2, r3
 2437 00a4 02D3     		bcc	.L148
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
 2438              		.loc 1 2052 0
 2439 00a6 224B     		ldr	r3, .L155+24
 2440 00a8 0122     		movs	r2, #1
 2441 00aa 1A60     		str	r2, [r3]
 2442              	.L148:
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2443              		.loc 1 2041 0
 2444 00ac 1C4B     		ldr	r3, .L155+8
ARM GAS  /tmp/ccJ0Dfhq.s 			page 84


 2445 00ae 1B68     		ldr	r3, [r3]
 2446 00b0 002B     		cmp	r3, #0
 2447 00b2 CAD1     		bne	.L149
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
 2448              		.loc 1 2060 0
 2449 00b4 FB68     		ldr	r3, [r7, #12]
 2450 00b6 002B     		cmp	r3, #0
 2451 00b8 01D0     		beq	.L150
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
 2452              		.loc 1 2068 0
 2453 00ba FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2454              	.L150:
 2455              	.LBB137:
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 2456              		.loc 1 2076 0
 2457 00be 1D4B     		ldr	r3, .L155+28
 2458 00c0 1B68     		ldr	r3, [r3]
 2459 00c2 7B60     		str	r3, [r7, #4]
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
 2460              		.loc 1 2078 0
 2461 00c4 7B68     		ldr	r3, [r7, #4]
 2462 00c6 002B     		cmp	r3, #0
 2463 00c8 10D0     		beq	.L151
 2464              	.L153:
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
 2465              		.loc 1 2082 0
 2466 00ca FFF7FEFF 		bl	xTaskIncrementTick
 2467 00ce 0346     		mov	r3, r0
 2468 00d0 002B     		cmp	r3, #0
 2469 00d2 02D0     		beq	.L152
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
ARM GAS  /tmp/ccJ0Dfhq.s 			page 85


 2470              		.loc 1 2084 0
 2471 00d4 164B     		ldr	r3, .L155+24
 2472 00d6 0122     		movs	r2, #1
 2473 00d8 1A60     		str	r2, [r3]
 2474              	.L152:
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--uxPendedCounts;
 2475              		.loc 1 2090 0
 2476 00da 7B68     		ldr	r3, [r7, #4]
 2477 00dc 013B     		subs	r3, r3, #1
 2478 00de 7B60     		str	r3, [r7, #4]
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 2479              		.loc 1 2091 0
 2480 00e0 7B68     		ldr	r3, [r7, #4]
 2481 00e2 002B     		cmp	r3, #0
 2482 00e4 F1D1     		bne	.L153
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						uxPendedTicks = 0;
 2483              		.loc 1 2093 0
 2484 00e6 134B     		ldr	r3, .L155+28
 2485 00e8 0022     		movs	r2, #0
 2486 00ea 1A60     		str	r2, [r3]
 2487              	.L151:
 2488              	.LBE137:
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
 2489              		.loc 1 2101 0
 2490 00ec 104B     		ldr	r3, .L155+24
 2491 00ee 1B68     		ldr	r3, [r3]
 2492 00f0 002B     		cmp	r3, #0
 2493 00f2 09D0     		beq	.L147
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
 2494              		.loc 1 2105 0
 2495 00f4 0123     		movs	r3, #1
 2496 00f6 BB60     		str	r3, [r7, #8]
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 2497              		.loc 1 2108 0
 2498 00f8 0F4B     		ldr	r3, .L155+32
 2499 00fa 4FF08052 		mov	r2, #268435456
 2500 00fe 1A60     		str	r2, [r3]
 2501              	@ 2108 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2502 0100 BFF34F8F 		dsb
ARM GAS  /tmp/ccJ0Dfhq.s 			page 86


 2503              	@ 0 "" 2
 2504              	@ 2108 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2505 0104 BFF36F8F 		isb
 2506              	@ 0 "" 2
 2507              		.thumb
 2508              	.L147:
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 2509              		.loc 1 2121 0
 2510 0108 FFF7FEFF 		bl	vPortExitCritical
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
 2511              		.loc 1 2123 0
 2512 010c BB68     		ldr	r3, [r7, #8]
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2513              		.loc 1 2124 0
 2514 010e 1846     		mov	r0, r3
 2515 0110 1037     		adds	r7, r7, #16
 2516              	.LCFI83:
 2517              		.cfi_def_cfa_offset 8
 2518 0112 BD46     		mov	sp, r7
 2519              	.LCFI84:
 2520              		.cfi_def_cfa_register 13
 2521              		@ sp needed
 2522 0114 80BD     		pop	{r7, pc}
 2523              	.L156:
 2524 0116 00BF     		.align	2
 2525              	.L155:
 2526 0118 00000000 		.word	uxSchedulerSuspended
 2527 011c 00000000 		.word	uxCurrentNumberOfTasks
 2528 0120 00000000 		.word	xPendingReadyList
 2529 0124 00000000 		.word	uxTopReadyPriority
 2530 0128 00000000 		.word	pxReadyTasksLists
 2531 012c 00000000 		.word	pxCurrentTCB
 2532 0130 00000000 		.word	xYieldPending
 2533 0134 00000000 		.word	uxPendedTicks
 2534 0138 04ED00E0 		.word	-536810236
 2535              		.cfi_endproc
 2536              	.LFE21:
 2538              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2539              		.align	2
 2540              		.global	xTaskGetTickCount
 2541              		.thumb
 2542              		.thumb_func
 2544              	xTaskGetTickCount:
 2545              	.LFB22:
ARM GAS  /tmp/ccJ0Dfhq.s 			page 87


2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2546              		.loc 1 2128 0
 2547              		.cfi_startproc
 2548              		@ args = 0, pretend = 0, frame = 8
 2549              		@ frame_needed = 1, uses_anonymous_args = 0
 2550              		@ link register save eliminated.
 2551 0000 80B4     		push	{r7}
 2552              	.LCFI85:
 2553              		.cfi_def_cfa_offset 4
 2554              		.cfi_offset 7, -4
 2555 0002 83B0     		sub	sp, sp, #12
 2556              	.LCFI86:
 2557              		.cfi_def_cfa_offset 16
 2558 0004 00AF     		add	r7, sp, #0
 2559              	.LCFI87:
 2560              		.cfi_def_cfa_register 7
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
 2561              		.loc 1 2134 0
 2562 0006 054B     		ldr	r3, .L159
 2563 0008 1B68     		ldr	r3, [r3]
 2564 000a 7B60     		str	r3, [r7, #4]
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
 2565              		.loc 1 2138 0
 2566 000c 7B68     		ldr	r3, [r7, #4]
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2567              		.loc 1 2139 0
 2568 000e 1846     		mov	r0, r3
 2569 0010 0C37     		adds	r7, r7, #12
 2570              	.LCFI88:
 2571              		.cfi_def_cfa_offset 4
 2572 0012 BD46     		mov	sp, r7
 2573              	.LCFI89:
 2574              		.cfi_def_cfa_register 13
 2575              		@ sp needed
 2576 0014 5DF8047B 		ldr	r7, [sp], #4
 2577              	.LCFI90:
 2578              		.cfi_restore 7
 2579              		.cfi_def_cfa_offset 0
 2580 0018 7047     		bx	lr
 2581              	.L160:
 2582 001a 00BF     		.align	2
 2583              	.L159:
 2584 001c 00000000 		.word	xTickCount
 2585              		.cfi_endproc
 2586              	.LFE22:
 2588              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
ARM GAS  /tmp/ccJ0Dfhq.s 			page 88


 2589              		.align	2
 2590              		.global	xTaskGetTickCountFromISR
 2591              		.thumb
 2592              		.thumb_func
 2594              	xTaskGetTickCountFromISR:
 2595              	.LFB23:
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2596              		.loc 1 2143 0
 2597              		.cfi_startproc
 2598              		@ args = 0, pretend = 0, frame = 8
 2599              		@ frame_needed = 1, uses_anonymous_args = 0
 2600 0000 80B5     		push	{r7, lr}
 2601              	.LCFI91:
 2602              		.cfi_def_cfa_offset 8
 2603              		.cfi_offset 7, -8
 2604              		.cfi_offset 14, -4
 2605 0002 82B0     		sub	sp, sp, #8
 2606              	.LCFI92:
 2607              		.cfi_def_cfa_offset 16
 2608 0004 00AF     		add	r7, sp, #0
 2609              	.LCFI93:
 2610              		.cfi_def_cfa_register 7
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2611              		.loc 1 2161 0
 2612 0006 FFF7FEFF 		bl	vPortValidateInterruptPriority
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 2613              		.loc 1 2163 0
 2614 000a 0023     		movs	r3, #0
 2615 000c 7B60     		str	r3, [r7, #4]
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
 2616              		.loc 1 2165 0
 2617 000e 044B     		ldr	r3, .L163
 2618 0010 1B68     		ldr	r3, [r3]
 2619 0012 3B60     		str	r3, [r7]
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/ccJ0Dfhq.s 			page 89


2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 2620              		.loc 1 2169 0
 2621 0014 3B68     		ldr	r3, [r7]
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2622              		.loc 1 2170 0
 2623 0016 1846     		mov	r0, r3
 2624 0018 0837     		adds	r7, r7, #8
 2625              	.LCFI94:
 2626              		.cfi_def_cfa_offset 8
 2627 001a BD46     		mov	sp, r7
 2628              	.LCFI95:
 2629              		.cfi_def_cfa_register 13
 2630              		@ sp needed
 2631 001c 80BD     		pop	{r7, pc}
 2632              	.L164:
 2633 001e 00BF     		.align	2
 2634              	.L163:
 2635 0020 00000000 		.word	xTickCount
 2636              		.cfi_endproc
 2637              	.LFE23:
 2639              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2640              		.align	2
 2641              		.global	uxTaskGetNumberOfTasks
 2642              		.thumb
 2643              		.thumb_func
 2645              	uxTaskGetNumberOfTasks:
 2646              	.LFB24:
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2647              		.loc 1 2174 0
 2648              		.cfi_startproc
 2649              		@ args = 0, pretend = 0, frame = 0
 2650              		@ frame_needed = 1, uses_anonymous_args = 0
 2651              		@ link register save eliminated.
 2652 0000 80B4     		push	{r7}
 2653              	.LCFI96:
 2654              		.cfi_def_cfa_offset 4
 2655              		.cfi_offset 7, -4
 2656 0002 00AF     		add	r7, sp, #0
 2657              	.LCFI97:
 2658              		.cfi_def_cfa_register 7
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
 2659              		.loc 1 2177 0
 2660 0004 034B     		ldr	r3, .L167
 2661 0006 1B68     		ldr	r3, [r3]
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2662              		.loc 1 2178 0
 2663 0008 1846     		mov	r0, r3
 2664 000a BD46     		mov	sp, r7
 2665              	.LCFI98:
 2666              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccJ0Dfhq.s 			page 90


 2667              		@ sp needed
 2668 000c 5DF8047B 		ldr	r7, [sp], #4
 2669              	.LCFI99:
 2670              		.cfi_restore 7
 2671              		.cfi_def_cfa_offset 0
 2672 0010 7047     		bx	lr
 2673              	.L168:
 2674 0012 00BF     		.align	2
 2675              	.L167:
 2676 0014 00000000 		.word	uxCurrentNumberOfTasks
 2677              		.cfi_endproc
 2678              	.LFE24:
 2680              		.section	.text.pcTaskGetName,"ax",%progbits
 2681              		.align	2
 2682              		.global	pcTaskGetName
 2683              		.thumb
 2684              		.thumb_func
 2686              	pcTaskGetName:
 2687              	.LFB25:
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2688              		.loc 1 2182 0
 2689              		.cfi_startproc
 2690              		@ args = 0, pretend = 0, frame = 16
 2691              		@ frame_needed = 1, uses_anonymous_args = 0
 2692              		@ link register save eliminated.
 2693 0000 80B4     		push	{r7}
 2694              	.LCFI100:
 2695              		.cfi_def_cfa_offset 4
 2696              		.cfi_offset 7, -4
 2697 0002 85B0     		sub	sp, sp, #20
 2698              	.LCFI101:
 2699              		.cfi_def_cfa_offset 24
 2700 0004 00AF     		add	r7, sp, #0
 2701              	.LCFI102:
 2702              		.cfi_def_cfa_register 7
 2703 0006 7860     		str	r0, [r7, #4]
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 2704              		.loc 1 2187 0
 2705 0008 7B68     		ldr	r3, [r7, #4]
 2706 000a 002B     		cmp	r3, #0
 2707 000c 02D1     		bne	.L170
 2708              		.loc 1 2187 0 is_stmt 0 discriminator 1
 2709 000e 0D4B     		ldr	r3, .L175
 2710 0010 1B68     		ldr	r3, [r3]
 2711 0012 00E0     		b	.L171
 2712              	.L170:
 2713              		.loc 1 2187 0 discriminator 2
 2714 0014 7B68     		ldr	r3, [r7, #4]
 2715              	.L171:
 2716              		.loc 1 2187 0 discriminator 4
ARM GAS  /tmp/ccJ0Dfhq.s 			page 91


 2717 0016 FB60     		str	r3, [r7, #12]
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2718              		.loc 1 2188 0 is_stmt 1 discriminator 4
 2719 0018 FB68     		ldr	r3, [r7, #12]
 2720 001a 002B     		cmp	r3, #0
 2721 001c 09D1     		bne	.L172
 2722              	.LBB138:
 2723              	.LBB139:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2724              		.loc 2 237 0 discriminator 1
 2725              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2726 001e 4FF05003 			mov r3, #80												
 2727 0022 83F31188 		msr basepri, r3											
 2728 0026 BFF36F8F 		isb														
 2729 002a BFF34F8F 		dsb														
 2730              	
 2731              	@ 0 "" 2
 2732              		.thumb
 2733 002e BB60     		str	r3, [r7, #8]
 2734              	.L173:
 2735              	.LBE139:
 2736              	.LBE138:
 2737              		.loc 1 2188 0 discriminator 1
 2738 0030 FEE7     		b	.L173
 2739              	.L172:
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2740              		.loc 1 2189 0
 2741 0032 FB68     		ldr	r3, [r7, #12]
 2742 0034 3433     		adds	r3, r3, #52
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2743              		.loc 1 2190 0
 2744 0036 1846     		mov	r0, r3
 2745 0038 1437     		adds	r7, r7, #20
 2746              	.LCFI103:
 2747              		.cfi_def_cfa_offset 4
 2748 003a BD46     		mov	sp, r7
 2749              	.LCFI104:
 2750              		.cfi_def_cfa_register 13
 2751              		@ sp needed
 2752 003c 5DF8047B 		ldr	r7, [sp], #4
 2753              	.LCFI105:
 2754              		.cfi_restore 7
 2755              		.cfi_def_cfa_offset 0
 2756 0040 7047     		bx	lr
 2757              	.L176:
 2758 0042 00BF     		.align	2
 2759              	.L175:
 2760 0044 00000000 		.word	pxCurrentTCB
 2761              		.cfi_endproc
 2762              	.LFE25:
 2764              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2765              		.align	2
 2766              		.global	xTaskIncrementTick
 2767              		.thumb
 2768              		.thumb_func
 2770              	xTaskIncrementTick:
 2771              	.LFB26:
ARM GAS  /tmp/ccJ0Dfhq.s 			page 92


2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == 0x00 )
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccJ0Dfhq.s 			page 93


2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccJ0Dfhq.s 			page 94


2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccJ0Dfhq.s 			page 95


2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
ARM GAS  /tmp/ccJ0Dfhq.s 			page 96


2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
ARM GAS  /tmp/ccJ0Dfhq.s 			page 97


2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTaskResumeAll();
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2772              		.loc 1 2500 0
 2773              		.cfi_startproc
 2774              		@ args = 0, pretend = 0, frame = 24
 2775              		@ frame_needed = 1, uses_anonymous_args = 0
 2776 0000 80B5     		push	{r7, lr}
 2777              	.LCFI106:
 2778              		.cfi_def_cfa_offset 8
 2779              		.cfi_offset 7, -8
 2780              		.cfi_offset 14, -4
 2781 0002 86B0     		sub	sp, sp, #24
 2782              	.LCFI107:
 2783              		.cfi_def_cfa_offset 32
 2784 0004 00AF     		add	r7, sp, #0
 2785              	.LCFI108:
 2786              		.cfi_def_cfa_register 7
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 2787              		.loc 1 2503 0
 2788 0006 0023     		movs	r3, #0
 2789 0008 7B61     		str	r3, [r7, #20]
2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2790              		.loc 1 2509 0
 2791 000a 514B     		ldr	r3, .L194
 2792 000c 1B68     		ldr	r3, [r3]
 2793 000e 002B     		cmp	r3, #0
 2794 0010 40F08E80 		bne	.L178
ARM GAS  /tmp/ccJ0Dfhq.s 			page 98


 2795              	.LBB140:
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + 1;
 2796              		.loc 1 2513 0
 2797 0014 4F4B     		ldr	r3, .L194+4
 2798 0016 1B68     		ldr	r3, [r3]
 2799 0018 0133     		adds	r3, r3, #1
 2800 001a 3B61     		str	r3, [r7, #16]
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
 2801              		.loc 1 2517 0
 2802 001c 4D4A     		ldr	r2, .L194+4
 2803 001e 3B69     		ldr	r3, [r7, #16]
 2804 0020 1360     		str	r3, [r2]
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U )
 2805              		.loc 1 2519 0
 2806 0022 3B69     		ldr	r3, [r7, #16]
 2807 0024 002B     		cmp	r3, #0
 2808 0026 1FD1     		bne	.L179
 2809              	.LBB141:
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
 2810              		.loc 1 2521 0
 2811 0028 4B4B     		ldr	r3, .L194+8
 2812 002a 1B68     		ldr	r3, [r3]
 2813 002c 1B68     		ldr	r3, [r3]
 2814 002e 002B     		cmp	r3, #0
 2815 0030 09D0     		beq	.L180
 2816              	.LBB142:
 2817              	.LBB143:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2818              		.loc 2 237 0 discriminator 1
 2819              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2820 0032 4FF05003 			mov r3, #80												
 2821 0036 83F31188 		msr basepri, r3											
 2822 003a BFF36F8F 		isb														
 2823 003e BFF34F8F 		dsb														
 2824              	
 2825              	@ 0 "" 2
 2826              		.thumb
 2827 0042 3B60     		str	r3, [r7]
 2828              	.L181:
 2829              	.LBE143:
 2830              	.LBE142:
 2831              		.loc 1 2521 0 discriminator 1
 2832 0044 FEE7     		b	.L181
 2833              	.L180:
 2834              		.loc 1 2521 0 is_stmt 0 discriminator 2
 2835 0046 444B     		ldr	r3, .L194+8
 2836 0048 1B68     		ldr	r3, [r3]
 2837 004a FB60     		str	r3, [r7, #12]
 2838 004c 434B     		ldr	r3, .L194+12
ARM GAS  /tmp/ccJ0Dfhq.s 			page 99


 2839 004e 1B68     		ldr	r3, [r3]
 2840 0050 414A     		ldr	r2, .L194+8
 2841 0052 1360     		str	r3, [r2]
 2842 0054 414A     		ldr	r2, .L194+12
 2843 0056 FB68     		ldr	r3, [r7, #12]
 2844 0058 1360     		str	r3, [r2]
 2845 005a 414B     		ldr	r3, .L194+16
 2846 005c 1B68     		ldr	r3, [r3]
 2847 005e 0133     		adds	r3, r3, #1
 2848 0060 3F4A     		ldr	r2, .L194+16
 2849 0062 1360     		str	r3, [r2]
 2850 0064 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2851              	.L179:
 2852              	.LBE141:
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
 2853              		.loc 1 2532 0 is_stmt 1
 2854 0068 3E4B     		ldr	r3, .L194+20
 2855 006a 1B68     		ldr	r3, [r3]
 2856 006c 3A69     		ldr	r2, [r7, #16]
 2857 006e 9A42     		cmp	r2, r3
 2858 0070 4FD3     		bcc	.L182
 2859              	.L189:
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 2860              		.loc 1 2536 0
 2861 0072 394B     		ldr	r3, .L194+8
 2862 0074 1B68     		ldr	r3, [r3]
 2863 0076 1B68     		ldr	r3, [r3]
 2864 0078 002B     		cmp	r3, #0
 2865 007a 01D1     		bne	.L183
 2866              		.loc 1 2536 0 is_stmt 0 discriminator 1
 2867 007c 0123     		movs	r3, #1
 2868 007e 00E0     		b	.L184
 2869              	.L183:
 2870              		.loc 1 2536 0 discriminator 2
 2871 0080 0023     		movs	r3, #0
 2872              	.L184:
 2873              		.loc 1 2536 0 discriminator 4
 2874 0082 002B     		cmp	r3, #0
 2875 0084 04D0     		beq	.L185
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
ARM GAS  /tmp/ccJ0Dfhq.s 			page 100


2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
 2876              		.loc 1 2543 0 is_stmt 1
 2877 0086 374B     		ldr	r3, .L194+20
 2878 0088 4FF0FF32 		mov	r2, #-1
 2879 008c 1A60     		str	r2, [r3]
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 2880              		.loc 1 2544 0
 2881 008e 40E0     		b	.L182
 2882              	.L185:
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 2883              		.loc 1 2552 0
 2884 0090 314B     		ldr	r3, .L194+8
 2885 0092 1B68     		ldr	r3, [r3]
 2886 0094 DB68     		ldr	r3, [r3, #12]
 2887 0096 DB68     		ldr	r3, [r3, #12]
 2888 0098 BB60     		str	r3, [r7, #8]
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2889              		.loc 1 2553 0
 2890 009a BB68     		ldr	r3, [r7, #8]
 2891 009c 5B68     		ldr	r3, [r3, #4]
 2892 009e 7B60     		str	r3, [r7, #4]
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
 2893              		.loc 1 2555 0
 2894 00a0 3A69     		ldr	r2, [r7, #16]
 2895 00a2 7B68     		ldr	r3, [r7, #4]
 2896 00a4 9A42     		cmp	r2, r3
 2897 00a6 03D2     		bcs	.L186
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
 2898              		.loc 1 2562 0
 2899 00a8 2E4A     		ldr	r2, .L194+20
 2900 00aa 7B68     		ldr	r3, [r7, #4]
 2901 00ac 1360     		str	r3, [r2]
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
 2902              		.loc 1 2563 0
 2903 00ae 30E0     		b	.L182
 2904              	.L186:
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccJ0Dfhq.s 			page 101


2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2905              		.loc 1 2571 0
 2906 00b0 BB68     		ldr	r3, [r7, #8]
 2907 00b2 0433     		adds	r3, r3, #4
 2908 00b4 1846     		mov	r0, r3
 2909 00b6 FFF7FEFF 		bl	uxListRemove
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 2910              		.loc 1 2575 0
 2911 00ba BB68     		ldr	r3, [r7, #8]
 2912 00bc 9B6A     		ldr	r3, [r3, #40]
 2913 00be 002B     		cmp	r3, #0
 2914 00c0 04D0     		beq	.L187
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2915              		.loc 1 2577 0
 2916 00c2 BB68     		ldr	r3, [r7, #8]
 2917 00c4 1833     		adds	r3, r3, #24
 2918 00c6 1846     		mov	r0, r3
 2919 00c8 FFF7FEFF 		bl	uxListRemove
 2920              	.L187:
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2921              		.loc 1 2586 0
 2922 00cc BB68     		ldr	r3, [r7, #8]
 2923 00ce DB6A     		ldr	r3, [r3, #44]
 2924 00d0 1A46     		mov	r2, r3
 2925 00d2 0123     		movs	r3, #1
 2926 00d4 03FA02F2 		lsl	r2, r3, r2
 2927 00d8 234B     		ldr	r3, .L194+24
 2928 00da 1B68     		ldr	r3, [r3]
 2929 00dc 1343     		orrs	r3, r3, r2
 2930 00de 224A     		ldr	r2, .L194+24
 2931 00e0 1360     		str	r3, [r2]
 2932 00e2 BB68     		ldr	r3, [r7, #8]
 2933 00e4 DA6A     		ldr	r2, [r3, #44]
 2934 00e6 1346     		mov	r3, r2
 2935 00e8 9B00     		lsls	r3, r3, #2
 2936 00ea 1344     		add	r3, r3, r2
 2937 00ec 9B00     		lsls	r3, r3, #2
 2938 00ee 1F4A     		ldr	r2, .L194+28
 2939 00f0 1A44     		add	r2, r2, r3
 2940 00f2 BB68     		ldr	r3, [r7, #8]
 2941 00f4 0433     		adds	r3, r3, #4
 2942 00f6 1046     		mov	r0, r2
 2943 00f8 1946     		mov	r1, r3
 2944 00fa FFF7FEFF 		bl	vListInsertEnd
ARM GAS  /tmp/ccJ0Dfhq.s 			page 102


2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2945              		.loc 1 2596 0
 2946 00fe BB68     		ldr	r3, [r7, #8]
 2947 0100 DA6A     		ldr	r2, [r3, #44]
 2948 0102 1B4B     		ldr	r3, .L194+32
 2949 0104 1B68     		ldr	r3, [r3]
 2950 0106 DB6A     		ldr	r3, [r3, #44]
 2951 0108 9A42     		cmp	r2, r3
 2952 010a 01D3     		bcc	.L188
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
 2953              		.loc 1 2598 0
 2954 010c 0123     		movs	r3, #1
 2955 010e 7B61     		str	r3, [r7, #20]
 2956              	.L188:
2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2957              		.loc 1 2607 0
 2958 0110 AFE7     		b	.L189
 2959              	.L182:
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
 2960              		.loc 1 2615 0
 2961 0112 174B     		ldr	r3, .L194+32
 2962 0114 1B68     		ldr	r3, [r3]
 2963 0116 DA6A     		ldr	r2, [r3, #44]
 2964 0118 1449     		ldr	r1, .L194+28
 2965 011a 1346     		mov	r3, r2
 2966 011c 9B00     		lsls	r3, r3, #2
 2967 011e 1344     		add	r3, r3, r2
 2968 0120 9B00     		lsls	r3, r3, #2
 2969 0122 0B44     		add	r3, r3, r1
 2970 0124 1B68     		ldr	r3, [r3]
 2971 0126 012B     		cmp	r3, #1
 2972 0128 01D9     		bls	.L190
ARM GAS  /tmp/ccJ0Dfhq.s 			page 103


2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
 2973              		.loc 1 2617 0
 2974 012a 0123     		movs	r3, #1
 2975 012c 7B61     		str	r3, [r7, #20]
 2976              	.L190:
 2977              	.LBE140:
 2978 012e 04E0     		b	.L191
 2979              	.L178:
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++uxPendedTicks;
 2980              		.loc 1 2643 0
 2981 0130 104B     		ldr	r3, .L194+36
 2982 0132 1B68     		ldr	r3, [r3]
 2983 0134 0133     		adds	r3, r3, #1
 2984 0136 0F4A     		ldr	r2, .L194+36
 2985 0138 1360     		str	r3, [r2]
 2986              	.L191:
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
 2987              		.loc 1 2656 0
 2988 013a 0F4B     		ldr	r3, .L194+40
ARM GAS  /tmp/ccJ0Dfhq.s 			page 104


 2989 013c 1B68     		ldr	r3, [r3]
 2990 013e 002B     		cmp	r3, #0
 2991 0140 01D0     		beq	.L192
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
 2992              		.loc 1 2658 0
 2993 0142 0123     		movs	r3, #1
 2994 0144 7B61     		str	r3, [r7, #20]
 2995              	.L192:
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
 2996              		.loc 1 2667 0
 2997 0146 7B69     		ldr	r3, [r7, #20]
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2998              		.loc 1 2668 0
 2999 0148 1846     		mov	r0, r3
 3000 014a 1837     		adds	r7, r7, #24
 3001              	.LCFI109:
 3002              		.cfi_def_cfa_offset 8
 3003 014c BD46     		mov	sp, r7
 3004              	.LCFI110:
 3005              		.cfi_def_cfa_register 13
 3006              		@ sp needed
 3007 014e 80BD     		pop	{r7, pc}
 3008              	.L195:
 3009              		.align	2
 3010              	.L194:
 3011 0150 00000000 		.word	uxSchedulerSuspended
 3012 0154 00000000 		.word	xTickCount
 3013 0158 00000000 		.word	pxDelayedTaskList
 3014 015c 00000000 		.word	pxOverflowDelayedTaskList
 3015 0160 00000000 		.word	xNumOfOverflows
 3016 0164 00000000 		.word	xNextTaskUnblockTime
 3017 0168 00000000 		.word	uxTopReadyPriority
 3018 016c 00000000 		.word	pxReadyTasksLists
 3019 0170 00000000 		.word	pxCurrentTCB
 3020 0174 00000000 		.word	uxPendedTicks
 3021 0178 00000000 		.word	xYieldPending
 3022              		.cfi_endproc
 3023              	.LFE26:
 3025              		.section	.text.vTaskSwitchContext,"ax",%progbits
 3026              		.align	2
 3027              		.global	vTaskSwitchContext
 3028              		.thumb
 3029              		.thumb_func
 3031              	vTaskSwitchContext:
 3032              	.LFB27:
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
ARM GAS  /tmp/ccJ0Dfhq.s 			page 105


2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccJ0Dfhq.s 			page 106


2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3033              		.loc 1 2762 0
 3034              		.cfi_startproc
 3035              		@ args = 0, pretend = 0, frame = 24
 3036              		@ frame_needed = 1, uses_anonymous_args = 0
 3037              		@ link register save eliminated.
 3038 0000 80B4     		push	{r7}
 3039              	.LCFI111:
 3040              		.cfi_def_cfa_offset 4
 3041              		.cfi_offset 7, -4
 3042 0002 87B0     		sub	sp, sp, #28
 3043              	.LCFI112:
 3044              		.cfi_def_cfa_offset 32
 3045 0004 00AF     		add	r7, sp, #0
 3046              	.LCFI113:
 3047              		.cfi_def_cfa_register 7
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3048              		.loc 1 2763 0
 3049 0006 264B     		ldr	r3, .L203
 3050 0008 1B68     		ldr	r3, [r3]
 3051 000a 002B     		cmp	r3, #0
 3052 000c 03D0     		beq	.L197
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
ARM GAS  /tmp/ccJ0Dfhq.s 			page 107


2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 3053              		.loc 1 2767 0
 3054 000e 254B     		ldr	r3, .L203+4
 3055 0010 0122     		movs	r2, #1
 3056 0012 1A60     		str	r2, [r3]
 3057 0014 3EE0     		b	.L196
 3058              	.L197:
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
 3059              		.loc 1 2771 0
 3060 0016 234B     		ldr	r3, .L203+4
 3061 0018 0022     		movs	r2, #0
 3062 001a 1A60     		str	r2, [r3]
 3063              	.LBB144:
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Add the amount of time the task has been running to the
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				accumulated time so far.  The time the task started running was
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				protection here so count values are only valid until the timer
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				overflows.  The guard against negative values is to protect
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				against suspect run time stat counter implementations - which
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				are provided by the application, not the kernel. */
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
 3064              		.loc 1 2806 0
 3065 001c 224B     		ldr	r3, .L203+8
 3066 001e 1B68     		ldr	r3, [r3]
 3067 0020 FB60     		str	r3, [r7, #12]
 3068              	.LBB145:
ARM GAS  /tmp/ccJ0Dfhq.s 			page 108


 3069              	.LBB146:
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 3070              		.loc 2 176 0
 3071 0022 FB68     		ldr	r3, [r7, #12]
 3072              	@ 176 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3073 0024 B3FA83F3 		clz r3, r3
 3074              	@ 0 "" 2
 3075              		.thumb
 3076 0028 FB72     		strb	r3, [r7, #11]
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 3077              		.loc 2 177 0
 3078 002a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 3079              	.LBE146:
 3080              	.LBE145:
 3081              		.loc 1 2806 0
 3082 002c C3F11F03 		rsb	r3, r3, #31
 3083 0030 7B61     		str	r3, [r7, #20]
 3084 0032 1E49     		ldr	r1, .L203+12
 3085 0034 7A69     		ldr	r2, [r7, #20]
 3086 0036 1346     		mov	r3, r2
 3087 0038 9B00     		lsls	r3, r3, #2
 3088 003a 1344     		add	r3, r3, r2
 3089 003c 9B00     		lsls	r3, r3, #2
 3090 003e 0B44     		add	r3, r3, r1
 3091 0040 1B68     		ldr	r3, [r3]
 3092 0042 002B     		cmp	r3, #0
 3093 0044 09D1     		bne	.L200
 3094              	.LBB147:
 3095              	.LBB148:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3096              		.loc 2 237 0 discriminator 1
 3097              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3098 0046 4FF05003 			mov r3, #80												
 3099 004a 83F31188 		msr basepri, r3											
 3100 004e BFF36F8F 		isb														
 3101 0052 BFF34F8F 		dsb														
 3102              	
 3103              	@ 0 "" 2
 3104              		.thumb
 3105 0056 7B60     		str	r3, [r7, #4]
 3106              	.L201:
 3107              	.LBE148:
 3108              	.LBE147:
 3109              		.loc 1 2806 0 discriminator 1
 3110 0058 FEE7     		b	.L201
 3111              	.L200:
 3112              	.LBB149:
 3113              		.loc 1 2806 0 is_stmt 0 discriminator 2
 3114 005a 7A69     		ldr	r2, [r7, #20]
 3115 005c 1346     		mov	r3, r2
 3116 005e 9B00     		lsls	r3, r3, #2
 3117 0060 1344     		add	r3, r3, r2
 3118 0062 9B00     		lsls	r3, r3, #2
 3119 0064 114A     		ldr	r2, .L203+12
 3120 0066 1344     		add	r3, r3, r2
 3121 0068 3B61     		str	r3, [r7, #16]
 3122 006a 3B69     		ldr	r3, [r7, #16]
ARM GAS  /tmp/ccJ0Dfhq.s 			page 109


 3123 006c 5B68     		ldr	r3, [r3, #4]
 3124 006e 5A68     		ldr	r2, [r3, #4]
 3125 0070 3B69     		ldr	r3, [r7, #16]
 3126 0072 5A60     		str	r2, [r3, #4]
 3127 0074 3B69     		ldr	r3, [r7, #16]
 3128 0076 5A68     		ldr	r2, [r3, #4]
 3129 0078 3B69     		ldr	r3, [r7, #16]
 3130 007a 0833     		adds	r3, r3, #8
 3131 007c 9A42     		cmp	r2, r3
 3132 007e 04D1     		bne	.L202
 3133              		.loc 1 2806 0 discriminator 3
 3134 0080 3B69     		ldr	r3, [r7, #16]
 3135 0082 5B68     		ldr	r3, [r3, #4]
 3136 0084 5A68     		ldr	r2, [r3, #4]
 3137 0086 3B69     		ldr	r3, [r7, #16]
 3138 0088 5A60     		str	r2, [r3, #4]
 3139              	.L202:
 3140              		.loc 1 2806 0 discriminator 5
 3141 008a 3B69     		ldr	r3, [r7, #16]
 3142 008c 5B68     		ldr	r3, [r3, #4]
 3143 008e DB68     		ldr	r3, [r3, #12]
 3144 0090 074A     		ldr	r2, .L203+16
 3145 0092 1360     		str	r3, [r2]
 3146              	.L196:
 3147              	.LBE149:
 3148              	.LBE144:
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task. */
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3149              		.loc 1 2817 0 is_stmt 1
 3150 0094 1C37     		adds	r7, r7, #28
 3151              	.LCFI114:
 3152              		.cfi_def_cfa_offset 4
 3153 0096 BD46     		mov	sp, r7
 3154              	.LCFI115:
 3155              		.cfi_def_cfa_register 13
 3156              		@ sp needed
 3157 0098 5DF8047B 		ldr	r7, [sp], #4
 3158              	.LCFI116:
 3159              		.cfi_restore 7
 3160              		.cfi_def_cfa_offset 0
 3161 009c 7047     		bx	lr
 3162              	.L204:
 3163 009e 00BF     		.align	2
 3164              	.L203:
 3165 00a0 00000000 		.word	uxSchedulerSuspended
 3166 00a4 00000000 		.word	xYieldPending
 3167 00a8 00000000 		.word	uxTopReadyPriority
 3168 00ac 00000000 		.word	pxReadyTasksLists
ARM GAS  /tmp/ccJ0Dfhq.s 			page 110


 3169 00b0 00000000 		.word	pxCurrentTCB
 3170              		.cfi_endproc
 3171              	.LFE27:
 3173              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3174              		.align	2
 3175              		.global	vTaskPlaceOnEventList
 3176              		.thumb
 3177              		.thumb_func
 3179              	vTaskPlaceOnEventList:
 3180              	.LFB28:
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3181              		.loc 1 2821 0
 3182              		.cfi_startproc
 3183              		@ args = 0, pretend = 0, frame = 16
 3184              		@ frame_needed = 1, uses_anonymous_args = 0
 3185 0000 80B5     		push	{r7, lr}
 3186              	.LCFI117:
 3187              		.cfi_def_cfa_offset 8
 3188              		.cfi_offset 7, -8
 3189              		.cfi_offset 14, -4
 3190 0002 84B0     		sub	sp, sp, #16
 3191              	.LCFI118:
 3192              		.cfi_def_cfa_offset 24
 3193 0004 00AF     		add	r7, sp, #0
 3194              	.LCFI119:
 3195              		.cfi_def_cfa_register 7
 3196 0006 7860     		str	r0, [r7, #4]
 3197 0008 3960     		str	r1, [r7]
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3198              		.loc 1 2822 0
 3199 000a 7B68     		ldr	r3, [r7, #4]
 3200 000c 002B     		cmp	r3, #0
 3201 000e 09D1     		bne	.L206
 3202              	.LBB150:
 3203              	.LBB151:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3204              		.loc 2 237 0 discriminator 1
 3205              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3206 0010 4FF05003 			mov r3, #80												
 3207 0014 83F31188 		msr basepri, r3											
 3208 0018 BFF36F8F 		isb														
 3209 001c BFF34F8F 		dsb														
 3210              	
 3211              	@ 0 "" 2
 3212              		.thumb
 3213 0020 FB60     		str	r3, [r7, #12]
 3214              	.L207:
 3215              	.LBE151:
 3216              	.LBE150:
 3217              		.loc 1 2822 0 discriminator 1
 3218 0022 FEE7     		b	.L207
 3219              	.L206:
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
ARM GAS  /tmp/ccJ0Dfhq.s 			page 111


2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 3220              		.loc 1 2831 0
 3221 0024 064B     		ldr	r3, .L208
 3222 0026 1B68     		ldr	r3, [r3]
 3223 0028 1833     		adds	r3, r3, #24
 3224 002a 7868     		ldr	r0, [r7, #4]
 3225 002c 1946     		mov	r1, r3
 3226 002e FFF7FEFF 		bl	vListInsert
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 3227              		.loc 1 2833 0
 3228 0032 3868     		ldr	r0, [r7]
 3229 0034 0121     		movs	r1, #1
 3230 0036 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3231              		.loc 1 2834 0
 3232 003a 1037     		adds	r7, r7, #16
 3233              	.LCFI120:
 3234              		.cfi_def_cfa_offset 8
 3235 003c BD46     		mov	sp, r7
 3236              	.LCFI121:
 3237              		.cfi_def_cfa_register 13
 3238              		@ sp needed
 3239 003e 80BD     		pop	{r7, pc}
 3240              	.L209:
 3241              		.align	2
 3242              	.L208:
 3243 0040 00000000 		.word	pxCurrentTCB
 3244              		.cfi_endproc
 3245              	.LFE28:
 3247              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3248              		.align	2
 3249              		.global	vTaskPlaceOnUnorderedEventList
 3250              		.thumb
 3251              		.thumb_func
 3253              	vTaskPlaceOnUnorderedEventList:
 3254              	.LFB29:
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3255              		.loc 1 2838 0
 3256              		.cfi_startproc
 3257              		@ args = 0, pretend = 0, frame = 24
 3258              		@ frame_needed = 1, uses_anonymous_args = 0
 3259 0000 80B5     		push	{r7, lr}
 3260              	.LCFI122:
 3261              		.cfi_def_cfa_offset 8
 3262              		.cfi_offset 7, -8
 3263              		.cfi_offset 14, -4
 3264 0002 86B0     		sub	sp, sp, #24
ARM GAS  /tmp/ccJ0Dfhq.s 			page 112


 3265              	.LCFI123:
 3266              		.cfi_def_cfa_offset 32
 3267 0004 00AF     		add	r7, sp, #0
 3268              	.LCFI124:
 3269              		.cfi_def_cfa_register 7
 3270 0006 F860     		str	r0, [r7, #12]
 3271 0008 B960     		str	r1, [r7, #8]
 3272 000a 7A60     		str	r2, [r7, #4]
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3273              		.loc 1 2839 0
 3274 000c FB68     		ldr	r3, [r7, #12]
 3275 000e 002B     		cmp	r3, #0
 3276 0010 09D1     		bne	.L211
 3277              	.LBB152:
 3278              	.LBB153:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3279              		.loc 2 237 0 discriminator 1
 3280              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3281 0012 4FF05003 			mov r3, #80												
 3282 0016 83F31188 		msr basepri, r3											
 3283 001a BFF36F8F 		isb														
 3284 001e BFF34F8F 		dsb														
 3285              	
 3286              	@ 0 "" 2
 3287              		.thumb
 3288 0022 7B61     		str	r3, [r7, #20]
 3289              	.L212:
 3290              	.LBE153:
 3291              	.LBE152:
 3292              		.loc 1 2839 0 discriminator 1
 3293 0024 FEE7     		b	.L212
 3294              	.L211:
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
 3295              		.loc 1 2843 0
 3296 0026 114B     		ldr	r3, .L215
 3297 0028 1B68     		ldr	r3, [r3]
 3298 002a 002B     		cmp	r3, #0
 3299 002c 09D1     		bne	.L213
 3300              	.LBB154:
 3301              	.LBB155:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3302              		.loc 2 237 0 discriminator 1
 3303              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3304 002e 4FF05003 			mov r3, #80												
 3305 0032 83F31188 		msr basepri, r3											
 3306 0036 BFF36F8F 		isb														
 3307 003a BFF34F8F 		dsb														
 3308              	
 3309              	@ 0 "" 2
 3310              		.thumb
 3311 003e 3B61     		str	r3, [r7, #16]
 3312              	.L214:
 3313              	.LBE155:
 3314              	.LBE154:
ARM GAS  /tmp/ccJ0Dfhq.s 			page 113


 3315              		.loc 1 2843 0 discriminator 2
 3316 0040 FEE7     		b	.L214
 3317              	.L213:
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
 3318              		.loc 1 2848 0
 3319 0042 0B4B     		ldr	r3, .L215+4
 3320 0044 1B68     		ldr	r3, [r3]
 3321 0046 BA68     		ldr	r2, [r7, #8]
 3322 0048 42F00042 		orr	r2, r2, #-2147483648
 3323 004c 9A61     		str	r2, [r3, #24]
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 3324              		.loc 1 2855 0
 3325 004e 084B     		ldr	r3, .L215+4
 3326 0050 1B68     		ldr	r3, [r3]
 3327 0052 1833     		adds	r3, r3, #24
 3328 0054 F868     		ldr	r0, [r7, #12]
 3329 0056 1946     		mov	r1, r3
 3330 0058 FFF7FEFF 		bl	vListInsertEnd
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 3331              		.loc 1 2857 0
 3332 005c 7868     		ldr	r0, [r7, #4]
 3333 005e 0121     		movs	r1, #1
 3334 0060 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3335              		.loc 1 2858 0
 3336 0064 1837     		adds	r7, r7, #24
 3337              	.LCFI125:
 3338              		.cfi_def_cfa_offset 8
 3339 0066 BD46     		mov	sp, r7
 3340              	.LCFI126:
 3341              		.cfi_def_cfa_register 13
 3342              		@ sp needed
 3343 0068 80BD     		pop	{r7, pc}
 3344              	.L216:
 3345 006a 00BF     		.align	2
 3346              	.L215:
 3347 006c 00000000 		.word	uxSchedulerSuspended
 3348 0070 00000000 		.word	pxCurrentTCB
 3349              		.cfi_endproc
 3350              	.LFE29:
 3352              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3353              		.align	2
 3354              		.global	xTaskRemoveFromEventList
 3355              		.thumb
 3356              		.thumb_func
 3358              	xTaskRemoveFromEventList:
ARM GAS  /tmp/ccJ0Dfhq.s 			page 114


 3359              	.LFB30:
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3360              		.loc 1 2895 0
 3361              		.cfi_startproc
 3362              		@ args = 0, pretend = 0, frame = 24
 3363              		@ frame_needed = 1, uses_anonymous_args = 0
 3364 0000 80B5     		push	{r7, lr}
 3365              	.LCFI127:
 3366              		.cfi_def_cfa_offset 8
 3367              		.cfi_offset 7, -8
 3368              		.cfi_offset 14, -4
 3369 0002 86B0     		sub	sp, sp, #24
 3370              	.LCFI128:
 3371              		.cfi_def_cfa_offset 32
 3372 0004 00AF     		add	r7, sp, #0
 3373              	.LCFI129:
 3374              		.cfi_def_cfa_register 7
 3375 0006 7860     		str	r0, [r7, #4]
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccJ0Dfhq.s 			page 115


2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 3376              		.loc 1 2912 0
 3377 0008 7B68     		ldr	r3, [r7, #4]
 3378 000a DB68     		ldr	r3, [r3, #12]
 3379 000c DB68     		ldr	r3, [r3, #12]
 3380 000e 3B61     		str	r3, [r7, #16]
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3381              		.loc 1 2913 0
 3382 0010 3B69     		ldr	r3, [r7, #16]
 3383 0012 002B     		cmp	r3, #0
 3384 0014 09D1     		bne	.L218
 3385              	.LBB156:
 3386              	.LBB157:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3387              		.loc 2 237 0 discriminator 1
 3388              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3389 0016 4FF05003 			mov r3, #80												
 3390 001a 83F31188 		msr basepri, r3											
 3391 001e BFF36F8F 		isb														
 3392 0022 BFF34F8F 		dsb														
 3393              	
 3394              	@ 0 "" 2
 3395              		.thumb
 3396 0026 FB60     		str	r3, [r7, #12]
 3397              	.L219:
 3398              	.LBE157:
 3399              	.LBE156:
 3400              		.loc 1 2913 0 discriminator 1
 3401 0028 FEE7     		b	.L219
 3402              	.L218:
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3403              		.loc 1 2914 0
 3404 002a 3B69     		ldr	r3, [r7, #16]
 3405 002c 1833     		adds	r3, r3, #24
 3406 002e 1846     		mov	r0, r3
 3407 0030 FFF7FEFF 		bl	uxListRemove
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3408              		.loc 1 2916 0
 3409 0034 1E4B     		ldr	r3, .L225
 3410 0036 1B68     		ldr	r3, [r3]
 3411 0038 002B     		cmp	r3, #0
 3412 003a 1ED1     		bne	.L220
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccJ0Dfhq.s 			page 116


2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 3413              		.loc 1 2918 0
 3414 003c 3B69     		ldr	r3, [r7, #16]
 3415 003e 0433     		adds	r3, r3, #4
 3416 0040 1846     		mov	r0, r3
 3417 0042 FFF7FEFF 		bl	uxListRemove
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3418              		.loc 1 2919 0
 3419 0046 3B69     		ldr	r3, [r7, #16]
 3420 0048 DB6A     		ldr	r3, [r3, #44]
 3421 004a 1A46     		mov	r2, r3
 3422 004c 0123     		movs	r3, #1
 3423 004e 03FA02F2 		lsl	r2, r3, r2
 3424 0052 184B     		ldr	r3, .L225+4
 3425 0054 1B68     		ldr	r3, [r3]
 3426 0056 1343     		orrs	r3, r3, r2
 3427 0058 164A     		ldr	r2, .L225+4
 3428 005a 1360     		str	r3, [r2]
 3429 005c 3B69     		ldr	r3, [r7, #16]
 3430 005e DA6A     		ldr	r2, [r3, #44]
 3431 0060 1346     		mov	r3, r2
 3432 0062 9B00     		lsls	r3, r3, #2
 3433 0064 1344     		add	r3, r3, r2
 3434 0066 9B00     		lsls	r3, r3, #2
 3435 0068 134A     		ldr	r2, .L225+8
 3436 006a 1A44     		add	r2, r2, r3
 3437 006c 3B69     		ldr	r3, [r7, #16]
 3438 006e 0433     		adds	r3, r3, #4
 3439 0070 1046     		mov	r0, r2
 3440 0072 1946     		mov	r1, r3
 3441 0074 FFF7FEFF 		bl	vListInsertEnd
 3442 0078 05E0     		b	.L221
 3443              	.L220:
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 3444              		.loc 1 2925 0
 3445 007a 3B69     		ldr	r3, [r7, #16]
 3446 007c 1833     		adds	r3, r3, #24
 3447 007e 0F48     		ldr	r0, .L225+12
 3448 0080 1946     		mov	r1, r3
 3449 0082 FFF7FEFF 		bl	vListInsertEnd
 3450              	.L221:
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 3451              		.loc 1 2928 0
 3452 0086 3B69     		ldr	r3, [r7, #16]
 3453 0088 DA6A     		ldr	r2, [r3, #44]
 3454 008a 0D4B     		ldr	r3, .L225+16
 3455 008c 1B68     		ldr	r3, [r3]
 3456 008e DB6A     		ldr	r3, [r3, #44]
 3457 0090 9A42     		cmp	r2, r3
 3458 0092 05D9     		bls	.L222
ARM GAS  /tmp/ccJ0Dfhq.s 			page 117


2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
 3459              		.loc 1 2933 0
 3460 0094 0123     		movs	r3, #1
 3461 0096 7B61     		str	r3, [r7, #20]
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 3462              		.loc 1 2937 0
 3463 0098 0A4B     		ldr	r3, .L225+20
 3464 009a 0122     		movs	r2, #1
 3465 009c 1A60     		str	r2, [r3]
 3466 009e 01E0     		b	.L223
 3467              	.L222:
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
 3468              		.loc 1 2941 0
 3469 00a0 0023     		movs	r3, #0
 3470 00a2 7B61     		str	r3, [r7, #20]
 3471              	.L223:
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 3472              		.loc 1 2958 0
 3473 00a4 7B69     		ldr	r3, [r7, #20]
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3474              		.loc 1 2959 0
 3475 00a6 1846     		mov	r0, r3
 3476 00a8 1837     		adds	r7, r7, #24
 3477              	.LCFI130:
 3478              		.cfi_def_cfa_offset 8
 3479 00aa BD46     		mov	sp, r7
 3480              	.LCFI131:
 3481              		.cfi_def_cfa_register 13
 3482              		@ sp needed
 3483 00ac 80BD     		pop	{r7, pc}
 3484              	.L226:
ARM GAS  /tmp/ccJ0Dfhq.s 			page 118


 3485 00ae 00BF     		.align	2
 3486              	.L225:
 3487 00b0 00000000 		.word	uxSchedulerSuspended
 3488 00b4 00000000 		.word	uxTopReadyPriority
 3489 00b8 00000000 		.word	pxReadyTasksLists
 3490 00bc 00000000 		.word	xPendingReadyList
 3491 00c0 00000000 		.word	pxCurrentTCB
 3492 00c4 00000000 		.word	xYieldPending
 3493              		.cfi_endproc
 3494              	.LFE30:
 3496              		.section	.text.xTaskRemoveFromUnorderedEventList,"ax",%progbits
 3497              		.align	2
 3498              		.global	xTaskRemoveFromUnorderedEventList
 3499              		.thumb
 3500              		.thumb_func
 3502              	xTaskRemoveFromUnorderedEventList:
 3503              	.LFB31:
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemV
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3504              		.loc 1 2963 0
 3505              		.cfi_startproc
 3506              		@ args = 0, pretend = 0, frame = 24
 3507              		@ frame_needed = 1, uses_anonymous_args = 0
 3508 0000 80B5     		push	{r7, lr}
 3509              	.LCFI132:
 3510              		.cfi_def_cfa_offset 8
 3511              		.cfi_offset 7, -8
 3512              		.cfi_offset 14, -4
 3513 0002 86B0     		sub	sp, sp, #24
 3514              	.LCFI133:
 3515              		.cfi_def_cfa_offset 32
 3516 0004 00AF     		add	r7, sp, #0
 3517              	.LCFI134:
 3518              		.cfi_def_cfa_register 7
 3519 0006 7860     		str	r0, [r7, #4]
 3520 0008 3960     		str	r1, [r7]
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
 3521              		.loc 1 2969 0
 3522 000a 2C4B     		ldr	r3, .L235
 3523 000c 1B68     		ldr	r3, [r3]
 3524 000e 002B     		cmp	r3, #0
 3525 0010 09D1     		bne	.L228
 3526              	.LBB158:
 3527              	.LBB159:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3528              		.loc 2 237 0 discriminator 1
 3529              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3530 0012 4FF05003 			mov r3, #80												
 3531 0016 83F31188 		msr basepri, r3											
 3532 001a BFF36F8F 		isb														
ARM GAS  /tmp/ccJ0Dfhq.s 			page 119


 3533 001e BFF34F8F 		dsb														
 3534              	
 3535              	@ 0 "" 2
 3536              		.thumb
 3537 0022 FB60     		str	r3, [r7, #12]
 3538              	.L229:
 3539              	.LBE159:
 3540              	.LBE158:
 3541              		.loc 1 2969 0 discriminator 1
 3542 0024 FEE7     		b	.L229
 3543              	.L228:
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 3544              		.loc 1 2972 0
 3545 0026 3B68     		ldr	r3, [r7]
 3546 0028 43F00042 		orr	r2, r3, #-2147483648
 3547 002c 7B68     		ldr	r3, [r7, #4]
 3548 002e 1A60     		str	r2, [r3]
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 3549              		.loc 1 2976 0
 3550 0030 7B68     		ldr	r3, [r7, #4]
 3551 0032 DB68     		ldr	r3, [r3, #12]
 3552 0034 3B61     		str	r3, [r7, #16]
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3553              		.loc 1 2977 0
 3554 0036 3B69     		ldr	r3, [r7, #16]
 3555 0038 002B     		cmp	r3, #0
 3556 003a 09D1     		bne	.L230
 3557              	.LBB160:
 3558              	.LBB161:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3559              		.loc 2 237 0 discriminator 1
 3560              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3561 003c 4FF05003 			mov r3, #80												
 3562 0040 83F31188 		msr basepri, r3											
 3563 0044 BFF36F8F 		isb														
 3564 0048 BFF34F8F 		dsb														
 3565              	
 3566              	@ 0 "" 2
 3567              		.thumb
 3568 004c BB60     		str	r3, [r7, #8]
 3569              	.L231:
 3570              	.LBE161:
 3571              	.LBE160:
 3572              		.loc 1 2977 0 discriminator 2
 3573 004e FEE7     		b	.L231
 3574              	.L230:
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3575              		.loc 1 2978 0
 3576 0050 7868     		ldr	r0, [r7, #4]
 3577 0052 FFF7FEFF 		bl	uxListRemove
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
ARM GAS  /tmp/ccJ0Dfhq.s 			page 120


2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 3578              		.loc 1 2983 0
 3579 0056 3B69     		ldr	r3, [r7, #16]
 3580 0058 0433     		adds	r3, r3, #4
 3581 005a 1846     		mov	r0, r3
 3582 005c FFF7FEFF 		bl	uxListRemove
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3583              		.loc 1 2984 0
 3584 0060 3B69     		ldr	r3, [r7, #16]
 3585 0062 DB6A     		ldr	r3, [r3, #44]
 3586 0064 1A46     		mov	r2, r3
 3587 0066 0123     		movs	r3, #1
 3588 0068 03FA02F2 		lsl	r2, r3, r2
 3589 006c 144B     		ldr	r3, .L235+4
 3590 006e 1B68     		ldr	r3, [r3]
 3591 0070 1343     		orrs	r3, r3, r2
 3592 0072 134A     		ldr	r2, .L235+4
 3593 0074 1360     		str	r3, [r2]
 3594 0076 3B69     		ldr	r3, [r7, #16]
 3595 0078 DA6A     		ldr	r2, [r3, #44]
 3596 007a 1346     		mov	r3, r2
 3597 007c 9B00     		lsls	r3, r3, #2
 3598 007e 1344     		add	r3, r3, r2
 3599 0080 9B00     		lsls	r3, r3, #2
 3600 0082 104A     		ldr	r2, .L235+8
 3601 0084 1A44     		add	r2, r2, r3
 3602 0086 3B69     		ldr	r3, [r7, #16]
 3603 0088 0433     		adds	r3, r3, #4
 3604 008a 1046     		mov	r0, r2
 3605 008c 1946     		mov	r1, r3
 3606 008e FFF7FEFF 		bl	vListInsertEnd
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 3607              		.loc 1 2986 0
 3608 0092 3B69     		ldr	r3, [r7, #16]
 3609 0094 DA6A     		ldr	r2, [r3, #44]
 3610 0096 0C4B     		ldr	r3, .L235+12
 3611 0098 1B68     		ldr	r3, [r3]
 3612 009a DB6A     		ldr	r3, [r3, #44]
 3613 009c 9A42     		cmp	r2, r3
 3614 009e 05D9     		bls	.L232
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a higher priority than the calling task.  This allows
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task to know if it should force a context
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch now. */
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
 3615              		.loc 1 2992 0
 3616 00a0 0123     		movs	r3, #1
 3617 00a2 7B61     		str	r3, [r7, #20]
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 3618              		.loc 1 2996 0
ARM GAS  /tmp/ccJ0Dfhq.s 			page 121


 3619 00a4 094B     		ldr	r3, .L235+16
 3620 00a6 0122     		movs	r2, #1
 3621 00a8 1A60     		str	r2, [r3]
 3622 00aa 01E0     		b	.L233
 3623              	.L232:
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
 3624              		.loc 1 3000 0
 3625 00ac 0023     		movs	r3, #0
 3626 00ae 7B61     		str	r3, [r7, #20]
 3627              	.L233:
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 3628              		.loc 1 3003 0
 3629 00b0 7B69     		ldr	r3, [r7, #20]
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3630              		.loc 1 3004 0
 3631 00b2 1846     		mov	r0, r3
 3632 00b4 1837     		adds	r7, r7, #24
 3633              	.LCFI135:
 3634              		.cfi_def_cfa_offset 8
 3635 00b6 BD46     		mov	sp, r7
 3636              	.LCFI136:
 3637              		.cfi_def_cfa_register 13
 3638              		@ sp needed
 3639 00b8 80BD     		pop	{r7, pc}
 3640              	.L236:
 3641 00ba 00BF     		.align	2
 3642              	.L235:
 3643 00bc 00000000 		.word	uxSchedulerSuspended
 3644 00c0 00000000 		.word	uxTopReadyPriority
 3645 00c4 00000000 		.word	pxReadyTasksLists
 3646 00c8 00000000 		.word	pxCurrentTCB
 3647 00cc 00000000 		.word	xYieldPending
 3648              		.cfi_endproc
 3649              	.LFE31:
 3651              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3652              		.align	2
 3653              		.global	vTaskSetTimeOutState
 3654              		.thumb
 3655              		.thumb_func
 3657              	vTaskSetTimeOutState:
 3658              	.LFB32:
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3659              		.loc 1 3008 0
 3660              		.cfi_startproc
 3661              		@ args = 0, pretend = 0, frame = 16
 3662              		@ frame_needed = 1, uses_anonymous_args = 0
 3663              		@ link register save eliminated.
 3664 0000 80B4     		push	{r7}
 3665              	.LCFI137:
ARM GAS  /tmp/ccJ0Dfhq.s 			page 122


 3666              		.cfi_def_cfa_offset 4
 3667              		.cfi_offset 7, -4
 3668 0002 85B0     		sub	sp, sp, #20
 3669              	.LCFI138:
 3670              		.cfi_def_cfa_offset 24
 3671 0004 00AF     		add	r7, sp, #0
 3672              	.LCFI139:
 3673              		.cfi_def_cfa_register 7
 3674 0006 7860     		str	r0, [r7, #4]
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3675              		.loc 1 3009 0
 3676 0008 7B68     		ldr	r3, [r7, #4]
 3677 000a 002B     		cmp	r3, #0
 3678 000c 09D1     		bne	.L238
 3679              	.LBB162:
 3680              	.LBB163:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3681              		.loc 2 237 0 discriminator 1
 3682              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3683 000e 4FF05003 			mov r3, #80												
 3684 0012 83F31188 		msr basepri, r3											
 3685 0016 BFF36F8F 		isb														
 3686 001a BFF34F8F 		dsb														
 3687              	
 3688              	@ 0 "" 2
 3689              		.thumb
 3690 001e FB60     		str	r3, [r7, #12]
 3691              	.L239:
 3692              	.LBE163:
 3693              	.LBE162:
 3694              		.loc 1 3009 0 discriminator 1
 3695 0020 FEE7     		b	.L239
 3696              	.L238:
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 3697              		.loc 1 3010 0
 3698 0022 064B     		ldr	r3, .L240
 3699 0024 1A68     		ldr	r2, [r3]
 3700 0026 7B68     		ldr	r3, [r7, #4]
 3701 0028 1A60     		str	r2, [r3]
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3702              		.loc 1 3011 0
 3703 002a 054B     		ldr	r3, .L240+4
 3704 002c 1A68     		ldr	r2, [r3]
 3705 002e 7B68     		ldr	r3, [r7, #4]
 3706 0030 5A60     		str	r2, [r3, #4]
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3707              		.loc 1 3012 0
 3708 0032 1437     		adds	r7, r7, #20
 3709              	.LCFI140:
 3710              		.cfi_def_cfa_offset 4
 3711 0034 BD46     		mov	sp, r7
 3712              	.LCFI141:
 3713              		.cfi_def_cfa_register 13
 3714              		@ sp needed
 3715 0036 5DF8047B 		ldr	r7, [sp], #4
 3716              	.LCFI142:
 3717              		.cfi_restore 7
ARM GAS  /tmp/ccJ0Dfhq.s 			page 123


 3718              		.cfi_def_cfa_offset 0
 3719 003a 7047     		bx	lr
 3720              	.L241:
 3721              		.align	2
 3722              	.L240:
 3723 003c 00000000 		.word	xNumOfOverflows
 3724 0040 00000000 		.word	xTickCount
 3725              		.cfi_endproc
 3726              	.LFE32:
 3728              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3729              		.align	2
 3730              		.global	xTaskCheckForTimeOut
 3731              		.thumb
 3732              		.thumb_func
 3734              	xTaskCheckForTimeOut:
 3735              	.LFB33:
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3736              		.loc 1 3016 0
 3737              		.cfi_startproc
 3738              		@ args = 0, pretend = 0, frame = 24
 3739              		@ frame_needed = 1, uses_anonymous_args = 0
 3740 0000 80B5     		push	{r7, lr}
 3741              	.LCFI143:
 3742              		.cfi_def_cfa_offset 8
 3743              		.cfi_offset 7, -8
 3744              		.cfi_offset 14, -4
 3745 0002 86B0     		sub	sp, sp, #24
 3746              	.LCFI144:
 3747              		.cfi_def_cfa_offset 32
 3748 0004 00AF     		add	r7, sp, #0
 3749              	.LCFI145:
 3750              		.cfi_def_cfa_register 7
 3751 0006 7860     		str	r0, [r7, #4]
 3752 0008 3960     		str	r1, [r7]
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3753              		.loc 1 3019 0
 3754 000a 7B68     		ldr	r3, [r7, #4]
 3755 000c 002B     		cmp	r3, #0
 3756 000e 09D1     		bne	.L243
 3757              	.LBB164:
 3758              	.LBB165:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3759              		.loc 2 237 0 discriminator 1
 3760              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3761 0010 4FF05003 			mov r3, #80												
 3762 0014 83F31188 		msr basepri, r3											
 3763 0018 BFF36F8F 		isb														
 3764 001c BFF34F8F 		dsb														
 3765              	
 3766              	@ 0 "" 2
 3767              		.thumb
 3768 0020 FB60     		str	r3, [r7, #12]
ARM GAS  /tmp/ccJ0Dfhq.s 			page 124


 3769              	.L244:
 3770              	.LBE165:
 3771              	.LBE164:
 3772              		.loc 1 3019 0 discriminator 1
 3773 0022 FEE7     		b	.L244
 3774              	.L243:
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3775              		.loc 1 3020 0
 3776 0024 3B68     		ldr	r3, [r7]
 3777 0026 002B     		cmp	r3, #0
 3778 0028 09D1     		bne	.L245
 3779              	.LBB166:
 3780              	.LBB167:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3781              		.loc 2 237 0 discriminator 1
 3782              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3783 002a 4FF05003 			mov r3, #80												
 3784 002e 83F31188 		msr basepri, r3											
 3785 0032 BFF36F8F 		isb														
 3786 0036 BFF34F8F 		dsb														
 3787              	
 3788              	@ 0 "" 2
 3789              		.thumb
 3790 003a BB60     		str	r3, [r7, #8]
 3791              	.L246:
 3792              	.LBE167:
 3793              	.LBE166:
 3794              		.loc 1 3020 0 discriminator 2
 3795 003c FEE7     		b	.L246
 3796              	.L245:
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 3797              		.loc 1 3022 0
 3798 003e FFF7FEFF 		bl	vPortEnterCritical
 3799              	.LBB168:
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
 3800              		.loc 1 3025 0
 3801 0042 1C4B     		ldr	r3, .L252
 3802 0044 1B68     		ldr	r3, [r3]
 3803 0046 3B61     		str	r3, [r7, #16]
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 3804              		.loc 1 3039 0
ARM GAS  /tmp/ccJ0Dfhq.s 			page 125


 3805 0048 3B68     		ldr	r3, [r7]
 3806 004a 1B68     		ldr	r3, [r3]
 3807 004c B3F1FF3F 		cmp	r3, #-1
 3808 0050 02D1     		bne	.L247
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 3809              		.loc 1 3044 0
 3810 0052 0023     		movs	r3, #0
 3811 0054 7B61     		str	r3, [r7, #20]
 3812 0056 26E0     		b	.L248
 3813              	.L247:
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
 3814              		.loc 1 3049 0
 3815 0058 7B68     		ldr	r3, [r7, #4]
 3816 005a 1A68     		ldr	r2, [r3]
 3817 005c 164B     		ldr	r3, .L252+4
 3818 005e 1B68     		ldr	r3, [r3]
 3819 0060 9A42     		cmp	r2, r3
 3820 0062 07D0     		beq	.L249
 3821              		.loc 1 3049 0 is_stmt 0 discriminator 1
 3822 0064 7B68     		ldr	r3, [r7, #4]
 3823 0066 5A68     		ldr	r2, [r3, #4]
 3824 0068 3B69     		ldr	r3, [r7, #16]
 3825 006a 9A42     		cmp	r2, r3
 3826 006c 02D8     		bhi	.L249
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 3827              		.loc 1 3056 0 is_stmt 1
 3828 006e 0123     		movs	r3, #1
 3829 0070 7B61     		str	r3, [r7, #20]
 3830 0072 18E0     		b	.L248
 3831              	.L249:
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /
 3832              		.loc 1 3058 0
 3833 0074 7B68     		ldr	r3, [r7, #4]
 3834 0076 5B68     		ldr	r3, [r3, #4]
 3835 0078 3A69     		ldr	r2, [r7, #16]
 3836 007a D21A     		subs	r2, r2, r3
 3837 007c 3B68     		ldr	r3, [r7]
 3838 007e 1B68     		ldr	r3, [r3]
 3839 0080 9A42     		cmp	r2, r3
 3840 0082 0ED2     		bcs	.L250
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
ARM GAS  /tmp/ccJ0Dfhq.s 			page 126


3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 3841              		.loc 1 3061 0
 3842 0084 3B68     		ldr	r3, [r7]
 3843 0086 1A68     		ldr	r2, [r3]
 3844 0088 7B68     		ldr	r3, [r7, #4]
 3845 008a 5968     		ldr	r1, [r3, #4]
 3846 008c 3B69     		ldr	r3, [r7, #16]
 3847 008e CB1A     		subs	r3, r1, r3
 3848 0090 1A44     		add	r2, r2, r3
 3849 0092 3B68     		ldr	r3, [r7]
 3850 0094 1A60     		str	r2, [r3]
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 3851              		.loc 1 3062 0
 3852 0096 7868     		ldr	r0, [r7, #4]
 3853 0098 FFF7FEFF 		bl	vTaskSetTimeOutState
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 3854              		.loc 1 3063 0
 3855 009c 0023     		movs	r3, #0
 3856 009e 7B61     		str	r3, [r7, #20]
 3857 00a0 01E0     		b	.L248
 3858              	.L250:
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 3859              		.loc 1 3067 0
 3860 00a2 0123     		movs	r3, #1
 3861 00a4 7B61     		str	r3, [r7, #20]
 3862              	.L248:
 3863              	.LBE168:
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 3864              		.loc 1 3070 0
 3865 00a6 FFF7FEFF 		bl	vPortExitCritical
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 3866              		.loc 1 3072 0
 3867 00aa 7B69     		ldr	r3, [r7, #20]
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3868              		.loc 1 3073 0
 3869 00ac 1846     		mov	r0, r3
 3870 00ae 1837     		adds	r7, r7, #24
 3871              	.LCFI146:
 3872              		.cfi_def_cfa_offset 8
 3873 00b0 BD46     		mov	sp, r7
 3874              	.LCFI147:
 3875              		.cfi_def_cfa_register 13
 3876              		@ sp needed
 3877 00b2 80BD     		pop	{r7, pc}
 3878              	.L253:
 3879              		.align	2
 3880              	.L252:
 3881 00b4 00000000 		.word	xTickCount
 3882 00b8 00000000 		.word	xNumOfOverflows
 3883              		.cfi_endproc
 3884              	.LFE33:
ARM GAS  /tmp/ccJ0Dfhq.s 			page 127


 3886              		.section	.text.vTaskMissedYield,"ax",%progbits
 3887              		.align	2
 3888              		.global	vTaskMissedYield
 3889              		.thumb
 3890              		.thumb_func
 3892              	vTaskMissedYield:
 3893              	.LFB34:
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3894              		.loc 1 3077 0
 3895              		.cfi_startproc
 3896              		@ args = 0, pretend = 0, frame = 0
 3897              		@ frame_needed = 1, uses_anonymous_args = 0
 3898              		@ link register save eliminated.
 3899 0000 80B4     		push	{r7}
 3900              	.LCFI148:
 3901              		.cfi_def_cfa_offset 4
 3902              		.cfi_offset 7, -4
 3903 0002 00AF     		add	r7, sp, #0
 3904              	.LCFI149:
 3905              		.cfi_def_cfa_register 7
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 3906              		.loc 1 3078 0
 3907 0004 034B     		ldr	r3, .L255
 3908 0006 0122     		movs	r2, #1
 3909 0008 1A60     		str	r2, [r3]
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3910              		.loc 1 3079 0
 3911 000a BD46     		mov	sp, r7
 3912              	.LCFI150:
 3913              		.cfi_def_cfa_register 13
 3914              		@ sp needed
 3915 000c 5DF8047B 		ldr	r7, [sp], #4
 3916              	.LCFI151:
 3917              		.cfi_restore 7
 3918              		.cfi_def_cfa_offset 0
 3919 0010 7047     		bx	lr
 3920              	.L256:
 3921 0012 00BF     		.align	2
 3922              	.L255:
 3923 0014 00000000 		.word	xYieldPending
 3924              		.cfi_endproc
 3925              	.LFE34:
 3927              		.section	.text.prvIdleTask,"ax",%progbits
 3928              		.align	2
 3929              		.thumb
 3930              		.thumb_func
 3932              	prvIdleTask:
 3933              	.LFB35:
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccJ0Dfhq.s 			page 128


3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3934              		.loc 1 3132 0
 3935              		.cfi_startproc
 3936              		@ args = 0, pretend = 0, frame = 8
 3937              		@ frame_needed = 1, uses_anonymous_args = 0
 3938 0000 80B5     		push	{r7, lr}
 3939              	.LCFI152:
 3940              		.cfi_def_cfa_offset 8
 3941              		.cfi_offset 7, -8
 3942              		.cfi_offset 14, -4
 3943 0002 82B0     		sub	sp, sp, #8
ARM GAS  /tmp/ccJ0Dfhq.s 			page 129


 3944              	.LCFI153:
 3945              		.cfi_def_cfa_offset 16
 3946 0004 00AF     		add	r7, sp, #0
 3947              	.LCFI154:
 3948              		.cfi_def_cfa_register 7
 3949 0006 7860     		str	r0, [r7, #4]
 3950              	.L259:
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
 3951              		.loc 1 3143 0
 3952 0008 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 3953              		.loc 1 3166 0
 3954 000c 064B     		ldr	r3, .L260
 3955 000e 1B68     		ldr	r3, [r3]
 3956 0010 012B     		cmp	r3, #1
 3957 0012 07D9     		bls	.L258
3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
 3958              		.loc 1 3168 0
 3959 0014 054B     		ldr	r3, .L260+4
 3960 0016 4FF08052 		mov	r2, #268435456
 3961 001a 1A60     		str	r2, [r3]
 3962              	@ 3168 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3963 001c BFF34F8F 		dsb
 3964              	@ 0 "" 2
ARM GAS  /tmp/ccJ0Dfhq.s 			page 130


 3965              	@ 3168 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3966 0020 BFF36F8F 		isb
 3967              	@ 0 "" 2
 3968              		.thumb
 3969              	.L258:
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /tmp/ccJ0Dfhq.s 			page 131


3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3970              		.loc 1 3234 0
 3971 0024 F0E7     		b	.L259
 3972              	.L261:
 3973 0026 00BF     		.align	2
 3974              	.L260:
 3975 0028 00000000 		.word	pxReadyTasksLists
 3976 002c 04ED00E0 		.word	-536810236
 3977              		.cfi_endproc
 3978              	.LFE35:
 3980              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 3981              		.align	2
 3982              		.thumb
 3983              		.thumb_func
 3985              	prvInitialiseTaskLists:
 3986              	.LFB36:
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
ARM GAS  /tmp/ccJ0Dfhq.s 			page 132


3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
ARM GAS  /tmp/ccJ0Dfhq.s 			page 133


3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3987              		.loc 1 3334 0
 3988              		.cfi_startproc
 3989              		@ args = 0, pretend = 0, frame = 8
 3990              		@ frame_needed = 1, uses_anonymous_args = 0
 3991 0000 80B5     		push	{r7, lr}
 3992              	.LCFI155:
 3993              		.cfi_def_cfa_offset 8
 3994              		.cfi_offset 7, -8
 3995              		.cfi_offset 14, -4
 3996 0002 82B0     		sub	sp, sp, #8
 3997              	.LCFI156:
 3998              		.cfi_def_cfa_offset 16
 3999 0004 00AF     		add	r7, sp, #0
 4000              	.LCFI157:
 4001              		.cfi_def_cfa_register 7
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
 4002              		.loc 1 3337 0
 4003 0006 0023     		movs	r3, #0
 4004 0008 7B60     		str	r3, [r7, #4]
 4005 000a 0CE0     		b	.L263
 4006              	.L264:
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 4007              		.loc 1 3339 0 discriminator 3
 4008 000c 7A68     		ldr	r2, [r7, #4]
 4009 000e 1346     		mov	r3, r2
 4010 0010 9B00     		lsls	r3, r3, #2
 4011 0012 1344     		add	r3, r3, r2
 4012 0014 9B00     		lsls	r3, r3, #2
 4013 0016 114A     		ldr	r2, .L265
 4014 0018 1344     		add	r3, r3, r2
 4015 001a 1846     		mov	r0, r3
 4016 001c FFF7FEFF 		bl	vListInitialise
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4017              		.loc 1 3337 0 discriminator 3
 4018 0020 7B68     		ldr	r3, [r7, #4]
 4019 0022 0133     		adds	r3, r3, #1
 4020 0024 7B60     		str	r3, [r7, #4]
 4021              	.L263:
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccJ0Dfhq.s 			page 134


 4022              		.loc 1 3337 0 is_stmt 0 discriminator 1
 4023 0026 7B68     		ldr	r3, [r7, #4]
 4024 0028 062B     		cmp	r3, #6
 4025 002a EFD9     		bls	.L264
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
 4026              		.loc 1 3342 0 is_stmt 1
 4027 002c 0C48     		ldr	r0, .L265+4
 4028 002e FFF7FEFF 		bl	vListInitialise
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 4029              		.loc 1 3343 0
 4030 0032 0C48     		ldr	r0, .L265+8
 4031 0034 FFF7FEFF 		bl	vListInitialise
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 4032              		.loc 1 3344 0
 4033 0038 0B48     		ldr	r0, .L265+12
 4034 003a FFF7FEFF 		bl	vListInitialise
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
 4035              		.loc 1 3348 0
 4036 003e 0B48     		ldr	r0, .L265+16
 4037 0040 FFF7FEFF 		bl	vListInitialise
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
 4038              		.loc 1 3354 0
 4039 0044 0A48     		ldr	r0, .L265+20
 4040 0046 FFF7FEFF 		bl	vListInitialise
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 4041              		.loc 1 3360 0
 4042 004a 0A4B     		ldr	r3, .L265+24
 4043 004c 044A     		ldr	r2, .L265+4
 4044 004e 1A60     		str	r2, [r3]
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 4045              		.loc 1 3361 0
 4046 0050 094B     		ldr	r3, .L265+28
 4047 0052 044A     		ldr	r2, .L265+8
 4048 0054 1A60     		str	r2, [r3]
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4049              		.loc 1 3362 0
 4050 0056 0837     		adds	r7, r7, #8
 4051              	.LCFI158:
 4052              		.cfi_def_cfa_offset 8
 4053 0058 BD46     		mov	sp, r7
 4054              	.LCFI159:
 4055              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccJ0Dfhq.s 			page 135


 4056              		@ sp needed
 4057 005a 80BD     		pop	{r7, pc}
 4058              	.L266:
 4059              		.align	2
 4060              	.L265:
 4061 005c 00000000 		.word	pxReadyTasksLists
 4062 0060 00000000 		.word	xDelayedTaskList1
 4063 0064 00000000 		.word	xDelayedTaskList2
 4064 0068 00000000 		.word	xPendingReadyList
 4065 006c 00000000 		.word	xTasksWaitingTermination
 4066 0070 00000000 		.word	xSuspendedTaskList
 4067 0074 00000000 		.word	pxDelayedTaskList
 4068 0078 00000000 		.word	pxOverflowDelayedTaskList
 4069              		.cfi_endproc
 4070              	.LFE36:
 4072              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 4073              		.align	2
 4074              		.thumb
 4075              		.thumb_func
 4077              	prvCheckTasksWaitingTermination:
 4078              	.LFB37:
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4079              		.loc 1 3366 0
 4080              		.cfi_startproc
 4081              		@ args = 0, pretend = 0, frame = 8
 4082              		@ frame_needed = 1, uses_anonymous_args = 0
 4083 0000 80B5     		push	{r7, lr}
 4084              	.LCFI160:
 4085              		.cfi_def_cfa_offset 8
 4086              		.cfi_offset 7, -8
 4087              		.cfi_offset 14, -4
 4088 0002 82B0     		sub	sp, sp, #8
 4089              	.LCFI161:
 4090              		.cfi_def_cfa_offset 16
 4091 0004 00AF     		add	r7, sp, #0
 4092              	.LCFI162:
 4093              		.cfi_def_cfa_register 7
 4094              	.LBB169:
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xListIsEmpty;
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		too often in the idle task. */
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 4095              		.loc 1 3376 0
 4096 0006 28E0     		b	.L268
 4097              	.L269:
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 4098              		.loc 1 3378 0
ARM GAS  /tmp/ccJ0Dfhq.s 			page 136


 4099 0008 FFF7FEFF 		bl	vTaskSuspendAll
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 4100              		.loc 1 3380 0
 4101 000c 164B     		ldr	r3, .L270
 4102 000e 1B68     		ldr	r3, [r3]
 4103 0010 002B     		cmp	r3, #0
 4104 0012 0CBF     		ite	eq
 4105 0014 0123     		moveq	r3, #1
 4106 0016 0023     		movne	r3, #0
 4107 0018 DBB2     		uxtb	r3, r3
 4108 001a 7B60     		str	r3, [r7, #4]
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xTaskResumeAll();
 4109              		.loc 1 3382 0
 4110 001c FFF7FEFF 		bl	xTaskResumeAll
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xListIsEmpty == pdFALSE )
 4111              		.loc 1 3384 0
 4112 0020 7B68     		ldr	r3, [r7, #4]
 4113 0022 002B     		cmp	r3, #0
 4114 0024 19D1     		bne	.L268
 4115              	.LBB170:
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				TCB_t *pxTCB;
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
 4116              		.loc 1 3388 0
 4117 0026 FFF7FEFF 		bl	vPortEnterCritical
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 4118              		.loc 1 3390 0
 4119 002a 0F4B     		ldr	r3, .L270
 4120 002c DB68     		ldr	r3, [r3, #12]
 4121 002e DB68     		ldr	r3, [r3, #12]
 4122 0030 3B60     		str	r3, [r7]
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 4123              		.loc 1 3391 0
 4124 0032 3B68     		ldr	r3, [r7]
 4125 0034 0433     		adds	r3, r3, #4
 4126 0036 1846     		mov	r0, r3
 4127 0038 FFF7FEFF 		bl	uxListRemove
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxCurrentNumberOfTasks;
 4128              		.loc 1 3392 0
 4129 003c 0B4B     		ldr	r3, .L270+4
 4130 003e 1B68     		ldr	r3, [r3]
 4131 0040 013B     		subs	r3, r3, #1
 4132 0042 0A4A     		ldr	r2, .L270+4
 4133 0044 1360     		str	r3, [r2]
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxDeletedTasksWaitingCleanUp;
 4134              		.loc 1 3393 0
 4135 0046 0A4B     		ldr	r3, .L270+8
 4136 0048 1B68     		ldr	r3, [r3]
 4137 004a 013B     		subs	r3, r3, #1
 4138 004c 084A     		ldr	r2, .L270+8
 4139 004e 1360     		str	r3, [r2]
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/ccJ0Dfhq.s 			page 137


3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
 4140              		.loc 1 3395 0
 4141 0050 FFF7FEFF 		bl	vPortExitCritical
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 4142              		.loc 1 3397 0
 4143 0054 3868     		ldr	r0, [r7]
 4144 0056 FFF7FEFF 		bl	prvDeleteTCB
 4145              	.L268:
 4146              	.LBE170:
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4147              		.loc 1 3376 0
 4148 005a 054B     		ldr	r3, .L270+8
 4149 005c 1B68     		ldr	r3, [r3]
 4150 005e 002B     		cmp	r3, #0
 4151 0060 D2D1     		bne	.L269
 4152              	.LBE169:
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4153              		.loc 1 3406 0
 4154 0062 0837     		adds	r7, r7, #8
 4155              	.LCFI163:
 4156              		.cfi_def_cfa_offset 8
 4157 0064 BD46     		mov	sp, r7
 4158              	.LCFI164:
 4159              		.cfi_def_cfa_register 13
 4160              		@ sp needed
 4161 0066 80BD     		pop	{r7, pc}
 4162              	.L271:
 4163              		.align	2
 4164              	.L270:
 4165 0068 00000000 		.word	xTasksWaitingTermination
 4166 006c 00000000 		.word	uxCurrentNumberOfTasks
 4167 0070 00000000 		.word	uxDeletedTasksWaitingCleanUp
 4168              		.cfi_endproc
 4169              	.LFE37:
 4171              		.section	.text.prvDeleteTCB,"ax",%progbits
 4172              		.align	2
 4173              		.thumb
 4174              		.thumb_func
 4176              	prvDeleteTCB:
 4177              	.LFB38:
3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccJ0Dfhq.s 			page 138


3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the suspended list then there is a chance it is
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			actually just blocked indefinitely - so really it should be reported as
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being in the Blocked state. */
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTaskStatus->eCurrentState == eSuspended )
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTaskStatus->eCurrentState = eBlocked;
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xTaskResumeAll();
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* INCLUDE_vTaskSuspend */
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the value
3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		of eState passed into this function is eInvalid - otherwise the state is
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		just set to whatever is passed in. */
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eState;
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccJ0Dfhq.s 			page 139


3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( xTask );
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile TCB_t *pxNextTCB, *pxFirstTCB;
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
ARM GAS  /tmp/ccJ0Dfhq.s 			page 140


3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( uint16_t ) ulCount;
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4178              		.loc 1 3582 0
 4179              		.cfi_startproc
 4180              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccJ0Dfhq.s 			page 141


 4181              		@ frame_needed = 1, uses_anonymous_args = 0
 4182 0000 80B5     		push	{r7, lr}
 4183              	.LCFI165:
 4184              		.cfi_def_cfa_offset 8
 4185              		.cfi_offset 7, -8
 4186              		.cfi_offset 14, -4
 4187 0002 82B0     		sub	sp, sp, #8
 4188              	.LCFI166:
 4189              		.cfi_def_cfa_offset 16
 4190 0004 00AF     		add	r7, sp, #0
 4191              	.LCFI167:
 4192              		.cfi_def_cfa_register 7
 4193 0006 7860     		str	r0, [r7, #4]
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
 4194              		.loc 1 3600 0
 4195 0008 7B68     		ldr	r3, [r7, #4]
 4196 000a 1B6B     		ldr	r3, [r3, #48]
 4197 000c 1846     		mov	r0, r3
 4198 000e FFF7FEFF 		bl	vPortFree
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
 4199              		.loc 1 3601 0
 4200 0012 7868     		ldr	r0, [r7, #4]
 4201 0014 FFF7FEFF 		bl	vPortFree
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 )
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
ARM GAS  /tmp/ccJ0Dfhq.s 			page 142


3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4202              		.loc 1 3630 0
 4203 0018 0837     		adds	r7, r7, #8
 4204              	.LCFI168:
 4205              		.cfi_def_cfa_offset 8
 4206 001a BD46     		mov	sp, r7
 4207              	.LCFI169:
 4208              		.cfi_def_cfa_register 13
 4209              		@ sp needed
 4210 001c 80BD     		pop	{r7, pc}
 4211              		.cfi_endproc
 4212              	.LFE38:
 4214 001e 00BF     		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 4215              		.align	2
 4216              		.thumb
 4217              		.thumb_func
 4219              	prvResetNextTaskUnblockTime:
 4220              	.LFB39:
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4221              		.loc 1 3636 0
 4222              		.cfi_startproc
 4223              		@ args = 0, pretend = 0, frame = 8
 4224              		@ frame_needed = 1, uses_anonymous_args = 0
 4225              		@ link register save eliminated.
 4226 0000 80B4     		push	{r7}
 4227              	.LCFI170:
 4228              		.cfi_def_cfa_offset 4
 4229              		.cfi_offset 7, -4
 4230 0002 83B0     		sub	sp, sp, #12
 4231              	.LCFI171:
 4232              		.cfi_def_cfa_offset 16
 4233 0004 00AF     		add	r7, sp, #0
 4234              	.LCFI172:
 4235              		.cfi_def_cfa_register 7
3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 4236              		.loc 1 3639 0
 4237 0006 0E4B     		ldr	r3, .L278
 4238 0008 1B68     		ldr	r3, [r3]
 4239 000a 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccJ0Dfhq.s 			page 143


 4240 000c 002B     		cmp	r3, #0
 4241 000e 01D1     		bne	.L274
 4242              		.loc 1 3639 0 is_stmt 0 discriminator 1
 4243 0010 0123     		movs	r3, #1
 4244 0012 00E0     		b	.L275
 4245              	.L274:
 4246              		.loc 1 3639 0 discriminator 2
 4247 0014 0023     		movs	r3, #0
 4248              	.L275:
 4249              		.loc 1 3639 0 discriminator 4
 4250 0016 002B     		cmp	r3, #0
 4251 0018 04D0     		beq	.L276
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 4252              		.loc 1 3645 0 is_stmt 1
 4253 001a 0A4B     		ldr	r3, .L278+4
 4254 001c 4FF0FF32 		mov	r2, #-1
 4255 0020 1A60     		str	r2, [r3]
 4256 0022 08E0     		b	.L273
 4257              	.L276:
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 4258              		.loc 1 3653 0
 4259 0024 064B     		ldr	r3, .L278
 4260 0026 1B68     		ldr	r3, [r3]
 4261 0028 DB68     		ldr	r3, [r3, #12]
 4262 002a DB68     		ldr	r3, [r3, #12]
 4263 002c 7B60     		str	r3, [r7, #4]
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 4264              		.loc 1 3654 0
 4265 002e 7B68     		ldr	r3, [r7, #4]
 4266 0030 5B68     		ldr	r3, [r3, #4]
 4267 0032 044A     		ldr	r2, .L278+4
 4268 0034 1360     		str	r3, [r2]
 4269              	.L273:
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4270              		.loc 1 3656 0
 4271 0036 0C37     		adds	r7, r7, #12
 4272              	.LCFI173:
 4273              		.cfi_def_cfa_offset 4
 4274 0038 BD46     		mov	sp, r7
 4275              	.LCFI174:
 4276              		.cfi_def_cfa_register 13
 4277              		@ sp needed
 4278 003a 5DF8047B 		ldr	r7, [sp], #4
 4279              	.LCFI175:
ARM GAS  /tmp/ccJ0Dfhq.s 			page 144


 4280              		.cfi_restore 7
 4281              		.cfi_def_cfa_offset 0
 4282 003e 7047     		bx	lr
 4283              	.L279:
 4284              		.align	2
 4285              	.L278:
 4286 0040 00000000 		.word	pxDelayedTaskList
 4287 0044 00000000 		.word	xNextTaskUnblockTime
 4288              		.cfi_endproc
 4289              	.LFE39:
 4291              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 4292              		.align	2
 4293              		.global	xTaskGetCurrentTaskHandle
 4294              		.thumb
 4295              		.thumb_func
 4297              	xTaskGetCurrentTaskHandle:
 4298              	.LFB40:
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4299              		.loc 1 3662 0
 4300              		.cfi_startproc
 4301              		@ args = 0, pretend = 0, frame = 8
 4302              		@ frame_needed = 1, uses_anonymous_args = 0
 4303              		@ link register save eliminated.
 4304 0000 80B4     		push	{r7}
 4305              	.LCFI176:
 4306              		.cfi_def_cfa_offset 4
 4307              		.cfi_offset 7, -4
 4308 0002 83B0     		sub	sp, sp, #12
 4309              	.LCFI177:
 4310              		.cfi_def_cfa_offset 16
 4311 0004 00AF     		add	r7, sp, #0
 4312              	.LCFI178:
 4313              		.cfi_def_cfa_register 7
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
 4314              		.loc 1 3668 0
 4315 0006 054B     		ldr	r3, .L282
 4316 0008 1B68     		ldr	r3, [r3]
 4317 000a 7B60     		str	r3, [r7, #4]
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 4318              		.loc 1 3670 0
 4319 000c 7B68     		ldr	r3, [r7, #4]
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4320              		.loc 1 3671 0
 4321 000e 1846     		mov	r0, r3
 4322 0010 0C37     		adds	r7, r7, #12
 4323              	.LCFI179:
ARM GAS  /tmp/ccJ0Dfhq.s 			page 145


 4324              		.cfi_def_cfa_offset 4
 4325 0012 BD46     		mov	sp, r7
 4326              	.LCFI180:
 4327              		.cfi_def_cfa_register 13
 4328              		@ sp needed
 4329 0014 5DF8047B 		ldr	r7, [sp], #4
 4330              	.LCFI181:
 4331              		.cfi_restore 7
 4332              		.cfi_def_cfa_offset 0
 4333 0018 7047     		bx	lr
 4334              	.L283:
 4335 001a 00BF     		.align	2
 4336              	.L282:
 4337 001c 00000000 		.word	pxCurrentTCB
 4338              		.cfi_endproc
 4339              	.LFE40:
 4341              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 4342              		.align	2
 4343              		.global	xTaskGetSchedulerState
 4344              		.thumb
 4345              		.thumb_func
 4347              	xTaskGetSchedulerState:
 4348              	.LFB41:
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4349              		.loc 1 3679 0
 4350              		.cfi_startproc
 4351              		@ args = 0, pretend = 0, frame = 8
 4352              		@ frame_needed = 1, uses_anonymous_args = 0
 4353              		@ link register save eliminated.
 4354 0000 80B4     		push	{r7}
 4355              	.LCFI182:
 4356              		.cfi_def_cfa_offset 4
 4357              		.cfi_offset 7, -4
 4358 0002 83B0     		sub	sp, sp, #12
 4359              	.LCFI183:
 4360              		.cfi_def_cfa_offset 16
 4361 0004 00AF     		add	r7, sp, #0
 4362              	.LCFI184:
 4363              		.cfi_def_cfa_register 7
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
 4364              		.loc 1 3682 0
 4365 0006 0B4B     		ldr	r3, .L289
 4366 0008 1B68     		ldr	r3, [r3]
 4367 000a 002B     		cmp	r3, #0
 4368 000c 02D1     		bne	.L285
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
 4369              		.loc 1 3684 0
ARM GAS  /tmp/ccJ0Dfhq.s 			page 146


 4370 000e 0123     		movs	r3, #1
 4371 0010 7B60     		str	r3, [r7, #4]
 4372 0012 08E0     		b	.L286
 4373              	.L285:
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 4374              		.loc 1 3688 0
 4375 0014 084B     		ldr	r3, .L289+4
 4376 0016 1B68     		ldr	r3, [r3]
 4377 0018 002B     		cmp	r3, #0
 4378 001a 02D1     		bne	.L287
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
 4379              		.loc 1 3690 0
 4380 001c 0223     		movs	r3, #2
 4381 001e 7B60     		str	r3, [r7, #4]
 4382 0020 01E0     		b	.L286
 4383              	.L287:
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
 4384              		.loc 1 3694 0
 4385 0022 0023     		movs	r3, #0
 4386 0024 7B60     		str	r3, [r7, #4]
 4387              	.L286:
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 4388              		.loc 1 3698 0
 4389 0026 7B68     		ldr	r3, [r7, #4]
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4390              		.loc 1 3699 0
 4391 0028 1846     		mov	r0, r3
 4392 002a 0C37     		adds	r7, r7, #12
 4393              	.LCFI185:
 4394              		.cfi_def_cfa_offset 4
 4395 002c BD46     		mov	sp, r7
 4396              	.LCFI186:
 4397              		.cfi_def_cfa_register 13
 4398              		@ sp needed
 4399 002e 5DF8047B 		ldr	r7, [sp], #4
 4400              	.LCFI187:
 4401              		.cfi_restore 7
 4402              		.cfi_def_cfa_offset 0
 4403 0032 7047     		bx	lr
 4404              	.L290:
 4405              		.align	2
 4406              	.L289:
 4407 0034 00000000 		.word	xSchedulerRunning
 4408 0038 00000000 		.word	uxSchedulerSuspended
 4409              		.cfi_endproc
 4410              	.LFE41:
 4412              		.section	.text.vTaskPriorityInherit,"ax",%progbits
ARM GAS  /tmp/ccJ0Dfhq.s 			page 147


 4413              		.align	2
 4414              		.global	vTaskPriorityInherit
 4415              		.thumb
 4416              		.thumb_func
 4418              	vTaskPriorityInherit:
 4419              	.LFB42:
3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4420              		.loc 1 3707 0
 4421              		.cfi_startproc
 4422              		@ args = 0, pretend = 0, frame = 16
 4423              		@ frame_needed = 1, uses_anonymous_args = 0
 4424 0000 80B5     		push	{r7, lr}
 4425              	.LCFI188:
 4426              		.cfi_def_cfa_offset 8
 4427              		.cfi_offset 7, -8
 4428              		.cfi_offset 14, -4
 4429 0002 84B0     		sub	sp, sp, #16
 4430              	.LCFI189:
 4431              		.cfi_def_cfa_offset 24
 4432 0004 00AF     		add	r7, sp, #0
 4433              	.LCFI190:
 4434              		.cfi_def_cfa_register 7
 4435 0006 7860     		str	r0, [r7, #4]
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4436              		.loc 1 3708 0
 4437 0008 7B68     		ldr	r3, [r7, #4]
 4438 000a FB60     		str	r3, [r7, #12]
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL. */
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 4439              		.loc 1 3712 0
 4440 000c 7B68     		ldr	r3, [r7, #4]
 4441 000e 002B     		cmp	r3, #0
 4442 0010 64D0     		beq	.L291
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 4443              		.loc 1 3717 0
 4444 0012 FB68     		ldr	r3, [r7, #12]
 4445 0014 DA6A     		ldr	r2, [r3, #44]
 4446 0016 334B     		ldr	r3, .L300
 4447 0018 1B68     		ldr	r3, [r3]
 4448 001a DB6A     		ldr	r3, [r3, #44]
 4449 001c 9A42     		cmp	r2, r3
 4450 001e 5DD2     		bcs	.L291
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
ARM GAS  /tmp/ccJ0Dfhq.s 			page 148


3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	being used for anything else. */
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 4451              		.loc 1 3722 0
 4452 0020 FB68     		ldr	r3, [r7, #12]
 4453 0022 9B69     		ldr	r3, [r3, #24]
 4454 0024 002B     		cmp	r3, #0
 4455 0026 06DB     		blt	.L293
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 4456              		.loc 1 3724 0
 4457 0028 2E4B     		ldr	r3, .L300
 4458 002a 1B68     		ldr	r3, [r3]
 4459 002c DB6A     		ldr	r3, [r3, #44]
 4460 002e C3F10702 		rsb	r2, r3, #7
 4461 0032 FB68     		ldr	r3, [r7, #12]
 4462 0034 9A61     		str	r2, [r3, #24]
 4463              	.L293:
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListI
 4464              		.loc 1 3733 0
 4465 0036 FB68     		ldr	r3, [r7, #12]
 4466 0038 5969     		ldr	r1, [r3, #20]
 4467 003a FB68     		ldr	r3, [r7, #12]
 4468 003c DA6A     		ldr	r2, [r3, #44]
 4469 003e 1346     		mov	r3, r2
 4470 0040 9B00     		lsls	r3, r3, #2
 4471 0042 1344     		add	r3, r3, r2
 4472 0044 9B00     		lsls	r3, r3, #2
 4473 0046 284A     		ldr	r2, .L300+4
 4474 0048 1344     		add	r3, r3, r2
 4475 004a 9942     		cmp	r1, r3
 4476 004c 01D1     		bne	.L294
 4477              		.loc 1 3733 0 is_stmt 0 discriminator 1
 4478 004e 0123     		movs	r3, #1
 4479 0050 00E0     		b	.L295
 4480              	.L294:
 4481              		.loc 1 3733 0 discriminator 2
 4482 0052 0023     		movs	r3, #0
 4483              	.L295:
 4484              		.loc 1 3733 0 discriminator 4
 4485 0054 002B     		cmp	r3, #0
 4486 0056 3CD0     		beq	.L296
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 4487              		.loc 1 3735 0 is_stmt 1
 4488 0058 FB68     		ldr	r3, [r7, #12]
 4489 005a 0433     		adds	r3, r3, #4
 4490 005c 1846     		mov	r0, r3
 4491 005e FFF7FEFF 		bl	uxListRemove
ARM GAS  /tmp/ccJ0Dfhq.s 			page 149


 4492 0062 0346     		mov	r3, r0
 4493 0064 002B     		cmp	r3, #0
 4494 0066 15D1     		bne	.L297
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 4495              		.loc 1 3737 0
 4496 0068 FB68     		ldr	r3, [r7, #12]
 4497 006a DA6A     		ldr	r2, [r3, #44]
 4498 006c 1E49     		ldr	r1, .L300+4
 4499 006e 1346     		mov	r3, r2
 4500 0070 9B00     		lsls	r3, r3, #2
 4501 0072 1344     		add	r3, r3, r2
 4502 0074 9B00     		lsls	r3, r3, #2
 4503 0076 0B44     		add	r3, r3, r1
 4504 0078 1B68     		ldr	r3, [r3]
 4505 007a 002B     		cmp	r3, #0
 4506 007c 0AD1     		bne	.L297
 4507              		.loc 1 3737 0 is_stmt 0 discriminator 1
 4508 007e FB68     		ldr	r3, [r7, #12]
 4509 0080 DB6A     		ldr	r3, [r3, #44]
 4510 0082 1A46     		mov	r2, r3
 4511 0084 0123     		movs	r3, #1
 4512 0086 9340     		lsls	r3, r3, r2
 4513 0088 DA43     		mvns	r2, r3
 4514 008a 184B     		ldr	r3, .L300+8
 4515 008c 1B68     		ldr	r3, [r3]
 4516 008e 1340     		ands	r3, r3, r2
 4517 0090 164A     		ldr	r2, .L300+8
 4518 0092 1360     		str	r3, [r2]
 4519              	.L297:
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 4520              		.loc 1 3745 0 is_stmt 1
 4521 0094 134B     		ldr	r3, .L300
 4522 0096 1B68     		ldr	r3, [r3]
 4523 0098 DA6A     		ldr	r2, [r3, #44]
 4524 009a FB68     		ldr	r3, [r7, #12]
 4525 009c DA62     		str	r2, [r3, #44]
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4526              		.loc 1 3746 0
 4527 009e FB68     		ldr	r3, [r7, #12]
 4528 00a0 DB6A     		ldr	r3, [r3, #44]
 4529 00a2 1A46     		mov	r2, r3
 4530 00a4 0123     		movs	r3, #1
 4531 00a6 03FA02F2 		lsl	r2, r3, r2
 4532 00aa 104B     		ldr	r3, .L300+8
 4533 00ac 1B68     		ldr	r3, [r3]
 4534 00ae 1343     		orrs	r3, r3, r2
 4535 00b0 0E4A     		ldr	r2, .L300+8
 4536 00b2 1360     		str	r3, [r2]
 4537 00b4 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccJ0Dfhq.s 			page 150


 4538 00b6 DA6A     		ldr	r2, [r3, #44]
 4539 00b8 1346     		mov	r3, r2
 4540 00ba 9B00     		lsls	r3, r3, #2
 4541 00bc 1344     		add	r3, r3, r2
 4542 00be 9B00     		lsls	r3, r3, #2
 4543 00c0 094A     		ldr	r2, .L300+4
 4544 00c2 1A44     		add	r2, r2, r3
 4545 00c4 FB68     		ldr	r3, [r7, #12]
 4546 00c6 0433     		adds	r3, r3, #4
 4547 00c8 1046     		mov	r0, r2
 4548 00ca 1946     		mov	r1, r3
 4549 00cc FFF7FEFF 		bl	vListInsertEnd
 4550 00d0 04E0     		b	.L291
 4551              	.L296:
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 4552              		.loc 1 3751 0
 4553 00d2 044B     		ldr	r3, .L300
 4554 00d4 1B68     		ldr	r3, [r3]
 4555 00d6 DA6A     		ldr	r2, [r3, #44]
 4556 00d8 FB68     		ldr	r3, [r7, #12]
 4557 00da DA62     		str	r2, [r3, #44]
 4558              	.L291:
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4559              		.loc 1 3765 0
 4560 00dc 1037     		adds	r7, r7, #16
 4561              	.LCFI191:
 4562              		.cfi_def_cfa_offset 8
 4563 00de BD46     		mov	sp, r7
 4564              	.LCFI192:
 4565              		.cfi_def_cfa_register 13
 4566              		@ sp needed
 4567 00e0 80BD     		pop	{r7, pc}
 4568              	.L301:
 4569 00e2 00BF     		.align	2
 4570              	.L300:
 4571 00e4 00000000 		.word	pxCurrentTCB
 4572 00e8 00000000 		.word	pxReadyTasksLists
 4573 00ec 00000000 		.word	uxTopReadyPriority
 4574              		.cfi_endproc
 4575              	.LFE42:
ARM GAS  /tmp/ccJ0Dfhq.s 			page 151


 4577              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 4578              		.align	2
 4579              		.global	xTaskPriorityDisinherit
 4580              		.thumb
 4581              		.thumb_func
 4583              	xTaskPriorityDisinherit:
 4584              	.LFB43:
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4585              		.loc 1 3773 0
 4586              		.cfi_startproc
 4587              		@ args = 0, pretend = 0, frame = 24
 4588              		@ frame_needed = 1, uses_anonymous_args = 0
 4589 0000 80B5     		push	{r7, lr}
 4590              	.LCFI193:
 4591              		.cfi_def_cfa_offset 8
 4592              		.cfi_offset 7, -8
 4593              		.cfi_offset 14, -4
 4594 0002 86B0     		sub	sp, sp, #24
 4595              	.LCFI194:
 4596              		.cfi_def_cfa_offset 32
 4597 0004 00AF     		add	r7, sp, #0
 4598              	.LCFI195:
 4599              		.cfi_def_cfa_register 7
 4600 0006 7860     		str	r0, [r7, #4]
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4601              		.loc 1 3774 0
 4602 0008 7B68     		ldr	r3, [r7, #4]
 4603 000a 3B61     		str	r3, [r7, #16]
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 4604              		.loc 1 3775 0
 4605 000c 0023     		movs	r3, #0
 4606 000e 7B61     		str	r3, [r7, #20]
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 4607              		.loc 1 3777 0
 4608 0010 7B68     		ldr	r3, [r7, #4]
 4609 0012 002B     		cmp	r3, #0
 4610 0014 6ED0     		beq	.L303
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
 4611              		.loc 1 3783 0
 4612 0016 3A4B     		ldr	r3, .L311
 4613 0018 1B68     		ldr	r3, [r3]
 4614 001a 3A69     		ldr	r2, [r7, #16]
 4615 001c 9A42     		cmp	r2, r3
 4616 001e 09D0     		beq	.L304
ARM GAS  /tmp/ccJ0Dfhq.s 			page 152


 4617              	.LBB171:
 4618              	.LBB172:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4619              		.loc 2 237 0 discriminator 1
 4620              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4621 0020 4FF05003 			mov r3, #80												
 4622 0024 83F31188 		msr basepri, r3											
 4623 0028 BFF36F8F 		isb														
 4624 002c BFF34F8F 		dsb														
 4625              	
 4626              	@ 0 "" 2
 4627              		.thumb
 4628 0030 FB60     		str	r3, [r7, #12]
 4629              	.L305:
 4630              	.LBE172:
 4631              	.LBE171:
 4632              		.loc 1 3783 0 discriminator 1
 4633 0032 FEE7     		b	.L305
 4634              	.L304:
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 4635              		.loc 1 3785 0
 4636 0034 3B69     		ldr	r3, [r7, #16]
 4637 0036 9B6C     		ldr	r3, [r3, #72]
 4638 0038 002B     		cmp	r3, #0
 4639 003a 09D1     		bne	.L306
 4640              	.LBB173:
 4641              	.LBB174:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4642              		.loc 2 237 0 discriminator 1
 4643              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4644 003c 4FF05003 			mov r3, #80												
 4645 0040 83F31188 		msr basepri, r3											
 4646 0044 BFF36F8F 		isb														
 4647 0048 BFF34F8F 		dsb														
 4648              	
 4649              	@ 0 "" 2
 4650              		.thumb
 4651 004c BB60     		str	r3, [r7, #8]
 4652              	.L307:
 4653              	.LBE174:
 4654              	.LBE173:
 4655              		.loc 1 3785 0 discriminator 2
 4656 004e FEE7     		b	.L307
 4657              	.L306:
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4658              		.loc 1 3786 0
 4659 0050 3B69     		ldr	r3, [r7, #16]
 4660 0052 9B6C     		ldr	r3, [r3, #72]
 4661 0054 5A1E     		subs	r2, r3, #1
 4662 0056 3B69     		ldr	r3, [r7, #16]
 4663 0058 9A64     		str	r2, [r3, #72]
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 4664              		.loc 1 3790 0
ARM GAS  /tmp/ccJ0Dfhq.s 			page 153


 4665 005a 3B69     		ldr	r3, [r7, #16]
 4666 005c DA6A     		ldr	r2, [r3, #44]
 4667 005e 3B69     		ldr	r3, [r7, #16]
 4668 0060 5B6C     		ldr	r3, [r3, #68]
 4669 0062 9A42     		cmp	r2, r3
 4670 0064 46D0     		beq	.L303
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 4671              		.loc 1 3793 0
 4672 0066 3B69     		ldr	r3, [r7, #16]
 4673 0068 9B6C     		ldr	r3, [r3, #72]
 4674 006a 002B     		cmp	r3, #0
 4675 006c 42D1     		bne	.L303
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding	task then it must be the running state task.  Remove
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the	holding task from the ready	list. */
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 4676              		.loc 1 3800 0
 4677 006e 3B69     		ldr	r3, [r7, #16]
 4678 0070 0433     		adds	r3, r3, #4
 4679 0072 1846     		mov	r0, r3
 4680 0074 FFF7FEFF 		bl	uxListRemove
 4681 0078 0346     		mov	r3, r0
 4682 007a 002B     		cmp	r3, #0
 4683 007c 15D1     		bne	.L308
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 4684              		.loc 1 3802 0
 4685 007e 3B69     		ldr	r3, [r7, #16]
 4686 0080 DA6A     		ldr	r2, [r3, #44]
 4687 0082 2049     		ldr	r1, .L311+4
 4688 0084 1346     		mov	r3, r2
 4689 0086 9B00     		lsls	r3, r3, #2
 4690 0088 1344     		add	r3, r3, r2
 4691 008a 9B00     		lsls	r3, r3, #2
 4692 008c 0B44     		add	r3, r3, r1
 4693 008e 1B68     		ldr	r3, [r3]
 4694 0090 002B     		cmp	r3, #0
 4695 0092 0AD1     		bne	.L308
 4696              		.loc 1 3802 0 is_stmt 0 discriminator 1
 4697 0094 3B69     		ldr	r3, [r7, #16]
 4698 0096 DB6A     		ldr	r3, [r3, #44]
 4699 0098 1A46     		mov	r2, r3
 4700 009a 0123     		movs	r3, #1
 4701 009c 9340     		lsls	r3, r3, r2
 4702 009e DA43     		mvns	r2, r3
 4703 00a0 194B     		ldr	r3, .L311+8
 4704 00a2 1B68     		ldr	r3, [r3]
 4705 00a4 1340     		ands	r3, r3, r2
 4706 00a6 184A     		ldr	r2, .L311+8
 4707 00a8 1360     		str	r3, [r2]
 4708              	.L308:
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /tmp/ccJ0Dfhq.s 			page 154


3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 4709              		.loc 1 3812 0 is_stmt 1
 4710 00aa 3B69     		ldr	r3, [r7, #16]
 4711 00ac 5A6C     		ldr	r2, [r3, #68]
 4712 00ae 3B69     		ldr	r3, [r7, #16]
 4713 00b0 DA62     		str	r2, [r3, #44]
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 4714              		.loc 1 3817 0
 4715 00b2 3B69     		ldr	r3, [r7, #16]
 4716 00b4 DB6A     		ldr	r3, [r3, #44]
 4717 00b6 C3F10702 		rsb	r2, r3, #7
 4718 00ba 3B69     		ldr	r3, [r7, #16]
 4719 00bc 9A61     		str	r2, [r3, #24]
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4720              		.loc 1 3818 0
 4721 00be 3B69     		ldr	r3, [r7, #16]
 4722 00c0 DB6A     		ldr	r3, [r3, #44]
 4723 00c2 1A46     		mov	r2, r3
 4724 00c4 0123     		movs	r3, #1
 4725 00c6 03FA02F2 		lsl	r2, r3, r2
 4726 00ca 0F4B     		ldr	r3, .L311+8
 4727 00cc 1B68     		ldr	r3, [r3]
 4728 00ce 1343     		orrs	r3, r3, r2
 4729 00d0 0D4A     		ldr	r2, .L311+8
 4730 00d2 1360     		str	r3, [r2]
 4731 00d4 3B69     		ldr	r3, [r7, #16]
 4732 00d6 DA6A     		ldr	r2, [r3, #44]
 4733 00d8 1346     		mov	r3, r2
 4734 00da 9B00     		lsls	r3, r3, #2
 4735 00dc 1344     		add	r3, r3, r2
 4736 00de 9B00     		lsls	r3, r3, #2
 4737 00e0 084A     		ldr	r2, .L311+4
 4738 00e2 1A44     		add	r2, r2, r3
 4739 00e4 3B69     		ldr	r3, [r7, #16]
 4740 00e6 0433     		adds	r3, r3, #4
 4741 00e8 1046     		mov	r0, r2
 4742 00ea 1946     		mov	r1, r3
 4743 00ec FFF7FEFF 		bl	vListInsertEnd
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
ARM GAS  /tmp/ccJ0Dfhq.s 			page 155


3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 4744              		.loc 1 3828 0
 4745 00f0 0123     		movs	r3, #1
 4746 00f2 7B61     		str	r3, [r7, #20]
 4747              	.L303:
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 4748              		.loc 1 3845 0
 4749 00f4 7B69     		ldr	r3, [r7, #20]
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4750              		.loc 1 3846 0
 4751 00f6 1846     		mov	r0, r3
 4752 00f8 1837     		adds	r7, r7, #24
 4753              	.LCFI196:
 4754              		.cfi_def_cfa_offset 8
 4755 00fa BD46     		mov	sp, r7
 4756              	.LCFI197:
 4757              		.cfi_def_cfa_register 13
 4758              		@ sp needed
 4759 00fc 80BD     		pop	{r7, pc}
 4760              	.L312:
 4761 00fe 00BF     		.align	2
 4762              	.L311:
 4763 0100 00000000 		.word	pxCurrentTCB
 4764 0104 00000000 		.word	pxReadyTasksLists
 4765 0108 00000000 		.word	uxTopReadyPriority
 4766              		.cfi_endproc
 4767              	.LFE43:
 4769              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 4770              		.align	2
 4771              		.global	uxTaskResetEventItemValue
 4772              		.thumb
 4773              		.thumb_func
 4775              	uxTaskResetEventItemValue:
 4776              	.LFB44:
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
ARM GAS  /tmp/ccJ0Dfhq.s 			page 156


3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccJ0Dfhq.s 			page 157


3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = 0x00;
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
ARM GAS  /tmp/ccJ0Dfhq.s 			page 158


3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = 0x00;
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
ARM GAS  /tmp/ccJ0Dfhq.s 			page 159


4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
ARM GAS  /tmp/ccJ0Dfhq.s 			page 160


4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0 )
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
ARM GAS  /tmp/ccJ0Dfhq.s 			page 161


4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4777              		.loc 1 4163 0
 4778              		.cfi_startproc
 4779              		@ args = 0, pretend = 0, frame = 8
 4780              		@ frame_needed = 1, uses_anonymous_args = 0
 4781              		@ link register save eliminated.
 4782 0000 80B4     		push	{r7}
 4783              	.LCFI198:
 4784              		.cfi_def_cfa_offset 4
 4785              		.cfi_offset 7, -4
 4786 0002 83B0     		sub	sp, sp, #12
 4787              	.LCFI199:
 4788              		.cfi_def_cfa_offset 16
 4789 0004 00AF     		add	r7, sp, #0
 4790              	.LCFI200:
 4791              		.cfi_def_cfa_register 7
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 4792              		.loc 1 4166 0
 4793 0006 094B     		ldr	r3, .L315
 4794 0008 1B68     		ldr	r3, [r3]
 4795 000a 9B69     		ldr	r3, [r3, #24]
 4796 000c 7B60     		str	r3, [r7, #4]
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
 4797              		.loc 1 4170 0
 4798 000e 074B     		ldr	r3, .L315
 4799 0010 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccJ0Dfhq.s 			page 162


 4800 0012 064A     		ldr	r2, .L315
 4801 0014 1268     		ldr	r2, [r2]
 4802 0016 D26A     		ldr	r2, [r2, #44]
 4803 0018 C2F10702 		rsb	r2, r2, #7
 4804 001c 9A61     		str	r2, [r3, #24]
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
 4805              		.loc 1 4172 0
 4806 001e 7B68     		ldr	r3, [r7, #4]
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4807              		.loc 1 4173 0
 4808 0020 1846     		mov	r0, r3
 4809 0022 0C37     		adds	r7, r7, #12
 4810              	.LCFI201:
 4811              		.cfi_def_cfa_offset 4
 4812 0024 BD46     		mov	sp, r7
 4813              	.LCFI202:
 4814              		.cfi_def_cfa_register 13
 4815              		@ sp needed
 4816 0026 5DF8047B 		ldr	r7, [sp], #4
 4817              	.LCFI203:
 4818              		.cfi_restore 7
 4819              		.cfi_def_cfa_offset 0
 4820 002a 7047     		bx	lr
 4821              	.L316:
 4822              		.align	2
 4823              	.L315:
 4824 002c 00000000 		.word	pxCurrentTCB
 4825              		.cfi_endproc
 4826              	.LFE44:
 4828              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 4829              		.align	2
 4830              		.global	pvTaskIncrementMutexHeldCount
 4831              		.thumb
 4832              		.thumb_func
 4834              	pvTaskIncrementMutexHeldCount:
 4835              	.LFB45:
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4836              		.loc 1 4179 0
 4837              		.cfi_startproc
 4838              		@ args = 0, pretend = 0, frame = 0
 4839              		@ frame_needed = 1, uses_anonymous_args = 0
 4840              		@ link register save eliminated.
 4841 0000 80B4     		push	{r7}
 4842              	.LCFI204:
 4843              		.cfi_def_cfa_offset 4
 4844              		.cfi_offset 7, -4
 4845 0002 00AF     		add	r7, sp, #0
 4846              	.LCFI205:
 4847              		.cfi_def_cfa_register 7
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
ARM GAS  /tmp/ccJ0Dfhq.s 			page 163


4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
 4848              		.loc 1 4182 0
 4849 0004 074B     		ldr	r3, .L320
 4850 0006 1B68     		ldr	r3, [r3]
 4851 0008 002B     		cmp	r3, #0
 4852 000a 04D0     		beq	.L318
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
 4853              		.loc 1 4184 0
 4854 000c 054B     		ldr	r3, .L320
 4855 000e 1B68     		ldr	r3, [r3]
 4856 0010 9A6C     		ldr	r2, [r3, #72]
 4857 0012 0132     		adds	r2, r2, #1
 4858 0014 9A64     		str	r2, [r3, #72]
 4859              	.L318:
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
 4860              		.loc 1 4187 0
 4861 0016 034B     		ldr	r3, .L320
 4862 0018 1B68     		ldr	r3, [r3]
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4863              		.loc 1 4188 0
 4864 001a 1846     		mov	r0, r3
 4865 001c BD46     		mov	sp, r7
 4866              	.LCFI206:
 4867              		.cfi_def_cfa_register 13
 4868              		@ sp needed
 4869 001e 5DF8047B 		ldr	r7, [sp], #4
 4870              	.LCFI207:
 4871              		.cfi_restore 7
 4872              		.cfi_def_cfa_offset 0
 4873 0022 7047     		bx	lr
 4874              	.L321:
 4875              		.align	2
 4876              	.L320:
 4877 0024 00000000 		.word	pxCurrentTCB
 4878              		.cfi_endproc
 4879              	.LFE45:
 4881              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 4882              		.align	2
 4883              		.global	ulTaskNotifyTake
 4884              		.thumb
 4885              		.thumb_func
 4887              	ulTaskNotifyTake:
 4888              	.LFB46:
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4889              		.loc 1 4196 0
 4890              		.cfi_startproc
 4891              		@ args = 0, pretend = 0, frame = 16
ARM GAS  /tmp/ccJ0Dfhq.s 			page 164


 4892              		@ frame_needed = 1, uses_anonymous_args = 0
 4893 0000 80B5     		push	{r7, lr}
 4894              	.LCFI208:
 4895              		.cfi_def_cfa_offset 8
 4896              		.cfi_offset 7, -8
 4897              		.cfi_offset 14, -4
 4898 0002 84B0     		sub	sp, sp, #16
 4899              	.LCFI209:
 4900              		.cfi_def_cfa_offset 24
 4901 0004 00AF     		add	r7, sp, #0
 4902              	.LCFI210:
 4903              		.cfi_def_cfa_register 7
 4904 0006 7860     		str	r0, [r7, #4]
 4905 0008 3960     		str	r1, [r7]
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 4906              		.loc 1 4199 0
 4907 000a FFF7FEFF 		bl	vPortEnterCritical
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 4908              		.loc 1 4202 0
 4909 000e 1E4B     		ldr	r3, .L328
 4910 0010 1B68     		ldr	r3, [r3]
 4911 0012 DB6C     		ldr	r3, [r3, #76]
 4912 0014 002B     		cmp	r3, #0
 4913 0016 13D1     		bne	.L323
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 4914              		.loc 1 4205 0
 4915 0018 1B4B     		ldr	r3, .L328
 4916 001a 1B68     		ldr	r3, [r3]
 4917 001c 0122     		movs	r2, #1
 4918 001e 83F85020 		strb	r2, [r3, #80]
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 4919              		.loc 1 4207 0
 4920 0022 3B68     		ldr	r3, [r7]
 4921 0024 002B     		cmp	r3, #0
 4922 0026 0BD0     		beq	.L323
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4923              		.loc 1 4209 0
 4924 0028 3868     		ldr	r0, [r7]
 4925 002a 0121     		movs	r1, #1
 4926 002c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 4927              		.loc 1 4216 0
 4928 0030 164B     		ldr	r3, .L328+4
ARM GAS  /tmp/ccJ0Dfhq.s 			page 165


 4929 0032 4FF08052 		mov	r2, #268435456
 4930 0036 1A60     		str	r2, [r3]
 4931              	@ 4216 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4932 0038 BFF34F8F 		dsb
 4933              	@ 0 "" 2
 4934              	@ 4216 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4935 003c BFF36F8F 		isb
 4936              	@ 0 "" 2
 4937              		.thumb
 4938              	.L323:
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 4939              		.loc 1 4228 0
 4940 0040 FFF7FEFF 		bl	vPortExitCritical
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 4941              		.loc 1 4230 0
 4942 0044 FFF7FEFF 		bl	vPortEnterCritical
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 4943              		.loc 1 4233 0
 4944 0048 0F4B     		ldr	r3, .L328
 4945 004a 1B68     		ldr	r3, [r3]
 4946 004c DB6C     		ldr	r3, [r3, #76]
 4947 004e FB60     		str	r3, [r7, #12]
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
 4948              		.loc 1 4235 0
 4949 0050 FB68     		ldr	r3, [r7, #12]
 4950 0052 002B     		cmp	r3, #0
 4951 0054 0CD0     		beq	.L324
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
 4952              		.loc 1 4237 0
 4953 0056 7B68     		ldr	r3, [r7, #4]
 4954 0058 002B     		cmp	r3, #0
 4955 005a 04D0     		beq	.L325
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
 4956              		.loc 1 4239 0
 4957 005c 0A4B     		ldr	r3, .L328
 4958 005e 1B68     		ldr	r3, [r3]
 4959 0060 0022     		movs	r2, #0
 4960 0062 DA64     		str	r2, [r3, #76]
 4961 0064 04E0     		b	.L324
 4962              	.L325:
ARM GAS  /tmp/ccJ0Dfhq.s 			page 166


4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
 4963              		.loc 1 4243 0
 4964 0066 084B     		ldr	r3, .L328
 4965 0068 1B68     		ldr	r3, [r3]
 4966 006a FA68     		ldr	r2, [r7, #12]
 4967 006c 013A     		subs	r2, r2, #1
 4968 006e DA64     		str	r2, [r3, #76]
 4969              	.L324:
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 4970              		.loc 1 4251 0
 4971 0070 054B     		ldr	r3, .L328
 4972 0072 1B68     		ldr	r3, [r3]
 4973 0074 0022     		movs	r2, #0
 4974 0076 83F85020 		strb	r2, [r3, #80]
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 4975              		.loc 1 4253 0
 4976 007a FFF7FEFF 		bl	vPortExitCritical
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
 4977              		.loc 1 4255 0
 4978 007e FB68     		ldr	r3, [r7, #12]
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4979              		.loc 1 4256 0
 4980 0080 1846     		mov	r0, r3
 4981 0082 1037     		adds	r7, r7, #16
 4982              	.LCFI211:
 4983              		.cfi_def_cfa_offset 8
 4984 0084 BD46     		mov	sp, r7
 4985              	.LCFI212:
 4986              		.cfi_def_cfa_register 13
 4987              		@ sp needed
 4988 0086 80BD     		pop	{r7, pc}
 4989              	.L329:
 4990              		.align	2
 4991              	.L328:
 4992 0088 00000000 		.word	pxCurrentTCB
 4993 008c 04ED00E0 		.word	-536810236
 4994              		.cfi_endproc
 4995              	.LFE46:
 4997              		.section	.text.xTaskNotifyWait,"ax",%progbits
 4998              		.align	2
 4999              		.global	xTaskNotifyWait
 5000              		.thumb
 5001              		.thumb_func
 5003              	xTaskNotifyWait:
 5004              	.LFB47:
ARM GAS  /tmp/ccJ0Dfhq.s 			page 167


4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5005              		.loc 1 4264 0
 5006              		.cfi_startproc
 5007              		@ args = 0, pretend = 0, frame = 24
 5008              		@ frame_needed = 1, uses_anonymous_args = 0
 5009 0000 80B5     		push	{r7, lr}
 5010              	.LCFI213:
 5011              		.cfi_def_cfa_offset 8
 5012              		.cfi_offset 7, -8
 5013              		.cfi_offset 14, -4
 5014 0002 86B0     		sub	sp, sp, #24
 5015              	.LCFI214:
 5016              		.cfi_def_cfa_offset 32
 5017 0004 00AF     		add	r7, sp, #0
 5018              	.LCFI215:
 5019              		.cfi_def_cfa_register 7
 5020 0006 F860     		str	r0, [r7, #12]
 5021 0008 B960     		str	r1, [r7, #8]
 5022 000a 7A60     		str	r2, [r7, #4]
 5023 000c 3B60     		str	r3, [r7]
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 5024              		.loc 1 4267 0
 5025 000e FFF7FEFF 		bl	vPortEnterCritical
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 5026              		.loc 1 4270 0
 5027 0012 264B     		ldr	r3, .L336
 5028 0014 1B68     		ldr	r3, [r3]
 5029 0016 93F85030 		ldrb	r3, [r3, #80]
 5030 001a DBB2     		uxtb	r3, r3
 5031 001c 022B     		cmp	r3, #2
 5032 001e 1AD0     		beq	.L331
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 5033              		.loc 1 4275 0
 5034 0020 224B     		ldr	r3, .L336
 5035 0022 1B68     		ldr	r3, [r3]
 5036 0024 D96C     		ldr	r1, [r3, #76]
 5037 0026 FA68     		ldr	r2, [r7, #12]
 5038 0028 D243     		mvns	r2, r2
 5039 002a 0A40     		ands	r2, r2, r1
 5040 002c DA64     		str	r2, [r3, #76]
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
ARM GAS  /tmp/ccJ0Dfhq.s 			page 168


4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 5041              		.loc 1 4278 0
 5042 002e 1F4B     		ldr	r3, .L336
 5043 0030 1B68     		ldr	r3, [r3]
 5044 0032 0122     		movs	r2, #1
 5045 0034 83F85020 		strb	r2, [r3, #80]
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 5046              		.loc 1 4280 0
 5047 0038 3B68     		ldr	r3, [r7]
 5048 003a 002B     		cmp	r3, #0
 5049 003c 0BD0     		beq	.L331
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 5050              		.loc 1 4282 0
 5051 003e 3868     		ldr	r0, [r7]
 5052 0040 0121     		movs	r1, #1
 5053 0042 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 5054              		.loc 1 4289 0
 5055 0046 1A4B     		ldr	r3, .L336+4
 5056 0048 4FF08052 		mov	r2, #268435456
 5057 004c 1A60     		str	r2, [r3]
 5058              	@ 4289 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5059 004e BFF34F8F 		dsb
 5060              	@ 0 "" 2
 5061              	@ 4289 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5062 0052 BFF36F8F 		isb
 5063              	@ 0 "" 2
 5064              		.thumb
 5065              	.L331:
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 5066              		.loc 1 4301 0
 5067 0056 FFF7FEFF 		bl	vPortExitCritical
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 5068              		.loc 1 4303 0
 5069 005a FFF7FEFF 		bl	vPortEnterCritical
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
ARM GAS  /tmp/ccJ0Dfhq.s 			page 169


4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
 5070              		.loc 1 4307 0
 5071 005e 7B68     		ldr	r3, [r7, #4]
 5072 0060 002B     		cmp	r3, #0
 5073 0062 04D0     		beq	.L332
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 5074              		.loc 1 4311 0
 5075 0064 114B     		ldr	r3, .L336
 5076 0066 1B68     		ldr	r3, [r3]
 5077 0068 DA6C     		ldr	r2, [r3, #76]
 5078 006a 7B68     		ldr	r3, [r7, #4]
 5079 006c 1A60     		str	r2, [r3]
 5080              	.L332:
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 5081              		.loc 1 4318 0
 5082 006e 0F4B     		ldr	r3, .L336
 5083 0070 1B68     		ldr	r3, [r3]
 5084 0072 93F85030 		ldrb	r3, [r3, #80]
 5085 0076 DBB2     		uxtb	r3, r3
 5086 0078 012B     		cmp	r3, #1
 5087 007a 02D1     		bne	.L333
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 5088              		.loc 1 4321 0
 5089 007c 0023     		movs	r3, #0
 5090 007e 7B61     		str	r3, [r7, #20]
 5091 0080 08E0     		b	.L334
 5092              	.L333:
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 5093              		.loc 1 4327 0
 5094 0082 0A4B     		ldr	r3, .L336
 5095 0084 1B68     		ldr	r3, [r3]
 5096 0086 D96C     		ldr	r1, [r3, #76]
 5097 0088 BA68     		ldr	r2, [r7, #8]
 5098 008a D243     		mvns	r2, r2
 5099 008c 0A40     		ands	r2, r2, r1
 5100 008e DA64     		str	r2, [r3, #76]
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 5101              		.loc 1 4328 0
 5102 0090 0123     		movs	r3, #1
 5103 0092 7B61     		str	r3, [r7, #20]
ARM GAS  /tmp/ccJ0Dfhq.s 			page 170


 5104              	.L334:
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 5105              		.loc 1 4331 0
 5106 0094 054B     		ldr	r3, .L336
 5107 0096 1B68     		ldr	r3, [r3]
 5108 0098 0022     		movs	r2, #0
 5109 009a 83F85020 		strb	r2, [r3, #80]
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 5110              		.loc 1 4333 0
 5111 009e FFF7FEFF 		bl	vPortExitCritical
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 5112              		.loc 1 4335 0
 5113 00a2 7B69     		ldr	r3, [r7, #20]
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5114              		.loc 1 4336 0
 5115 00a4 1846     		mov	r0, r3
 5116 00a6 1837     		adds	r7, r7, #24
 5117              	.LCFI216:
 5118              		.cfi_def_cfa_offset 8
 5119 00a8 BD46     		mov	sp, r7
 5120              	.LCFI217:
 5121              		.cfi_def_cfa_register 13
 5122              		@ sp needed
 5123 00aa 80BD     		pop	{r7, pc}
 5124              	.L337:
 5125              		.align	2
 5126              	.L336:
 5127 00ac 00000000 		.word	pxCurrentTCB
 5128 00b0 04ED00E0 		.word	-536810236
 5129              		.cfi_endproc
 5130              	.LFE47:
 5132              		.section	.text.xTaskGenericNotify,"ax",%progbits
 5133              		.align	2
 5134              		.global	xTaskGenericNotify
 5135              		.thumb
 5136              		.thumb_func
 5138              	xTaskGenericNotify:
 5139              	.LFB48:
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5140              		.loc 1 4344 0
 5141              		.cfi_startproc
 5142              		@ args = 0, pretend = 0, frame = 40
 5143              		@ frame_needed = 1, uses_anonymous_args = 0
 5144 0000 80B5     		push	{r7, lr}
 5145              	.LCFI218:
 5146              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccJ0Dfhq.s 			page 171


 5147              		.cfi_offset 7, -8
 5148              		.cfi_offset 14, -4
 5149 0002 8AB0     		sub	sp, sp, #40
 5150              	.LCFI219:
 5151              		.cfi_def_cfa_offset 48
 5152 0004 00AF     		add	r7, sp, #0
 5153              	.LCFI220:
 5154              		.cfi_def_cfa_register 7
 5155 0006 F860     		str	r0, [r7, #12]
 5156 0008 B960     		str	r1, [r7, #8]
 5157 000a 3B60     		str	r3, [r7]
 5158 000c 1346     		mov	r3, r2
 5159 000e FB71     		strb	r3, [r7, #7]
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 5160              		.loc 1 4346 0
 5161 0010 0123     		movs	r3, #1
 5162 0012 7B62     		str	r3, [r7, #36]
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 5163              		.loc 1 4349 0
 5164 0014 FB68     		ldr	r3, [r7, #12]
 5165 0016 002B     		cmp	r3, #0
 5166 0018 09D1     		bne	.L339
 5167              	.LBB175:
 5168              	.LBB176:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5169              		.loc 2 237 0 discriminator 1
 5170              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5171 001a 4FF05003 			mov r3, #80												
 5172 001e 83F31188 		msr basepri, r3											
 5173 0022 BFF36F8F 		isb														
 5174 0026 BFF34F8F 		dsb														
 5175              	
 5176              	@ 0 "" 2
 5177              		.thumb
 5178 002a BB61     		str	r3, [r7, #24]
 5179              	.L340:
 5180              	.LBE176:
 5181              	.LBE175:
 5182              		.loc 1 4349 0 discriminator 1
 5183 002c FEE7     		b	.L340
 5184              	.L339:
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 5185              		.loc 1 4350 0
 5186 002e FB68     		ldr	r3, [r7, #12]
 5187 0030 3B62     		str	r3, [r7, #32]
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 5188              		.loc 1 4352 0
 5189 0032 FFF7FEFF 		bl	vPortEnterCritical
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 5190              		.loc 1 4354 0
 5191 0036 3B68     		ldr	r3, [r7]
 5192 0038 002B     		cmp	r3, #0
ARM GAS  /tmp/ccJ0Dfhq.s 			page 172


 5193 003a 03D0     		beq	.L341
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 5194              		.loc 1 4356 0
 5195 003c 3B6A     		ldr	r3, [r7, #32]
 5196 003e DA6C     		ldr	r2, [r3, #76]
 5197 0040 3B68     		ldr	r3, [r7]
 5198 0042 1A60     		str	r2, [r3]
 5199              	.L341:
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 5200              		.loc 1 4359 0
 5201 0044 3B6A     		ldr	r3, [r7, #32]
 5202 0046 93F85030 		ldrb	r3, [r3, #80]
 5203 004a FB77     		strb	r3, [r7, #31]
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5204              		.loc 1 4361 0
 5205 004c 3B6A     		ldr	r3, [r7, #32]
 5206 004e 0222     		movs	r2, #2
 5207 0050 83F85020 		strb	r2, [r3, #80]
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
 5208              		.loc 1 4363 0
 5209 0054 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5210 0056 042B     		cmp	r3, #4
 5211 0058 27D8     		bhi	.L342
 5212 005a 01A2     		adr	r2, .L344
 5213 005c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 5214              		.p2align 2
 5215              	.L344:
 5216 0060 AB000000 		.word	.L342+1
 5217 0064 75000000 		.word	.L345+1
 5218 0068 83000000 		.word	.L346+1
 5219 006c 8F000000 		.word	.L347+1
 5220 0070 97000000 		.word	.L348+1
 5221              		.p2align 1
 5222              	.L345:
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 5223              		.loc 1 4366 0
 5224 0074 3B6A     		ldr	r3, [r7, #32]
 5225 0076 DA6C     		ldr	r2, [r3, #76]
 5226 0078 BB68     		ldr	r3, [r7, #8]
 5227 007a 1A43     		orrs	r2, r2, r3
 5228 007c 3B6A     		ldr	r3, [r7, #32]
 5229 007e DA64     		str	r2, [r3, #76]
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5230              		.loc 1 4367 0
 5231 0080 13E0     		b	.L342
 5232              	.L346:
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 5233              		.loc 1 4370 0
ARM GAS  /tmp/ccJ0Dfhq.s 			page 173


 5234 0082 3B6A     		ldr	r3, [r7, #32]
 5235 0084 DB6C     		ldr	r3, [r3, #76]
 5236 0086 5A1C     		adds	r2, r3, #1
 5237 0088 3B6A     		ldr	r3, [r7, #32]
 5238 008a DA64     		str	r2, [r3, #76]
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5239              		.loc 1 4371 0
 5240 008c 0DE0     		b	.L342
 5241              	.L347:
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 5242              		.loc 1 4374 0
 5243 008e 3B6A     		ldr	r3, [r7, #32]
 5244 0090 BA68     		ldr	r2, [r7, #8]
 5245 0092 DA64     		str	r2, [r3, #76]
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5246              		.loc 1 4375 0
 5247 0094 09E0     		b	.L342
 5248              	.L348:
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 5249              		.loc 1 4378 0
 5250 0096 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 5251 0098 022B     		cmp	r3, #2
 5252 009a 03D0     		beq	.L349
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 5253              		.loc 1 4380 0
 5254 009c 3B6A     		ldr	r3, [r7, #32]
 5255 009e BA68     		ldr	r2, [r7, #8]
 5256 00a0 DA64     		str	r2, [r3, #76]
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5257              		.loc 1 4387 0
 5258 00a2 01E0     		b	.L355
 5259              	.L349:
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5260              		.loc 1 4385 0
 5261 00a4 0023     		movs	r3, #0
 5262 00a6 7B62     		str	r3, [r7, #36]
 5263              	.L355:
 5264              		.loc 1 4387 0
 5265 00a8 00BF     		nop
 5266              	.L342:
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccJ0Dfhq.s 			page 174


4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 5267              		.loc 1 4399 0
 5268 00aa FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 5269 00ac 012B     		cmp	r3, #1
 5270 00ae 3AD1     		bne	.L351
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 5271              		.loc 1 4401 0
 5272 00b0 3B6A     		ldr	r3, [r7, #32]
 5273 00b2 0433     		adds	r3, r3, #4
 5274 00b4 1846     		mov	r0, r3
 5275 00b6 FFF7FEFF 		bl	uxListRemove
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 5276              		.loc 1 4402 0
 5277 00ba 3B6A     		ldr	r3, [r7, #32]
 5278 00bc DB6A     		ldr	r3, [r3, #44]
 5279 00be 1A46     		mov	r2, r3
 5280 00c0 0123     		movs	r3, #1
 5281 00c2 03FA02F2 		lsl	r2, r3, r2
 5282 00c6 1B4B     		ldr	r3, .L356
 5283 00c8 1B68     		ldr	r3, [r3]
 5284 00ca 1343     		orrs	r3, r3, r2
 5285 00cc 194A     		ldr	r2, .L356
 5286 00ce 1360     		str	r3, [r2]
 5287 00d0 3B6A     		ldr	r3, [r7, #32]
 5288 00d2 DA6A     		ldr	r2, [r3, #44]
 5289 00d4 1346     		mov	r3, r2
 5290 00d6 9B00     		lsls	r3, r3, #2
 5291 00d8 1344     		add	r3, r3, r2
 5292 00da 9B00     		lsls	r3, r3, #2
 5293 00dc 164A     		ldr	r2, .L356+4
 5294 00de 1A44     		add	r2, r2, r3
 5295 00e0 3B6A     		ldr	r3, [r7, #32]
 5296 00e2 0433     		adds	r3, r3, #4
 5297 00e4 1046     		mov	r0, r2
 5298 00e6 1946     		mov	r1, r3
 5299 00e8 FFF7FEFF 		bl	vListInsertEnd
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 5300              		.loc 1 4405 0
 5301 00ec 3B6A     		ldr	r3, [r7, #32]
 5302 00ee 9B6A     		ldr	r3, [r3, #40]
 5303 00f0 002B     		cmp	r3, #0
 5304 00f2 09D0     		beq	.L352
 5305              	.LBB177:
 5306              	.LBB178:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5307              		.loc 2 237 0 discriminator 1
 5308              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5309 00f4 4FF05003 			mov r3, #80												
 5310 00f8 83F31188 		msr basepri, r3											
ARM GAS  /tmp/ccJ0Dfhq.s 			page 175


 5311 00fc BFF36F8F 		isb														
 5312 0100 BFF34F8F 		dsb														
 5313              	
 5314              	@ 0 "" 2
 5315              		.thumb
 5316 0104 7B61     		str	r3, [r7, #20]
 5317              	.L353:
 5318              	.LBE178:
 5319              	.LBE177:
 5320              		.loc 1 4405 0 discriminator 2
 5321 0106 FEE7     		b	.L353
 5322              	.L352:
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 5323              		.loc 1 4423 0
 5324 0108 3B6A     		ldr	r3, [r7, #32]
 5325 010a DA6A     		ldr	r2, [r3, #44]
 5326 010c 0B4B     		ldr	r3, .L356+8
 5327 010e 1B68     		ldr	r3, [r3]
 5328 0110 DB6A     		ldr	r3, [r3, #44]
 5329 0112 9A42     		cmp	r2, r3
 5330 0114 07D9     		bls	.L351
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 5331              		.loc 1 4427 0
 5332 0116 0A4B     		ldr	r3, .L356+12
 5333 0118 4FF08052 		mov	r2, #268435456
 5334 011c 1A60     		str	r2, [r3]
 5335              	@ 4427 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5336 011e BFF34F8F 		dsb
 5337              	@ 0 "" 2
 5338              	@ 4427 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5339 0122 BFF36F8F 		isb
 5340              	@ 0 "" 2
 5341              		.thumb
 5342              	.L351:
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccJ0Dfhq.s 			page 176


4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 5343              		.loc 1 4439 0
 5344 0126 FFF7FEFF 		bl	vPortExitCritical
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 5345              		.loc 1 4441 0
 5346 012a 7B6A     		ldr	r3, [r7, #36]
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5347              		.loc 1 4442 0
 5348 012c 1846     		mov	r0, r3
 5349 012e 2837     		adds	r7, r7, #40
 5350              	.LCFI221:
 5351              		.cfi_def_cfa_offset 8
 5352 0130 BD46     		mov	sp, r7
 5353              	.LCFI222:
 5354              		.cfi_def_cfa_register 13
 5355              		@ sp needed
 5356 0132 80BD     		pop	{r7, pc}
 5357              	.L357:
 5358              		.align	2
 5359              	.L356:
 5360 0134 00000000 		.word	uxTopReadyPriority
 5361 0138 00000000 		.word	pxReadyTasksLists
 5362 013c 00000000 		.word	pxCurrentTCB
 5363 0140 04ED00E0 		.word	-536810236
 5364              		.cfi_endproc
 5365              	.LFE48:
 5367              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 5368              		.align	2
 5369              		.global	xTaskGenericNotifyFromISR
 5370              		.thumb
 5371              		.thumb_func
 5373              	xTaskGenericNotifyFromISR:
 5374              	.LFB49:
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5375              		.loc 1 4450 0
 5376              		.cfi_startproc
 5377              		@ args = 4, pretend = 0, frame = 56
 5378              		@ frame_needed = 1, uses_anonymous_args = 0
 5379 0000 80B5     		push	{r7, lr}
 5380              	.LCFI223:
 5381              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccJ0Dfhq.s 			page 177


 5382              		.cfi_offset 7, -8
 5383              		.cfi_offset 14, -4
 5384 0002 8EB0     		sub	sp, sp, #56
 5385              	.LCFI224:
 5386              		.cfi_def_cfa_offset 64
 5387 0004 00AF     		add	r7, sp, #0
 5388              	.LCFI225:
 5389              		.cfi_def_cfa_register 7
 5390 0006 F860     		str	r0, [r7, #12]
 5391 0008 B960     		str	r1, [r7, #8]
 5392 000a 3B60     		str	r3, [r7]
 5393 000c 1346     		mov	r3, r2
 5394 000e FB71     		strb	r3, [r7, #7]
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 5395              		.loc 1 4453 0
 5396 0010 0123     		movs	r3, #1
 5397 0012 7B63     		str	r3, [r7, #52]
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 5398              		.loc 1 4456 0
 5399 0014 FB68     		ldr	r3, [r7, #12]
 5400 0016 002B     		cmp	r3, #0
 5401 0018 09D1     		bne	.L359
 5402              	.LBB179:
 5403              	.LBB180:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5404              		.loc 2 237 0 discriminator 1
 5405              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5406 001a 4FF05003 			mov r3, #80												
 5407 001e 83F31188 		msr basepri, r3											
 5408 0022 BFF36F8F 		isb														
 5409 0026 BFF34F8F 		dsb														
 5410              	
 5411              	@ 0 "" 2
 5412              		.thumb
 5413 002a 7B62     		str	r3, [r7, #36]
 5414              	.L360:
 5415              	.LBE180:
 5416              	.LBE179:
 5417              		.loc 1 4456 0 discriminator 1
 5418 002c FEE7     		b	.L360
 5419              	.L359:
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
ARM GAS  /tmp/ccJ0Dfhq.s 			page 178


4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 5420              		.loc 1 4474 0
 5421 002e FFF7FEFF 		bl	vPortValidateInterruptPriority
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 5422              		.loc 1 4476 0
 5423 0032 FB68     		ldr	r3, [r7, #12]
 5424 0034 3B63     		str	r3, [r7, #48]
 5425              	.LBB181:
 5426              	.LBB182:
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5427              		.loc 2 253 0
 5428              	@ 253 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5429 0036 EFF31182 			mrs r2, basepri											
 5430 003a 4FF05003 		mov r3, #80												
 5431 003e 83F31188 		msr basepri, r3											
 5432 0042 BFF36F8F 		isb														
 5433 0046 BFF34F8F 		dsb														
 5434              	
 5435              	@ 0 "" 2
 5436              		.thumb
 5437 004a 3A62     		str	r2, [r7, #32]
 5438 004c FB61     		str	r3, [r7, #28]
 265:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 5439              		.loc 2 265 0
 5440 004e 3B6A     		ldr	r3, [r7, #32]
 5441              	.LBE182:
 5442              	.LBE181:
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 5443              		.loc 1 4478 0
 5444 0050 FB62     		str	r3, [r7, #44]
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 5445              		.loc 1 4480 0
 5446 0052 3B68     		ldr	r3, [r7]
 5447 0054 002B     		cmp	r3, #0
 5448 0056 03D0     		beq	.L362
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 5449              		.loc 1 4482 0
 5450 0058 3B6B     		ldr	r3, [r7, #48]
 5451 005a DA6C     		ldr	r2, [r3, #76]
 5452 005c 3B68     		ldr	r3, [r7]
 5453 005e 1A60     		str	r2, [r3]
 5454              	.L362:
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 5455              		.loc 1 4485 0
 5456 0060 3B6B     		ldr	r3, [r7, #48]
 5457 0062 93F85030 		ldrb	r3, [r3, #80]
ARM GAS  /tmp/ccJ0Dfhq.s 			page 179


 5458 0066 87F82B30 		strb	r3, [r7, #43]
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5459              		.loc 1 4486 0
 5460 006a 3B6B     		ldr	r3, [r7, #48]
 5461 006c 0222     		movs	r2, #2
 5462 006e 83F85020 		strb	r2, [r3, #80]
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
 5463              		.loc 1 4488 0
 5464 0072 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5465 0074 042B     		cmp	r3, #4
 5466 0076 29D8     		bhi	.L363
 5467 0078 01A2     		adr	r2, .L365
 5468 007a 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 5469 007e 00BF     		.p2align 2
 5470              	.L365:
 5471 0080 CD000000 		.word	.L363+1
 5472 0084 95000000 		.word	.L366+1
 5473 0088 A3000000 		.word	.L367+1
 5474 008c AF000000 		.word	.L368+1
 5475 0090 B7000000 		.word	.L369+1
 5476              		.p2align 1
 5477              	.L366:
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 5478              		.loc 1 4491 0
 5479 0094 3B6B     		ldr	r3, [r7, #48]
 5480 0096 DA6C     		ldr	r2, [r3, #76]
 5481 0098 BB68     		ldr	r3, [r7, #8]
 5482 009a 1A43     		orrs	r2, r2, r3
 5483 009c 3B6B     		ldr	r3, [r7, #48]
 5484 009e DA64     		str	r2, [r3, #76]
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5485              		.loc 1 4492 0
 5486 00a0 14E0     		b	.L363
 5487              	.L367:
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 5488              		.loc 1 4495 0
 5489 00a2 3B6B     		ldr	r3, [r7, #48]
 5490 00a4 DB6C     		ldr	r3, [r3, #76]
 5491 00a6 5A1C     		adds	r2, r3, #1
 5492 00a8 3B6B     		ldr	r3, [r7, #48]
 5493 00aa DA64     		str	r2, [r3, #76]
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5494              		.loc 1 4496 0
 5495 00ac 0EE0     		b	.L363
 5496              	.L368:
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 5497              		.loc 1 4499 0
 5498 00ae 3B6B     		ldr	r3, [r7, #48]
 5499 00b0 BA68     		ldr	r2, [r7, #8]
 5500 00b2 DA64     		str	r2, [r3, #76]
ARM GAS  /tmp/ccJ0Dfhq.s 			page 180


4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5501              		.loc 1 4500 0
 5502 00b4 0AE0     		b	.L363
 5503              	.L369:
4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 5504              		.loc 1 4503 0
 5505 00b6 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 5506 00ba 022B     		cmp	r3, #2
 5507 00bc 03D0     		beq	.L370
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 5508              		.loc 1 4505 0
 5509 00be 3B6B     		ldr	r3, [r7, #48]
 5510 00c0 BA68     		ldr	r2, [r7, #8]
 5511 00c2 DA64     		str	r2, [r3, #76]
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5512              		.loc 1 4512 0
 5513 00c4 01E0     		b	.L380
 5514              	.L370:
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5515              		.loc 1 4510 0
 5516 00c6 0023     		movs	r3, #0
 5517 00c8 7B63     		str	r3, [r7, #52]
 5518              	.L380:
 5519              		.loc 1 4512 0
 5520 00ca 00BF     		nop
 5521              	.L363:
4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 5522              		.loc 1 4524 0
 5523 00cc 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 5524 00d0 012B     		cmp	r3, #1
 5525 00d2 47D1     		bne	.L372
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 5526              		.loc 1 4527 0
 5527 00d4 3B6B     		ldr	r3, [r7, #48]
 5528 00d6 9B6A     		ldr	r3, [r3, #40]
ARM GAS  /tmp/ccJ0Dfhq.s 			page 181


 5529 00d8 002B     		cmp	r3, #0
 5530 00da 09D0     		beq	.L373
 5531              	.LBB183:
 5532              	.LBB184:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5533              		.loc 2 237 0 discriminator 1
 5534              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5535 00dc 4FF05003 			mov r3, #80												
 5536 00e0 83F31188 		msr basepri, r3											
 5537 00e4 BFF36F8F 		isb														
 5538 00e8 BFF34F8F 		dsb														
 5539              	
 5540              	@ 0 "" 2
 5541              		.thumb
 5542 00ec BB61     		str	r3, [r7, #24]
 5543              	.L374:
 5544              	.LBE184:
 5545              	.LBE183:
 5546              		.loc 1 4527 0 discriminator 2
 5547 00ee FEE7     		b	.L374
 5548              	.L373:
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 5549              		.loc 1 4529 0
 5550 00f0 214B     		ldr	r3, .L381
 5551 00f2 1B68     		ldr	r3, [r3]
 5552 00f4 002B     		cmp	r3, #0
 5553 00f6 1ED1     		bne	.L375
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 5554              		.loc 1 4531 0
 5555 00f8 3B6B     		ldr	r3, [r7, #48]
 5556 00fa 0433     		adds	r3, r3, #4
 5557 00fc 1846     		mov	r0, r3
 5558 00fe FFF7FEFF 		bl	uxListRemove
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5559              		.loc 1 4532 0
 5560 0102 3B6B     		ldr	r3, [r7, #48]
 5561 0104 DB6A     		ldr	r3, [r3, #44]
 5562 0106 1A46     		mov	r2, r3
 5563 0108 0123     		movs	r3, #1
 5564 010a 03FA02F2 		lsl	r2, r3, r2
 5565 010e 1B4B     		ldr	r3, .L381+4
 5566 0110 1B68     		ldr	r3, [r3]
 5567 0112 1343     		orrs	r3, r3, r2
 5568 0114 194A     		ldr	r2, .L381+4
 5569 0116 1360     		str	r3, [r2]
 5570 0118 3B6B     		ldr	r3, [r7, #48]
 5571 011a DA6A     		ldr	r2, [r3, #44]
 5572 011c 1346     		mov	r3, r2
 5573 011e 9B00     		lsls	r3, r3, #2
 5574 0120 1344     		add	r3, r3, r2
 5575 0122 9B00     		lsls	r3, r3, #2
 5576 0124 164A     		ldr	r2, .L381+8
 5577 0126 1A44     		add	r2, r2, r3
 5578 0128 3B6B     		ldr	r3, [r7, #48]
 5579 012a 0433     		adds	r3, r3, #4
ARM GAS  /tmp/ccJ0Dfhq.s 			page 182


 5580 012c 1046     		mov	r0, r2
 5581 012e 1946     		mov	r1, r3
 5582 0130 FFF7FEFF 		bl	vListInsertEnd
 5583 0134 05E0     		b	.L376
 5584              	.L375:
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 5585              		.loc 1 4538 0
 5586 0136 3B6B     		ldr	r3, [r7, #48]
 5587 0138 1833     		adds	r3, r3, #24
 5588 013a 1248     		ldr	r0, .L381+12
 5589 013c 1946     		mov	r1, r3
 5590 013e FFF7FEFF 		bl	vListInsertEnd
 5591              	.L376:
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 5592              		.loc 1 4541 0
 5593 0142 3B6B     		ldr	r3, [r7, #48]
 5594 0144 DA6A     		ldr	r2, [r3, #44]
 5595 0146 104B     		ldr	r3, .L381+16
 5596 0148 1B68     		ldr	r3, [r3]
 5597 014a DB6A     		ldr	r3, [r3, #44]
 5598 014c 9A42     		cmp	r2, r3
 5599 014e 09D9     		bls	.L372
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 5600              		.loc 1 4545 0
 5601 0150 3B6C     		ldr	r3, [r7, #64]
 5602 0152 002B     		cmp	r3, #0
 5603 0154 03D0     		beq	.L377
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 5604              		.loc 1 4547 0
 5605 0156 3B6C     		ldr	r3, [r7, #64]
 5606 0158 0122     		movs	r2, #1
 5607 015a 1A60     		str	r2, [r3]
 5608 015c 02E0     		b	.L372
 5609              	.L377:
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
 5610              		.loc 1 4554 0
 5611 015e 0B4B     		ldr	r3, .L381+20
 5612 0160 0122     		movs	r2, #1
 5613 0162 1A60     		str	r2, [r3]
 5614              	.L372:
ARM GAS  /tmp/ccJ0Dfhq.s 			page 183


 5615 0164 FB6A     		ldr	r3, [r7, #44]
 5616 0166 7B61     		str	r3, [r7, #20]
 5617              	.LBB185:
 5618              	.LBB186:
 5619              		.loc 2 271 0
 5620 0168 7B69     		ldr	r3, [r7, #20]
 5621              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5622 016a 83F31188 			msr basepri, r3	
 5623              	@ 0 "" 2
 5624              		.thumb
 5625              	.LBE186:
 5626              	.LBE185:
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 5627              		.loc 1 4565 0
 5628 016e 7B6B     		ldr	r3, [r7, #52]
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5629              		.loc 1 4566 0
 5630 0170 1846     		mov	r0, r3
 5631 0172 3837     		adds	r7, r7, #56
 5632              	.LCFI226:
 5633              		.cfi_def_cfa_offset 8
 5634 0174 BD46     		mov	sp, r7
 5635              	.LCFI227:
 5636              		.cfi_def_cfa_register 13
 5637              		@ sp needed
 5638 0176 80BD     		pop	{r7, pc}
 5639              	.L382:
 5640              		.align	2
 5641              	.L381:
 5642 0178 00000000 		.word	uxSchedulerSuspended
 5643 017c 00000000 		.word	uxTopReadyPriority
 5644 0180 00000000 		.word	pxReadyTasksLists
 5645 0184 00000000 		.word	xPendingReadyList
 5646 0188 00000000 		.word	pxCurrentTCB
 5647 018c 00000000 		.word	xYieldPending
 5648              		.cfi_endproc
 5649              	.LFE49:
 5651              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 5652              		.align	2
 5653              		.global	vTaskNotifyGiveFromISR
 5654              		.thumb
 5655              		.thumb_func
 5657              	vTaskNotifyGiveFromISR:
 5658              	.LFB50:
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccJ0Dfhq.s 			page 184


4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5659              		.loc 1 4574 0
 5660              		.cfi_startproc
 5661              		@ args = 0, pretend = 0, frame = 40
 5662              		@ frame_needed = 1, uses_anonymous_args = 0
 5663 0000 80B5     		push	{r7, lr}
 5664              	.LCFI228:
 5665              		.cfi_def_cfa_offset 8
 5666              		.cfi_offset 7, -8
 5667              		.cfi_offset 14, -4
 5668 0002 8AB0     		sub	sp, sp, #40
 5669              	.LCFI229:
 5670              		.cfi_def_cfa_offset 48
 5671 0004 00AF     		add	r7, sp, #0
 5672              	.LCFI230:
 5673              		.cfi_def_cfa_register 7
 5674 0006 7860     		str	r0, [r7, #4]
 5675 0008 3960     		str	r1, [r7]
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 5676              		.loc 1 4579 0
 5677 000a 7B68     		ldr	r3, [r7, #4]
 5678 000c 002B     		cmp	r3, #0
 5679 000e 09D1     		bne	.L384
 5680              	.LBB187:
 5681              	.LBB188:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5682              		.loc 2 237 0 discriminator 1
 5683              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5684 0010 4FF05003 			mov r3, #80												
 5685 0014 83F31188 		msr basepri, r3											
 5686 0018 BFF36F8F 		isb														
 5687 001c BFF34F8F 		dsb														
 5688              	
 5689              	@ 0 "" 2
 5690              		.thumb
 5691 0020 BB61     		str	r3, [r7, #24]
 5692              	.L385:
 5693              	.LBE188:
 5694              	.LBE187:
 5695              		.loc 1 4579 0 discriminator 1
 5696 0022 FEE7     		b	.L385
 5697              	.L384:
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
ARM GAS  /tmp/ccJ0Dfhq.s 			page 185


4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 5698              		.loc 1 4597 0
 5699 0024 FFF7FEFF 		bl	vPortValidateInterruptPriority
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 5700              		.loc 1 4599 0
 5701 0028 7B68     		ldr	r3, [r7, #4]
 5702 002a 7B62     		str	r3, [r7, #36]
 5703              	.LBB189:
 5704              	.LBB190:
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5705              		.loc 2 253 0
 5706              	@ 253 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5707 002c EFF31182 			mrs r2, basepri											
 5708 0030 4FF05003 		mov r3, #80												
 5709 0034 83F31188 		msr basepri, r3											
 5710 0038 BFF36F8F 		isb														
 5711 003c BFF34F8F 		dsb														
 5712              	
 5713              	@ 0 "" 2
 5714              		.thumb
 5715 0040 7A61     		str	r2, [r7, #20]
 5716 0042 3B61     		str	r3, [r7, #16]
 265:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 5717              		.loc 2 265 0
 5718 0044 7B69     		ldr	r3, [r7, #20]
 5719              	.LBE190:
 5720              	.LBE189:
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 5721              		.loc 1 4601 0
 5722 0046 3B62     		str	r3, [r7, #32]
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 5723              		.loc 1 4603 0
 5724 0048 7B6A     		ldr	r3, [r7, #36]
 5725 004a 93F85030 		ldrb	r3, [r3, #80]
 5726 004e FB77     		strb	r3, [r7, #31]
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5727              		.loc 1 4604 0
 5728 0050 7B6A     		ldr	r3, [r7, #36]
 5729 0052 0222     		movs	r2, #2
 5730 0054 83F85020 		strb	r2, [r3, #80]
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
ARM GAS  /tmp/ccJ0Dfhq.s 			page 186


 5731              		.loc 1 4608 0
 5732 0058 7B6A     		ldr	r3, [r7, #36]
 5733 005a DB6C     		ldr	r3, [r3, #76]
 5734 005c 5A1C     		adds	r2, r3, #1
 5735 005e 7B6A     		ldr	r3, [r7, #36]
 5736 0060 DA64     		str	r2, [r3, #76]
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 5737              		.loc 1 4614 0
 5738 0062 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 5739 0064 012B     		cmp	r3, #1
 5740 0066 47D1     		bne	.L387
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 5741              		.loc 1 4617 0
 5742 0068 7B6A     		ldr	r3, [r7, #36]
 5743 006a 9B6A     		ldr	r3, [r3, #40]
 5744 006c 002B     		cmp	r3, #0
 5745 006e 09D0     		beq	.L388
 5746              	.LBB191:
 5747              	.LBB192:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5748              		.loc 2 237 0 discriminator 1
 5749              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5750 0070 4FF05003 			mov r3, #80												
 5751 0074 83F31188 		msr basepri, r3											
 5752 0078 BFF36F8F 		isb														
 5753 007c BFF34F8F 		dsb														
 5754              	
 5755              	@ 0 "" 2
 5756              		.thumb
 5757 0080 FB60     		str	r3, [r7, #12]
 5758              	.L389:
 5759              	.LBE192:
 5760              	.LBE191:
 5761              		.loc 1 4617 0 discriminator 2
 5762 0082 FEE7     		b	.L389
 5763              	.L388:
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 5764              		.loc 1 4619 0
 5765 0084 204B     		ldr	r3, .L394
 5766 0086 1B68     		ldr	r3, [r3]
 5767 0088 002B     		cmp	r3, #0
 5768 008a 1ED1     		bne	.L390
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 5769              		.loc 1 4621 0
 5770 008c 7B6A     		ldr	r3, [r7, #36]
 5771 008e 0433     		adds	r3, r3, #4
 5772 0090 1846     		mov	r0, r3
 5773 0092 FFF7FEFF 		bl	uxListRemove
ARM GAS  /tmp/ccJ0Dfhq.s 			page 187


4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5774              		.loc 1 4622 0
 5775 0096 7B6A     		ldr	r3, [r7, #36]
 5776 0098 DB6A     		ldr	r3, [r3, #44]
 5777 009a 1A46     		mov	r2, r3
 5778 009c 0123     		movs	r3, #1
 5779 009e 03FA02F2 		lsl	r2, r3, r2
 5780 00a2 1A4B     		ldr	r3, .L394+4
 5781 00a4 1B68     		ldr	r3, [r3]
 5782 00a6 1343     		orrs	r3, r3, r2
 5783 00a8 184A     		ldr	r2, .L394+4
 5784 00aa 1360     		str	r3, [r2]
 5785 00ac 7B6A     		ldr	r3, [r7, #36]
 5786 00ae DA6A     		ldr	r2, [r3, #44]
 5787 00b0 1346     		mov	r3, r2
 5788 00b2 9B00     		lsls	r3, r3, #2
 5789 00b4 1344     		add	r3, r3, r2
 5790 00b6 9B00     		lsls	r3, r3, #2
 5791 00b8 154A     		ldr	r2, .L394+8
 5792 00ba 1A44     		add	r2, r2, r3
 5793 00bc 7B6A     		ldr	r3, [r7, #36]
 5794 00be 0433     		adds	r3, r3, #4
 5795 00c0 1046     		mov	r0, r2
 5796 00c2 1946     		mov	r1, r3
 5797 00c4 FFF7FEFF 		bl	vListInsertEnd
 5798 00c8 05E0     		b	.L391
 5799              	.L390:
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 5800              		.loc 1 4628 0
 5801 00ca 7B6A     		ldr	r3, [r7, #36]
 5802 00cc 1833     		adds	r3, r3, #24
 5803 00ce 1148     		ldr	r0, .L394+12
 5804 00d0 1946     		mov	r1, r3
 5805 00d2 FFF7FEFF 		bl	vListInsertEnd
 5806              	.L391:
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 5807              		.loc 1 4631 0
 5808 00d6 7B6A     		ldr	r3, [r7, #36]
 5809 00d8 DA6A     		ldr	r2, [r3, #44]
 5810 00da 0F4B     		ldr	r3, .L394+16
 5811 00dc 1B68     		ldr	r3, [r3]
 5812 00de DB6A     		ldr	r3, [r3, #44]
 5813 00e0 9A42     		cmp	r2, r3
 5814 00e2 09D9     		bls	.L387
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 5815              		.loc 1 4635 0
 5816 00e4 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccJ0Dfhq.s 			page 188


 5817 00e6 002B     		cmp	r3, #0
 5818 00e8 03D0     		beq	.L392
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 5819              		.loc 1 4637 0
 5820 00ea 3B68     		ldr	r3, [r7]
 5821 00ec 0122     		movs	r2, #1
 5822 00ee 1A60     		str	r2, [r3]
 5823 00f0 02E0     		b	.L387
 5824              	.L392:
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
 5825              		.loc 1 4644 0
 5826 00f2 0A4B     		ldr	r3, .L394+20
 5827 00f4 0122     		movs	r2, #1
 5828 00f6 1A60     		str	r2, [r3]
 5829              	.L387:
 5830 00f8 3B6A     		ldr	r3, [r7, #32]
 5831 00fa BB60     		str	r3, [r7, #8]
 5832              	.LBB193:
 5833              	.LBB194:
 5834              		.loc 2 271 0
 5835 00fc BB68     		ldr	r3, [r7, #8]
 5836              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5837 00fe 83F31188 			msr basepri, r3	
 5838              	@ 0 "" 2
 5839              		.thumb
 5840              	.LBE194:
 5841              	.LBE193:
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5842              		.loc 1 4654 0
 5843 0102 2837     		adds	r7, r7, #40
 5844              	.LCFI231:
 5845              		.cfi_def_cfa_offset 8
 5846 0104 BD46     		mov	sp, r7
 5847              	.LCFI232:
 5848              		.cfi_def_cfa_register 13
 5849              		@ sp needed
 5850 0106 80BD     		pop	{r7, pc}
 5851              	.L395:
 5852              		.align	2
 5853              	.L394:
 5854 0108 00000000 		.word	uxSchedulerSuspended
ARM GAS  /tmp/ccJ0Dfhq.s 			page 189


 5855 010c 00000000 		.word	uxTopReadyPriority
 5856 0110 00000000 		.word	pxReadyTasksLists
 5857 0114 00000000 		.word	xPendingReadyList
 5858 0118 00000000 		.word	pxCurrentTCB
 5859 011c 00000000 		.word	xYieldPending
 5860              		.cfi_endproc
 5861              	.LFE50:
 5863              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 5864              		.align	2
 5865              		.global	xTaskNotifyStateClear
 5866              		.thumb
 5867              		.thumb_func
 5869              	xTaskNotifyStateClear:
 5870              	.LFB51:
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5871              		.loc 1 4663 0
 5872              		.cfi_startproc
 5873              		@ args = 0, pretend = 0, frame = 16
 5874              		@ frame_needed = 1, uses_anonymous_args = 0
 5875 0000 80B5     		push	{r7, lr}
 5876              	.LCFI233:
 5877              		.cfi_def_cfa_offset 8
 5878              		.cfi_offset 7, -8
 5879              		.cfi_offset 14, -4
 5880 0002 84B0     		sub	sp, sp, #16
 5881              	.LCFI234:
 5882              		.cfi_def_cfa_offset 24
 5883 0004 00AF     		add	r7, sp, #0
 5884              	.LCFI235:
 5885              		.cfi_def_cfa_register 7
 5886 0006 7860     		str	r0, [r7, #4]
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 5887              		.loc 1 4669 0
 5888 0008 7B68     		ldr	r3, [r7, #4]
 5889 000a 002B     		cmp	r3, #0
 5890 000c 02D1     		bne	.L397
 5891              		.loc 1 4669 0 is_stmt 0 discriminator 1
 5892 000e 0E4B     		ldr	r3, .L402
 5893 0010 1B68     		ldr	r3, [r3]
 5894 0012 00E0     		b	.L398
 5895              	.L397:
 5896              		.loc 1 4669 0 discriminator 2
 5897 0014 7B68     		ldr	r3, [r7, #4]
 5898              	.L398:
ARM GAS  /tmp/ccJ0Dfhq.s 			page 190


 5899              		.loc 1 4669 0 discriminator 4
 5900 0016 BB60     		str	r3, [r7, #8]
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 5901              		.loc 1 4671 0 is_stmt 1 discriminator 4
 5902 0018 FFF7FEFF 		bl	vPortEnterCritical
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 5903              		.loc 1 4673 0 discriminator 4
 5904 001c BB68     		ldr	r3, [r7, #8]
 5905 001e 93F85030 		ldrb	r3, [r3, #80]
 5906 0022 DBB2     		uxtb	r3, r3
 5907 0024 022B     		cmp	r3, #2
 5908 0026 06D1     		bne	.L399
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 5909              		.loc 1 4675 0
 5910 0028 BB68     		ldr	r3, [r7, #8]
 5911 002a 0022     		movs	r2, #0
 5912 002c 83F85020 		strb	r2, [r3, #80]
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 5913              		.loc 1 4676 0
 5914 0030 0123     		movs	r3, #1
 5915 0032 FB60     		str	r3, [r7, #12]
 5916 0034 01E0     		b	.L400
 5917              	.L399:
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
 5918              		.loc 1 4680 0
 5919 0036 0023     		movs	r3, #0
 5920 0038 FB60     		str	r3, [r7, #12]
 5921              	.L400:
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 5922              		.loc 1 4683 0
 5923 003a FFF7FEFF 		bl	vPortExitCritical
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 5924              		.loc 1 4685 0
 5925 003e FB68     		ldr	r3, [r7, #12]
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5926              		.loc 1 4686 0
 5927 0040 1846     		mov	r0, r3
 5928 0042 1037     		adds	r7, r7, #16
 5929              	.LCFI236:
 5930              		.cfi_def_cfa_offset 8
 5931 0044 BD46     		mov	sp, r7
 5932              	.LCFI237:
 5933              		.cfi_def_cfa_register 13
 5934              		@ sp needed
 5935 0046 80BD     		pop	{r7, pc}
 5936              	.L403:
 5937              		.align	2
 5938              	.L402:
ARM GAS  /tmp/ccJ0Dfhq.s 			page 191


 5939 0048 00000000 		.word	pxCurrentTCB
 5940              		.cfi_endproc
 5941              	.LFE51:
 5943              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 5944              		.align	2
 5945              		.thumb
 5946              		.thumb_func
 5948              	prvAddCurrentTaskToDelayedList:
 5949              	.LFB52:
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5950              		.loc 1 4693 0
 5951              		.cfi_startproc
 5952              		@ args = 0, pretend = 0, frame = 16
 5953              		@ frame_needed = 1, uses_anonymous_args = 0
 5954 0000 80B5     		push	{r7, lr}
 5955              	.LCFI238:
 5956              		.cfi_def_cfa_offset 8
 5957              		.cfi_offset 7, -8
 5958              		.cfi_offset 14, -4
 5959 0002 84B0     		sub	sp, sp, #16
 5960              	.LCFI239:
 5961              		.cfi_def_cfa_offset 24
 5962 0004 00AF     		add	r7, sp, #0
 5963              	.LCFI240:
 5964              		.cfi_def_cfa_register 7
 5965 0006 7860     		str	r0, [r7, #4]
 5966 0008 3960     		str	r1, [r7]
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 5967              		.loc 1 4695 0
 5968 000a 284B     		ldr	r3, .L409
 5969 000c 1B68     		ldr	r3, [r3]
 5970 000e FB60     		str	r3, [r7, #12]
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 5971              		.loc 1 4708 0
 5972 0010 274B     		ldr	r3, .L409+4
 5973 0012 1B68     		ldr	r3, [r3]
 5974 0014 0433     		adds	r3, r3, #4
 5975 0016 1846     		mov	r0, r3
ARM GAS  /tmp/ccJ0Dfhq.s 			page 192


 5976 0018 FFF7FEFF 		bl	uxListRemove
 5977 001c 0346     		mov	r3, r0
 5978 001e 002B     		cmp	r3, #0
 5979 0020 0BD1     		bne	.L405
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 5980              		.loc 1 4712 0
 5981 0022 234B     		ldr	r3, .L409+4
 5982 0024 1B68     		ldr	r3, [r3]
 5983 0026 DB6A     		ldr	r3, [r3, #44]
 5984 0028 1A46     		mov	r2, r3
 5985 002a 0123     		movs	r3, #1
 5986 002c 9340     		lsls	r3, r3, r2
 5987 002e DA43     		mvns	r2, r3
 5988 0030 204B     		ldr	r3, .L409+8
 5989 0032 1B68     		ldr	r3, [r3]
 5990 0034 1340     		ands	r3, r3, r2
 5991 0036 1F4A     		ldr	r2, .L409+8
 5992 0038 1360     		str	r3, [r2]
 5993              	.L405:
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 5994              		.loc 1 4721 0
 5995 003a 7B68     		ldr	r3, [r7, #4]
 5996 003c B3F1FF3F 		cmp	r3, #-1
 5997 0040 0AD1     		bne	.L406
 5998              		.loc 1 4721 0 is_stmt 0 discriminator 1
 5999 0042 3B68     		ldr	r3, [r7]
 6000 0044 002B     		cmp	r3, #0
 6001 0046 07D0     		beq	.L406
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 6002              		.loc 1 4726 0 is_stmt 1
 6003 0048 194B     		ldr	r3, .L409+4
 6004 004a 1B68     		ldr	r3, [r3]
 6005 004c 0433     		adds	r3, r3, #4
 6006 004e 1A48     		ldr	r0, .L409+12
 6007 0050 1946     		mov	r1, r3
 6008 0052 FFF7FEFF 		bl	vListInsertEnd
 6009 0056 26E0     		b	.L404
 6010              	.L406:
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
ARM GAS  /tmp/ccJ0Dfhq.s 			page 193


4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 6011              		.loc 1 4733 0
 6012 0058 FA68     		ldr	r2, [r7, #12]
 6013 005a 7B68     		ldr	r3, [r7, #4]
 6014 005c 1344     		add	r3, r3, r2
 6015 005e BB60     		str	r3, [r7, #8]
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 6016              		.loc 1 4736 0
 6017 0060 134B     		ldr	r3, .L409+4
 6018 0062 1B68     		ldr	r3, [r3]
 6019 0064 BA68     		ldr	r2, [r7, #8]
 6020 0066 5A60     		str	r2, [r3, #4]
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 6021              		.loc 1 4738 0
 6022 0068 BA68     		ldr	r2, [r7, #8]
 6023 006a FB68     		ldr	r3, [r7, #12]
 6024 006c 9A42     		cmp	r2, r3
 6025 006e 09D2     		bcs	.L408
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 6026              		.loc 1 4742 0
 6027 0070 124B     		ldr	r3, .L409+16
 6028 0072 1A68     		ldr	r2, [r3]
 6029 0074 0E4B     		ldr	r3, .L409+4
 6030 0076 1B68     		ldr	r3, [r3]
 6031 0078 0433     		adds	r3, r3, #4
 6032 007a 1046     		mov	r0, r2
 6033 007c 1946     		mov	r1, r3
 6034 007e FFF7FEFF 		bl	vListInsert
 6035 0082 10E0     		b	.L404
 6036              	.L408:
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 6037              		.loc 1 4748 0
 6038 0084 0E4B     		ldr	r3, .L409+20
 6039 0086 1A68     		ldr	r2, [r3]
 6040 0088 094B     		ldr	r3, .L409+4
 6041 008a 1B68     		ldr	r3, [r3]
 6042 008c 0433     		adds	r3, r3, #4
 6043 008e 1046     		mov	r0, r2
 6044 0090 1946     		mov	r1, r3
 6045 0092 FFF7FEFF 		bl	vListInsert
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
ARM GAS  /tmp/ccJ0Dfhq.s 			page 194


4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 6046              		.loc 1 4753 0
 6047 0096 0B4B     		ldr	r3, .L409+24
 6048 0098 1B68     		ldr	r3, [r3]
 6049 009a BA68     		ldr	r2, [r7, #8]
 6050 009c 9A42     		cmp	r2, r3
 6051 009e 02D2     		bcs	.L404
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 6052              		.loc 1 4755 0
 6053 00a0 084A     		ldr	r2, .L409+24
 6054 00a2 BB68     		ldr	r3, [r7, #8]
 6055 00a4 1360     		str	r3, [r2]
 6056              	.L404:
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
4765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		will manage it correctly. */
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
4770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
4772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
4775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
4777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
4782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
4785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			too. */
4787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
4790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
4798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
ARM GAS  /tmp/ccJ0Dfhq.s 			page 195


4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 6057              		.loc 1 4801 0
 6058 00a6 1037     		adds	r7, r7, #16
 6059              	.LCFI241:
 6060              		.cfi_def_cfa_offset 8
 6061 00a8 BD46     		mov	sp, r7
 6062              	.LCFI242:
 6063              		.cfi_def_cfa_register 13
 6064              		@ sp needed
 6065 00aa 80BD     		pop	{r7, pc}
 6066              	.L410:
 6067              		.align	2
 6068              	.L409:
 6069 00ac 00000000 		.word	xTickCount
 6070 00b0 00000000 		.word	pxCurrentTCB
 6071 00b4 00000000 		.word	uxTopReadyPriority
 6072 00b8 00000000 		.word	xSuspendedTaskList
 6073 00bc 00000000 		.word	pxOverflowDelayedTaskList
 6074 00c0 00000000 		.word	pxDelayedTaskList
 6075 00c4 00000000 		.word	xNextTaskUnblockTime
 6076              		.cfi_endproc
 6077              	.LFE52:
 6079              		.text
 6080              	.Letext0:
 6081              		.file 3 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h"
 6082              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 6083              		.file 5 "/usr/include/newlib/sys/_stdint.h"
 6084              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 6085              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 6086              		.file 8 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
ARM GAS  /tmp/ccJ0Dfhq.s 			page 196


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
     /tmp/ccJ0Dfhq.s:25     .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
     /tmp/ccJ0Dfhq.s:22     .bss.pxCurrentTCB:0000000000000000 $d
     /tmp/ccJ0Dfhq.s:28     .bss.pxReadyTasksLists:0000000000000000 $d
     /tmp/ccJ0Dfhq.s:31     .bss.pxReadyTasksLists:0000000000000000 pxReadyTasksLists
     /tmp/ccJ0Dfhq.s:34     .bss.xDelayedTaskList1:0000000000000000 $d
     /tmp/ccJ0Dfhq.s:37     .bss.xDelayedTaskList1:0000000000000000 xDelayedTaskList1
     /tmp/ccJ0Dfhq.s:40     .bss.xDelayedTaskList2:0000000000000000 $d
     /tmp/ccJ0Dfhq.s:43     .bss.xDelayedTaskList2:0000000000000000 xDelayedTaskList2
     /tmp/ccJ0Dfhq.s:46     .bss.pxDelayedTaskList:0000000000000000 $d
     /tmp/ccJ0Dfhq.s:49     .bss.pxDelayedTaskList:0000000000000000 pxDelayedTaskList
     /tmp/ccJ0Dfhq.s:52     .bss.pxOverflowDelayedTaskList:0000000000000000 $d
     /tmp/ccJ0Dfhq.s:55     .bss.pxOverflowDelayedTaskList:0000000000000000 pxOverflowDelayedTaskList
     /tmp/ccJ0Dfhq.s:58     .bss.xPendingReadyList:0000000000000000 $d
     /tmp/ccJ0Dfhq.s:61     .bss.xPendingReadyList:0000000000000000 xPendingReadyList
     /tmp/ccJ0Dfhq.s:64     .bss.xTasksWaitingTermination:0000000000000000 $d
     /tmp/ccJ0Dfhq.s:67     .bss.xTasksWaitingTermination:0000000000000000 xTasksWaitingTermination
     /tmp/ccJ0Dfhq.s:70     .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 $d
     /tmp/ccJ0Dfhq.s:73     .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 uxDeletedTasksWaitingCleanUp
     /tmp/ccJ0Dfhq.s:76     .bss.xSuspendedTaskList:0000000000000000 $d
     /tmp/ccJ0Dfhq.s:79     .bss.xSuspendedTaskList:0000000000000000 xSuspendedTaskList
     /tmp/ccJ0Dfhq.s:82     .bss.uxCurrentNumberOfTasks:0000000000000000 $d
     /tmp/ccJ0Dfhq.s:85     .bss.uxCurrentNumberOfTasks:0000000000000000 uxCurrentNumberOfTasks
     /tmp/ccJ0Dfhq.s:88     .bss.xTickCount:0000000000000000 $d
     /tmp/ccJ0Dfhq.s:91     .bss.xTickCount:0000000000000000 xTickCount
     /tmp/ccJ0Dfhq.s:94     .bss.uxTopReadyPriority:0000000000000000 $d
     /tmp/ccJ0Dfhq.s:97     .bss.uxTopReadyPriority:0000000000000000 uxTopReadyPriority
     /tmp/ccJ0Dfhq.s:100    .bss.xSchedulerRunning:0000000000000000 $d
     /tmp/ccJ0Dfhq.s:103    .bss.xSchedulerRunning:0000000000000000 xSchedulerRunning
     /tmp/ccJ0Dfhq.s:106    .bss.uxPendedTicks:0000000000000000 $d
     /tmp/ccJ0Dfhq.s:109    .bss.uxPendedTicks:0000000000000000 uxPendedTicks
     /tmp/ccJ0Dfhq.s:112    .bss.xYieldPending:0000000000000000 $d
     /tmp/ccJ0Dfhq.s:115    .bss.xYieldPending:0000000000000000 xYieldPending
     /tmp/ccJ0Dfhq.s:118    .bss.xNumOfOverflows:0000000000000000 $d
     /tmp/ccJ0Dfhq.s:121    .bss.xNumOfOverflows:0000000000000000 xNumOfOverflows
     /tmp/ccJ0Dfhq.s:124    .bss.uxTaskNumber:0000000000000000 $d
     /tmp/ccJ0Dfhq.s:127    .bss.uxTaskNumber:0000000000000000 uxTaskNumber
     /tmp/ccJ0Dfhq.s:130    .bss.xNextTaskUnblockTime:0000000000000000 $d
     /tmp/ccJ0Dfhq.s:133    .bss.xNextTaskUnblockTime:0000000000000000 xNextTaskUnblockTime
     /tmp/ccJ0Dfhq.s:136    .bss.xIdleTaskHandle:0000000000000000 $d
     /tmp/ccJ0Dfhq.s:139    .bss.xIdleTaskHandle:0000000000000000 xIdleTaskHandle
     /tmp/ccJ0Dfhq.s:142    .bss.uxSchedulerSuspended:0000000000000000 $d
     /tmp/ccJ0Dfhq.s:145    .bss.uxSchedulerSuspended:0000000000000000 uxSchedulerSuspended
     /tmp/ccJ0Dfhq.s:148    .text.xTaskCreate:0000000000000000 $t
     /tmp/ccJ0Dfhq.s:153    .text.xTaskCreate:0000000000000000 xTaskCreate
     /tmp/ccJ0Dfhq.s:261    .text.prvInitialiseNewTask:0000000000000000 prvInitialiseNewTask
     /tmp/ccJ0Dfhq.s:444    .text.prvAddNewTaskToReadyList:0000000000000000 prvAddNewTaskToReadyList
     /tmp/ccJ0Dfhq.s:257    .text.prvInitialiseNewTask:0000000000000000 $t
     /tmp/ccJ0Dfhq.s:440    .text.prvAddNewTaskToReadyList:0000000000000000 $t
     /tmp/ccJ0Dfhq.s:3985   .text.prvInitialiseTaskLists:0000000000000000 prvInitialiseTaskLists
     /tmp/ccJ0Dfhq.s:575    .text.prvAddNewTaskToReadyList:00000000000000bc $d
     /tmp/ccJ0Dfhq.s:586    .text.vTaskDelete:0000000000000000 $t
     /tmp/ccJ0Dfhq.s:591    .text.vTaskDelete:0000000000000000 vTaskDelete
     /tmp/ccJ0Dfhq.s:4176   .text.prvDeleteTCB:0000000000000000 prvDeleteTCB
     /tmp/ccJ0Dfhq.s:4219   .text.prvResetNextTaskUnblockTime:0000000000000000 prvResetNextTaskUnblockTime
     /tmp/ccJ0Dfhq.s:767    .text.vTaskDelete:00000000000000f4 $d
ARM GAS  /tmp/ccJ0Dfhq.s 			page 197


     /tmp/ccJ0Dfhq.s:781    .text.vTaskDelayUntil:0000000000000000 $t
     /tmp/ccJ0Dfhq.s:786    .text.vTaskDelayUntil:0000000000000000 vTaskDelayUntil
     /tmp/ccJ0Dfhq.s:2281   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
     /tmp/ccJ0Dfhq.s:5948   .text.prvAddCurrentTaskToDelayedList:0000000000000000 prvAddCurrentTaskToDelayedList
     /tmp/ccJ0Dfhq.s:2324   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
     /tmp/ccJ0Dfhq.s:974    .text.vTaskDelayUntil:00000000000000e8 $d
     /tmp/ccJ0Dfhq.s:981    .text.vTaskDelay:0000000000000000 $t
     /tmp/ccJ0Dfhq.s:986    .text.vTaskDelay:0000000000000000 vTaskDelay
     /tmp/ccJ0Dfhq.s:1072   .text.vTaskDelay:000000000000005c $d
     /tmp/ccJ0Dfhq.s:1078   .text.uxTaskPriorityGet:0000000000000000 $t
     /tmp/ccJ0Dfhq.s:1083   .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
     /tmp/ccJ0Dfhq.s:1138   .text.uxTaskPriorityGet:0000000000000030 $d
     /tmp/ccJ0Dfhq.s:1143   .text.uxTaskPriorityGetFromISR:0000000000000000 $t
     /tmp/ccJ0Dfhq.s:1148   .text.uxTaskPriorityGetFromISR:0000000000000000 uxTaskPriorityGetFromISR
     /tmp/ccJ0Dfhq.s:1233   .text.uxTaskPriorityGetFromISR:0000000000000054 $d
     /tmp/ccJ0Dfhq.s:1238   .text.vTaskPrioritySet:0000000000000000 $t
     /tmp/ccJ0Dfhq.s:1243   .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
     /tmp/ccJ0Dfhq.s:1480   .text.vTaskPrioritySet:000000000000014c $d
     /tmp/ccJ0Dfhq.s:1488   .text.vTaskSuspend:0000000000000000 $t
     /tmp/ccJ0Dfhq.s:1493   .text.vTaskSuspend:0000000000000000 vTaskSuspend
     /tmp/ccJ0Dfhq.s:3031   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
     /tmp/ccJ0Dfhq.s:1666   .text.vTaskSuspend:00000000000000ec $d
     /tmp/ccJ0Dfhq.s:1678   .text.prvTaskIsTaskSuspended:0000000000000000 $t
     /tmp/ccJ0Dfhq.s:1682   .text.prvTaskIsTaskSuspended:0000000000000000 prvTaskIsTaskSuspended
     /tmp/ccJ0Dfhq.s:1788   .text.prvTaskIsTaskSuspended:000000000000006c $d
     /tmp/ccJ0Dfhq.s:1794   .text.vTaskResume:0000000000000000 $t
     /tmp/ccJ0Dfhq.s:1799   .text.vTaskResume:0000000000000000 vTaskResume
     /tmp/ccJ0Dfhq.s:1924   .text.vTaskResume:00000000000000ac $d
     /tmp/ccJ0Dfhq.s:1932   .text.xTaskResumeFromISR:0000000000000000 $t
     /tmp/ccJ0Dfhq.s:1937   .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
     /tmp/ccJ0Dfhq.s:2093   .text.xTaskResumeFromISR:00000000000000d0 $d
     /tmp/ccJ0Dfhq.s:2102   .rodata:0000000000000000 $d
     /tmp/ccJ0Dfhq.s:2106   .text.vTaskStartScheduler:0000000000000000 $t
     /tmp/ccJ0Dfhq.s:2111   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
     /tmp/ccJ0Dfhq.s:2207   .text.vTaskStartScheduler:0000000000000070 $d
     /tmp/ccJ0Dfhq.s:3932   .text.prvIdleTask:0000000000000000 prvIdleTask
     /tmp/ccJ0Dfhq.s:2217   .text.vTaskEndScheduler:0000000000000000 $t
     /tmp/ccJ0Dfhq.s:2222   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
     /tmp/ccJ0Dfhq.s:2271   .text.vTaskEndScheduler:0000000000000028 $d
     /tmp/ccJ0Dfhq.s:2276   .text.vTaskSuspendAll:0000000000000000 $t
     /tmp/ccJ0Dfhq.s:2314   .text.vTaskSuspendAll:0000000000000018 $d
     /tmp/ccJ0Dfhq.s:2319   .text.xTaskResumeAll:0000000000000000 $t
     /tmp/ccJ0Dfhq.s:2770   .text.xTaskIncrementTick:0000000000000000 xTaskIncrementTick
     /tmp/ccJ0Dfhq.s:2526   .text.xTaskResumeAll:0000000000000118 $d
     /tmp/ccJ0Dfhq.s:2539   .text.xTaskGetTickCount:0000000000000000 $t
     /tmp/ccJ0Dfhq.s:2544   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
     /tmp/ccJ0Dfhq.s:2584   .text.xTaskGetTickCount:000000000000001c $d
     /tmp/ccJ0Dfhq.s:2589   .text.xTaskGetTickCountFromISR:0000000000000000 $t
     /tmp/ccJ0Dfhq.s:2594   .text.xTaskGetTickCountFromISR:0000000000000000 xTaskGetTickCountFromISR
     /tmp/ccJ0Dfhq.s:2635   .text.xTaskGetTickCountFromISR:0000000000000020 $d
     /tmp/ccJ0Dfhq.s:2640   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
     /tmp/ccJ0Dfhq.s:2645   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
     /tmp/ccJ0Dfhq.s:2676   .text.uxTaskGetNumberOfTasks:0000000000000014 $d
     /tmp/ccJ0Dfhq.s:2681   .text.pcTaskGetName:0000000000000000 $t
     /tmp/ccJ0Dfhq.s:2686   .text.pcTaskGetName:0000000000000000 pcTaskGetName
     /tmp/ccJ0Dfhq.s:2760   .text.pcTaskGetName:0000000000000044 $d
     /tmp/ccJ0Dfhq.s:2765   .text.xTaskIncrementTick:0000000000000000 $t
ARM GAS  /tmp/ccJ0Dfhq.s 			page 198


     /tmp/ccJ0Dfhq.s:3011   .text.xTaskIncrementTick:0000000000000150 $d
     /tmp/ccJ0Dfhq.s:3026   .text.vTaskSwitchContext:0000000000000000 $t
     /tmp/ccJ0Dfhq.s:3165   .text.vTaskSwitchContext:00000000000000a0 $d
     /tmp/ccJ0Dfhq.s:3174   .text.vTaskPlaceOnEventList:0000000000000000 $t
     /tmp/ccJ0Dfhq.s:3179   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
     /tmp/ccJ0Dfhq.s:3243   .text.vTaskPlaceOnEventList:0000000000000040 $d
     /tmp/ccJ0Dfhq.s:3248   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 $t
     /tmp/ccJ0Dfhq.s:3253   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 vTaskPlaceOnUnorderedEventList
     /tmp/ccJ0Dfhq.s:3347   .text.vTaskPlaceOnUnorderedEventList:000000000000006c $d
     /tmp/ccJ0Dfhq.s:3353   .text.xTaskRemoveFromEventList:0000000000000000 $t
     /tmp/ccJ0Dfhq.s:3358   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
     /tmp/ccJ0Dfhq.s:3487   .text.xTaskRemoveFromEventList:00000000000000b0 $d
     /tmp/ccJ0Dfhq.s:3497   .text.xTaskRemoveFromUnorderedEventList:0000000000000000 $t
     /tmp/ccJ0Dfhq.s:3502   .text.xTaskRemoveFromUnorderedEventList:0000000000000000 xTaskRemoveFromUnorderedEventList
     /tmp/ccJ0Dfhq.s:3643   .text.xTaskRemoveFromUnorderedEventList:00000000000000bc $d
     /tmp/ccJ0Dfhq.s:3652   .text.vTaskSetTimeOutState:0000000000000000 $t
     /tmp/ccJ0Dfhq.s:3657   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
     /tmp/ccJ0Dfhq.s:3723   .text.vTaskSetTimeOutState:000000000000003c $d
     /tmp/ccJ0Dfhq.s:3729   .text.xTaskCheckForTimeOut:0000000000000000 $t
     /tmp/ccJ0Dfhq.s:3734   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
     /tmp/ccJ0Dfhq.s:3881   .text.xTaskCheckForTimeOut:00000000000000b4 $d
     /tmp/ccJ0Dfhq.s:3887   .text.vTaskMissedYield:0000000000000000 $t
     /tmp/ccJ0Dfhq.s:3892   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
     /tmp/ccJ0Dfhq.s:3923   .text.vTaskMissedYield:0000000000000014 $d
     /tmp/ccJ0Dfhq.s:3928   .text.prvIdleTask:0000000000000000 $t
     /tmp/ccJ0Dfhq.s:4077   .text.prvCheckTasksWaitingTermination:0000000000000000 prvCheckTasksWaitingTermination
     /tmp/ccJ0Dfhq.s:3975   .text.prvIdleTask:0000000000000028 $d
     /tmp/ccJ0Dfhq.s:3981   .text.prvInitialiseTaskLists:0000000000000000 $t
     /tmp/ccJ0Dfhq.s:4061   .text.prvInitialiseTaskLists:000000000000005c $d
     /tmp/ccJ0Dfhq.s:4073   .text.prvCheckTasksWaitingTermination:0000000000000000 $t
     /tmp/ccJ0Dfhq.s:4165   .text.prvCheckTasksWaitingTermination:0000000000000068 $d
     /tmp/ccJ0Dfhq.s:4172   .text.prvDeleteTCB:0000000000000000 $t
     /tmp/ccJ0Dfhq.s:4215   .text.prvResetNextTaskUnblockTime:0000000000000000 $t
     /tmp/ccJ0Dfhq.s:4286   .text.prvResetNextTaskUnblockTime:0000000000000040 $d
     /tmp/ccJ0Dfhq.s:4292   .text.xTaskGetCurrentTaskHandle:0000000000000000 $t
     /tmp/ccJ0Dfhq.s:4297   .text.xTaskGetCurrentTaskHandle:0000000000000000 xTaskGetCurrentTaskHandle
     /tmp/ccJ0Dfhq.s:4337   .text.xTaskGetCurrentTaskHandle:000000000000001c $d
     /tmp/ccJ0Dfhq.s:4342   .text.xTaskGetSchedulerState:0000000000000000 $t
     /tmp/ccJ0Dfhq.s:4347   .text.xTaskGetSchedulerState:0000000000000000 xTaskGetSchedulerState
     /tmp/ccJ0Dfhq.s:4407   .text.xTaskGetSchedulerState:0000000000000034 $d
     /tmp/ccJ0Dfhq.s:4413   .text.vTaskPriorityInherit:0000000000000000 $t
     /tmp/ccJ0Dfhq.s:4418   .text.vTaskPriorityInherit:0000000000000000 vTaskPriorityInherit
     /tmp/ccJ0Dfhq.s:4571   .text.vTaskPriorityInherit:00000000000000e4 $d
     /tmp/ccJ0Dfhq.s:4578   .text.xTaskPriorityDisinherit:0000000000000000 $t
     /tmp/ccJ0Dfhq.s:4583   .text.xTaskPriorityDisinherit:0000000000000000 xTaskPriorityDisinherit
     /tmp/ccJ0Dfhq.s:4763   .text.xTaskPriorityDisinherit:0000000000000100 $d
     /tmp/ccJ0Dfhq.s:4770   .text.uxTaskResetEventItemValue:0000000000000000 $t
     /tmp/ccJ0Dfhq.s:4775   .text.uxTaskResetEventItemValue:0000000000000000 uxTaskResetEventItemValue
     /tmp/ccJ0Dfhq.s:4824   .text.uxTaskResetEventItemValue:000000000000002c $d
     /tmp/ccJ0Dfhq.s:4829   .text.pvTaskIncrementMutexHeldCount:0000000000000000 $t
     /tmp/ccJ0Dfhq.s:4834   .text.pvTaskIncrementMutexHeldCount:0000000000000000 pvTaskIncrementMutexHeldCount
     /tmp/ccJ0Dfhq.s:4877   .text.pvTaskIncrementMutexHeldCount:0000000000000024 $d
     /tmp/ccJ0Dfhq.s:4882   .text.ulTaskNotifyTake:0000000000000000 $t
     /tmp/ccJ0Dfhq.s:4887   .text.ulTaskNotifyTake:0000000000000000 ulTaskNotifyTake
     /tmp/ccJ0Dfhq.s:4992   .text.ulTaskNotifyTake:0000000000000088 $d
     /tmp/ccJ0Dfhq.s:4998   .text.xTaskNotifyWait:0000000000000000 $t
     /tmp/ccJ0Dfhq.s:5003   .text.xTaskNotifyWait:0000000000000000 xTaskNotifyWait
ARM GAS  /tmp/ccJ0Dfhq.s 			page 199


     /tmp/ccJ0Dfhq.s:5127   .text.xTaskNotifyWait:00000000000000ac $d
     /tmp/ccJ0Dfhq.s:5133   .text.xTaskGenericNotify:0000000000000000 $t
     /tmp/ccJ0Dfhq.s:5138   .text.xTaskGenericNotify:0000000000000000 xTaskGenericNotify
     /tmp/ccJ0Dfhq.s:5216   .text.xTaskGenericNotify:0000000000000060 $d
     /tmp/ccJ0Dfhq.s:5221   .text.xTaskGenericNotify:0000000000000074 $t
     /tmp/ccJ0Dfhq.s:5360   .text.xTaskGenericNotify:0000000000000134 $d
     /tmp/ccJ0Dfhq.s:5368   .text.xTaskGenericNotifyFromISR:0000000000000000 $t
     /tmp/ccJ0Dfhq.s:5373   .text.xTaskGenericNotifyFromISR:0000000000000000 xTaskGenericNotifyFromISR
     /tmp/ccJ0Dfhq.s:5471   .text.xTaskGenericNotifyFromISR:0000000000000080 $d
     /tmp/ccJ0Dfhq.s:5476   .text.xTaskGenericNotifyFromISR:0000000000000094 $t
     /tmp/ccJ0Dfhq.s:5642   .text.xTaskGenericNotifyFromISR:0000000000000178 $d
     /tmp/ccJ0Dfhq.s:5652   .text.vTaskNotifyGiveFromISR:0000000000000000 $t
     /tmp/ccJ0Dfhq.s:5657   .text.vTaskNotifyGiveFromISR:0000000000000000 vTaskNotifyGiveFromISR
     /tmp/ccJ0Dfhq.s:5854   .text.vTaskNotifyGiveFromISR:0000000000000108 $d
     /tmp/ccJ0Dfhq.s:5864   .text.xTaskNotifyStateClear:0000000000000000 $t
     /tmp/ccJ0Dfhq.s:5869   .text.xTaskNotifyStateClear:0000000000000000 xTaskNotifyStateClear
     /tmp/ccJ0Dfhq.s:5939   .text.xTaskNotifyStateClear:0000000000000048 $d
     /tmp/ccJ0Dfhq.s:5944   .text.prvAddCurrentTaskToDelayedList:0000000000000000 $t
     /tmp/ccJ0Dfhq.s:6069   .text.prvAddCurrentTaskToDelayedList:00000000000000ac $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
pvPortMalloc
vPortFree
vListInitialiseItem
pxPortInitialiseStack
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vPortValidateInterruptPriority
xPortStartScheduler
vPortEndScheduler
vListInsert
vListInitialise
