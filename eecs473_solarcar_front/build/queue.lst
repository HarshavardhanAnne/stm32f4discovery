ARM GAS  /tmp/cc3YdTbX.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"queue.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.comm	xQueueRegistry,64,4
  21              		.section	.text.xQueueGenericReset,"ax",%progbits
  22              		.align	2
  23              		.global	xQueueGenericReset
  24              		.thumb
  25              		.thumb_func
  27              	xQueueGenericReset:
  28              	.LFB5:
  29              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/queue.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
   9:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****      *    platform software that is more than just the market leader, it     *
ARM GAS  /tmp/cc3YdTbX.s 			page 2


  30:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****      *                                                                       *
  32:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****      *    tutorial book, reference manual, or both:                          *
  35:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****      *                                                                       *
  37:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     mission critical applications that require provable dependability.
  66:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #include <stdlib.h>
  71:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #include <string.h>
  72:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  73:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  74:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** all the API functions to use the MPU wrappers.  That should only be done when
  75:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** task.h is included from an application file. */
  76:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  77:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #include "FreeRTOS.h"
  79:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #include "task.h"
  80:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #include "queue.h"
  81:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  82:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  83:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#include "croutine.h"
  84:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
  85:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  86:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
ARM GAS  /tmp/cc3YdTbX.s 			page 3


  87:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  88:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** header files above, but not in this file, in order to generate the correct
  89:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** privileged Vs unprivileged linkage and placement. */
  90:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  91:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  92:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  93:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  94:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define queueUNLOCKED					( ( int8_t ) -1 )
  95:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define queueLOCKED_UNMODIFIED			( ( int8_t ) 0 )
  96:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  97:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  98:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** pcTail members are used as pointers into the queue storage area.  When the
  99:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
 100:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** not necessary, and the pcHead pointer is set to NULL to indicate that the
 101:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** pcTail pointer actually points to the mutex holder (if any).  Map alternative
 102:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** names to the pcHead and pcTail structure members to ensure the readability of
 103:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** the code is maintained despite this dual use of two structure members.  An
 104:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** alternative implementation would be to use a union, but use of a union is
 105:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** against the coding standard (although an exception to the standard has been
 106:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** permitted where the dual use also significantly changes the type of the
 107:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** structure member). */
 108:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define pxMutexHolder					pcTail
 109:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define uxQueueType						pcHead
 110:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define queueQUEUE_IS_MUTEX				NULL
 111:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 112:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
 113:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** zero. */
 114:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH ( ( UBaseType_t ) 0 )
 115:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME		 ( ( TickType_t ) 0U )
 116:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 117:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configUSE_PREEMPTION == 0 )
 118:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 119:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	performed just because a higher priority task has been woken. */
 120:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION()
 121:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #else
 122:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 123:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
 124:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 125:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 126:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Definition of the queue used by the scheduler.
 127:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
 128:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * rationale: http://www.freertos.org/Embedded-RTOS-Queues.html
 129:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 130:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** typedef struct QueueDefinition
 131:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 132:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	int8_t *pcHead;					/*< Points to the beginning of the queue storage area. */
 133:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	int8_t *pcTail;					/*< Points to the byte at the end of the queue storage area.  Once more byte i
 134:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	int8_t *pcWriteTo;				/*< Points to the free next place in the storage area. */
 135:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 136:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	union							/* Use of a union is an exception to the coding standard to ensure two mutually exclus
 137:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 138:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		int8_t *pcReadFrom;			/*< Points to the last place that a queued item was read from when the stru
 139:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		UBaseType_t uxRecursiveCallCount;/*< Maintains a count of the number of times a recursive mutex h
 140:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} u;
 141:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 142:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	List_t xTasksWaitingToSend;		/*< List of tasks that are blocked waiting to post onto this queue.  
 143:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	List_t xTasksWaitingToReceive;	/*< List of tasks that are blocked waiting to read from this queue.
ARM GAS  /tmp/cc3YdTbX.s 			page 4


 144:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 145:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	volatile UBaseType_t uxMessagesWaiting;/*< The number of items currently in the queue. */
 146:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t uxLength;			/*< The length of the queue defined as the number of items it will hold, n
 147:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t uxItemSize;			/*< The size of each items that the queue will hold. */
 148:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	volatile int8_t cRxLock;		/*< Stores the number of items received from the queue (removed from the
 150:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	volatile int8_t cTxLock;		/*< Stores the number of items transmitted to the queue (added to the qu
 151:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 152:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 153:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		uint8_t ucStaticallyAllocated;	/*< Set to pdTRUE if the memory used by the queue was statically a
 154:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
 155:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 156:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( configUSE_QUEUE_SETS == 1 )
 157:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		struct QueueDefinition *pxQueueSetContainer;
 158:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
 159:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 161:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		UBaseType_t uxQueueNumber;
 162:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		uint8_t ucQueueType;
 163:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
 164:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } xQUEUE;
 166:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 167:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 168:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** name below to enable the use of older kernel aware debuggers. */
 169:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** typedef xQUEUE Queue_t;
 170:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 171:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 172:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 173:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 174:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 175:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 176:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 177:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 179:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* The type stored within the queue registry array.  This allows a name
 180:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	to be assigned to each queue making kernel aware debugging a little
 181:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	more user friendly. */
 182:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	typedef struct QUEUE_REGISTRY_ITEM
 183:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 184:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		const char *pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and single c
 185:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		QueueHandle_t xHandle;
 186:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} xQueueRegistryItem;
 187:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 188:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* The old xQueueRegistryItem name is maintained above then typedefed to the
 189:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	new xQueueRegistryItem name below to enable the use of older kernel aware
 190:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	debuggers. */
 191:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	typedef xQueueRegistryItem QueueRegistryItem_t;
 192:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 193:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* The queue registry is simply an array of QueueRegistryItem_t structures.
 194:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	The pcQueueName member of a structure being NULL is indicative of the
 195:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	array position being vacant. */
 196:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 197:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 198:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 199:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 200:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
ARM GAS  /tmp/cc3YdTbX.s 			page 5


 201:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 202:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 203:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 204:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 205:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 206:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 207:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 208:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** PRIVILEGED_FUNCTION static void prvUnlockQueue( Queue_t * const pxQueue );
 209:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 210:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 211:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 212:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  *
 213:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 214:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 215:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** PRIVILEGED_FUNCTION static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue );
 216:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 217:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 218:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 219:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  *
 220:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 221:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 222:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** PRIVILEGED_FUNCTION static BaseType_t prvIsQueueFull( const Queue_t *pxQueue );
 223:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 224:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 225:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 226:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * back of the queue.
 227:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 228:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** PRIVILEGED_FUNCTION static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvIt
 229:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 230:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 231:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Copies an item out of a queue.
 232:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 233:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** PRIVILEGED_FUNCTION static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffe
 234:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 235:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 236:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/*
 237:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 * Checks to see if a queue is a member of a queue set, and if so, notifies
 238:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 * the queue set that the queue contains data.
 239:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 */
 240:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	PRIVILEGED_FUNCTION static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, c
 241:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
 242:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 243:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 244:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Called after a Queue_t structure has been allocated either statically or
 245:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * dynamically to fill in the structure's members.
 246:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 247:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** PRIVILEGED_FUNCTION static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBase
 248:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 249:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 250:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 251:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 252:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * as a mutex.
 253:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 254:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 255:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	PRIVILEGED_FUNCTION static void prvInitialiseMutex( Queue_t *pxNewQueue );
 256:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
 257:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/cc3YdTbX.s 			page 6


 258:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 259:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 260:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 261:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 262:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * accessing the queue event lists.
 263:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 264:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define prvLockQueue( pxQueue )								\
 265:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();									\
 266:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{														\
 267:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( ( pxQueue )->cRxLock == queueUNLOCKED )			\
 268:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{													\
 269:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED;	\
 270:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}													\
 271:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( ( pxQueue )->cTxLock == queueUNLOCKED )			\
 272:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{													\
 273:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED;	\
 274:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}													\
 275:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}														\
 276:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL()
 277:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 278:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 279:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
 280:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
  30              		.loc 1 280 0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 16
  33              		@ frame_needed = 1, uses_anonymous_args = 0
  34 0000 80B5     		push	{r7, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 7, -8
  38              		.cfi_offset 14, -4
  39 0002 84B0     		sub	sp, sp, #16
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 24
  42 0004 00AF     		add	r7, sp, #0
  43              	.LCFI2:
  44              		.cfi_def_cfa_register 7
  45 0006 7860     		str	r0, [r7, #4]
  46 0008 3960     		str	r1, [r7]
 281:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
  47              		.loc 1 281 0
  48 000a 7B68     		ldr	r3, [r7, #4]
  49 000c FB60     		str	r3, [r7, #12]
 282:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 283:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
  50              		.loc 1 283 0
  51 000e FB68     		ldr	r3, [r7, #12]
  52 0010 002B     		cmp	r3, #0
  53 0012 09D1     		bne	.L2
  54              	.LBB76:
  55              	.LBB77:
  56              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/cc3YdTbX.s 			page 7


   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
ARM GAS  /tmp/cc3YdTbX.s 			page 8


  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     mission critical applications that require provable dependability.
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/cc3YdTbX.s 			page 9


 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/cc3YdTbX.s 			page 10


 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 230:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 231:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 232:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/cc3YdTbX.s 			page 11


 233:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 235:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 236:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
  57              		.loc 2 237 0 discriminator 1
  58              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
  59 0014 4FF05003 			mov r3, #80												
  60 0018 83F31188 		msr basepri, r3											
  61 001c BFF36F8F 		isb														
  62 0020 BFF34F8F 		dsb														
  63              	
  64              	@ 0 "" 2
  65              		.thumb
  66 0024 BB60     		str	r3, [r7, #8]
  67              	.L3:
  68              	.LBE77:
  69              	.LBE76:
  70              		.loc 1 283 0 discriminator 1
  71 0026 FEE7     		b	.L3
  72              	.L2:
 284:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 285:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
  73              		.loc 1 285 0
  74 0028 FFF7FEFF 		bl	vPortEnterCritical
 286:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 287:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  75              		.loc 1 287 0
  76 002c FB68     		ldr	r3, [r7, #12]
  77 002e 1A68     		ldr	r2, [r3]
  78 0030 FB68     		ldr	r3, [r7, #12]
  79 0032 DB6B     		ldr	r3, [r3, #60]
  80 0034 F968     		ldr	r1, [r7, #12]
  81 0036 096C     		ldr	r1, [r1, #64]
  82 0038 01FB03F3 		mul	r3, r1, r3
  83 003c 1A44     		add	r2, r2, r3
  84 003e FB68     		ldr	r3, [r7, #12]
  85 0040 5A60     		str	r2, [r3, #4]
 288:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  86              		.loc 1 288 0
  87 0042 FB68     		ldr	r3, [r7, #12]
  88 0044 0022     		movs	r2, #0
  89 0046 9A63     		str	r2, [r3, #56]
 289:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
  90              		.loc 1 289 0
  91 0048 FB68     		ldr	r3, [r7, #12]
  92 004a 1A68     		ldr	r2, [r3]
  93 004c FB68     		ldr	r3, [r7, #12]
  94 004e 9A60     		str	r2, [r3, #8]
 290:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
  95              		.loc 1 290 0
  96 0050 FB68     		ldr	r3, [r7, #12]
  97 0052 1A68     		ldr	r2, [r3]
  98 0054 FB68     		ldr	r3, [r7, #12]
  99 0056 DB6B     		ldr	r3, [r3, #60]
 100 0058 013B     		subs	r3, r3, #1
 101 005a F968     		ldr	r1, [r7, #12]
ARM GAS  /tmp/cc3YdTbX.s 			page 12


 102 005c 096C     		ldr	r1, [r1, #64]
 103 005e 01FB03F3 		mul	r3, r1, r3
 104 0062 1A44     		add	r2, r2, r3
 105 0064 FB68     		ldr	r3, [r7, #12]
 106 0066 DA60     		str	r2, [r3, #12]
 291:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 107              		.loc 1 291 0
 108 0068 FB68     		ldr	r3, [r7, #12]
 109 006a FF22     		movs	r2, #255
 110 006c 83F84420 		strb	r2, [r3, #68]
 292:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 111              		.loc 1 292 0
 112 0070 FB68     		ldr	r3, [r7, #12]
 113 0072 FF22     		movs	r2, #255
 114 0074 83F84520 		strb	r2, [r3, #69]
 293:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 294:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xNewQueue == pdFALSE )
 115              		.loc 1 294 0
 116 0078 3B68     		ldr	r3, [r7]
 117 007a 002B     		cmp	r3, #0
 118 007c 14D1     		bne	.L4
 295:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 296:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* If there are tasks blocked waiting to read from the queue, then
 297:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the tasks will remain blocked as after this function exits the queue
 298:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			will still be empty.  If there are tasks blocked waiting to write to
 299:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the queue, then one should be unblocked as after this function exits
 300:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			it will be possible to write to it. */
 301:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 119              		.loc 1 301 0
 120 007e FB68     		ldr	r3, [r7, #12]
 121 0080 1B69     		ldr	r3, [r3, #16]
 122 0082 002B     		cmp	r3, #0
 123 0084 1AD0     		beq	.L5
 302:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 303:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 124              		.loc 1 303 0
 125 0086 FB68     		ldr	r3, [r7, #12]
 126 0088 1033     		adds	r3, r3, #16
 127 008a 1846     		mov	r0, r3
 128 008c FFF7FEFF 		bl	xTaskRemoveFromEventList
 129 0090 0346     		mov	r3, r0
 130 0092 002B     		cmp	r3, #0
 131 0094 12D0     		beq	.L5
 304:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 305:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					queueYIELD_IF_USING_PREEMPTION();
 132              		.loc 1 305 0
 133 0096 0D4B     		ldr	r3, .L7
 134 0098 4FF08052 		mov	r2, #268435456
 135 009c 1A60     		str	r2, [r3]
 136              	@ 305 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 137 009e BFF34F8F 		dsb
 138              	@ 0 "" 2
 139              	@ 305 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 140 00a2 BFF36F8F 		isb
 141              	@ 0 "" 2
 142              		.thumb
 143 00a6 09E0     		b	.L5
ARM GAS  /tmp/cc3YdTbX.s 			page 13


 144              	.L4:
 306:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 307:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
 308:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 309:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 310:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 311:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 312:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 313:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 314:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 315:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 316:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 317:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 318:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 319:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Ensure the event queues start in the correct state. */
 320:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 145              		.loc 1 320 0
 146 00a8 FB68     		ldr	r3, [r7, #12]
 147 00aa 1033     		adds	r3, r3, #16
 148 00ac 1846     		mov	r0, r3
 149 00ae FFF7FEFF 		bl	vListInitialise
 321:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 150              		.loc 1 321 0
 151 00b2 FB68     		ldr	r3, [r7, #12]
 152 00b4 2433     		adds	r3, r3, #36
 153 00b6 1846     		mov	r0, r3
 154 00b8 FFF7FEFF 		bl	vListInitialise
 155              	.L5:
 322:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 323:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 324:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 156              		.loc 1 324 0
 157 00bc FFF7FEFF 		bl	vPortExitCritical
 325:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 326:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* A value is returned for calling semantic consistency with previous
 327:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	versions. */
 328:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return pdPASS;
 158              		.loc 1 328 0
 159 00c0 0123     		movs	r3, #1
 329:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 160              		.loc 1 329 0
 161 00c2 1846     		mov	r0, r3
 162 00c4 1037     		adds	r7, r7, #16
 163              	.LCFI3:
 164              		.cfi_def_cfa_offset 8
 165 00c6 BD46     		mov	sp, r7
 166              	.LCFI4:
 167              		.cfi_def_cfa_register 13
 168              		@ sp needed
 169 00c8 80BD     		pop	{r7, pc}
 170              	.L8:
 171 00ca 00BF     		.align	2
 172              	.L7:
 173 00cc 04ED00E0 		.word	-536810236
 174              		.cfi_endproc
 175              	.LFE5:
 177              		.section	.text.xQueueGenericCreate,"ax",%progbits
ARM GAS  /tmp/cc3YdTbX.s 			page 14


 178              		.align	2
 179              		.global	xQueueGenericCreate
 180              		.thumb
 181              		.thumb_func
 183              	xQueueGenericCreate:
 184              	.LFB6:
 330:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 331:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 332:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 333:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 334:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItem
 335:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 336:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 337:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 338:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 339:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 340:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* The StaticQueue_t structure and the queue storage area must be
 341:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		supplied. */
 342:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( pxStaticQueue != NULL );
 343:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 344:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* A queue storage area should be provided if the item size is not 0, and
 345:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		should not be provided if the item size is 0. */
 346:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 347:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 348:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 349:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		#if( configASSERT_DEFINED == 1 )
 350:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 351:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Sanity check that the size of the structure used to declare a
 352:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 353:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the real queue and semaphore structures. */
 354:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			volatile size_t xSize = sizeof( StaticQueue_t );
 355:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			configASSERT( xSize == sizeof( Queue_t ) );
 356:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 357:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		#endif /* configASSERT_DEFINED */
 358:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 359:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* The address of a statically allocated queue was passed in, use it.
 360:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		The address of a statically allocated storage area was also passed in
 361:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		but is already set. */
 362:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are d
 363:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 364:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 365:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 366:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 367:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 368:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Queues can be allocated wither statically or dynamically, so
 369:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				note this queue was allocated statically in case the queue is
 370:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				later deleted. */
 371:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 372:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 373:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 374:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 375:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 376:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 377:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 378:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pxNewQueue;
 379:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 380:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/cc3YdTbX.s 			page 15


 381:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 382:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 383:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 384:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 385:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 386:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, 
 387:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 185              		.loc 1 387 0
 186              		.cfi_startproc
 187              		@ args = 0, pretend = 0, frame = 32
 188              		@ frame_needed = 1, uses_anonymous_args = 0
 189 0000 90B5     		push	{r4, r7, lr}
 190              	.LCFI5:
 191              		.cfi_def_cfa_offset 12
 192              		.cfi_offset 4, -12
 193              		.cfi_offset 7, -8
 194              		.cfi_offset 14, -4
 195 0002 8BB0     		sub	sp, sp, #44
 196              	.LCFI6:
 197              		.cfi_def_cfa_offset 56
 198 0004 02AF     		add	r7, sp, #8
 199              	.LCFI7:
 200              		.cfi_def_cfa 7, 48
 201 0006 F860     		str	r0, [r7, #12]
 202 0008 B960     		str	r1, [r7, #8]
 203 000a 1346     		mov	r3, r2
 204 000c FB71     		strb	r3, [r7, #7]
 388:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 389:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	size_t xQueueSizeInBytes;
 390:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uint8_t *pucQueueStorage;
 391:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 392:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 205              		.loc 1 392 0
 206 000e FB68     		ldr	r3, [r7, #12]
 207 0010 002B     		cmp	r3, #0
 208 0012 09D1     		bne	.L10
 209              	.LBB78:
 210              	.LBB79:
 211              		.loc 2 237 0 discriminator 1
 212              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 213 0014 4FF05003 			mov r3, #80												
 214 0018 83F31188 		msr basepri, r3											
 215 001c BFF36F8F 		isb														
 216 0020 BFF34F8F 		dsb														
 217              	
 218              	@ 0 "" 2
 219              		.thumb
 220 0024 3B61     		str	r3, [r7, #16]
 221              	.L11:
 222              	.LBE79:
 223              	.LBE78:
 224              		.loc 1 392 0 discriminator 1
 225 0026 FEE7     		b	.L11
 226              	.L10:
 393:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 394:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( uxItemSize == ( UBaseType_t ) 0 )
 227              		.loc 1 394 0
ARM GAS  /tmp/cc3YdTbX.s 			page 16


 228 0028 BB68     		ldr	r3, [r7, #8]
 229 002a 002B     		cmp	r3, #0
 230 002c 02D1     		bne	.L12
 395:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 396:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* There is not going to be a queue storage area. */
 397:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xQueueSizeInBytes = ( size_t ) 0;
 231              		.loc 1 397 0
 232 002e 0023     		movs	r3, #0
 233 0030 FB61     		str	r3, [r7, #28]
 234 0032 04E0     		b	.L13
 235              	.L12:
 398:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 399:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 400:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 401:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Allocate enough space to hold the maximum number of items that
 402:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			can be in the queue at any time. */
 403:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as t
 236              		.loc 1 403 0
 237 0034 FB68     		ldr	r3, [r7, #12]
 238 0036 BA68     		ldr	r2, [r7, #8]
 239 0038 02FB03F3 		mul	r3, r2, r3
 240 003c FB61     		str	r3, [r7, #28]
 241              	.L13:
 404:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 405:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 406:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 242              		.loc 1 406 0
 243 003e FB69     		ldr	r3, [r7, #28]
 244 0040 4833     		adds	r3, r3, #72
 245 0042 1846     		mov	r0, r3
 246 0044 FFF7FEFF 		bl	pvPortMalloc
 247 0048 B861     		str	r0, [r7, #24]
 407:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 408:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 248              		.loc 1 408 0
 249 004a BB69     		ldr	r3, [r7, #24]
 250 004c 002B     		cmp	r3, #0
 251 004e 0BD0     		beq	.L14
 409:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 410:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Jump past the queue structure to find the location of the queue
 411:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			storage area. */
 412:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 252              		.loc 1 412 0
 253 0050 BB69     		ldr	r3, [r7, #24]
 254 0052 4833     		adds	r3, r3, #72
 255 0054 7B61     		str	r3, [r7, #20]
 413:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 414:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 415:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 416:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Queues can be created either statically or dynamically, so
 417:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				note this task was created dynamically in case it is later
 418:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				deleted. */
 419:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 420:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 421:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 422:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 423:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
ARM GAS  /tmp/cc3YdTbX.s 			page 17


 256              		.loc 1 423 0
 257 0056 FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 258 0058 BB69     		ldr	r3, [r7, #24]
 259 005a 0093     		str	r3, [sp]
 260 005c F868     		ldr	r0, [r7, #12]
 261 005e B968     		ldr	r1, [r7, #8]
 262 0060 7A69     		ldr	r2, [r7, #20]
 263 0062 2346     		mov	r3, r4
 264 0064 FFF7FEFF 		bl	prvInitialiseNewQueue
 265              	.L14:
 424:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 425:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 426:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pxNewQueue;
 266              		.loc 1 426 0
 267 0068 BB69     		ldr	r3, [r7, #24]
 427:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 268              		.loc 1 427 0
 269 006a 1846     		mov	r0, r3
 270 006c 2437     		adds	r7, r7, #36
 271              	.LCFI8:
 272              		.cfi_def_cfa_offset 12
 273 006e BD46     		mov	sp, r7
 274              	.LCFI9:
 275              		.cfi_def_cfa_register 13
 276              		@ sp needed
 277 0070 90BD     		pop	{r4, r7, pc}
 278              		.cfi_endproc
 279              	.LFE6:
 281 0072 00BF     		.section	.text.prvInitialiseNewQueue,"ax",%progbits
 282              		.align	2
 283              		.thumb
 284              		.thumb_func
 286              	prvInitialiseNewQueue:
 287              	.LFB7:
 428:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 429:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 430:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 431:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 432:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 433:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 288              		.loc 1 433 0
 289              		.cfi_startproc
 290              		@ args = 4, pretend = 0, frame = 16
 291              		@ frame_needed = 1, uses_anonymous_args = 0
 292 0000 80B5     		push	{r7, lr}
 293              	.LCFI10:
 294              		.cfi_def_cfa_offset 8
 295              		.cfi_offset 7, -8
 296              		.cfi_offset 14, -4
 297 0002 84B0     		sub	sp, sp, #16
 298              	.LCFI11:
 299              		.cfi_def_cfa_offset 24
 300 0004 00AF     		add	r7, sp, #0
 301              	.LCFI12:
 302              		.cfi_def_cfa_register 7
 303 0006 F860     		str	r0, [r7, #12]
 304 0008 B960     		str	r1, [r7, #8]
ARM GAS  /tmp/cc3YdTbX.s 			page 18


 305 000a 7A60     		str	r2, [r7, #4]
 306 000c FB70     		strb	r3, [r7, #3]
 434:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Remove compiler warnings about unused parameters should
 435:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configUSE_TRACE_FACILITY not be set to 1. */
 436:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	( void ) ucQueueType;
 437:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 438:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( uxItemSize == ( UBaseType_t ) 0 )
 307              		.loc 1 438 0
 308 000e BB68     		ldr	r3, [r7, #8]
 309 0010 002B     		cmp	r3, #0
 310 0012 03D1     		bne	.L17
 439:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 440:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* No RAM was allocated for the queue storage area, but PC head cannot
 441:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		be set to NULL because NULL is used as a key to say the queue is used as
 442:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		a mutex.  Therefore just set pcHead to point to the queue as a benign
 443:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		value that is known to be within the memory map. */
 444:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 311              		.loc 1 444 0
 312 0014 BB69     		ldr	r3, [r7, #24]
 313 0016 BA69     		ldr	r2, [r7, #24]
 314 0018 1A60     		str	r2, [r3]
 315 001a 02E0     		b	.L18
 316              	.L17:
 445:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 446:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	else
 447:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 448:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Set the head to the start of the queue storage area. */
 449:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 317              		.loc 1 449 0
 318 001c BB69     		ldr	r3, [r7, #24]
 319 001e 7A68     		ldr	r2, [r7, #4]
 320 0020 1A60     		str	r2, [r3]
 321              	.L18:
 450:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 451:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 452:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Initialise the queue members as described where the queue type is
 453:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	defined. */
 454:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	pxNewQueue->uxLength = uxQueueLength;
 322              		.loc 1 454 0
 323 0022 BB69     		ldr	r3, [r7, #24]
 324 0024 FA68     		ldr	r2, [r7, #12]
 325 0026 DA63     		str	r2, [r3, #60]
 455:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 326              		.loc 1 455 0
 327 0028 BB69     		ldr	r3, [r7, #24]
 328 002a BA68     		ldr	r2, [r7, #8]
 329 002c 1A64     		str	r2, [r3, #64]
 456:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 330              		.loc 1 456 0
 331 002e B869     		ldr	r0, [r7, #24]
 332 0030 0121     		movs	r1, #1
 333 0032 FFF7FEFF 		bl	xQueueGenericReset
 457:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 458:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 459:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 460:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue->ucQueueType = ucQueueType;
 461:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
ARM GAS  /tmp/cc3YdTbX.s 			page 19


 462:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif /* configUSE_TRACE_FACILITY */
 463:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 464:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if( configUSE_QUEUE_SETS == 1 )
 465:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 466:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue->pxQueueSetContainer = NULL;
 467:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 468:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif /* configUSE_QUEUE_SETS */
 469:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 470:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	traceQUEUE_CREATE( pxNewQueue );
 471:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 334              		.loc 1 471 0
 335 0036 1037     		adds	r7, r7, #16
 336              	.LCFI13:
 337              		.cfi_def_cfa_offset 8
 338 0038 BD46     		mov	sp, r7
 339              	.LCFI14:
 340              		.cfi_def_cfa_register 13
 341              		@ sp needed
 342 003a 80BD     		pop	{r7, pc}
 343              		.cfi_endproc
 344              	.LFE7:
 346              		.section	.text.prvInitialiseMutex,"ax",%progbits
 347              		.align	2
 348              		.thumb
 349              		.thumb_func
 351              	prvInitialiseMutex:
 352              	.LFB8:
 472:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 473:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 474:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 475:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 476:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue )
 477:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 353              		.loc 1 477 0
 354              		.cfi_startproc
 355              		@ args = 0, pretend = 0, frame = 8
 356              		@ frame_needed = 1, uses_anonymous_args = 0
 357 0000 80B5     		push	{r7, lr}
 358              	.LCFI15:
 359              		.cfi_def_cfa_offset 8
 360              		.cfi_offset 7, -8
 361              		.cfi_offset 14, -4
 362 0002 82B0     		sub	sp, sp, #8
 363              	.LCFI16:
 364              		.cfi_def_cfa_offset 16
 365 0004 00AF     		add	r7, sp, #0
 366              	.LCFI17:
 367              		.cfi_def_cfa_register 7
 368 0006 7860     		str	r0, [r7, #4]
 478:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 369              		.loc 1 478 0
 370 0008 7B68     		ldr	r3, [r7, #4]
 371 000a 002B     		cmp	r3, #0
 372 000c 0ED0     		beq	.L19
 479:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 480:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The queue create function will set all the queue structure members
 481:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			correctly for a generic queue, but this function is creating a
ARM GAS  /tmp/cc3YdTbX.s 			page 20


 482:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mutex.  Overwrite those members that need to be set differently -
 483:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			in particular the information required for priority inheritance. */
 484:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->pxMutexHolder = NULL;
 373              		.loc 1 484 0
 374 000e 7B68     		ldr	r3, [r7, #4]
 375 0010 0022     		movs	r2, #0
 376 0012 5A60     		str	r2, [r3, #4]
 485:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 377              		.loc 1 485 0
 378 0014 7B68     		ldr	r3, [r7, #4]
 379 0016 0022     		movs	r2, #0
 380 0018 1A60     		str	r2, [r3]
 486:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 487:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* In case this is a recursive mutex. */
 488:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->u.uxRecursiveCallCount = 0;
 381              		.loc 1 488 0
 382 001a 7B68     		ldr	r3, [r7, #4]
 383 001c 0022     		movs	r2, #0
 384 001e DA60     		str	r2, [r3, #12]
 489:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 490:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_MUTEX( pxNewQueue );
 491:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 492:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Start with the semaphore in the expected state. */
 493:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 385              		.loc 1 493 0
 386 0020 7868     		ldr	r0, [r7, #4]
 387 0022 0021     		movs	r1, #0
 388 0024 0022     		movs	r2, #0
 389 0026 0023     		movs	r3, #0
 390 0028 FFF7FEFF 		bl	xQueueGenericSend
 391              	.L19:
 494:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 495:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 496:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 497:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_MUTEX_FAILED();
 498:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 499:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 392              		.loc 1 499 0
 393 002c 0837     		adds	r7, r7, #8
 394              	.LCFI18:
 395              		.cfi_def_cfa_offset 8
 396 002e BD46     		mov	sp, r7
 397              	.LCFI19:
 398              		.cfi_def_cfa_register 13
 399              		@ sp needed
 400 0030 80BD     		pop	{r7, pc}
 401              		.cfi_endproc
 402              	.LFE8:
 404 0032 00BF     		.section	.text.xQueueCreateMutex,"ax",%progbits
 405              		.align	2
 406              		.global	xQueueCreateMutex
 407              		.thumb
 408              		.thumb_func
 410              	xQueueCreateMutex:
 411              	.LFB9:
 500:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 501:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_MUTEXES */
ARM GAS  /tmp/cc3YdTbX.s 			page 21


 502:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 503:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 504:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 505:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 506:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 507:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 412              		.loc 1 507 0
 413              		.cfi_startproc
 414              		@ args = 0, pretend = 0, frame = 24
 415              		@ frame_needed = 1, uses_anonymous_args = 0
 416 0000 80B5     		push	{r7, lr}
 417              	.LCFI20:
 418              		.cfi_def_cfa_offset 8
 419              		.cfi_offset 7, -8
 420              		.cfi_offset 14, -4
 421 0002 86B0     		sub	sp, sp, #24
 422              	.LCFI21:
 423              		.cfi_def_cfa_offset 32
 424 0004 00AF     		add	r7, sp, #0
 425              	.LCFI22:
 426              		.cfi_def_cfa_register 7
 427 0006 0346     		mov	r3, r0
 428 0008 FB71     		strb	r3, [r7, #7]
 508:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 509:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 429              		.loc 1 509 0
 430 000a 0123     		movs	r3, #1
 431 000c 7B61     		str	r3, [r7, #20]
 432 000e 0023     		movs	r3, #0
 433 0010 3B61     		str	r3, [r7, #16]
 510:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 511:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 434              		.loc 1 511 0
 435 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 436 0014 7869     		ldr	r0, [r7, #20]
 437 0016 3969     		ldr	r1, [r7, #16]
 438 0018 1A46     		mov	r2, r3
 439 001a FFF7FEFF 		bl	xQueueGenericCreate
 440 001e F860     		str	r0, [r7, #12]
 512:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 441              		.loc 1 512 0
 442 0020 F868     		ldr	r0, [r7, #12]
 443 0022 FFF7FEFF 		bl	prvInitialiseMutex
 513:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 514:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pxNewQueue;
 444              		.loc 1 514 0
 445 0026 FB68     		ldr	r3, [r7, #12]
 515:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 446              		.loc 1 515 0
 447 0028 1846     		mov	r0, r3
 448 002a 1837     		adds	r7, r7, #24
 449              	.LCFI23:
 450              		.cfi_def_cfa_offset 8
 451 002c BD46     		mov	sp, r7
 452              	.LCFI24:
 453              		.cfi_def_cfa_register 13
 454              		@ sp needed
ARM GAS  /tmp/cc3YdTbX.s 			page 22


 455 002e 80BD     		pop	{r7, pc}
 456              		.cfi_endproc
 457              	.LFE9:
 459              		.section	.text.xQueueGenericSend,"ax",%progbits
 460              		.align	2
 461              		.global	xQueueGenericSend
 462              		.thumb
 463              		.thumb_func
 465              	xQueueGenericSend:
 466              	.LFB10:
 516:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 517:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_MUTEXES */
 518:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 519:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 520:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 521:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 522:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
 523:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 524:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 525:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 526:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 527:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Prevent compiler warnings about unused parameters if
 528:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configUSE_TRACE_FACILITY does not equal 1. */
 529:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( void ) ucQueueType;
 530:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 531:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQ
 532:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 533:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 534:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pxNewQueue;
 535:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 536:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 537:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_MUTEXES */
 538:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 539:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 540:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 541:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 542:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void* xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 543:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 544:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void *pxReturn;
 545:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 546:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* This function is called by xSemaphoreGetMutexHolder(), and should not
 547:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		be called directly.  Note:  This is a good way of determining if the
 548:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		calling task is the mutex holder, but not a good way of determining the
 549:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		identity of the mutex holder, as the holder may change between the
 550:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		following critical section exiting and the function returning. */
 551:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
 552:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 553:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 554:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 555:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxReturn = ( void * ) ( ( Queue_t * ) xSemaphore )->pxMutexHolder;
 556:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 557:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 558:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 559:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxReturn = NULL;
 560:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 561:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 562:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
ARM GAS  /tmp/cc3YdTbX.s 			page 23


 563:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 564:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pxReturn;
 565:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 566:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 567:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
 568:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 569:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 570:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 571:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 572:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 573:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 574:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
 575:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 576:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 577:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( pxMutex );
 578:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 579:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* If this is the task that holds the mutex then pxMutexHolder will not
 580:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		change outside of this task.  If this task does not hold the mutex then
 581:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxMutexHolder can never coincidentally equal the tasks handle, and as
 582:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		this is the only condition we are interested in it does not matter if
 583:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxMutexHolder is accessed simultaneously by another task.  Therefore no
 584:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		mutual exclusion is required to test the pxMutexHolder variable. */
 585:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redunda
 586:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 587:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE( pxMutex );
 588:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 589:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
 590:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the task handle, therefore no underflow check is required.  Also,
 591:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			uxRecursiveCallCount is only modified by the mutex holder, and as
 592:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			there can only be one, no mutual exclusion is required to modify the
 593:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			uxRecursiveCallCount member. */
 594:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )--;
 595:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 596:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Has the recursive call count unwound to 0? */
 597:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 598:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 599:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Return the mutex.  This will automatically unblock any other
 600:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				task that might be waiting to access the mutex. */
 601:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 602:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 603:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 604:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 605:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 606:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 607:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 608:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 609:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 610:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 611:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 612:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The mutex cannot be given because the calling task is not the
 613:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			holder. */
 614:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
 615:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 616:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 617:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 618:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 619:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xReturn;
ARM GAS  /tmp/cc3YdTbX.s 			page 24


 620:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 621:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 622:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 623:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 624:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 625:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 626:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 627:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
 628:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 629:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
 630:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 631:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 632:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( pxMutex );
 633:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 634:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Comments regarding mutual exclusion as per those within
 635:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xQueueGiveMutexRecursive(). */
 636:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 637:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		traceTAKE_MUTEX_RECURSIVE( pxMutex );
 638:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 639:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not r
 640:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 641:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )++;
 642:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 643:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 644:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 645:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 646:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
 647:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 648:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* pdPASS will only be returned if the mutex was successfully
 649:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			obtained.  The calling task may have entered the Blocked state
 650:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			before reaching here. */
 651:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( xReturn != pdFAIL )
 652:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 653:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( pxMutex->u.uxRecursiveCallCount )++;
 654:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 655:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 656:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 657:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 658:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 659:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 660:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 661:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xReturn;
 662:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 663:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 664:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 665:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 666:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 667:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 668:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 669:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t
 670:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 671:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xHandle;
 672:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 673:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxMaxCount != 0 );
 674:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 675:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 676:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStatic
ARM GAS  /tmp/cc3YdTbX.s 			page 25


 677:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 678:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xHandle != NULL )
 679:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 680:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 681:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 682:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 683:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 684:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 685:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 686:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 687:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 688:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 689:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xHandle;
 690:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 691:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 692:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 693:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 694:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 695:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 696:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 697:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxIni
 698:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 699:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xHandle;
 700:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 701:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxMaxCount != 0 );
 702:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 703:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 704:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUN
 705:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 706:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xHandle != NULL )
 707:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 708:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 709:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 710:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 711:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 712:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 713:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 714:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 715:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 716:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 717:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xHandle;
 718:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 719:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 720:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 721:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 722:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 723:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xT
 724:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 467              		.loc 1 724 0
 468              		.cfi_startproc
 469              		@ args = 0, pretend = 0, frame = 56
 470              		@ frame_needed = 1, uses_anonymous_args = 0
 471 0000 80B5     		push	{r7, lr}
 472              	.LCFI25:
 473              		.cfi_def_cfa_offset 8
 474              		.cfi_offset 7, -8
 475              		.cfi_offset 14, -4
ARM GAS  /tmp/cc3YdTbX.s 			page 26


 476 0002 8EB0     		sub	sp, sp, #56
 477              	.LCFI26:
 478              		.cfi_def_cfa_offset 64
 479 0004 00AF     		add	r7, sp, #0
 480              	.LCFI27:
 481              		.cfi_def_cfa_register 7
 482 0006 F860     		str	r0, [r7, #12]
 483 0008 B960     		str	r1, [r7, #8]
 484 000a 7A60     		str	r2, [r7, #4]
 485 000c 3B60     		str	r3, [r7]
 725:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 486              		.loc 1 725 0
 487 000e 0023     		movs	r3, #0
 488 0010 7B63     		str	r3, [r7, #52]
 726:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** TimeOut_t xTimeOut;
 727:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 489              		.loc 1 727 0
 490 0012 FB68     		ldr	r3, [r7, #12]
 491 0014 3B63     		str	r3, [r7, #48]
 728:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 729:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 492              		.loc 1 729 0
 493 0016 3B6B     		ldr	r3, [r7, #48]
 494 0018 002B     		cmp	r3, #0
 495 001a 09D1     		bne	.L24
 496              	.LBB80:
 497              	.LBB81:
 498              		.loc 2 237 0 discriminator 1
 499              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 500 001c 4FF05003 			mov r3, #80												
 501 0020 83F31188 		msr basepri, r3											
 502 0024 BFF36F8F 		isb														
 503 0028 BFF34F8F 		dsb														
 504              	
 505              	@ 0 "" 2
 506              		.thumb
 507 002c BB62     		str	r3, [r7, #40]
 508              	.L25:
 509              	.LBE81:
 510              	.LBE80:
 511              		.loc 1 729 0 discriminator 1
 512 002e FEE7     		b	.L25
 513              	.L24:
 730:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 514              		.loc 1 730 0
 515 0030 BB68     		ldr	r3, [r7, #8]
 516 0032 002B     		cmp	r3, #0
 517 0034 03D1     		bne	.L26
 518              		.loc 1 730 0 is_stmt 0 discriminator 2
 519 0036 3B6B     		ldr	r3, [r7, #48]
 520 0038 1B6C     		ldr	r3, [r3, #64]
 521 003a 002B     		cmp	r3, #0
 522 003c 01D1     		bne	.L27
 523              	.L26:
 524              		.loc 1 730 0 discriminator 3
 525 003e 0123     		movs	r3, #1
 526 0040 00E0     		b	.L28
ARM GAS  /tmp/cc3YdTbX.s 			page 27


 527              	.L27:
 528              		.loc 1 730 0 discriminator 4
 529 0042 0023     		movs	r3, #0
 530              	.L28:
 531              		.loc 1 730 0 discriminator 6
 532 0044 002B     		cmp	r3, #0
 533 0046 09D1     		bne	.L29
 534              	.LBB82:
 535              	.LBB83:
 536              		.loc 2 237 0 is_stmt 1 discriminator 7
 537              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 538 0048 4FF05003 			mov r3, #80												
 539 004c 83F31188 		msr basepri, r3											
 540 0050 BFF36F8F 		isb														
 541 0054 BFF34F8F 		dsb														
 542              	
 543              	@ 0 "" 2
 544              		.thumb
 545 0058 7B62     		str	r3, [r7, #36]
 546              	.L30:
 547              	.LBE83:
 548              	.LBE82:
 549              		.loc 1 730 0 discriminator 2
 550 005a FEE7     		b	.L30
 551              	.L29:
 731:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 552              		.loc 1 731 0
 553 005c 3B68     		ldr	r3, [r7]
 554 005e 022B     		cmp	r3, #2
 555 0060 03D1     		bne	.L31
 556              		.loc 1 731 0 is_stmt 0 discriminator 2
 557 0062 3B6B     		ldr	r3, [r7, #48]
 558 0064 DB6B     		ldr	r3, [r3, #60]
 559 0066 012B     		cmp	r3, #1
 560 0068 01D1     		bne	.L32
 561              	.L31:
 562              		.loc 1 731 0 discriminator 3
 563 006a 0123     		movs	r3, #1
 564 006c 00E0     		b	.L33
 565              	.L32:
 566              		.loc 1 731 0 discriminator 4
 567 006e 0023     		movs	r3, #0
 568              	.L33:
 569              		.loc 1 731 0 discriminator 6
 570 0070 002B     		cmp	r3, #0
 571 0072 09D1     		bne	.L34
 572              	.LBB84:
 573              	.LBB85:
 574              		.loc 2 237 0 is_stmt 1 discriminator 7
 575              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 576 0074 4FF05003 			mov r3, #80												
 577 0078 83F31188 		msr basepri, r3											
 578 007c BFF36F8F 		isb														
 579 0080 BFF34F8F 		dsb														
 580              	
 581              	@ 0 "" 2
 582              		.thumb
ARM GAS  /tmp/cc3YdTbX.s 			page 28


 583 0084 3B62     		str	r3, [r7, #32]
 584              	.L35:
 585              	.LBE85:
 586              	.LBE84:
 587              		.loc 1 731 0 discriminator 3
 588 0086 FEE7     		b	.L35
 589              	.L34:
 732:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 733:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 734:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 590              		.loc 1 734 0
 591 0088 FFF7FEFF 		bl	xTaskGetSchedulerState
 592 008c 0346     		mov	r3, r0
 593 008e 002B     		cmp	r3, #0
 594 0090 02D1     		bne	.L36
 595              		.loc 1 734 0 is_stmt 0 discriminator 2
 596 0092 7B68     		ldr	r3, [r7, #4]
 597 0094 002B     		cmp	r3, #0
 598 0096 01D1     		bne	.L37
 599              	.L36:
 600              		.loc 1 734 0 discriminator 3
 601 0098 0123     		movs	r3, #1
 602 009a 00E0     		b	.L38
 603              	.L37:
 604              		.loc 1 734 0 discriminator 4
 605 009c 0023     		movs	r3, #0
 606              	.L38:
 607              		.loc 1 734 0 discriminator 6
 608 009e 002B     		cmp	r3, #0
 609 00a0 09D1     		bne	.L39
 610              	.LBB86:
 611              	.LBB87:
 612              		.loc 2 237 0 is_stmt 1 discriminator 7
 613              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 614 00a2 4FF05003 			mov r3, #80												
 615 00a6 83F31188 		msr basepri, r3											
 616 00aa BFF36F8F 		isb														
 617 00ae BFF34F8F 		dsb														
 618              	
 619              	@ 0 "" 2
 620              		.thumb
 621 00b2 FB61     		str	r3, [r7, #28]
 622              	.L40:
 623              	.LBE87:
 624              	.LBE86:
 625              		.loc 1 734 0 discriminator 4
 626 00b4 FEE7     		b	.L40
 627              	.L39:
 735:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 736:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
 737:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 738:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 739:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
 740:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	statements within the function itself.  This is done in the interest
 741:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	of execution time efficiency. */
 742:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	for( ;; )
 743:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
ARM GAS  /tmp/cc3YdTbX.s 			page 29


 744:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
 628              		.loc 1 744 0
 629 00b6 FFF7FEFF 		bl	vPortEnterCritical
 745:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 746:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Is there room on the queue now?  The running task must be the
 747:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			highest priority task wanting to access the queue.  If the head item
 748:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			in the queue is to be overwritten then it does not matter if the
 749:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			queue is full. */
 750:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 630              		.loc 1 750 0
 631 00ba 3B6B     		ldr	r3, [r7, #48]
 632 00bc 9A6B     		ldr	r2, [r3, #56]
 633 00be 3B6B     		ldr	r3, [r7, #48]
 634 00c0 DB6B     		ldr	r3, [r3, #60]
 635 00c2 9A42     		cmp	r2, r3
 636 00c4 02D3     		bcc	.L41
 637              		.loc 1 750 0 is_stmt 0 discriminator 1
 638 00c6 3B68     		ldr	r3, [r7]
 639 00c8 022B     		cmp	r3, #2
 640 00ca 29D1     		bne	.L42
 641              	.L41:
 751:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 752:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_SEND( pxQueue );
 753:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 642              		.loc 1 753 0 is_stmt 1
 643 00cc 386B     		ldr	r0, [r7, #48]
 644 00ce B968     		ldr	r1, [r7, #8]
 645 00d0 3A68     		ldr	r2, [r7]
 646 00d2 FFF7FEFF 		bl	prvCopyDataToQueue
 647 00d6 F862     		str	r0, [r7, #44]
 754:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 755:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 756:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 757:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 758:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 759:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 760:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 761:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The queue is a member of a queue set, and posting
 762:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							to the queue set caused a higher priority task to
 763:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							unblock. A context switch is required. */
 764:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 765:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 766:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
 767:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 768:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 769:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 770:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 771:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
 772:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 773:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* If there was a task waiting for data to arrive on the
 774:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						queue then unblock it now. */
 775:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 776:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 777:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 778:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 779:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								/* The unblocked task has a priority higher than
 780:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								our own so yield immediately.  Yes it is ok to
ARM GAS  /tmp/cc3YdTbX.s 			page 30


 781:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								do this from within the critical section - the
 782:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								kernel takes care of that. */
 783:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								queueYIELD_IF_USING_PREEMPTION();
 784:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 785:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
 786:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 787:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 788:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 789:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 790:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else if( xYieldRequired != pdFALSE )
 791:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 792:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* This path is a special case that will only get
 793:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							executed if the task was holding multiple mutexes
 794:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							and the mutexes were given back in an order that is
 795:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							different to that in which they were taken. */
 796:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 797:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 798:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
 799:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 800:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 801:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 802:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 803:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 804:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
 805:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 806:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* If there was a task waiting for data to arrive on the
 807:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					queue then unblock it now. */
 808:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 648              		.loc 1 808 0
 649 00d8 3B6B     		ldr	r3, [r7, #48]
 650 00da 5B6A     		ldr	r3, [r3, #36]
 651 00dc 002B     		cmp	r3, #0
 652 00de 10D0     		beq	.L43
 809:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 810:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 653              		.loc 1 810 0
 654 00e0 3B6B     		ldr	r3, [r7, #48]
 655 00e2 2433     		adds	r3, r3, #36
 656 00e4 1846     		mov	r0, r3
 657 00e6 FFF7FEFF 		bl	xTaskRemoveFromEventList
 658 00ea 0346     		mov	r3, r0
 659 00ec 002B     		cmp	r3, #0
 660 00ee 13D0     		beq	.L44
 811:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 812:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The unblocked task has a priority higher than
 813:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							our own so yield immediately.  Yes it is ok to do
 814:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							this from within the critical section - the kernel
 815:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							takes care of that. */
 816:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 661              		.loc 1 816 0
 662 00f0 414B     		ldr	r3, .L56
 663 00f2 4FF08052 		mov	r2, #268435456
 664 00f6 1A60     		str	r2, [r3]
 665              	@ 816 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 666 00f8 BFF34F8F 		dsb
 667              	@ 0 "" 2
 668              	@ 816 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
ARM GAS  /tmp/cc3YdTbX.s 			page 31


 669 00fc BFF36F8F 		isb
 670              	@ 0 "" 2
 671              		.thumb
 672 0100 0AE0     		b	.L44
 673              	.L43:
 817:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 818:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
 819:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 820:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 821:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 822:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 823:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else if( xYieldRequired != pdFALSE )
 674              		.loc 1 823 0
 675 0102 FB6A     		ldr	r3, [r7, #44]
 676 0104 002B     		cmp	r3, #0
 677 0106 07D0     		beq	.L44
 824:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 825:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* This path is a special case that will only get
 826:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						executed if the task was holding multiple mutexes and
 827:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						the mutexes were given back in an order that is
 828:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						different to that in which they were taken. */
 829:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 678              		.loc 1 829 0
 679 0108 3B4B     		ldr	r3, .L56
 680 010a 4FF08052 		mov	r2, #268435456
 681 010e 1A60     		str	r2, [r3]
 682              	@ 829 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 683 0110 BFF34F8F 		dsb
 684              	@ 0 "" 2
 685              	@ 829 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 686 0114 BFF36F8F 		isb
 687              	@ 0 "" 2
 688              		.thumb
 689              	.L44:
 830:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 831:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
 832:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 833:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
 834:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 835:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 836:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
 837:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 838:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
 690              		.loc 1 838 0
 691 0118 FFF7FEFF 		bl	vPortExitCritical
 839:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
 692              		.loc 1 839 0
 693 011c 0123     		movs	r3, #1
 694 011e 67E0     		b	.L55
 695              	.L42:
 840:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 841:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 842:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 843:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 696              		.loc 1 843 0
 697 0120 7B68     		ldr	r3, [r7, #4]
 698 0122 002B     		cmp	r3, #0
ARM GAS  /tmp/cc3YdTbX.s 			page 32


 699 0124 03D1     		bne	.L46
 844:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 845:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The queue was full and no block time is specified (or
 846:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the block time has expired) so leave now. */
 847:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
 700              		.loc 1 847 0
 701 0126 FFF7FEFF 		bl	vPortExitCritical
 848:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 849:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Return to the original privilege level before exiting
 850:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the function. */
 851:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 852:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
 702              		.loc 1 852 0
 703 012a 0023     		movs	r3, #0
 704 012c 60E0     		b	.L55
 705              	.L46:
 853:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 854:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 706              		.loc 1 854 0
 707 012e 7B6B     		ldr	r3, [r7, #52]
 708 0130 002B     		cmp	r3, #0
 709 0132 06D1     		bne	.L47
 855:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 856:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The queue was full and a block time was specified so
 857:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					configure the timeout structure. */
 858:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
 710              		.loc 1 858 0
 711 0134 07F11403 		add	r3, r7, #20
 712 0138 1846     		mov	r0, r3
 713 013a FFF7FEFF 		bl	vTaskSetTimeOutState
 859:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 714              		.loc 1 859 0
 715 013e 0123     		movs	r3, #1
 716 0140 7B63     		str	r3, [r7, #52]
 717              	.L47:
 860:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 861:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
 862:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 863:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Entry time was already set. */
 864:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 865:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 866:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 867:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 868:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
 718              		.loc 1 868 0
 719 0142 FFF7FEFF 		bl	vPortExitCritical
 869:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 870:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
 871:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		now the critical section has been exited. */
 872:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 873:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
 720              		.loc 1 873 0
 721 0146 FFF7FEFF 		bl	vTaskSuspendAll
 874:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 722              		.loc 1 874 0
 723 014a FFF7FEFF 		bl	vPortEnterCritical
 724 014e 3B6B     		ldr	r3, [r7, #48]
ARM GAS  /tmp/cc3YdTbX.s 			page 33


 725 0150 93F84430 		ldrb	r3, [r3, #68]
 726 0154 DBB2     		uxtb	r3, r3
 727 0156 5BB2     		sxtb	r3, r3
 728 0158 B3F1FF3F 		cmp	r3, #-1
 729 015c 03D1     		bne	.L48
 730              		.loc 1 874 0 is_stmt 0 discriminator 1
 731 015e 3B6B     		ldr	r3, [r7, #48]
 732 0160 0022     		movs	r2, #0
 733 0162 83F84420 		strb	r2, [r3, #68]
 734              	.L48:
 735              		.loc 1 874 0 discriminator 3
 736 0166 3B6B     		ldr	r3, [r7, #48]
 737 0168 93F84530 		ldrb	r3, [r3, #69]
 738 016c DBB2     		uxtb	r3, r3
 739 016e 5BB2     		sxtb	r3, r3
 740 0170 B3F1FF3F 		cmp	r3, #-1
 741 0174 03D1     		bne	.L49
 742              		.loc 1 874 0 discriminator 4
 743 0176 3B6B     		ldr	r3, [r7, #48]
 744 0178 0022     		movs	r2, #0
 745 017a 83F84520 		strb	r2, [r3, #69]
 746              	.L49:
 747              		.loc 1 874 0 discriminator 6
 748 017e FFF7FEFF 		bl	vPortExitCritical
 875:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 876:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
 877:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 749              		.loc 1 877 0 is_stmt 1 discriminator 6
 750 0182 07F11402 		add	r2, r7, #20
 751 0186 3B1D     		adds	r3, r7, #4
 752 0188 1046     		mov	r0, r2
 753 018a 1946     		mov	r1, r3
 754 018c FFF7FEFF 		bl	xTaskCheckForTimeOut
 755 0190 0346     		mov	r3, r0
 756 0192 002B     		cmp	r3, #0
 757 0194 24D1     		bne	.L50
 878:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 879:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 758              		.loc 1 879 0
 759 0196 386B     		ldr	r0, [r7, #48]
 760 0198 FFF7FEFF 		bl	prvIsQueueFull
 761 019c 0346     		mov	r3, r0
 762 019e 002B     		cmp	r3, #0
 763 01a0 18D0     		beq	.L51
 880:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 881:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 882:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 764              		.loc 1 882 0
 765 01a2 3B6B     		ldr	r3, [r7, #48]
 766 01a4 03F11002 		add	r2, r3, #16
 767 01a8 7B68     		ldr	r3, [r7, #4]
 768 01aa 1046     		mov	r0, r2
 769 01ac 1946     		mov	r1, r3
 770 01ae FFF7FEFF 		bl	vTaskPlaceOnEventList
 883:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 884:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Unlocking the queue means queue events can effect the
 885:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				event list.  It is possible	that interrupts occurring now
ARM GAS  /tmp/cc3YdTbX.s 			page 34


 886:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				remove this task from the event	list again - but as the
 887:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				scheduler is suspended the task will go onto the pending
 888:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				ready last instead of the actual ready list. */
 889:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 771              		.loc 1 889 0
 772 01b2 386B     		ldr	r0, [r7, #48]
 773 01b4 FFF7FEFF 		bl	prvUnlockQueue
 890:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 891:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Resuming the scheduler will move tasks from the pending
 892:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				ready list into the ready list - so it is feasible that this
 893:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				task is already in a ready list before it yields - in which
 894:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				case the yield will not cause a context switch unless there
 895:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				is also a higher priority task in the pending ready list. */
 896:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 774              		.loc 1 896 0
 775 01b8 FFF7FEFF 		bl	xTaskResumeAll
 776 01bc 0346     		mov	r3, r0
 777 01be 002B     		cmp	r3, #0
 778 01c0 15D1     		bne	.L54
 897:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 898:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
 779              		.loc 1 898 0
 780 01c2 0D4B     		ldr	r3, .L56
 781 01c4 4FF08052 		mov	r2, #268435456
 782 01c8 1A60     		str	r2, [r3]
 783              	@ 898 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 784 01ca BFF34F8F 		dsb
 785              	@ 0 "" 2
 786              	@ 898 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 787 01ce BFF36F8F 		isb
 788              	@ 0 "" 2
 789              		.thumb
 790 01d2 0CE0     		b	.L54
 791              	.L51:
 899:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 900:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 901:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 902:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 903:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Try again. */
 904:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 792              		.loc 1 904 0
 793 01d4 386B     		ldr	r0, [r7, #48]
 794 01d6 FFF7FEFF 		bl	prvUnlockQueue
 905:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 795              		.loc 1 905 0
 796 01da FFF7FEFF 		bl	xTaskResumeAll
 797 01de 6AE7     		b	.L39
 798              	.L50:
 906:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 907:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 908:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 909:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 910:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The timeout has expired. */
 911:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
 799              		.loc 1 911 0
 800 01e0 386B     		ldr	r0, [r7, #48]
 801 01e2 FFF7FEFF 		bl	prvUnlockQueue
ARM GAS  /tmp/cc3YdTbX.s 			page 35


 912:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 802              		.loc 1 912 0
 803 01e6 FFF7FEFF 		bl	xTaskResumeAll
 913:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 914:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FAILED( pxQueue );
 915:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			return errQUEUE_FULL;
 804              		.loc 1 915 0
 805 01ea 0023     		movs	r3, #0
 806 01ec 00E0     		b	.L55
 807              	.L54:
 916:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 917:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 808              		.loc 1 917 0 discriminator 6
 809 01ee 62E7     		b	.L39
 810              	.L55:
 918:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 811              		.loc 1 918 0 discriminator 7
 812 01f0 1846     		mov	r0, r3
 813 01f2 3837     		adds	r7, r7, #56
 814              	.LCFI28:
 815              		.cfi_def_cfa_offset 8
 816 01f4 BD46     		mov	sp, r7
 817              	.LCFI29:
 818              		.cfi_def_cfa_register 13
 819              		@ sp needed
 820 01f6 80BD     		pop	{r7, pc}
 821              	.L57:
 822              		.align	2
 823              	.L56:
 824 01f8 04ED00E0 		.word	-536810236
 825              		.cfi_endproc
 826              	.LFE10:
 828              		.section	.text.xQueueGenericSendFromISR,"ax",%progbits
 829              		.align	2
 830              		.global	xQueueGenericSendFromISR
 831              		.thumb
 832              		.thumb_func
 834              	xQueueGenericSendFromISR:
 835              	.LFB11:
 919:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 920:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 921:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseTy
 922:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 836              		.loc 1 922 0
 837              		.cfi_startproc
 838              		@ args = 0, pretend = 0, frame = 56
 839              		@ frame_needed = 1, uses_anonymous_args = 0
 840 0000 80B5     		push	{r7, lr}
 841              	.LCFI30:
 842              		.cfi_def_cfa_offset 8
 843              		.cfi_offset 7, -8
 844              		.cfi_offset 14, -4
 845 0002 8EB0     		sub	sp, sp, #56
 846              	.LCFI31:
 847              		.cfi_def_cfa_offset 64
 848 0004 00AF     		add	r7, sp, #0
 849              	.LCFI32:
ARM GAS  /tmp/cc3YdTbX.s 			page 36


 850              		.cfi_def_cfa_register 7
 851 0006 F860     		str	r0, [r7, #12]
 852 0008 B960     		str	r1, [r7, #8]
 853 000a 7A60     		str	r2, [r7, #4]
 854 000c 3B60     		str	r3, [r7]
 923:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 924:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
 925:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 855              		.loc 1 925 0
 856 000e FB68     		ldr	r3, [r7, #12]
 857 0010 3B63     		str	r3, [r7, #48]
 926:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 927:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 858              		.loc 1 927 0
 859 0012 3B6B     		ldr	r3, [r7, #48]
 860 0014 002B     		cmp	r3, #0
 861 0016 09D1     		bne	.L59
 862              	.LBB88:
 863              	.LBB89:
 864              		.loc 2 237 0 discriminator 1
 865              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 866 0018 4FF05003 			mov r3, #80												
 867 001c 83F31188 		msr basepri, r3											
 868 0020 BFF36F8F 		isb														
 869 0024 BFF34F8F 		dsb														
 870              	
 871              	@ 0 "" 2
 872              		.thumb
 873 0028 7B62     		str	r3, [r7, #36]
 874              	.L60:
 875              	.LBE89:
 876              	.LBE88:
 877              		.loc 1 927 0 discriminator 1
 878 002a FEE7     		b	.L60
 879              	.L59:
 928:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 880              		.loc 1 928 0
 881 002c BB68     		ldr	r3, [r7, #8]
 882 002e 002B     		cmp	r3, #0
 883 0030 03D1     		bne	.L61
 884              		.loc 1 928 0 is_stmt 0 discriminator 2
 885 0032 3B6B     		ldr	r3, [r7, #48]
 886 0034 1B6C     		ldr	r3, [r3, #64]
 887 0036 002B     		cmp	r3, #0
 888 0038 01D1     		bne	.L62
 889              	.L61:
 890              		.loc 1 928 0 discriminator 3
 891 003a 0123     		movs	r3, #1
 892 003c 00E0     		b	.L63
 893              	.L62:
 894              		.loc 1 928 0 discriminator 4
 895 003e 0023     		movs	r3, #0
 896              	.L63:
 897              		.loc 1 928 0 discriminator 6
 898 0040 002B     		cmp	r3, #0
 899 0042 09D1     		bne	.L64
 900              	.LBB90:
ARM GAS  /tmp/cc3YdTbX.s 			page 37


 901              	.LBB91:
 902              		.loc 2 237 0 is_stmt 1 discriminator 7
 903              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 904 0044 4FF05003 			mov r3, #80												
 905 0048 83F31188 		msr basepri, r3											
 906 004c BFF36F8F 		isb														
 907 0050 BFF34F8F 		dsb														
 908              	
 909              	@ 0 "" 2
 910              		.thumb
 911 0054 3B62     		str	r3, [r7, #32]
 912              	.L65:
 913              	.LBE91:
 914              	.LBE90:
 915              		.loc 1 928 0 discriminator 2
 916 0056 FEE7     		b	.L65
 917              	.L64:
 929:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 918              		.loc 1 929 0
 919 0058 3B68     		ldr	r3, [r7]
 920 005a 022B     		cmp	r3, #2
 921 005c 03D1     		bne	.L66
 922              		.loc 1 929 0 is_stmt 0 discriminator 2
 923 005e 3B6B     		ldr	r3, [r7, #48]
 924 0060 DB6B     		ldr	r3, [r3, #60]
 925 0062 012B     		cmp	r3, #1
 926 0064 01D1     		bne	.L67
 927              	.L66:
 928              		.loc 1 929 0 discriminator 3
 929 0066 0123     		movs	r3, #1
 930 0068 00E0     		b	.L68
 931              	.L67:
 932              		.loc 1 929 0 discriminator 4
 933 006a 0023     		movs	r3, #0
 934              	.L68:
 935              		.loc 1 929 0 discriminator 6
 936 006c 002B     		cmp	r3, #0
 937 006e 09D1     		bne	.L69
 938              	.LBB92:
 939              	.LBB93:
 940              		.loc 2 237 0 is_stmt 1 discriminator 7
 941              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 942 0070 4FF05003 			mov r3, #80												
 943 0074 83F31188 		msr basepri, r3											
 944 0078 BFF36F8F 		isb														
 945 007c BFF34F8F 		dsb														
 946              	
 947              	@ 0 "" 2
 948              		.thumb
 949 0080 FB61     		str	r3, [r7, #28]
 950              	.L70:
 951              	.LBE93:
 952              	.LBE92:
 953              		.loc 1 929 0 discriminator 3
 954 0082 FEE7     		b	.L70
 955              	.L69:
 930:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/cc3YdTbX.s 			page 38


 931:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
 932:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
 933:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
 934:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
 935:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
 936:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
 937:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
 938:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
 939:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
 940:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
 941:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
 942:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
 943:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
 944:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
 945:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 956              		.loc 1 945 0
 957 0084 FFF7FEFF 		bl	vPortValidateInterruptPriority
 958              	.LBB94:
 959              	.LBB95:
 238:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 239:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 240:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 241:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 242:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 243:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 244:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 245:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 246:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 247:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 248:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 249:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 250:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 251:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 252:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 960              		.loc 2 253 0
 961              	@ 253 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 962 0088 EFF31182 			mrs r2, basepri											
 963 008c 4FF05003 		mov r3, #80												
 964 0090 83F31188 		msr basepri, r3											
 965 0094 BFF36F8F 		isb														
 966 0098 BFF34F8F 		dsb														
 967              	
 968              	@ 0 "" 2
 969              		.thumb
 970 009c BA61     		str	r2, [r7, #24]
 971 009e 7B61     		str	r3, [r7, #20]
 254:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 255:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 256:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 257:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 258:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 259:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 260:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 261:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 262:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 263:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
ARM GAS  /tmp/cc3YdTbX.s 			page 39


 264:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 265:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 972              		.loc 2 265 0
 973 00a0 BB69     		ldr	r3, [r7, #24]
 974              	.LBE95:
 975              	.LBE94:
 946:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 947:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Similar to xQueueGenericSend, except without blocking if there is no room
 948:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	in the queue.  Also don't directly wake a task that was blocked on a queue
 949:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	read, instead return a flag to say whether a context switch is required or
 950:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
 951:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	post). */
 952:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 976              		.loc 1 952 0
 977 00a2 FB62     		str	r3, [r7, #44]
 953:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 954:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 978              		.loc 1 954 0
 979 00a4 3B6B     		ldr	r3, [r7, #48]
 980 00a6 9A6B     		ldr	r2, [r3, #56]
 981 00a8 3B6B     		ldr	r3, [r7, #48]
 982 00aa DB6B     		ldr	r3, [r3, #60]
 983 00ac 9A42     		cmp	r2, r3
 984 00ae 02D3     		bcc	.L72
 985              		.loc 1 954 0 is_stmt 0 discriminator 1
 986 00b0 3B68     		ldr	r3, [r7]
 987 00b2 022B     		cmp	r3, #2
 988 00b4 2CD1     		bne	.L73
 989              	.L72:
 990              	.LBB96:
 955:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 956:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 991              		.loc 1 956 0 is_stmt 1
 992 00b6 3B6B     		ldr	r3, [r7, #48]
 993 00b8 93F84530 		ldrb	r3, [r3, #69]
 994 00bc 87F82B30 		strb	r3, [r7, #43]
 957:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 958:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
 959:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 960:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
 961:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
 962:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			in a task disinheriting a priority and prvCopyDataToQueue() can be
 963:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			called here even though the disinherit function does not check if
 964:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the scheduler is suspended before accessing the ready lists. */
 965:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 995              		.loc 1 965 0
 996 00c0 386B     		ldr	r0, [r7, #48]
 997 00c2 B968     		ldr	r1, [r7, #8]
 998 00c4 3A68     		ldr	r2, [r7]
 999 00c6 FFF7FEFF 		bl	prvCopyDataToQueue
 966:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 967:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
 968:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			be done when the queue is unlocked later. */
 969:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( cTxLock == queueUNLOCKED )
 1000              		.loc 1 969 0
 1001 00ca 97F92B30 		ldrsb	r3, [r7, #43]
 1002 00ce B3F1FF3F 		cmp	r3, #-1
ARM GAS  /tmp/cc3YdTbX.s 			page 40


 1003 00d2 12D1     		bne	.L74
 970:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 971:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 972:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 973:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 974:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 975:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 976:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 977:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The queue is a member of a queue set, and posting
 978:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							to the queue set caused a higher priority task to
 979:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							unblock.  A context switch is required. */
 980:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
 981:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 982:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 983:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 984:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
 985:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 986:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 987:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 988:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 989:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
 990:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 991:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 992:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 993:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 994:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
 995:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 996:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 997:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 998:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 999:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1000:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								/* The task waiting has a higher priority so
1001:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								record that a context switch is required. */
1002:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1003:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								{
1004:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1005:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								}
1006:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								else
1007:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								{
1008:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1009:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								}
1010:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1011:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1012:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1013:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1014:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1015:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1016:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1017:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1018:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1019:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1020:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1021:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1022:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1023:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1024:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 1004              		.loc 1 1024 0
ARM GAS  /tmp/cc3YdTbX.s 			page 41


 1005 00d4 3B6B     		ldr	r3, [r7, #48]
 1006 00d6 5B6A     		ldr	r3, [r3, #36]
 1007 00d8 002B     		cmp	r3, #0
 1008 00da 16D0     		beq	.L75
1025:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1026:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 1009              		.loc 1 1026 0
 1010 00dc 3B6B     		ldr	r3, [r7, #48]
 1011 00de 2433     		adds	r3, r3, #36
 1012 00e0 1846     		mov	r0, r3
 1013 00e2 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1014 00e6 0346     		mov	r3, r0
 1015 00e8 002B     		cmp	r3, #0
 1016 00ea 0ED0     		beq	.L75
1027:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1028:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1029:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							context	switch is required. */
1030:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
 1017              		.loc 1 1030 0
 1018 00ec 7B68     		ldr	r3, [r7, #4]
 1019 00ee 002B     		cmp	r3, #0
 1020 00f0 0BD0     		beq	.L75
1031:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1032:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 1021              		.loc 1 1032 0
 1022 00f2 7B68     		ldr	r3, [r7, #4]
 1023 00f4 0122     		movs	r2, #1
 1024 00f6 1A60     		str	r2, [r3]
 1025 00f8 07E0     		b	.L75
 1026              	.L74:
1033:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1034:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1035:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1036:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1037:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1038:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1039:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1040:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1041:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1042:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1043:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1044:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1045:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1046:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1047:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1048:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1049:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1050:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1051:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1052:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1053:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1054:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				knows that data was posted while it was locked. */
1055:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 1027              		.loc 1 1055 0
 1028 00fa 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 1029 00fe 0133     		adds	r3, r3, #1
 1030 0100 DBB2     		uxtb	r3, r3
ARM GAS  /tmp/cc3YdTbX.s 			page 42


 1031 0102 DAB2     		uxtb	r2, r3
 1032 0104 3B6B     		ldr	r3, [r7, #48]
 1033 0106 83F84520 		strb	r2, [r3, #69]
 1034              	.L75:
1056:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1057:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1058:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 1035              		.loc 1 1058 0
 1036 010a 0123     		movs	r3, #1
 1037 010c 7B63     		str	r3, [r7, #52]
 1038              	.LBE96:
 955:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 1039              		.loc 1 955 0
 1040 010e 01E0     		b	.L76
 1041              	.L73:
1059:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1060:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1061:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1062:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1063:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = errQUEUE_FULL;
 1042              		.loc 1 1063 0
 1043 0110 0023     		movs	r3, #0
 1044 0112 7B63     		str	r3, [r7, #52]
 1045              	.L76:
 1046 0114 FB6A     		ldr	r3, [r7, #44]
 1047 0116 3B61     		str	r3, [r7, #16]
 1048              	.LBB97:
 1049              	.LBB98:
 266:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 267:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 268:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 269:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 270:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 271:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1050              		.loc 2 271 0
 1051 0118 3B69     		ldr	r3, [r7, #16]
 1052              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1053 011a 83F31188 			msr basepri, r3	
 1054              	@ 0 "" 2
 1055              		.thumb
 1056              	.LBE98:
 1057              	.LBE97:
1064:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1065:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1066:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1067:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1068:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
 1058              		.loc 1 1068 0
 1059 011e 7B6B     		ldr	r3, [r7, #52]
1069:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 1060              		.loc 1 1069 0
 1061 0120 1846     		mov	r0, r3
 1062 0122 3837     		adds	r7, r7, #56
 1063              	.LCFI33:
 1064              		.cfi_def_cfa_offset 8
 1065 0124 BD46     		mov	sp, r7
 1066              	.LCFI34:
ARM GAS  /tmp/cc3YdTbX.s 			page 43


 1067              		.cfi_def_cfa_register 13
 1068              		@ sp needed
 1069 0126 80BD     		pop	{r7, pc}
 1070              		.cfi_endproc
 1071              	.LFE11:
 1073              		.section	.text.xQueueGiveFromISR,"ax",%progbits
 1074              		.align	2
 1075              		.global	xQueueGiveFromISR
 1076              		.thumb
 1077              		.thumb_func
 1079              	xQueueGiveFromISR:
 1080              	.LFB12:
1070:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1071:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1072:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
1073:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 1081              		.loc 1 1073 0
 1082              		.cfi_startproc
 1083              		@ args = 0, pretend = 0, frame = 56
 1084              		@ frame_needed = 1, uses_anonymous_args = 0
 1085 0000 80B5     		push	{r7, lr}
 1086              	.LCFI35:
 1087              		.cfi_def_cfa_offset 8
 1088              		.cfi_offset 7, -8
 1089              		.cfi_offset 14, -4
 1090 0002 8EB0     		sub	sp, sp, #56
 1091              	.LCFI36:
 1092              		.cfi_def_cfa_offset 64
 1093 0004 00AF     		add	r7, sp, #0
 1094              	.LCFI37:
 1095              		.cfi_def_cfa_register 7
 1096 0006 7860     		str	r0, [r7, #4]
 1097 0008 3960     		str	r1, [r7]
1074:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1075:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1076:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 1098              		.loc 1 1076 0
 1099 000a 7B68     		ldr	r3, [r7, #4]
 1100 000c 3B63     		str	r3, [r7, #48]
1077:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1078:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1079:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	item size is 0.  Don't directly wake a task that was blocked on a queue
1080:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	read, instead return a flag to say whether a context switch is required or
1081:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
1082:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	post). */
1083:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1084:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 1101              		.loc 1 1084 0
 1102 000e 3B6B     		ldr	r3, [r7, #48]
 1103 0010 002B     		cmp	r3, #0
 1104 0012 09D1     		bne	.L79
 1105              	.LBB99:
 1106              	.LBB100:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1107              		.loc 2 237 0 discriminator 1
 1108              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1109 0014 4FF05003 			mov r3, #80												
ARM GAS  /tmp/cc3YdTbX.s 			page 44


 1110 0018 83F31188 		msr basepri, r3											
 1111 001c BFF36F8F 		isb														
 1112 0020 BFF34F8F 		dsb														
 1113              	
 1114              	@ 0 "" 2
 1115              		.thumb
 1116 0024 3B62     		str	r3, [r7, #32]
 1117              	.L80:
 1118              	.LBE100:
 1119              	.LBE99:
 1120              		.loc 1 1084 0 discriminator 1
 1121 0026 FEE7     		b	.L80
 1122              	.L79:
1085:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1086:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1087:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if the item size is not 0. */
1088:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
 1123              		.loc 1 1088 0
 1124 0028 3B6B     		ldr	r3, [r7, #48]
 1125 002a 1B6C     		ldr	r3, [r3, #64]
 1126 002c 002B     		cmp	r3, #0
 1127 002e 09D0     		beq	.L81
 1128              	.LBB101:
 1129              	.LBB102:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1130              		.loc 2 237 0 discriminator 1
 1131              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1132 0030 4FF05003 			mov r3, #80												
 1133 0034 83F31188 		msr basepri, r3											
 1134 0038 BFF36F8F 		isb														
 1135 003c BFF34F8F 		dsb														
 1136              	
 1137              	@ 0 "" 2
 1138              		.thumb
 1139 0040 FB61     		str	r3, [r7, #28]
 1140              	.L82:
 1141              	.LBE102:
 1142              	.LBE101:
 1143              		.loc 1 1088 0 discriminator 2
 1144 0042 FEE7     		b	.L82
 1145              	.L81:
1089:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1090:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Normally a mutex would not be given from an interrupt, especially if
1091:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	there is a mutex holder, as priority inheritance makes no sense for an
1092:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	interrupts, only tasks. */
1093:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NU
 1146              		.loc 1 1093 0
 1147 0044 3B6B     		ldr	r3, [r7, #48]
 1148 0046 1B68     		ldr	r3, [r3]
 1149 0048 002B     		cmp	r3, #0
 1150 004a 03D1     		bne	.L83
 1151              		.loc 1 1093 0 is_stmt 0 discriminator 2
 1152 004c 3B6B     		ldr	r3, [r7, #48]
 1153 004e 5B68     		ldr	r3, [r3, #4]
 1154 0050 002B     		cmp	r3, #0
 1155 0052 01D1     		bne	.L84
 1156              	.L83:
ARM GAS  /tmp/cc3YdTbX.s 			page 45


 1157              		.loc 1 1093 0 discriminator 3
 1158 0054 0123     		movs	r3, #1
 1159 0056 00E0     		b	.L85
 1160              	.L84:
 1161              		.loc 1 1093 0 discriminator 4
 1162 0058 0023     		movs	r3, #0
 1163              	.L85:
 1164              		.loc 1 1093 0 discriminator 6
 1165 005a 002B     		cmp	r3, #0
 1166 005c 09D1     		bne	.L86
 1167              	.LBB103:
 1168              	.LBB104:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1169              		.loc 2 237 0 is_stmt 1 discriminator 7
 1170              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1171 005e 4FF05003 			mov r3, #80												
 1172 0062 83F31188 		msr basepri, r3											
 1173 0066 BFF36F8F 		isb														
 1174 006a BFF34F8F 		dsb														
 1175              	
 1176              	@ 0 "" 2
 1177              		.thumb
 1178 006e BB61     		str	r3, [r7, #24]
 1179              	.L87:
 1180              	.LBE104:
 1181              	.LBE103:
 1182              		.loc 1 1093 0 discriminator 3
 1183 0070 FEE7     		b	.L87
 1184              	.L86:
1094:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1095:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1096:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1097:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1098:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1099:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1100:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1101:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1102:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1103:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1104:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1105:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1106:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1107:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1108:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1109:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1185              		.loc 1 1109 0
 1186 0072 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1187              	.LBB105:
 1188              	.LBB106:
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1189              		.loc 2 253 0
 1190              	@ 253 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1191 0076 EFF31182 			mrs r2, basepri											
 1192 007a 4FF05003 		mov r3, #80												
 1193 007e 83F31188 		msr basepri, r3											
 1194 0082 BFF36F8F 		isb														
 1195 0086 BFF34F8F 		dsb														
ARM GAS  /tmp/cc3YdTbX.s 			page 46


 1196              	
 1197              	@ 0 "" 2
 1198              		.thumb
 1199 008a 7A61     		str	r2, [r7, #20]
 1200 008c 3B61     		str	r3, [r7, #16]
 265:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 1201              		.loc 2 265 0
 1202 008e 7B69     		ldr	r3, [r7, #20]
 1203              	.LBE106:
 1204              	.LBE105:
1110:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1111:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1205              		.loc 1 1111 0
 1206 0090 FB62     		str	r3, [r7, #44]
 1207              	.LBB107:
1112:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1113:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 1208              		.loc 1 1113 0
 1209 0092 3B6B     		ldr	r3, [r7, #48]
 1210 0094 9B6B     		ldr	r3, [r3, #56]
 1211 0096 BB62     		str	r3, [r7, #40]
1114:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1115:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* When the queue is used to implement a semaphore no data is ever
1116:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		moved through the queue but it is still valid to see if the queue 'has
1117:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		space'. */
1118:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( uxMessagesWaiting < pxQueue->uxLength )
 1212              		.loc 1 1118 0
 1213 0098 3B6B     		ldr	r3, [r7, #48]
 1214 009a DA6B     		ldr	r2, [r3, #60]
 1215 009c BB6A     		ldr	r3, [r7, #40]
 1216 009e 9A42     		cmp	r2, r3
 1217 00a0 2BD9     		bls	.L89
 1218              	.LBB108:
1119:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1120:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 1219              		.loc 1 1120 0
 1220 00a2 3B6B     		ldr	r3, [r7, #48]
 1221 00a4 93F84530 		ldrb	r3, [r3, #69]
 1222 00a8 87F82730 		strb	r3, [r7, #39]
1121:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1122:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
1123:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1124:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* A task can only have an inherited priority if it is a mutex
1125:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			holder - and if there is a mutex holder then the mutex cannot be
1126:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			given from an ISR.  As this is the ISR version of the function it
1127:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			can be assumed there is no mutex holder and no need to determine if
1128:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			priority disinheritance is needed.  Simply increase the count of
1129:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			messages (semaphores) available. */
1130:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 1223              		.loc 1 1130 0
 1224 00ac BB6A     		ldr	r3, [r7, #40]
 1225 00ae 5A1C     		adds	r2, r3, #1
 1226 00b0 3B6B     		ldr	r3, [r7, #48]
 1227 00b2 9A63     		str	r2, [r3, #56]
1131:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1132:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1133:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			be done when the queue is unlocked later. */
ARM GAS  /tmp/cc3YdTbX.s 			page 47


1134:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( cTxLock == queueUNLOCKED )
 1228              		.loc 1 1134 0
 1229 00b4 97F92730 		ldrsb	r3, [r7, #39]
 1230 00b8 B3F1FF3F 		cmp	r3, #-1
 1231 00bc 12D1     		bne	.L90
1135:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1136:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1137:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1138:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1139:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1140:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
1141:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1142:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The semaphore is a member of a queue set, and
1143:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							posting	to the queue set caused a higher priority
1144:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							task to	unblock.  A context switch is required. */
1145:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1146:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1147:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1148:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1149:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1150:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1151:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1152:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1153:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1154:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1155:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1156:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1157:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1158:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1159:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1160:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1161:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1162:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1163:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1164:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1165:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								/* The task waiting has a higher priority so
1166:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								record that a context switch is required. */
1167:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1168:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								{
1169:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1170:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								}
1171:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								else
1172:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								{
1173:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1174:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								}
1175:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1176:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1177:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1178:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1179:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1180:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1181:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1182:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1183:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1184:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1185:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1186:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
ARM GAS  /tmp/cc3YdTbX.s 			page 48


1187:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1188:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1189:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 1232              		.loc 1 1189 0
 1233 00be 3B6B     		ldr	r3, [r7, #48]
 1234 00c0 5B6A     		ldr	r3, [r3, #36]
 1235 00c2 002B     		cmp	r3, #0
 1236 00c4 16D0     		beq	.L91
1190:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1191:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 1237              		.loc 1 1191 0
 1238 00c6 3B6B     		ldr	r3, [r7, #48]
 1239 00c8 2433     		adds	r3, r3, #36
 1240 00ca 1846     		mov	r0, r3
 1241 00cc FFF7FEFF 		bl	xTaskRemoveFromEventList
 1242 00d0 0346     		mov	r3, r0
 1243 00d2 002B     		cmp	r3, #0
 1244 00d4 0ED0     		beq	.L91
1192:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1193:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1194:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							context	switch is required. */
1195:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
 1245              		.loc 1 1195 0
 1246 00d6 3B68     		ldr	r3, [r7]
 1247 00d8 002B     		cmp	r3, #0
 1248 00da 0BD0     		beq	.L91
1196:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1197:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 1249              		.loc 1 1197 0
 1250 00dc 3B68     		ldr	r3, [r7]
 1251 00de 0122     		movs	r2, #1
 1252 00e0 1A60     		str	r2, [r3]
 1253 00e2 07E0     		b	.L91
 1254              	.L90:
1198:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1199:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1200:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1201:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1202:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1203:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1204:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1205:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1206:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1207:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1208:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1209:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1210:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1211:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1212:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1213:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1214:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1215:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1216:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1217:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1218:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1219:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				knows that data was posted while it was locked. */
1220:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
ARM GAS  /tmp/cc3YdTbX.s 			page 49


 1255              		.loc 1 1220 0
 1256 00e4 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 1257 00e8 0133     		adds	r3, r3, #1
 1258 00ea DBB2     		uxtb	r3, r3
 1259 00ec DAB2     		uxtb	r2, r3
 1260 00ee 3B6B     		ldr	r3, [r7, #48]
 1261 00f0 83F84520 		strb	r2, [r3, #69]
 1262              	.L91:
1221:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1222:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1223:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 1263              		.loc 1 1223 0
 1264 00f4 0123     		movs	r3, #1
 1265 00f6 7B63     		str	r3, [r7, #52]
 1266              	.LBE108:
 1267 00f8 01E0     		b	.L92
 1268              	.L89:
1224:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1225:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1226:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1227:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1228:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = errQUEUE_FULL;
 1269              		.loc 1 1228 0
 1270 00fa 0023     		movs	r3, #0
 1271 00fc 7B63     		str	r3, [r7, #52]
 1272              	.L92:
 1273 00fe FB6A     		ldr	r3, [r7, #44]
 1274 0100 FB60     		str	r3, [r7, #12]
 1275              	.LBE107:
 1276              	.LBB109:
 1277              	.LBB110:
 1278              		.loc 2 271 0
 1279 0102 FB68     		ldr	r3, [r7, #12]
 1280              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1281 0104 83F31188 			msr basepri, r3	
 1282              	@ 0 "" 2
 1283              		.thumb
 1284              	.LBE110:
 1285              	.LBE109:
1229:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1230:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1231:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1232:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1233:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
 1286              		.loc 1 1233 0
 1287 0108 7B6B     		ldr	r3, [r7, #52]
1234:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 1288              		.loc 1 1234 0
 1289 010a 1846     		mov	r0, r3
 1290 010c 3837     		adds	r7, r7, #56
 1291              	.LCFI38:
 1292              		.cfi_def_cfa_offset 8
 1293 010e BD46     		mov	sp, r7
 1294              	.LCFI39:
 1295              		.cfi_def_cfa_register 13
 1296              		@ sp needed
 1297 0110 80BD     		pop	{r7, pc}
ARM GAS  /tmp/cc3YdTbX.s 			page 50


 1298              		.cfi_endproc
 1299              	.LFE12:
 1301 0112 00BF     		.section	.text.xQueueGenericReceive,"ax",%progbits
 1302              		.align	2
 1303              		.global	xQueueGenericReceive
 1304              		.thumb
 1305              		.thumb_func
 1307              	xQueueGenericReceive:
 1308              	.LFB13:
1235:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1236:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1237:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWa
1238:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 1309              		.loc 1 1238 0
 1310              		.cfi_startproc
 1311              		@ args = 0, pretend = 0, frame = 56
 1312              		@ frame_needed = 1, uses_anonymous_args = 0
 1313 0000 80B5     		push	{r7, lr}
 1314              	.LCFI40:
 1315              		.cfi_def_cfa_offset 8
 1316              		.cfi_offset 7, -8
 1317              		.cfi_offset 14, -4
 1318 0002 8EB0     		sub	sp, sp, #56
 1319              	.LCFI41:
 1320              		.cfi_def_cfa_offset 64
 1321 0004 00AF     		add	r7, sp, #0
 1322              	.LCFI42:
 1323              		.cfi_def_cfa_register 7
 1324 0006 F860     		str	r0, [r7, #12]
 1325 0008 B960     		str	r1, [r7, #8]
 1326 000a 7A60     		str	r2, [r7, #4]
 1327 000c 3B60     		str	r3, [r7]
1239:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1328              		.loc 1 1239 0
 1329 000e 0023     		movs	r3, #0
 1330 0010 7B63     		str	r3, [r7, #52]
1240:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** TimeOut_t xTimeOut;
1241:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** int8_t *pcOriginalReadPosition;
1242:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 1331              		.loc 1 1242 0
 1332 0012 FB68     		ldr	r3, [r7, #12]
 1333 0014 3B63     		str	r3, [r7, #48]
1243:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1244:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 1334              		.loc 1 1244 0
 1335 0016 3B6B     		ldr	r3, [r7, #48]
 1336 0018 002B     		cmp	r3, #0
 1337 001a 09D1     		bne	.L95
 1338              	.LBB111:
 1339              	.LBB112:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1340              		.loc 2 237 0 discriminator 1
 1341              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1342 001c 4FF05003 			mov r3, #80												
 1343 0020 83F31188 		msr basepri, r3											
 1344 0024 BFF36F8F 		isb														
 1345 0028 BFF34F8F 		dsb														
ARM GAS  /tmp/cc3YdTbX.s 			page 51


 1346              	
 1347              	@ 0 "" 2
 1348              		.thumb
 1349 002c 7B62     		str	r3, [r7, #36]
 1350              	.L96:
 1351              	.LBE112:
 1352              	.LBE111:
 1353              		.loc 1 1244 0 discriminator 1
 1354 002e FEE7     		b	.L96
 1355              	.L95:
1245:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1356              		.loc 1 1245 0
 1357 0030 BB68     		ldr	r3, [r7, #8]
 1358 0032 002B     		cmp	r3, #0
 1359 0034 03D1     		bne	.L97
 1360              		.loc 1 1245 0 is_stmt 0 discriminator 2
 1361 0036 3B6B     		ldr	r3, [r7, #48]
 1362 0038 1B6C     		ldr	r3, [r3, #64]
 1363 003a 002B     		cmp	r3, #0
 1364 003c 01D1     		bne	.L98
 1365              	.L97:
 1366              		.loc 1 1245 0 discriminator 3
 1367 003e 0123     		movs	r3, #1
 1368 0040 00E0     		b	.L99
 1369              	.L98:
 1370              		.loc 1 1245 0 discriminator 4
 1371 0042 0023     		movs	r3, #0
 1372              	.L99:
 1373              		.loc 1 1245 0 discriminator 6
 1374 0044 002B     		cmp	r3, #0
 1375 0046 09D1     		bne	.L100
 1376              	.LBB113:
 1377              	.LBB114:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1378              		.loc 2 237 0 is_stmt 1 discriminator 7
 1379              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1380 0048 4FF05003 			mov r3, #80												
 1381 004c 83F31188 		msr basepri, r3											
 1382 0050 BFF36F8F 		isb														
 1383 0054 BFF34F8F 		dsb														
 1384              	
 1385              	@ 0 "" 2
 1386              		.thumb
 1387 0058 3B62     		str	r3, [r7, #32]
 1388              	.L101:
 1389              	.LBE114:
 1390              	.LBE113:
 1391              		.loc 1 1245 0 discriminator 2
 1392 005a FEE7     		b	.L101
 1393              	.L100:
1246:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1247:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1248:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 1394              		.loc 1 1248 0
 1395 005c FFF7FEFF 		bl	xTaskGetSchedulerState
 1396 0060 0346     		mov	r3, r0
 1397 0062 002B     		cmp	r3, #0
ARM GAS  /tmp/cc3YdTbX.s 			page 52


 1398 0064 02D1     		bne	.L102
 1399              		.loc 1 1248 0 is_stmt 0 discriminator 2
 1400 0066 7B68     		ldr	r3, [r7, #4]
 1401 0068 002B     		cmp	r3, #0
 1402 006a 01D1     		bne	.L103
 1403              	.L102:
 1404              		.loc 1 1248 0 discriminator 3
 1405 006c 0123     		movs	r3, #1
 1406 006e 00E0     		b	.L104
 1407              	.L103:
 1408              		.loc 1 1248 0 discriminator 4
 1409 0070 0023     		movs	r3, #0
 1410              	.L104:
 1411              		.loc 1 1248 0 discriminator 6
 1412 0072 002B     		cmp	r3, #0
 1413 0074 09D1     		bne	.L105
 1414              	.LBB115:
 1415              	.LBB116:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1416              		.loc 2 237 0 is_stmt 1 discriminator 7
 1417              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1418 0076 4FF05003 			mov r3, #80												
 1419 007a 83F31188 		msr basepri, r3											
 1420 007e BFF36F8F 		isb														
 1421 0082 BFF34F8F 		dsb														
 1422              	
 1423              	@ 0 "" 2
 1424              		.thumb
 1425 0086 FB61     		str	r3, [r7, #28]
 1426              	.L106:
 1427              	.LBE116:
 1428              	.LBE115:
 1429              		.loc 1 1248 0 discriminator 3
 1430 0088 FEE7     		b	.L106
 1431              	.L105:
1249:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1250:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
1251:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1252:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1253:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	statements within the function itself.  This is done in the interest
1254:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	of execution time efficiency. */
1255:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1256:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	for( ;; )
1257:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1258:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
 1432              		.loc 1 1258 0
 1433 008a FFF7FEFF 		bl	vPortEnterCritical
 1434              	.LBB117:
1259:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1260:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 1435              		.loc 1 1260 0
 1436 008e 3B6B     		ldr	r3, [r7, #48]
 1437 0090 9B6B     		ldr	r3, [r3, #56]
 1438 0092 FB62     		str	r3, [r7, #44]
1261:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1262:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1263:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			must be the highest priority task wanting to access the queue. */
ARM GAS  /tmp/cc3YdTbX.s 			page 53


1264:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 1439              		.loc 1 1264 0
 1440 0094 FB6A     		ldr	r3, [r7, #44]
 1441 0096 002B     		cmp	r3, #0
 1442 0098 46D0     		beq	.L107
1265:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1266:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Remember the read position in case the queue is only being
1267:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				peeked. */
1268:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 1443              		.loc 1 1268 0
 1444 009a 3B6B     		ldr	r3, [r7, #48]
 1445 009c DB68     		ldr	r3, [r3, #12]
 1446 009e BB62     		str	r3, [r7, #40]
1269:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1270:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
 1447              		.loc 1 1270 0
 1448 00a0 386B     		ldr	r0, [r7, #48]
 1449 00a2 B968     		ldr	r1, [r7, #8]
 1450 00a4 FFF7FEFF 		bl	prvCopyDataFromQueue
1271:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1272:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xJustPeeking == pdFALSE )
 1451              		.loc 1 1272 0
 1452 00a8 3B68     		ldr	r3, [r7]
 1453 00aa 002B     		cmp	r3, #0
 1454 00ac 21D1     		bne	.L108
1273:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1274:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE( pxQueue );
1275:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1276:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Actually removing data, not just peeking. */
1277:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 1455              		.loc 1 1277 0
 1456 00ae FB6A     		ldr	r3, [r7, #44]
 1457 00b0 5A1E     		subs	r2, r3, #1
 1458 00b2 3B6B     		ldr	r3, [r7, #48]
 1459 00b4 9A63     		str	r2, [r3, #56]
1278:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1279:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					#if ( configUSE_MUTEXES == 1 )
1280:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1281:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 1460              		.loc 1 1281 0
 1461 00b6 3B6B     		ldr	r3, [r7, #48]
 1462 00b8 1B68     		ldr	r3, [r3]
 1463 00ba 002B     		cmp	r3, #0
 1464 00bc 04D1     		bne	.L109
1282:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1283:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* Record the information required to implement
1284:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							priority inheritance should it become necessary. */
1285:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is 
 1465              		.loc 1 1285 0
 1466 00be FFF7FEFF 		bl	pvTaskIncrementMutexHeldCount
 1467 00c2 0246     		mov	r2, r0
 1468 00c4 3B6B     		ldr	r3, [r7, #48]
 1469 00c6 5A60     		str	r2, [r3, #4]
 1470              	.L109:
1286:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1287:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1288:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
ARM GAS  /tmp/cc3YdTbX.s 			page 54


1289:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1290:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1291:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1292:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					#endif /* configUSE_MUTEXES */
1293:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1294:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 1471              		.loc 1 1294 0
 1472 00c8 3B6B     		ldr	r3, [r7, #48]
 1473 00ca 1B69     		ldr	r3, [r3, #16]
 1474 00cc 002B     		cmp	r3, #0
 1475 00ce 27D0     		beq	.L110
1295:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1296:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 1476              		.loc 1 1296 0
 1477 00d0 3B6B     		ldr	r3, [r7, #48]
 1478 00d2 1033     		adds	r3, r3, #16
 1479 00d4 1846     		mov	r0, r3
 1480 00d6 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1481 00da 0346     		mov	r3, r0
 1482 00dc 002B     		cmp	r3, #0
 1483 00de 1FD0     		beq	.L110
1297:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1298:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 1484              		.loc 1 1298 0
 1485 00e0 514B     		ldr	r3, .L122
 1486 00e2 4FF08052 		mov	r2, #268435456
 1487 00e6 1A60     		str	r2, [r3]
 1488              	@ 1298 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1489 00e8 BFF34F8F 		dsb
 1490              	@ 0 "" 2
 1491              	@ 1298 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1492 00ec BFF36F8F 		isb
 1493              	@ 0 "" 2
 1494              		.thumb
 1495 00f0 16E0     		b	.L110
 1496              	.L108:
1299:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1300:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1301:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1302:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1303:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1304:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1305:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1306:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1307:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1308:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1309:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1310:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1311:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1312:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_PEEK( pxQueue );
1313:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1314:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The data is not being removed, so reset the read
1315:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					pointer. */
1316:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 1497              		.loc 1 1316 0
 1498 00f2 3B6B     		ldr	r3, [r7, #48]
 1499 00f4 BA6A     		ldr	r2, [r7, #40]
ARM GAS  /tmp/cc3YdTbX.s 			page 55


 1500 00f6 DA60     		str	r2, [r3, #12]
1317:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1318:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The data is being left in the queue, so see if there are
1319:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					any other tasks waiting for the data. */
1320:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 1501              		.loc 1 1320 0
 1502 00f8 3B6B     		ldr	r3, [r7, #48]
 1503 00fa 5B6A     		ldr	r3, [r3, #36]
 1504 00fc 002B     		cmp	r3, #0
 1505 00fe 0FD0     		beq	.L110
1321:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1322:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 1506              		.loc 1 1322 0
 1507 0100 3B6B     		ldr	r3, [r7, #48]
 1508 0102 2433     		adds	r3, r3, #36
 1509 0104 1846     		mov	r0, r3
 1510 0106 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1511 010a 0346     		mov	r3, r0
 1512 010c 002B     		cmp	r3, #0
 1513 010e 07D0     		beq	.L110
1323:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1324:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority than this task. */
1325:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 1514              		.loc 1 1325 0
 1515 0110 454B     		ldr	r3, .L122
 1516 0112 4FF08052 		mov	r2, #268435456
 1517 0116 1A60     		str	r2, [r3]
 1518              	@ 1325 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1519 0118 BFF34F8F 		dsb
 1520              	@ 0 "" 2
 1521              	@ 1325 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1522 011c BFF36F8F 		isb
 1523              	@ 0 "" 2
 1524              		.thumb
 1525              	.L110:
1326:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1327:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1328:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1329:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1330:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1331:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1332:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1333:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1334:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1335:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1336:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1337:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1338:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
 1526              		.loc 1 1338 0
 1527 0120 FFF7FEFF 		bl	vPortExitCritical
1339:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
 1528              		.loc 1 1339 0
 1529 0124 0123     		movs	r3, #1
 1530 0126 7AE0     		b	.L121
 1531              	.L107:
1340:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1341:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
ARM GAS  /tmp/cc3YdTbX.s 			page 56


1342:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1343:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 1532              		.loc 1 1343 0
 1533 0128 7B68     		ldr	r3, [r7, #4]
 1534 012a 002B     		cmp	r3, #0
 1535 012c 03D1     		bne	.L112
1344:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1345:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The queue was empty and no block time is specified (or
1346:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the block time has expired) so leave now. */
1347:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
 1536              		.loc 1 1347 0
 1537 012e FFF7FEFF 		bl	vPortExitCritical
1348:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1349:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_EMPTY;
 1538              		.loc 1 1349 0
 1539 0132 0023     		movs	r3, #0
 1540 0134 73E0     		b	.L121
 1541              	.L112:
1350:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1351:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 1542              		.loc 1 1351 0
 1543 0136 7B6B     		ldr	r3, [r7, #52]
 1544 0138 002B     		cmp	r3, #0
 1545 013a 06D1     		bne	.L113
1352:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1353:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The queue was empty and a block time was specified so
1354:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					configure the timeout structure. */
1355:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
 1546              		.loc 1 1355 0
 1547 013c 07F11403 		add	r3, r7, #20
 1548 0140 1846     		mov	r0, r3
 1549 0142 FFF7FEFF 		bl	vTaskSetTimeOutState
1356:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 1550              		.loc 1 1356 0
 1551 0146 0123     		movs	r3, #1
 1552 0148 7B63     		str	r3, [r7, #52]
 1553              	.L113:
 1554              	.LBE117:
1357:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1358:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1359:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1360:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Entry time was already set. */
1361:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1362:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1363:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1364:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1365:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
 1555              		.loc 1 1365 0
 1556 014a FFF7FEFF 		bl	vPortExitCritical
1366:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1367:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1368:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		now the critical section has been exited. */
1369:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1370:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
 1557              		.loc 1 1370 0
 1558 014e FFF7FEFF 		bl	vTaskSuspendAll
1371:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
ARM GAS  /tmp/cc3YdTbX.s 			page 57


 1559              		.loc 1 1371 0
 1560 0152 FFF7FEFF 		bl	vPortEnterCritical
 1561 0156 3B6B     		ldr	r3, [r7, #48]
 1562 0158 93F84430 		ldrb	r3, [r3, #68]
 1563 015c DBB2     		uxtb	r3, r3
 1564 015e 5BB2     		sxtb	r3, r3
 1565 0160 B3F1FF3F 		cmp	r3, #-1
 1566 0164 03D1     		bne	.L114
 1567              		.loc 1 1371 0 is_stmt 0 discriminator 1
 1568 0166 3B6B     		ldr	r3, [r7, #48]
 1569 0168 0022     		movs	r2, #0
 1570 016a 83F84420 		strb	r2, [r3, #68]
 1571              	.L114:
 1572              		.loc 1 1371 0 discriminator 3
 1573 016e 3B6B     		ldr	r3, [r7, #48]
 1574 0170 93F84530 		ldrb	r3, [r3, #69]
 1575 0174 DBB2     		uxtb	r3, r3
 1576 0176 5BB2     		sxtb	r3, r3
 1577 0178 B3F1FF3F 		cmp	r3, #-1
 1578 017c 03D1     		bne	.L115
 1579              		.loc 1 1371 0 discriminator 4
 1580 017e 3B6B     		ldr	r3, [r7, #48]
 1581 0180 0022     		movs	r2, #0
 1582 0182 83F84520 		strb	r2, [r3, #69]
 1583              	.L115:
 1584              		.loc 1 1371 0 discriminator 6
 1585 0186 FFF7FEFF 		bl	vPortExitCritical
1372:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1373:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1374:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 1586              		.loc 1 1374 0 is_stmt 1 discriminator 6
 1587 018a 07F11402 		add	r2, r7, #20
 1588 018e 3B1D     		adds	r3, r7, #4
 1589 0190 1046     		mov	r0, r2
 1590 0192 1946     		mov	r1, r3
 1591 0194 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1592 0198 0346     		mov	r3, r0
 1593 019a 002B     		cmp	r3, #0
 1594 019c 31D1     		bne	.L116
1375:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1376:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1595              		.loc 1 1376 0
 1596 019e 386B     		ldr	r0, [r7, #48]
 1597 01a0 FFF7FEFF 		bl	prvIsQueueEmpty
 1598 01a4 0346     		mov	r3, r0
 1599 01a6 002B     		cmp	r3, #0
 1600 01a8 25D0     		beq	.L117
1377:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1378:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1379:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1380:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1381:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1382:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 1601              		.loc 1 1382 0
 1602 01aa 3B6B     		ldr	r3, [r7, #48]
 1603 01ac 1B68     		ldr	r3, [r3]
 1604 01ae 002B     		cmp	r3, #0
ARM GAS  /tmp/cc3YdTbX.s 			page 58


 1605 01b0 08D1     		bne	.L118
1383:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1384:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						taskENTER_CRITICAL();
 1606              		.loc 1 1384 0
 1607 01b2 FFF7FEFF 		bl	vPortEnterCritical
1385:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1386:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 1608              		.loc 1 1386 0
 1609 01b6 3B6B     		ldr	r3, [r7, #48]
 1610 01b8 5B68     		ldr	r3, [r3, #4]
 1611 01ba 1846     		mov	r0, r3
 1612 01bc FFF7FEFF 		bl	vTaskPriorityInherit
1387:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1388:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						taskEXIT_CRITICAL();
 1613              		.loc 1 1388 0
 1614 01c0 FFF7FEFF 		bl	vPortExitCritical
 1615              	.L118:
1389:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1390:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1391:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1392:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1393:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1394:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1395:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#endif
1396:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1397:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 1616              		.loc 1 1397 0
 1617 01c4 3B6B     		ldr	r3, [r7, #48]
 1618 01c6 03F12402 		add	r2, r3, #36
 1619 01ca 7B68     		ldr	r3, [r7, #4]
 1620 01cc 1046     		mov	r0, r2
 1621 01ce 1946     		mov	r1, r3
 1622 01d0 FFF7FEFF 		bl	vTaskPlaceOnEventList
1398:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 1623              		.loc 1 1398 0
 1624 01d4 386B     		ldr	r0, [r7, #48]
 1625 01d6 FFF7FEFF 		bl	prvUnlockQueue
1399:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1626              		.loc 1 1399 0
 1627 01da FFF7FEFF 		bl	xTaskResumeAll
 1628 01de 0346     		mov	r3, r0
 1629 01e0 002B     		cmp	r3, #0
 1630 01e2 1BD1     		bne	.L120
1400:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1401:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
 1631              		.loc 1 1401 0
 1632 01e4 104B     		ldr	r3, .L122
 1633 01e6 4FF08052 		mov	r2, #268435456
 1634 01ea 1A60     		str	r2, [r3]
 1635              	@ 1401 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1636 01ec BFF34F8F 		dsb
 1637              	@ 0 "" 2
 1638              	@ 1401 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1639 01f0 BFF36F8F 		isb
 1640              	@ 0 "" 2
 1641              		.thumb
 1642 01f4 12E0     		b	.L120
ARM GAS  /tmp/cc3YdTbX.s 			page 59


 1643              	.L117:
1402:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1403:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1404:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1405:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1406:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1407:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1408:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1409:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1410:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Try again. */
1411:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 1644              		.loc 1 1411 0
 1645 01f6 386B     		ldr	r0, [r7, #48]
 1646 01f8 FFF7FEFF 		bl	prvUnlockQueue
1412:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 1647              		.loc 1 1412 0
 1648 01fc FFF7FEFF 		bl	xTaskResumeAll
 1649 0200 43E7     		b	.L105
 1650              	.L116:
1413:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1414:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1415:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1416:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1417:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
 1651              		.loc 1 1417 0
 1652 0202 386B     		ldr	r0, [r7, #48]
 1653 0204 FFF7FEFF 		bl	prvUnlockQueue
1418:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 1654              		.loc 1 1418 0
 1655 0208 FFF7FEFF 		bl	xTaskResumeAll
1419:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1420:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1656              		.loc 1 1420 0
 1657 020c 386B     		ldr	r0, [r7, #48]
 1658 020e FFF7FEFF 		bl	prvIsQueueEmpty
 1659 0212 0346     		mov	r3, r0
 1660 0214 002B     		cmp	r3, #0
 1661 0216 01D0     		beq	.L120
1421:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1422:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1423:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return errQUEUE_EMPTY;
 1662              		.loc 1 1423 0
 1663 0218 0023     		movs	r3, #0
 1664 021a 00E0     		b	.L121
 1665              	.L120:
1424:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1425:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1426:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1427:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1428:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1429:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1430:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 1666              		.loc 1 1430 0 discriminator 6
 1667 021c 35E7     		b	.L105
 1668              	.L121:
1431:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 1669              		.loc 1 1431 0 discriminator 7
ARM GAS  /tmp/cc3YdTbX.s 			page 60


 1670 021e 1846     		mov	r0, r3
 1671 0220 3837     		adds	r7, r7, #56
 1672              	.LCFI43:
 1673              		.cfi_def_cfa_offset 8
 1674 0222 BD46     		mov	sp, r7
 1675              	.LCFI44:
 1676              		.cfi_def_cfa_register 13
 1677              		@ sp needed
 1678 0224 80BD     		pop	{r7, pc}
 1679              	.L123:
 1680 0226 00BF     		.align	2
 1681              	.L122:
 1682 0228 04ED00E0 		.word	-536810236
 1683              		.cfi_endproc
 1684              	.LFE13:
 1686              		.section	.text.xQueueReceiveFromISR,"ax",%progbits
 1687              		.align	2
 1688              		.global	xQueueReceiveFromISR
 1689              		.thumb
 1690              		.thumb_func
 1692              	xQueueReceiveFromISR:
 1693              	.LFB14:
1432:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1433:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1434:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const px
1435:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 1694              		.loc 1 1435 0
 1695              		.cfi_startproc
 1696              		@ args = 0, pretend = 0, frame = 56
 1697              		@ frame_needed = 1, uses_anonymous_args = 0
 1698 0000 80B5     		push	{r7, lr}
 1699              	.LCFI45:
 1700              		.cfi_def_cfa_offset 8
 1701              		.cfi_offset 7, -8
 1702              		.cfi_offset 14, -4
 1703 0002 8EB0     		sub	sp, sp, #56
 1704              	.LCFI46:
 1705              		.cfi_def_cfa_offset 64
 1706 0004 00AF     		add	r7, sp, #0
 1707              	.LCFI47:
 1708              		.cfi_def_cfa_register 7
 1709 0006 F860     		str	r0, [r7, #12]
 1710 0008 B960     		str	r1, [r7, #8]
 1711 000a 7A60     		str	r2, [r7, #4]
1436:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1437:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1438:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 1712              		.loc 1 1438 0
 1713 000c FB68     		ldr	r3, [r7, #12]
 1714 000e 3B63     		str	r3, [r7, #48]
1439:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1440:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 1715              		.loc 1 1440 0
 1716 0010 3B6B     		ldr	r3, [r7, #48]
 1717 0012 002B     		cmp	r3, #0
 1718 0014 09D1     		bne	.L125
 1719              	.LBB118:
ARM GAS  /tmp/cc3YdTbX.s 			page 61


 1720              	.LBB119:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1721              		.loc 2 237 0 discriminator 1
 1722              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1723 0016 4FF05003 			mov r3, #80												
 1724 001a 83F31188 		msr basepri, r3											
 1725 001e BFF36F8F 		isb														
 1726 0022 BFF34F8F 		dsb														
 1727              	
 1728              	@ 0 "" 2
 1729              		.thumb
 1730 0026 3B62     		str	r3, [r7, #32]
 1731              	.L126:
 1732              	.LBE119:
 1733              	.LBE118:
 1734              		.loc 1 1440 0 discriminator 1
 1735 0028 FEE7     		b	.L126
 1736              	.L125:
1441:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1737              		.loc 1 1441 0
 1738 002a BB68     		ldr	r3, [r7, #8]
 1739 002c 002B     		cmp	r3, #0
 1740 002e 03D1     		bne	.L127
 1741              		.loc 1 1441 0 is_stmt 0 discriminator 2
 1742 0030 3B6B     		ldr	r3, [r7, #48]
 1743 0032 1B6C     		ldr	r3, [r3, #64]
 1744 0034 002B     		cmp	r3, #0
 1745 0036 01D1     		bne	.L128
 1746              	.L127:
 1747              		.loc 1 1441 0 discriminator 3
 1748 0038 0123     		movs	r3, #1
 1749 003a 00E0     		b	.L129
 1750              	.L128:
 1751              		.loc 1 1441 0 discriminator 4
 1752 003c 0023     		movs	r3, #0
 1753              	.L129:
 1754              		.loc 1 1441 0 discriminator 6
 1755 003e 002B     		cmp	r3, #0
 1756 0040 09D1     		bne	.L130
 1757              	.LBB120:
 1758              	.LBB121:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1759              		.loc 2 237 0 is_stmt 1 discriminator 7
 1760              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1761 0042 4FF05003 			mov r3, #80												
 1762 0046 83F31188 		msr basepri, r3											
 1763 004a BFF36F8F 		isb														
 1764 004e BFF34F8F 		dsb														
 1765              	
 1766              	@ 0 "" 2
 1767              		.thumb
 1768 0052 FB61     		str	r3, [r7, #28]
 1769              	.L131:
 1770              	.LBE121:
 1771              	.LBE120:
 1772              		.loc 1 1441 0 discriminator 2
 1773 0054 FEE7     		b	.L131
ARM GAS  /tmp/cc3YdTbX.s 			page 62


 1774              	.L130:
1442:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1443:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1444:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1445:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1446:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1447:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1448:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1449:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1450:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1451:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1452:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1453:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1454:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1455:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1456:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1457:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1775              		.loc 1 1457 0
 1776 0056 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1777              	.LBB122:
 1778              	.LBB123:
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1779              		.loc 2 253 0
 1780              	@ 253 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1781 005a EFF31182 			mrs r2, basepri											
 1782 005e 4FF05003 		mov r3, #80												
 1783 0062 83F31188 		msr basepri, r3											
 1784 0066 BFF36F8F 		isb														
 1785 006a BFF34F8F 		dsb														
 1786              	
 1787              	@ 0 "" 2
 1788              		.thumb
 1789 006e BA61     		str	r2, [r7, #24]
 1790 0070 7B61     		str	r3, [r7, #20]
 265:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 1791              		.loc 2 265 0
 1792 0072 BB69     		ldr	r3, [r7, #24]
 1793              	.LBE123:
 1794              	.LBE122:
1458:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1459:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1795              		.loc 1 1459 0
 1796 0074 FB62     		str	r3, [r7, #44]
 1797              	.LBB124:
1460:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1461:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 1798              		.loc 1 1461 0
 1799 0076 3B6B     		ldr	r3, [r7, #48]
 1800 0078 9B6B     		ldr	r3, [r3, #56]
 1801 007a BB62     		str	r3, [r7, #40]
1462:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1463:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1464:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 1802              		.loc 1 1464 0
 1803 007c BB6A     		ldr	r3, [r7, #40]
 1804 007e 002B     		cmp	r3, #0
 1805 0080 2FD0     		beq	.L133
ARM GAS  /tmp/cc3YdTbX.s 			page 63


 1806              	.LBB125:
1465:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1466:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			const int8_t cRxLock = pxQueue->cRxLock;
 1807              		.loc 1 1466 0
 1808 0082 3B6B     		ldr	r3, [r7, #48]
 1809 0084 93F84430 		ldrb	r3, [r3, #68]
 1810 0088 87F82730 		strb	r3, [r7, #39]
1467:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1468:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1469:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1470:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 1811              		.loc 1 1470 0
 1812 008c 386B     		ldr	r0, [r7, #48]
 1813 008e B968     		ldr	r1, [r7, #8]
 1814 0090 FFF7FEFF 		bl	prvCopyDataFromQueue
1471:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 1815              		.loc 1 1471 0
 1816 0094 BB6A     		ldr	r3, [r7, #40]
 1817 0096 5A1E     		subs	r2, r3, #1
 1818 0098 3B6B     		ldr	r3, [r7, #48]
 1819 009a 9A63     		str	r2, [r3, #56]
1472:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1473:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* If the queue is locked the event list will not be modified.
1474:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			Instead update the lock count so the task that unlocks the queue
1475:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			will know that an ISR has removed data while the queue was
1476:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			locked. */
1477:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( cRxLock == queueUNLOCKED )
 1820              		.loc 1 1477 0
 1821 009c 97F92730 		ldrsb	r3, [r7, #39]
 1822 00a0 B3F1FF3F 		cmp	r3, #-1
 1823 00a4 12D1     		bne	.L134
1478:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1479:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 1824              		.loc 1 1479 0
 1825 00a6 3B6B     		ldr	r3, [r7, #48]
 1826 00a8 1B69     		ldr	r3, [r3, #16]
 1827 00aa 002B     		cmp	r3, #0
 1828 00ac 16D0     		beq	.L135
1480:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1481:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 1829              		.loc 1 1481 0
 1830 00ae 3B6B     		ldr	r3, [r7, #48]
 1831 00b0 1033     		adds	r3, r3, #16
 1832 00b2 1846     		mov	r0, r3
 1833 00b4 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1834 00b8 0346     		mov	r3, r0
 1835 00ba 002B     		cmp	r3, #0
 1836 00bc 0ED0     		beq	.L135
1482:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1483:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* The task waiting has a higher priority than us so
1484:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						force a context switch. */
1485:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
 1837              		.loc 1 1485 0
 1838 00be 7B68     		ldr	r3, [r7, #4]
 1839 00c0 002B     		cmp	r3, #0
 1840 00c2 0BD0     		beq	.L135
1486:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
ARM GAS  /tmp/cc3YdTbX.s 			page 64


1487:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
 1841              		.loc 1 1487 0
 1842 00c4 7B68     		ldr	r3, [r7, #4]
 1843 00c6 0122     		movs	r2, #1
 1844 00c8 1A60     		str	r2, [r3]
 1845 00ca 07E0     		b	.L135
 1846              	.L134:
1488:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1489:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1490:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1491:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1492:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1493:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1494:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1495:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1496:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1497:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1498:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1499:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1500:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1501:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1502:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1503:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1504:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1505:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1506:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1507:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				knows that data was removed while it was locked. */
1508:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 1847              		.loc 1 1508 0
 1848 00cc 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 1849 00d0 0133     		adds	r3, r3, #1
 1850 00d2 DBB2     		uxtb	r3, r3
 1851 00d4 DAB2     		uxtb	r2, r3
 1852 00d6 3B6B     		ldr	r3, [r7, #48]
 1853 00d8 83F84420 		strb	r2, [r3, #68]
 1854              	.L135:
1509:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1510:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1511:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 1855              		.loc 1 1511 0
 1856 00dc 0123     		movs	r3, #1
 1857 00de 7B63     		str	r3, [r7, #52]
 1858              	.LBE125:
 1859 00e0 01E0     		b	.L136
 1860              	.L133:
1512:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1513:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1514:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1515:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
 1861              		.loc 1 1515 0
 1862 00e2 0023     		movs	r3, #0
 1863 00e4 7B63     		str	r3, [r7, #52]
 1864              	.L136:
 1865 00e6 FB6A     		ldr	r3, [r7, #44]
 1866 00e8 3B61     		str	r3, [r7, #16]
 1867              	.LBE124:
 1868              	.LBB126:
ARM GAS  /tmp/cc3YdTbX.s 			page 65


 1869              	.LBB127:
 1870              		.loc 2 271 0
 1871 00ea 3B69     		ldr	r3, [r7, #16]
 1872              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1873 00ec 83F31188 			msr basepri, r3	
 1874              	@ 0 "" 2
 1875              		.thumb
 1876              	.LBE127:
 1877              	.LBE126:
1516:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1517:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1518:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1519:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1520:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1521:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
 1878              		.loc 1 1521 0
 1879 00f0 7B6B     		ldr	r3, [r7, #52]
1522:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 1880              		.loc 1 1522 0
 1881 00f2 1846     		mov	r0, r3
 1882 00f4 3837     		adds	r7, r7, #56
 1883              	.LCFI48:
 1884              		.cfi_def_cfa_offset 8
 1885 00f6 BD46     		mov	sp, r7
 1886              	.LCFI49:
 1887              		.cfi_def_cfa_register 13
 1888              		@ sp needed
 1889 00f8 80BD     		pop	{r7, pc}
 1890              		.cfi_endproc
 1891              	.LFE14:
 1893 00fa 00BF     		.section	.text.xQueuePeekFromISR,"ax",%progbits
 1894              		.align	2
 1895              		.global	xQueuePeekFromISR
 1896              		.thumb
 1897              		.thumb_func
 1899              	xQueuePeekFromISR:
 1900              	.LFB15:
1523:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1524:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1525:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
1526:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 1901              		.loc 1 1526 0
 1902              		.cfi_startproc
 1903              		@ args = 0, pretend = 0, frame = 48
 1904              		@ frame_needed = 1, uses_anonymous_args = 0
 1905 0000 80B5     		push	{r7, lr}
 1906              	.LCFI50:
 1907              		.cfi_def_cfa_offset 8
 1908              		.cfi_offset 7, -8
 1909              		.cfi_offset 14, -4
 1910 0002 8CB0     		sub	sp, sp, #48
 1911              	.LCFI51:
 1912              		.cfi_def_cfa_offset 56
 1913 0004 00AF     		add	r7, sp, #0
 1914              	.LCFI52:
 1915              		.cfi_def_cfa_register 7
 1916 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/cc3YdTbX.s 			page 66


 1917 0008 3960     		str	r1, [r7]
1527:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1528:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1529:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** int8_t *pcOriginalReadPosition;
1530:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 1918              		.loc 1 1530 0
 1919 000a 7B68     		ldr	r3, [r7, #4]
 1920 000c BB62     		str	r3, [r7, #40]
1531:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1532:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 1921              		.loc 1 1532 0
 1922 000e BB6A     		ldr	r3, [r7, #40]
 1923 0010 002B     		cmp	r3, #0
 1924 0012 09D1     		bne	.L139
 1925              	.LBB128:
 1926              	.LBB129:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1927              		.loc 2 237 0 discriminator 1
 1928              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1929 0014 4FF05003 			mov r3, #80												
 1930 0018 83F31188 		msr basepri, r3											
 1931 001c BFF36F8F 		isb														
 1932 0020 BFF34F8F 		dsb														
 1933              	
 1934              	@ 0 "" 2
 1935              		.thumb
 1936 0024 FB61     		str	r3, [r7, #28]
 1937              	.L140:
 1938              	.LBE129:
 1939              	.LBE128:
 1940              		.loc 1 1532 0 discriminator 1
 1941 0026 FEE7     		b	.L140
 1942              	.L139:
1533:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1943              		.loc 1 1533 0
 1944 0028 3B68     		ldr	r3, [r7]
 1945 002a 002B     		cmp	r3, #0
 1946 002c 03D1     		bne	.L141
 1947              		.loc 1 1533 0 is_stmt 0 discriminator 2
 1948 002e BB6A     		ldr	r3, [r7, #40]
 1949 0030 1B6C     		ldr	r3, [r3, #64]
 1950 0032 002B     		cmp	r3, #0
 1951 0034 01D1     		bne	.L142
 1952              	.L141:
 1953              		.loc 1 1533 0 discriminator 3
 1954 0036 0123     		movs	r3, #1
 1955 0038 00E0     		b	.L143
 1956              	.L142:
 1957              		.loc 1 1533 0 discriminator 4
 1958 003a 0023     		movs	r3, #0
 1959              	.L143:
 1960              		.loc 1 1533 0 discriminator 6
 1961 003c 002B     		cmp	r3, #0
 1962 003e 09D1     		bne	.L144
 1963              	.LBB130:
 1964              	.LBB131:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
ARM GAS  /tmp/cc3YdTbX.s 			page 67


 1965              		.loc 2 237 0 is_stmt 1 discriminator 7
 1966              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1967 0040 4FF05003 			mov r3, #80												
 1968 0044 83F31188 		msr basepri, r3											
 1969 0048 BFF36F8F 		isb														
 1970 004c BFF34F8F 		dsb														
 1971              	
 1972              	@ 0 "" 2
 1973              		.thumb
 1974 0050 BB61     		str	r3, [r7, #24]
 1975              	.L145:
 1976              	.LBE131:
 1977              	.LBE130:
 1978              		.loc 1 1533 0 discriminator 2
 1979 0052 FEE7     		b	.L145
 1980              	.L144:
1534:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 1981              		.loc 1 1534 0
 1982 0054 BB6A     		ldr	r3, [r7, #40]
 1983 0056 1B6C     		ldr	r3, [r3, #64]
 1984 0058 002B     		cmp	r3, #0
 1985 005a 09D1     		bne	.L146
 1986              	.LBB132:
 1987              	.LBB133:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1988              		.loc 2 237 0 discriminator 1
 1989              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1990 005c 4FF05003 			mov r3, #80												
 1991 0060 83F31188 		msr basepri, r3											
 1992 0064 BFF36F8F 		isb														
 1993 0068 BFF34F8F 		dsb														
 1994              	
 1995              	@ 0 "" 2
 1996              		.thumb
 1997 006c 7B61     		str	r3, [r7, #20]
 1998              	.L147:
 1999              	.LBE133:
 2000              	.LBE132:
 2001              		.loc 1 1534 0 discriminator 3
 2002 006e FEE7     		b	.L147
 2003              	.L146:
1535:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1536:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1537:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1538:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1539:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1540:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1541:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1542:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1543:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1544:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1545:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1546:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1547:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1548:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1549:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1550:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
ARM GAS  /tmp/cc3YdTbX.s 			page 68


 2004              		.loc 1 1550 0
 2005 0070 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2006              	.LBB134:
 2007              	.LBB135:
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2008              		.loc 2 253 0
 2009              	@ 253 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2010 0074 EFF31182 			mrs r2, basepri											
 2011 0078 4FF05003 		mov r3, #80												
 2012 007c 83F31188 		msr basepri, r3											
 2013 0080 BFF36F8F 		isb														
 2014 0084 BFF34F8F 		dsb														
 2015              	
 2016              	@ 0 "" 2
 2017              		.thumb
 2018 0088 3A61     		str	r2, [r7, #16]
 2019 008a FB60     		str	r3, [r7, #12]
 265:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 2020              		.loc 2 265 0
 2021 008c 3B69     		ldr	r3, [r7, #16]
 2022              	.LBE135:
 2023              	.LBE134:
1551:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1552:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 2024              		.loc 1 1552 0
 2025 008e 7B62     		str	r3, [r7, #36]
1553:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1554:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1555:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 2026              		.loc 1 1555 0
 2027 0090 BB6A     		ldr	r3, [r7, #40]
 2028 0092 9B6B     		ldr	r3, [r3, #56]
 2029 0094 002B     		cmp	r3, #0
 2030 0096 0CD0     		beq	.L149
1556:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1557:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR( pxQueue );
1558:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1559:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Remember the read position so it can be reset as nothing is
1560:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			actually being removed from the queue. */
1561:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 2031              		.loc 1 1561 0
 2032 0098 BB6A     		ldr	r3, [r7, #40]
 2033 009a DB68     		ldr	r3, [r3, #12]
 2034 009c 3B62     		str	r3, [r7, #32]
1562:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 2035              		.loc 1 1562 0
 2036 009e B86A     		ldr	r0, [r7, #40]
 2037 00a0 3968     		ldr	r1, [r7]
 2038 00a2 FFF7FEFF 		bl	prvCopyDataFromQueue
1563:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 2039              		.loc 1 1563 0
 2040 00a6 BB6A     		ldr	r3, [r7, #40]
 2041 00a8 3A6A     		ldr	r2, [r7, #32]
 2042 00aa DA60     		str	r2, [r3, #12]
1564:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1565:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 2043              		.loc 1 1565 0
ARM GAS  /tmp/cc3YdTbX.s 			page 69


 2044 00ac 0123     		movs	r3, #1
 2045 00ae FB62     		str	r3, [r7, #44]
 2046 00b0 01E0     		b	.L150
 2047              	.L149:
1566:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1567:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1568:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1569:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
 2048              		.loc 1 1569 0
 2049 00b2 0023     		movs	r3, #0
 2050 00b4 FB62     		str	r3, [r7, #44]
 2051              	.L150:
 2052 00b6 7B6A     		ldr	r3, [r7, #36]
 2053 00b8 BB60     		str	r3, [r7, #8]
 2054              	.LBB136:
 2055              	.LBB137:
 2056              		.loc 2 271 0
 2057 00ba BB68     		ldr	r3, [r7, #8]
 2058              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2059 00bc 83F31188 			msr basepri, r3	
 2060              	@ 0 "" 2
 2061              		.thumb
 2062              	.LBE137:
 2063              	.LBE136:
1570:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
1571:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1572:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1573:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1574:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1575:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
 2064              		.loc 1 1575 0
 2065 00c0 FB6A     		ldr	r3, [r7, #44]
1576:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 2066              		.loc 1 1576 0
 2067 00c2 1846     		mov	r0, r3
 2068 00c4 3037     		adds	r7, r7, #48
 2069              	.LCFI53:
 2070              		.cfi_def_cfa_offset 8
 2071 00c6 BD46     		mov	sp, r7
 2072              	.LCFI54:
 2073              		.cfi_def_cfa_register 13
 2074              		@ sp needed
 2075 00c8 80BD     		pop	{r7, pc}
 2076              		.cfi_endproc
 2077              	.LFE15:
 2079 00ca 00BF     		.section	.text.uxQueueMessagesWaiting,"ax",%progbits
 2080              		.align	2
 2081              		.global	uxQueueMessagesWaiting
 2082              		.thumb
 2083              		.thumb_func
 2085              	uxQueueMessagesWaiting:
 2086              	.LFB16:
1577:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1578:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1579:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
1580:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 2087              		.loc 1 1580 0
ARM GAS  /tmp/cc3YdTbX.s 			page 70


 2088              		.cfi_startproc
 2089              		@ args = 0, pretend = 0, frame = 16
 2090              		@ frame_needed = 1, uses_anonymous_args = 0
 2091 0000 80B5     		push	{r7, lr}
 2092              	.LCFI55:
 2093              		.cfi_def_cfa_offset 8
 2094              		.cfi_offset 7, -8
 2095              		.cfi_offset 14, -4
 2096 0002 84B0     		sub	sp, sp, #16
 2097              	.LCFI56:
 2098              		.cfi_def_cfa_offset 24
 2099 0004 00AF     		add	r7, sp, #0
 2100              	.LCFI57:
 2101              		.cfi_def_cfa_register 7
 2102 0006 7860     		str	r0, [r7, #4]
1581:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
1582:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1583:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
 2103              		.loc 1 1583 0
 2104 0008 7B68     		ldr	r3, [r7, #4]
 2105 000a 002B     		cmp	r3, #0
 2106 000c 09D1     		bne	.L153
 2107              	.LBB138:
 2108              	.LBB139:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2109              		.loc 2 237 0 discriminator 1
 2110              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2111 000e 4FF05003 			mov r3, #80												
 2112 0012 83F31188 		msr basepri, r3											
 2113 0016 BFF36F8F 		isb														
 2114 001a BFF34F8F 		dsb														
 2115              	
 2116              	@ 0 "" 2
 2117              		.thumb
 2118 001e BB60     		str	r3, [r7, #8]
 2119              	.L154:
 2120              	.LBE139:
 2121              	.LBE138:
 2122              		.loc 1 1583 0 discriminator 1
 2123 0020 FEE7     		b	.L154
 2124              	.L153:
1584:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1585:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 2125              		.loc 1 1585 0
 2126 0022 FFF7FEFF 		bl	vPortEnterCritical
1586:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1587:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 2127              		.loc 1 1587 0
 2128 0026 7B68     		ldr	r3, [r7, #4]
 2129 0028 9B6B     		ldr	r3, [r3, #56]
 2130 002a FB60     		str	r3, [r7, #12]
1588:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1589:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 2131              		.loc 1 1589 0
 2132 002c FFF7FEFF 		bl	vPortExitCritical
1590:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1591:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return uxReturn;
ARM GAS  /tmp/cc3YdTbX.s 			page 71


 2133              		.loc 1 1591 0
 2134 0030 FB68     		ldr	r3, [r7, #12]
1592:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 2135              		.loc 1 1592 0
 2136 0032 1846     		mov	r0, r3
 2137 0034 1037     		adds	r7, r7, #16
 2138              	.LCFI58:
 2139              		.cfi_def_cfa_offset 8
 2140 0036 BD46     		mov	sp, r7
 2141              	.LCFI59:
 2142              		.cfi_def_cfa_register 13
 2143              		@ sp needed
 2144 0038 80BD     		pop	{r7, pc}
 2145              		.cfi_endproc
 2146              	.LFE16:
 2148 003a 00BF     		.section	.text.uxQueueSpacesAvailable,"ax",%progbits
 2149              		.align	2
 2150              		.global	uxQueueSpacesAvailable
 2151              		.thumb
 2152              		.thumb_func
 2154              	uxQueueSpacesAvailable:
 2155              	.LFB17:
1593:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1594:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1595:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
1596:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 2156              		.loc 1 1596 0
 2157              		.cfi_startproc
 2158              		@ args = 0, pretend = 0, frame = 24
 2159              		@ frame_needed = 1, uses_anonymous_args = 0
 2160 0000 80B5     		push	{r7, lr}
 2161              	.LCFI60:
 2162              		.cfi_def_cfa_offset 8
 2163              		.cfi_offset 7, -8
 2164              		.cfi_offset 14, -4
 2165 0002 86B0     		sub	sp, sp, #24
 2166              	.LCFI61:
 2167              		.cfi_def_cfa_offset 32
 2168 0004 00AF     		add	r7, sp, #0
 2169              	.LCFI62:
 2170              		.cfi_def_cfa_register 7
 2171 0006 7860     		str	r0, [r7, #4]
1597:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
1598:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t *pxQueue;
1599:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1600:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	pxQueue = ( Queue_t * ) xQueue;
 2172              		.loc 1 1600 0
 2173 0008 7B68     		ldr	r3, [r7, #4]
 2174 000a 7B61     		str	r3, [r7, #20]
1601:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 2175              		.loc 1 1601 0
 2176 000c 7B69     		ldr	r3, [r7, #20]
 2177 000e 002B     		cmp	r3, #0
 2178 0010 09D1     		bne	.L157
 2179              	.LBB140:
 2180              	.LBB141:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
ARM GAS  /tmp/cc3YdTbX.s 			page 72


 2181              		.loc 2 237 0 discriminator 1
 2182              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2183 0012 4FF05003 			mov r3, #80												
 2184 0016 83F31188 		msr basepri, r3											
 2185 001a BFF36F8F 		isb														
 2186 001e BFF34F8F 		dsb														
 2187              	
 2188              	@ 0 "" 2
 2189              		.thumb
 2190 0022 FB60     		str	r3, [r7, #12]
 2191              	.L158:
 2192              	.LBE141:
 2193              	.LBE140:
 2194              		.loc 1 1601 0 discriminator 1
 2195 0024 FEE7     		b	.L158
 2196              	.L157:
1602:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1603:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 2197              		.loc 1 1603 0
 2198 0026 FFF7FEFF 		bl	vPortEnterCritical
1604:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1605:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 2199              		.loc 1 1605 0
 2200 002a 7B69     		ldr	r3, [r7, #20]
 2201 002c DA6B     		ldr	r2, [r3, #60]
 2202 002e 7B69     		ldr	r3, [r7, #20]
 2203 0030 9B6B     		ldr	r3, [r3, #56]
 2204 0032 D31A     		subs	r3, r2, r3
 2205 0034 3B61     		str	r3, [r7, #16]
1606:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1607:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 2206              		.loc 1 1607 0
 2207 0036 FFF7FEFF 		bl	vPortExitCritical
1608:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1609:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return uxReturn;
 2208              		.loc 1 1609 0
 2209 003a 3B69     		ldr	r3, [r7, #16]
1610:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 2210              		.loc 1 1610 0
 2211 003c 1846     		mov	r0, r3
 2212 003e 1837     		adds	r7, r7, #24
 2213              	.LCFI63:
 2214              		.cfi_def_cfa_offset 8
 2215 0040 BD46     		mov	sp, r7
 2216              	.LCFI64:
 2217              		.cfi_def_cfa_register 13
 2218              		@ sp needed
 2219 0042 80BD     		pop	{r7, pc}
 2220              		.cfi_endproc
 2221              	.LFE17:
 2223              		.section	.text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 2224              		.align	2
 2225              		.global	uxQueueMessagesWaitingFromISR
 2226              		.thumb
 2227              		.thumb_func
 2229              	uxQueueMessagesWaitingFromISR:
 2230              	.LFB18:
ARM GAS  /tmp/cc3YdTbX.s 			page 73


1611:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1612:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1613:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
1614:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 2231              		.loc 1 1614 0
 2232              		.cfi_startproc
 2233              		@ args = 0, pretend = 0, frame = 16
 2234              		@ frame_needed = 1, uses_anonymous_args = 0
 2235              		@ link register save eliminated.
 2236 0000 80B4     		push	{r7}
 2237              	.LCFI65:
 2238              		.cfi_def_cfa_offset 4
 2239              		.cfi_offset 7, -4
 2240 0002 85B0     		sub	sp, sp, #20
 2241              	.LCFI66:
 2242              		.cfi_def_cfa_offset 24
 2243 0004 00AF     		add	r7, sp, #0
 2244              	.LCFI67:
 2245              		.cfi_def_cfa_register 7
 2246 0006 7860     		str	r0, [r7, #4]
1615:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
1616:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1617:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
 2247              		.loc 1 1617 0
 2248 0008 7B68     		ldr	r3, [r7, #4]
 2249 000a 002B     		cmp	r3, #0
 2250 000c 09D1     		bne	.L161
 2251              	.LBB142:
 2252              	.LBB143:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2253              		.loc 2 237 0 discriminator 1
 2254              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2255 000e 4FF05003 			mov r3, #80												
 2256 0012 83F31188 		msr basepri, r3											
 2257 0016 BFF36F8F 		isb														
 2258 001a BFF34F8F 		dsb														
 2259              	
 2260              	@ 0 "" 2
 2261              		.thumb
 2262 001e BB60     		str	r3, [r7, #8]
 2263              	.L162:
 2264              	.LBE143:
 2265              	.LBE142:
 2266              		.loc 1 1617 0 discriminator 1
 2267 0020 FEE7     		b	.L162
 2268              	.L161:
1618:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1619:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 2269              		.loc 1 1619 0
 2270 0022 7B68     		ldr	r3, [r7, #4]
 2271 0024 9B6B     		ldr	r3, [r3, #56]
 2272 0026 FB60     		str	r3, [r7, #12]
1620:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1621:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return uxReturn;
 2273              		.loc 1 1621 0
 2274 0028 FB68     		ldr	r3, [r7, #12]
1622:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
ARM GAS  /tmp/cc3YdTbX.s 			page 74


 2275              		.loc 1 1622 0
 2276 002a 1846     		mov	r0, r3
 2277 002c 1437     		adds	r7, r7, #20
 2278              	.LCFI68:
 2279              		.cfi_def_cfa_offset 4
 2280 002e BD46     		mov	sp, r7
 2281              	.LCFI69:
 2282              		.cfi_def_cfa_register 13
 2283              		@ sp needed
 2284 0030 5DF8047B 		ldr	r7, [sp], #4
 2285              	.LCFI70:
 2286              		.cfi_restore 7
 2287              		.cfi_def_cfa_offset 0
 2288 0034 7047     		bx	lr
 2289              		.cfi_endproc
 2290              	.LFE18:
 2292 0036 00BF     		.section	.text.vQueueDelete,"ax",%progbits
 2293              		.align	2
 2294              		.global	vQueueDelete
 2295              		.thumb
 2296              		.thumb_func
 2298              	vQueueDelete:
 2299              	.LFB19:
1623:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1624:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1625:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
1626:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 2300              		.loc 1 1626 0
 2301              		.cfi_startproc
 2302              		@ args = 0, pretend = 0, frame = 16
 2303              		@ frame_needed = 1, uses_anonymous_args = 0
 2304 0000 80B5     		push	{r7, lr}
 2305              	.LCFI71:
 2306              		.cfi_def_cfa_offset 8
 2307              		.cfi_offset 7, -8
 2308              		.cfi_offset 14, -4
 2309 0002 84B0     		sub	sp, sp, #16
 2310              	.LCFI72:
 2311              		.cfi_def_cfa_offset 24
 2312 0004 00AF     		add	r7, sp, #0
 2313              	.LCFI73:
 2314              		.cfi_def_cfa_register 7
 2315 0006 7860     		str	r0, [r7, #4]
1627:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 2316              		.loc 1 1627 0
 2317 0008 7B68     		ldr	r3, [r7, #4]
 2318 000a FB60     		str	r3, [r7, #12]
1628:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1629:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 2319              		.loc 1 1629 0
 2320 000c FB68     		ldr	r3, [r7, #12]
 2321 000e 002B     		cmp	r3, #0
 2322 0010 09D1     		bne	.L165
 2323              	.LBB144:
 2324              	.LBB145:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2325              		.loc 2 237 0 discriminator 1
ARM GAS  /tmp/cc3YdTbX.s 			page 75


 2326              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2327 0012 4FF05003 			mov r3, #80												
 2328 0016 83F31188 		msr basepri, r3											
 2329 001a BFF36F8F 		isb														
 2330 001e BFF34F8F 		dsb														
 2331              	
 2332              	@ 0 "" 2
 2333              		.thumb
 2334 0022 BB60     		str	r3, [r7, #8]
 2335              	.L166:
 2336              	.LBE145:
 2337              	.LBE144:
 2338              		.loc 1 1629 0 discriminator 1
 2339 0024 FEE7     		b	.L166
 2340              	.L165:
1630:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	traceQUEUE_DELETE( pxQueue );
1631:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1632:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( configQUEUE_REGISTRY_SIZE > 0 )
1633:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1634:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		vQueueUnregisterQueue( pxQueue );
 2341              		.loc 1 1634 0
 2342 0026 F868     		ldr	r0, [r7, #12]
 2343 0028 FFF7FEFF 		bl	vQueueUnregisterQueue
1635:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1636:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
1637:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1638:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
1639:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1640:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* The queue can only have been allocated dynamically - free it
1641:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		again. */
1642:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		vPortFree( pxQueue );
 2344              		.loc 1 1642 0
 2345 002c F868     		ldr	r0, [r7, #12]
 2346 002e FFF7FEFF 		bl	vPortFree
1643:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1644:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
1645:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1646:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* The queue could have been allocated statically or dynamically, so
1647:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		check before attempting to free the memory. */
1648:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1649:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1650:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			vPortFree( pxQueue );
1651:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1652:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1653:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1654:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1655:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1656:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1657:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#else
1658:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1659:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* The queue must have been statically allocated, so is not going to be
1660:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		deleted.  Avoid compiler warnings about the unused parameter. */
1661:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( void ) pxQueue;
1662:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1663:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
1664:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 2347              		.loc 1 1664 0
ARM GAS  /tmp/cc3YdTbX.s 			page 76


 2348 0032 1037     		adds	r7, r7, #16
 2349              	.LCFI74:
 2350              		.cfi_def_cfa_offset 8
 2351 0034 BD46     		mov	sp, r7
 2352              	.LCFI75:
 2353              		.cfi_def_cfa_register 13
 2354              		@ sp needed
 2355 0036 80BD     		pop	{r7, pc}
 2356              		.cfi_endproc
 2357              	.LFE19:
 2359              		.section	.text.prvCopyDataToQueue,"ax",%progbits
 2360              		.align	2
 2361              		.thumb
 2362              		.thumb_func
 2364              	prvCopyDataToQueue:
 2365              	.LFB20:
1665:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1666:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1667:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1668:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1669:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
1670:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1671:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
1672:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1673:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1674:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1675:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1676:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1677:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1678:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1679:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
1680:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1681:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
1682:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1683:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1684:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1685:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1686:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1687:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1688:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1689:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
1690:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1691:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
1692:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1693:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1694:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1695:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1696:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1697:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
1698:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 2366              		.loc 1 1698 0
 2367              		.cfi_startproc
 2368              		@ args = 0, pretend = 0, frame = 24
 2369              		@ frame_needed = 1, uses_anonymous_args = 0
 2370 0000 80B5     		push	{r7, lr}
 2371              	.LCFI76:
 2372              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cc3YdTbX.s 			page 77


 2373              		.cfi_offset 7, -8
 2374              		.cfi_offset 14, -4
 2375 0002 86B0     		sub	sp, sp, #24
 2376              	.LCFI77:
 2377              		.cfi_def_cfa_offset 32
 2378 0004 00AF     		add	r7, sp, #0
 2379              	.LCFI78:
 2380              		.cfi_def_cfa_register 7
 2381 0006 F860     		str	r0, [r7, #12]
 2382 0008 B960     		str	r1, [r7, #8]
 2383 000a 7A60     		str	r2, [r7, #4]
1699:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn = pdFALSE;
 2384              		.loc 1 1699 0
 2385 000c 0023     		movs	r3, #0
 2386 000e 7B61     		str	r3, [r7, #20]
1700:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxMessagesWaiting;
1701:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1702:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* This function is called from a critical section. */
1703:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1704:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 2387              		.loc 1 1704 0
 2388 0010 FB68     		ldr	r3, [r7, #12]
 2389 0012 9B6B     		ldr	r3, [r3, #56]
 2390 0014 3B61     		str	r3, [r7, #16]
1705:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1706:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 2391              		.loc 1 1706 0
 2392 0016 FB68     		ldr	r3, [r7, #12]
 2393 0018 1B6C     		ldr	r3, [r3, #64]
 2394 001a 002B     		cmp	r3, #0
 2395 001c 0DD1     		bne	.L168
1707:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1708:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		#if ( configUSE_MUTEXES == 1 )
1709:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1710:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 2396              		.loc 1 1710 0
 2397 001e FB68     		ldr	r3, [r7, #12]
 2398 0020 1B68     		ldr	r3, [r3]
 2399 0022 002B     		cmp	r3, #0
 2400 0024 4FD1     		bne	.L169
1711:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1712:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* The mutex is no longer being held. */
1713:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 2401              		.loc 1 1713 0
 2402 0026 FB68     		ldr	r3, [r7, #12]
 2403 0028 5B68     		ldr	r3, [r3, #4]
 2404 002a 1846     		mov	r0, r3
 2405 002c FFF7FEFF 		bl	xTaskPriorityDisinherit
 2406 0030 7861     		str	r0, [r7, #20]
1714:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->pxMutexHolder = NULL;
 2407              		.loc 1 1714 0
 2408 0032 FB68     		ldr	r3, [r7, #12]
 2409 0034 0022     		movs	r2, #0
 2410 0036 5A60     		str	r2, [r3, #4]
 2411 0038 45E0     		b	.L169
 2412              	.L168:
1715:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
ARM GAS  /tmp/cc3YdTbX.s 			page 78


1716:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1717:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1718:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1719:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1720:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1721:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		#endif /* configUSE_MUTEXES */
1722:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1723:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
 2413              		.loc 1 1723 0
 2414 003a 7B68     		ldr	r3, [r7, #4]
 2415 003c 002B     		cmp	r3, #0
 2416 003e 1AD1     		bne	.L170
1724:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1725:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); 
 2417              		.loc 1 1725 0
 2418 0040 FB68     		ldr	r3, [r7, #12]
 2419 0042 9A68     		ldr	r2, [r3, #8]
 2420 0044 FB68     		ldr	r3, [r7, #12]
 2421 0046 1B6C     		ldr	r3, [r3, #64]
 2422 0048 1046     		mov	r0, r2
 2423 004a B968     		ldr	r1, [r7, #8]
 2424 004c 1A46     		mov	r2, r3
 2425 004e FFF7FEFF 		bl	memcpy
1726:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 2426              		.loc 1 1726 0
 2427 0052 FB68     		ldr	r3, [r7, #12]
 2428 0054 9A68     		ldr	r2, [r3, #8]
 2429 0056 FB68     		ldr	r3, [r7, #12]
 2430 0058 1B6C     		ldr	r3, [r3, #64]
 2431 005a 1A44     		add	r2, r2, r3
 2432 005c FB68     		ldr	r3, [r7, #12]
 2433 005e 9A60     		str	r2, [r3, #8]
1727:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
 2434              		.loc 1 1727 0
 2435 0060 FB68     		ldr	r3, [r7, #12]
 2436 0062 9A68     		ldr	r2, [r3, #8]
 2437 0064 FB68     		ldr	r3, [r7, #12]
 2438 0066 5B68     		ldr	r3, [r3, #4]
 2439 0068 9A42     		cmp	r2, r3
 2440 006a 2CD3     		bcc	.L169
1728:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1729:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
 2441              		.loc 1 1729 0
 2442 006c FB68     		ldr	r3, [r7, #12]
 2443 006e 1A68     		ldr	r2, [r3]
 2444 0070 FB68     		ldr	r3, [r7, #12]
 2445 0072 9A60     		str	r2, [r3, #8]
 2446 0074 27E0     		b	.L169
 2447              	.L170:
1730:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1731:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1732:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1733:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1734:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1735:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1736:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	else
1737:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
ARM GAS  /tmp/cc3YdTbX.s 			page 79


1738:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize 
 2448              		.loc 1 1738 0
 2449 0076 FB68     		ldr	r3, [r7, #12]
 2450 0078 DA68     		ldr	r2, [r3, #12]
 2451 007a FB68     		ldr	r3, [r7, #12]
 2452 007c 1B6C     		ldr	r3, [r3, #64]
 2453 007e 1046     		mov	r0, r2
 2454 0080 B968     		ldr	r1, [r7, #8]
 2455 0082 1A46     		mov	r2, r3
 2456 0084 FFF7FEFF 		bl	memcpy
1739:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 2457              		.loc 1 1739 0
 2458 0088 FB68     		ldr	r3, [r7, #12]
 2459 008a DA68     		ldr	r2, [r3, #12]
 2460 008c FB68     		ldr	r3, [r7, #12]
 2461 008e 1B6C     		ldr	r3, [r3, #64]
 2462 0090 5B42     		negs	r3, r3
 2463 0092 1A44     		add	r2, r2, r3
 2464 0094 FB68     		ldr	r3, [r7, #12]
 2465 0096 DA60     		str	r2, [r3, #12]
1740:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
 2466              		.loc 1 1740 0
 2467 0098 FB68     		ldr	r3, [r7, #12]
 2468 009a DA68     		ldr	r2, [r3, #12]
 2469 009c FB68     		ldr	r3, [r7, #12]
 2470 009e 1B68     		ldr	r3, [r3]
 2471 00a0 9A42     		cmp	r2, r3
 2472 00a2 07D2     		bcs	.L171
1741:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1742:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 2473              		.loc 1 1742 0
 2474 00a4 FB68     		ldr	r3, [r7, #12]
 2475 00a6 5A68     		ldr	r2, [r3, #4]
 2476 00a8 FB68     		ldr	r3, [r7, #12]
 2477 00aa 1B6C     		ldr	r3, [r3, #64]
 2478 00ac 5B42     		negs	r3, r3
 2479 00ae 1A44     		add	r2, r2, r3
 2480 00b0 FB68     		ldr	r3, [r7, #12]
 2481 00b2 DA60     		str	r2, [r3, #12]
 2482              	.L171:
1743:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1744:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1745:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1746:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1747:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1748:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1749:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xPosition == queueOVERWRITE )
 2483              		.loc 1 1749 0
 2484 00b4 7B68     		ldr	r3, [r7, #4]
 2485 00b6 022B     		cmp	r3, #2
 2486 00b8 05D1     		bne	.L169
1750:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1751:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 2487              		.loc 1 1751 0
 2488 00ba 3B69     		ldr	r3, [r7, #16]
 2489 00bc 002B     		cmp	r3, #0
 2490 00be 02D0     		beq	.L169
ARM GAS  /tmp/cc3YdTbX.s 			page 80


1752:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1753:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* An item is not being added but overwritten, so subtract
1754:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				one from the recorded number of items in the queue so when
1755:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				one is added again below the number of recorded items remains
1756:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				correct. */
1757:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				--uxMessagesWaiting;
 2491              		.loc 1 1757 0
 2492 00c0 3B69     		ldr	r3, [r7, #16]
 2493 00c2 013B     		subs	r3, r3, #1
 2494 00c4 3B61     		str	r3, [r7, #16]
 2495              	.L169:
1758:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1759:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1760:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1761:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1762:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1763:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1764:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1765:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1766:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1767:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1768:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1769:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1770:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 2496              		.loc 1 1770 0
 2497 00c6 3B69     		ldr	r3, [r7, #16]
 2498 00c8 5A1C     		adds	r2, r3, #1
 2499 00ca FB68     		ldr	r3, [r7, #12]
 2500 00cc 9A63     		str	r2, [r3, #56]
1771:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1772:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
 2501              		.loc 1 1772 0
 2502 00ce 7B69     		ldr	r3, [r7, #20]
1773:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 2503              		.loc 1 1773 0
 2504 00d0 1846     		mov	r0, r3
 2505 00d2 1837     		adds	r7, r7, #24
 2506              	.LCFI79:
 2507              		.cfi_def_cfa_offset 8
 2508 00d4 BD46     		mov	sp, r7
 2509              	.LCFI80:
 2510              		.cfi_def_cfa_register 13
 2511              		@ sp needed
 2512 00d6 80BD     		pop	{r7, pc}
 2513              		.cfi_endproc
 2514              	.LFE20:
 2516              		.section	.text.prvCopyDataFromQueue,"ax",%progbits
 2517              		.align	2
 2518              		.thumb
 2519              		.thumb_func
 2521              	prvCopyDataFromQueue:
 2522              	.LFB21:
1774:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1775:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1776:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
1777:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 2523              		.loc 1 1777 0
ARM GAS  /tmp/cc3YdTbX.s 			page 81


 2524              		.cfi_startproc
 2525              		@ args = 0, pretend = 0, frame = 8
 2526              		@ frame_needed = 1, uses_anonymous_args = 0
 2527 0000 80B5     		push	{r7, lr}
 2528              	.LCFI81:
 2529              		.cfi_def_cfa_offset 8
 2530              		.cfi_offset 7, -8
 2531              		.cfi_offset 14, -4
 2532 0002 82B0     		sub	sp, sp, #8
 2533              	.LCFI82:
 2534              		.cfi_def_cfa_offset 16
 2535 0004 00AF     		add	r7, sp, #0
 2536              	.LCFI83:
 2537              		.cfi_def_cfa_register 7
 2538 0006 7860     		str	r0, [r7, #4]
 2539 0008 3960     		str	r1, [r7]
1778:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 2540              		.loc 1 1778 0
 2541 000a 7B68     		ldr	r3, [r7, #4]
 2542 000c 1B6C     		ldr	r3, [r3, #64]
 2543 000e 002B     		cmp	r3, #0
 2544 0010 19D0     		beq	.L173
1779:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1780:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 2545              		.loc 1 1780 0
 2546 0012 7B68     		ldr	r3, [r7, #4]
 2547 0014 DA68     		ldr	r2, [r3, #12]
 2548 0016 7B68     		ldr	r3, [r7, #4]
 2549 0018 1B6C     		ldr	r3, [r3, #64]
 2550 001a 1A44     		add	r2, r2, r3
 2551 001c 7B68     		ldr	r3, [r7, #4]
 2552 001e DA60     		str	r2, [r3, #12]
1781:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
 2553              		.loc 1 1781 0
 2554 0020 7B68     		ldr	r3, [r7, #4]
 2555 0022 DA68     		ldr	r2, [r3, #12]
 2556 0024 7B68     		ldr	r3, [r7, #4]
 2557 0026 5B68     		ldr	r3, [r3, #4]
 2558 0028 9A42     		cmp	r2, r3
 2559 002a 03D3     		bcc	.L175
1782:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1783:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 2560              		.loc 1 1783 0
 2561 002c 7B68     		ldr	r3, [r7, #4]
 2562 002e 1A68     		ldr	r2, [r3]
 2563 0030 7B68     		ldr	r3, [r7, #4]
 2564 0032 DA60     		str	r2, [r3, #12]
 2565              	.L175:
1784:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1785:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1786:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1787:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1788:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1789:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxIte
 2566              		.loc 1 1789 0
 2567 0034 7B68     		ldr	r3, [r7, #4]
 2568 0036 DA68     		ldr	r2, [r3, #12]
ARM GAS  /tmp/cc3YdTbX.s 			page 82


 2569 0038 7B68     		ldr	r3, [r7, #4]
 2570 003a 1B6C     		ldr	r3, [r3, #64]
 2571 003c 3868     		ldr	r0, [r7]
 2572 003e 1146     		mov	r1, r2
 2573 0040 1A46     		mov	r2, r3
 2574 0042 FFF7FEFF 		bl	memcpy
 2575              	.L173:
1790:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1791:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 2576              		.loc 1 1791 0
 2577 0046 0837     		adds	r7, r7, #8
 2578              	.LCFI84:
 2579              		.cfi_def_cfa_offset 8
 2580 0048 BD46     		mov	sp, r7
 2581              	.LCFI85:
 2582              		.cfi_def_cfa_register 13
 2583              		@ sp needed
 2584 004a 80BD     		pop	{r7, pc}
 2585              		.cfi_endproc
 2586              	.LFE21:
 2588              		.section	.text.prvUnlockQueue,"ax",%progbits
 2589              		.align	2
 2590              		.thumb
 2591              		.thumb_func
 2593              	prvUnlockQueue:
 2594              	.LFB22:
1792:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1793:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1794:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
1795:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 2595              		.loc 1 1795 0
 2596              		.cfi_startproc
 2597              		@ args = 0, pretend = 0, frame = 16
 2598              		@ frame_needed = 1, uses_anonymous_args = 0
 2599 0000 80B5     		push	{r7, lr}
 2600              	.LCFI86:
 2601              		.cfi_def_cfa_offset 8
 2602              		.cfi_offset 7, -8
 2603              		.cfi_offset 14, -4
 2604 0002 84B0     		sub	sp, sp, #16
 2605              	.LCFI87:
 2606              		.cfi_def_cfa_offset 24
 2607 0004 00AF     		add	r7, sp, #0
 2608              	.LCFI88:
 2609              		.cfi_def_cfa_register 7
 2610 0006 7860     		str	r0, [r7, #4]
1796:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
1797:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1798:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* The lock counts contains the number of extra data items placed or
1799:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	removed from the queue while the queue was locked.  When a queue is
1800:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	locked items can be added or removed, but the event lists cannot be
1801:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	updated. */
1802:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 2611              		.loc 1 1802 0
 2612 0008 FFF7FEFF 		bl	vPortEnterCritical
 2613              	.LBB146:
1803:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
ARM GAS  /tmp/cc3YdTbX.s 			page 83


1804:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		int8_t cTxLock = pxQueue->cTxLock;
 2614              		.loc 1 1804 0
 2615 000c 7B68     		ldr	r3, [r7, #4]
 2616 000e 93F84530 		ldrb	r3, [r3, #69]
 2617 0012 FB73     		strb	r3, [r7, #15]
1805:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1806:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* See if data was added to the queue while it was locked. */
1807:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		while( cTxLock > queueLOCKED_UNMODIFIED )
 2618              		.loc 1 1807 0
 2619 0014 13E0     		b	.L177
 2620              	.L181:
1808:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1809:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Data was posted while the queue was locked.  Are any tasks
1810:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			blocked waiting for data to become available? */
1811:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
1812:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1813:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( pxQueue->pxQueueSetContainer != NULL )
1814:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1815:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
1816:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1817:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* The queue is a member of a queue set, and posting to
1818:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						the queue set caused a higher priority task to unblock.
1819:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						A context switch is required. */
1820:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						vTaskMissedYield();
1821:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1822:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1823:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1824:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1825:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1826:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1827:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1828:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1829:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Tasks that are removed from the event list will get
1830:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					added to the pending ready list as the scheduler is still
1831:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					suspended. */
1832:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1833:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1834:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1835:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1836:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1837:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							context	switch is required. */
1838:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							vTaskMissedYield();
1839:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1840:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1841:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1842:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1843:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1844:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1845:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1846:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1847:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						break;
1848:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1849:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1850:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1851:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#else /* configUSE_QUEUE_SETS */
1852:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1853:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Tasks that are removed from the event list will get added to
ARM GAS  /tmp/cc3YdTbX.s 			page 84


1854:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				the pending ready list as the scheduler is still suspended. */
1855:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 2621              		.loc 1 1855 0
 2622 0016 7B68     		ldr	r3, [r7, #4]
 2623 0018 5B6A     		ldr	r3, [r3, #36]
 2624 001a 002B     		cmp	r3, #0
 2625 001c 0AD0     		beq	.L178
1856:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1857:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 2626              		.loc 1 1857 0
 2627 001e 7B68     		ldr	r3, [r7, #4]
 2628 0020 2433     		adds	r3, r3, #36
 2629 0022 1846     		mov	r0, r3
 2630 0024 FFF7FEFF 		bl	xTaskRemoveFromEventList
 2631 0028 0346     		mov	r3, r0
 2632 002a 002B     		cmp	r3, #0
 2633 002c 03D0     		beq	.L179
1858:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1859:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* The task waiting has a higher priority so record that
1860:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						a context switch is required. */
1861:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						vTaskMissedYield();
 2634              		.loc 1 1861 0
 2635 002e FFF7FEFF 		bl	vTaskMissedYield
 2636 0032 00E0     		b	.L179
 2637              	.L178:
1862:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1863:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1864:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1865:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1866:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1867:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1868:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1869:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1870:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					break;
 2638              		.loc 1 1870 0
 2639 0034 07E0     		b	.L180
 2640              	.L179:
1871:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1872:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1873:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#endif /* configUSE_QUEUE_SETS */
1874:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1875:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			--cTxLock;
 2641              		.loc 1 1875 0
 2642 0036 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2643 0038 013B     		subs	r3, r3, #1
 2644 003a DBB2     		uxtb	r3, r3
 2645 003c FB73     		strb	r3, [r7, #15]
 2646              	.L177:
1807:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 2647              		.loc 1 1807 0
 2648 003e 97F90F30 		ldrsb	r3, [r7, #15]
 2649 0042 002B     		cmp	r3, #0
 2650 0044 E7DC     		bgt	.L181
 2651              	.L180:
1876:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1877:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1878:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
ARM GAS  /tmp/cc3YdTbX.s 			page 85


 2652              		.loc 1 1878 0
 2653 0046 7B68     		ldr	r3, [r7, #4]
 2654 0048 FF22     		movs	r2, #255
 2655 004a 83F84520 		strb	r2, [r3, #69]
 2656              	.LBE146:
1879:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1880:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 2657              		.loc 1 1880 0
 2658 004e FFF7FEFF 		bl	vPortExitCritical
1881:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1882:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Do the same for the Rx lock. */
1883:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 2659              		.loc 1 1883 0
 2660 0052 FFF7FEFF 		bl	vPortEnterCritical
 2661              	.LBB147:
1884:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1885:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		int8_t cRxLock = pxQueue->cRxLock;
 2662              		.loc 1 1885 0
 2663 0056 7B68     		ldr	r3, [r7, #4]
 2664 0058 93F84430 		ldrb	r3, [r3, #68]
 2665 005c BB73     		strb	r3, [r7, #14]
1886:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1887:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		while( cRxLock > queueLOCKED_UNMODIFIED )
 2666              		.loc 1 1887 0
 2667 005e 13E0     		b	.L182
 2668              	.L186:
1888:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1889:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 2669              		.loc 1 1889 0
 2670 0060 7B68     		ldr	r3, [r7, #4]
 2671 0062 1B69     		ldr	r3, [r3, #16]
 2672 0064 002B     		cmp	r3, #0
 2673 0066 0ED0     		beq	.L183
1890:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1891:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 2674              		.loc 1 1891 0
 2675 0068 7B68     		ldr	r3, [r7, #4]
 2676 006a 1033     		adds	r3, r3, #16
 2677 006c 1846     		mov	r0, r3
 2678 006e FFF7FEFF 		bl	xTaskRemoveFromEventList
 2679 0072 0346     		mov	r3, r0
 2680 0074 002B     		cmp	r3, #0
 2681 0076 01D0     		beq	.L184
1892:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1893:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vTaskMissedYield();
 2682              		.loc 1 1893 0
 2683 0078 FFF7FEFF 		bl	vTaskMissedYield
 2684              	.L184:
1894:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1895:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1896:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1897:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1898:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1899:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1900:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				--cRxLock;
 2685              		.loc 1 1900 0
 2686 007c BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
ARM GAS  /tmp/cc3YdTbX.s 			page 86


 2687 007e 013B     		subs	r3, r3, #1
 2688 0080 DBB2     		uxtb	r3, r3
 2689 0082 BB73     		strb	r3, [r7, #14]
 2690 0084 00E0     		b	.L182
 2691              	.L183:
1901:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1902:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1903:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1904:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				break;
 2692              		.loc 1 1904 0
 2693 0086 03E0     		b	.L185
 2694              	.L182:
1887:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 2695              		.loc 1 1887 0
 2696 0088 97F90E30 		ldrsb	r3, [r7, #14]
 2697 008c 002B     		cmp	r3, #0
 2698 008e E7DC     		bgt	.L186
 2699              	.L185:
1905:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1906:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1907:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1908:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 2700              		.loc 1 1908 0
 2701 0090 7B68     		ldr	r3, [r7, #4]
 2702 0092 FF22     		movs	r2, #255
 2703 0094 83F84420 		strb	r2, [r3, #68]
 2704              	.LBE147:
1909:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1910:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 2705              		.loc 1 1910 0
 2706 0098 FFF7FEFF 		bl	vPortExitCritical
1911:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 2707              		.loc 1 1911 0
 2708 009c 1037     		adds	r7, r7, #16
 2709              	.LCFI89:
 2710              		.cfi_def_cfa_offset 8
 2711 009e BD46     		mov	sp, r7
 2712              	.LCFI90:
 2713              		.cfi_def_cfa_register 13
 2714              		@ sp needed
 2715 00a0 80BD     		pop	{r7, pc}
 2716              		.cfi_endproc
 2717              	.LFE22:
 2719 00a2 00BF     		.section	.text.prvIsQueueEmpty,"ax",%progbits
 2720              		.align	2
 2721              		.thumb
 2722              		.thumb_func
 2724              	prvIsQueueEmpty:
 2725              	.LFB23:
1912:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1913:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1914:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
1915:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 2726              		.loc 1 1915 0
 2727              		.cfi_startproc
 2728              		@ args = 0, pretend = 0, frame = 16
 2729              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/cc3YdTbX.s 			page 87


 2730 0000 80B5     		push	{r7, lr}
 2731              	.LCFI91:
 2732              		.cfi_def_cfa_offset 8
 2733              		.cfi_offset 7, -8
 2734              		.cfi_offset 14, -4
 2735 0002 84B0     		sub	sp, sp, #16
 2736              	.LCFI92:
 2737              		.cfi_def_cfa_offset 24
 2738 0004 00AF     		add	r7, sp, #0
 2739              	.LCFI93:
 2740              		.cfi_def_cfa_register 7
 2741 0006 7860     		str	r0, [r7, #4]
1916:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1917:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1918:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 2742              		.loc 1 1918 0
 2743 0008 FFF7FEFF 		bl	vPortEnterCritical
1919:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1920:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 2744              		.loc 1 1920 0
 2745 000c 7B68     		ldr	r3, [r7, #4]
 2746 000e 9B6B     		ldr	r3, [r3, #56]
 2747 0010 002B     		cmp	r3, #0
 2748 0012 02D1     		bne	.L188
1921:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1922:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdTRUE;
 2749              		.loc 1 1922 0
 2750 0014 0123     		movs	r3, #1
 2751 0016 FB60     		str	r3, [r7, #12]
 2752 0018 01E0     		b	.L189
 2753              	.L188:
1923:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1924:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1925:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1926:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFALSE;
 2754              		.loc 1 1926 0
 2755 001a 0023     		movs	r3, #0
 2756 001c FB60     		str	r3, [r7, #12]
 2757              	.L189:
1927:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1928:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1929:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 2758              		.loc 1 1929 0
 2759 001e FFF7FEFF 		bl	vPortExitCritical
1930:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1931:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
 2760              		.loc 1 1931 0
 2761 0022 FB68     		ldr	r3, [r7, #12]
1932:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 2762              		.loc 1 1932 0
 2763 0024 1846     		mov	r0, r3
 2764 0026 1037     		adds	r7, r7, #16
 2765              	.LCFI94:
 2766              		.cfi_def_cfa_offset 8
 2767 0028 BD46     		mov	sp, r7
 2768              	.LCFI95:
 2769              		.cfi_def_cfa_register 13
ARM GAS  /tmp/cc3YdTbX.s 			page 88


 2770              		@ sp needed
 2771 002a 80BD     		pop	{r7, pc}
 2772              		.cfi_endproc
 2773              	.LFE23:
 2775              		.section	.text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 2776              		.align	2
 2777              		.global	xQueueIsQueueEmptyFromISR
 2778              		.thumb
 2779              		.thumb_func
 2781              	xQueueIsQueueEmptyFromISR:
 2782              	.LFB24:
1933:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1934:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1935:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
1936:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 2783              		.loc 1 1936 0
 2784              		.cfi_startproc
 2785              		@ args = 0, pretend = 0, frame = 16
 2786              		@ frame_needed = 1, uses_anonymous_args = 0
 2787              		@ link register save eliminated.
 2788 0000 80B4     		push	{r7}
 2789              	.LCFI96:
 2790              		.cfi_def_cfa_offset 4
 2791              		.cfi_offset 7, -4
 2792 0002 85B0     		sub	sp, sp, #20
 2793              	.LCFI97:
 2794              		.cfi_def_cfa_offset 24
 2795 0004 00AF     		add	r7, sp, #0
 2796              	.LCFI98:
 2797              		.cfi_def_cfa_register 7
 2798 0006 7860     		str	r0, [r7, #4]
1937:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1938:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1939:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
 2799              		.loc 1 1939 0
 2800 0008 7B68     		ldr	r3, [r7, #4]
 2801 000a 002B     		cmp	r3, #0
 2802 000c 09D1     		bne	.L192
 2803              	.LBB148:
 2804              	.LBB149:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2805              		.loc 2 237 0 discriminator 1
 2806              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2807 000e 4FF05003 			mov r3, #80												
 2808 0012 83F31188 		msr basepri, r3											
 2809 0016 BFF36F8F 		isb														
 2810 001a BFF34F8F 		dsb														
 2811              	
 2812              	@ 0 "" 2
 2813              		.thumb
 2814 001e BB60     		str	r3, [r7, #8]
 2815              	.L193:
 2816              	.LBE149:
 2817              	.LBE148:
 2818              		.loc 1 1939 0 discriminator 1
 2819 0020 FEE7     		b	.L193
 2820              	.L192:
ARM GAS  /tmp/cc3YdTbX.s 			page 89


1940:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
 2821              		.loc 1 1940 0
 2822 0022 7B68     		ldr	r3, [r7, #4]
 2823 0024 9B6B     		ldr	r3, [r3, #56]
 2824 0026 002B     		cmp	r3, #0
 2825 0028 02D1     		bne	.L194
1941:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1942:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xReturn = pdTRUE;
 2826              		.loc 1 1942 0
 2827 002a 0123     		movs	r3, #1
 2828 002c FB60     		str	r3, [r7, #12]
 2829 002e 01E0     		b	.L195
 2830              	.L194:
1943:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1944:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	else
1945:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1946:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xReturn = pdFALSE;
 2831              		.loc 1 1946 0
 2832 0030 0023     		movs	r3, #0
 2833 0032 FB60     		str	r3, [r7, #12]
 2834              	.L195:
1947:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1948:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1949:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
 2835              		.loc 1 1949 0
 2836 0034 FB68     		ldr	r3, [r7, #12]
1950:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 2837              		.loc 1 1950 0
 2838 0036 1846     		mov	r0, r3
 2839 0038 1437     		adds	r7, r7, #20
 2840              	.LCFI99:
 2841              		.cfi_def_cfa_offset 4
 2842 003a BD46     		mov	sp, r7
 2843              	.LCFI100:
 2844              		.cfi_def_cfa_register 13
 2845              		@ sp needed
 2846 003c 5DF8047B 		ldr	r7, [sp], #4
 2847              	.LCFI101:
 2848              		.cfi_restore 7
 2849              		.cfi_def_cfa_offset 0
 2850 0040 7047     		bx	lr
 2851              		.cfi_endproc
 2852              	.LFE24:
 2854 0042 00BF     		.section	.text.prvIsQueueFull,"ax",%progbits
 2855              		.align	2
 2856              		.thumb
 2857              		.thumb_func
 2859              	prvIsQueueFull:
 2860              	.LFB25:
1951:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1952:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1953:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
1954:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 2861              		.loc 1 1954 0
 2862              		.cfi_startproc
 2863              		@ args = 0, pretend = 0, frame = 16
 2864              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/cc3YdTbX.s 			page 90


 2865 0000 80B5     		push	{r7, lr}
 2866              	.LCFI102:
 2867              		.cfi_def_cfa_offset 8
 2868              		.cfi_offset 7, -8
 2869              		.cfi_offset 14, -4
 2870 0002 84B0     		sub	sp, sp, #16
 2871              	.LCFI103:
 2872              		.cfi_def_cfa_offset 24
 2873 0004 00AF     		add	r7, sp, #0
 2874              	.LCFI104:
 2875              		.cfi_def_cfa_register 7
 2876 0006 7860     		str	r0, [r7, #4]
1955:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1956:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1957:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 2877              		.loc 1 1957 0
 2878 0008 FFF7FEFF 		bl	vPortEnterCritical
1958:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1959:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 2879              		.loc 1 1959 0
 2880 000c 7B68     		ldr	r3, [r7, #4]
 2881 000e 9A6B     		ldr	r2, [r3, #56]
 2882 0010 7B68     		ldr	r3, [r7, #4]
 2883 0012 DB6B     		ldr	r3, [r3, #60]
 2884 0014 9A42     		cmp	r2, r3
 2885 0016 02D1     		bne	.L198
1960:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1961:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdTRUE;
 2886              		.loc 1 1961 0
 2887 0018 0123     		movs	r3, #1
 2888 001a FB60     		str	r3, [r7, #12]
 2889 001c 01E0     		b	.L199
 2890              	.L198:
1962:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1963:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1964:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1965:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFALSE;
 2891              		.loc 1 1965 0
 2892 001e 0023     		movs	r3, #0
 2893 0020 FB60     		str	r3, [r7, #12]
 2894              	.L199:
1966:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1967:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1968:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 2895              		.loc 1 1968 0
 2896 0022 FFF7FEFF 		bl	vPortExitCritical
1969:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1970:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
 2897              		.loc 1 1970 0
 2898 0026 FB68     		ldr	r3, [r7, #12]
1971:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 2899              		.loc 1 1971 0
 2900 0028 1846     		mov	r0, r3
 2901 002a 1037     		adds	r7, r7, #16
 2902              	.LCFI105:
 2903              		.cfi_def_cfa_offset 8
 2904 002c BD46     		mov	sp, r7
ARM GAS  /tmp/cc3YdTbX.s 			page 91


 2905              	.LCFI106:
 2906              		.cfi_def_cfa_register 13
 2907              		@ sp needed
 2908 002e 80BD     		pop	{r7, pc}
 2909              		.cfi_endproc
 2910              	.LFE25:
 2912              		.section	.text.xQueueIsQueueFullFromISR,"ax",%progbits
 2913              		.align	2
 2914              		.global	xQueueIsQueueFullFromISR
 2915              		.thumb
 2916              		.thumb_func
 2918              	xQueueIsQueueFullFromISR:
 2919              	.LFB26:
1972:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1973:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1974:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
1975:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 2920              		.loc 1 1975 0
 2921              		.cfi_startproc
 2922              		@ args = 0, pretend = 0, frame = 16
 2923              		@ frame_needed = 1, uses_anonymous_args = 0
 2924              		@ link register save eliminated.
 2925 0000 80B4     		push	{r7}
 2926              	.LCFI107:
 2927              		.cfi_def_cfa_offset 4
 2928              		.cfi_offset 7, -4
 2929 0002 85B0     		sub	sp, sp, #20
 2930              	.LCFI108:
 2931              		.cfi_def_cfa_offset 24
 2932 0004 00AF     		add	r7, sp, #0
 2933              	.LCFI109:
 2934              		.cfi_def_cfa_register 7
 2935 0006 7860     		str	r0, [r7, #4]
1976:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1977:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1978:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
 2936              		.loc 1 1978 0
 2937 0008 7B68     		ldr	r3, [r7, #4]
 2938 000a 002B     		cmp	r3, #0
 2939 000c 09D1     		bne	.L202
 2940              	.LBB150:
 2941              	.LBB151:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2942              		.loc 2 237 0 discriminator 1
 2943              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2944 000e 4FF05003 			mov r3, #80												
 2945 0012 83F31188 		msr basepri, r3											
 2946 0016 BFF36F8F 		isb														
 2947 001a BFF34F8F 		dsb														
 2948              	
 2949              	@ 0 "" 2
 2950              		.thumb
 2951 001e BB60     		str	r3, [r7, #8]
 2952              	.L203:
 2953              	.LBE151:
 2954              	.LBE150:
 2955              		.loc 1 1978 0 discriminator 1
ARM GAS  /tmp/cc3YdTbX.s 			page 92


 2956 0020 FEE7     		b	.L203
 2957              	.L202:
1979:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 2958              		.loc 1 1979 0
 2959 0022 7B68     		ldr	r3, [r7, #4]
 2960 0024 9A6B     		ldr	r2, [r3, #56]
 2961 0026 7B68     		ldr	r3, [r7, #4]
 2962 0028 DB6B     		ldr	r3, [r3, #60]
 2963 002a 9A42     		cmp	r2, r3
 2964 002c 02D1     		bne	.L204
1980:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1981:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xReturn = pdTRUE;
 2965              		.loc 1 1981 0
 2966 002e 0123     		movs	r3, #1
 2967 0030 FB60     		str	r3, [r7, #12]
 2968 0032 01E0     		b	.L205
 2969              	.L204:
1982:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1983:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	else
1984:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1985:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xReturn = pdFALSE;
 2970              		.loc 1 1985 0
 2971 0034 0023     		movs	r3, #0
 2972 0036 FB60     		str	r3, [r7, #12]
 2973              	.L205:
1986:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1987:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1988:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
 2974              		.loc 1 1988 0
 2975 0038 FB68     		ldr	r3, [r7, #12]
1989:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 2976              		.loc 1 1989 0
 2977 003a 1846     		mov	r0, r3
 2978 003c 1437     		adds	r7, r7, #20
 2979              	.LCFI110:
 2980              		.cfi_def_cfa_offset 4
 2981 003e BD46     		mov	sp, r7
 2982              	.LCFI111:
 2983              		.cfi_def_cfa_register 13
 2984              		@ sp needed
 2985 0040 5DF8047B 		ldr	r7, [sp], #4
 2986              	.LCFI112:
 2987              		.cfi_restore 7
 2988              		.cfi_def_cfa_offset 0
 2989 0044 7047     		bx	lr
 2990              		.cfi_endproc
 2991              	.LFE26:
 2993 0046 00BF     		.section	.text.vQueueAddToRegistry,"ax",%progbits
 2994              		.align	2
 2995              		.global	vQueueAddToRegistry
 2996              		.thumb
 2997              		.thumb_func
 2999              	vQueueAddToRegistry:
 3000              	.LFB27:
1990:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1991:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1992:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
ARM GAS  /tmp/cc3YdTbX.s 			page 93


1993:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1994:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait 
1995:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1996:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
1997:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1998:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1999:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* If the queue is already full we may have to block.  A critical section
2000:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		is required to prevent an interrupt removing something from the queue
2001:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		between the check to see if the queue is full and blocking on the queue. */
2002:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2003:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2004:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
2005:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2006:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* The queue is full - do we want to block or just leave without
2007:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				posting? */
2008:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2009:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2010:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* As this is called from a coroutine we cannot block directly, but
2011:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return indicating that we need to block. */
2012:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
2013:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
2014:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_BLOCKED;
2015:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2016:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2017:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2018:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
2019:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
2020:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2021:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2022:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2023:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2024:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2025:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2026:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2027:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2028:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2029:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* There is room in the queue, copy the data into the queue. */
2030:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2031:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xReturn = pdPASS;
2032:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2033:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Were any co-routines waiting for data to become available? */
2034:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2035:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2036:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* In this instance the co-routine could be placed directly
2037:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					into the ready list as we are within a critical section.
2038:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					Instead the same pending ready list mechanism is used as if
2039:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the event were caused from within an interrupt. */
2040:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2041:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2042:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* The co-routine waiting has a higher priority so record
2043:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						that a yield might be appropriate. */
2044:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						xReturn = errQUEUE_YIELD;
2045:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2046:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2047:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2048:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2049:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
ARM GAS  /tmp/cc3YdTbX.s 			page 94


2050:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2051:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2052:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2053:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2054:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2055:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2056:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2057:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2058:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xReturn = errQUEUE_FULL;
2059:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2060:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2061:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2062:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2063:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xReturn;
2064:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2065:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2066:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2067:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2068:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2069:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2070:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2071:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait )
2072:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2073:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
2074:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2075:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2076:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* If the queue is already empty we may have to block.  A critical section
2077:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		is required to prevent an interrupt adding something to the queue
2078:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		between the check to see if the queue is empty and blocking on the queue. */
2079:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2080:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2081:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2082:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2083:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* There are no messages in the queue, do we want to block or just
2084:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				leave with nothing? */
2085:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2086:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2087:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* As this is a co-routine we cannot block directly, but return
2088:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					indicating that we need to block. */
2089:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
2090:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
2091:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_BLOCKED;
2092:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2093:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2094:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2095:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
2096:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
2097:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2098:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2099:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2100:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2101:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2102:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2103:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2104:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2105:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2106:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
ARM GAS  /tmp/cc3YdTbX.s 			page 95


2107:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2108:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2109:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2110:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Data is available from the queue. */
2111:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2112:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
2113:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2114:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					pxQueue->u.pcReadFrom = pxQueue->pcHead;
2115:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2116:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2117:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2118:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2119:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2120:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				--( pxQueue->uxMessagesWaiting );
2121:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->u
2122:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2123:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xReturn = pdPASS;
2124:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2125:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Were any co-routines waiting for space to become available? */
2126:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2127:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2128:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* In this instance the co-routine could be placed directly
2129:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					into the ready list as we are within a critical section.
2130:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					Instead the same pending ready list mechanism is used as if
2131:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the event were caused from within an interrupt. */
2132:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2133:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2134:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						xReturn = errQUEUE_YIELD;
2135:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2136:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2137:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2138:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2139:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2140:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2141:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2142:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2143:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2144:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2145:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2146:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2147:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2148:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xReturn = pdFAIL;
2149:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2150:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2151:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2152:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2153:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xReturn;
2154:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2155:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2156:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2157:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2158:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2159:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2160:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2161:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRou
2162:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2163:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
ARM GAS  /tmp/cc3YdTbX.s 			page 96


2164:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2165:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Cannot block within an ISR so if there is no space on the queue then
2166:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		exit without doing anything. */
2167:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2168:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2169:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2170:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2171:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* We only want to wake one co-routine per ISR, so check that a
2172:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			co-routine has not already been woken. */
2173:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( xCoRoutinePreviouslyWoken == pdFALSE )
2174:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2175:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2176:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2177:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2178:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2179:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						return pdTRUE;
2180:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2181:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2182:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2183:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2184:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2185:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2186:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2187:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2188:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2189:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2190:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2191:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2192:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2193:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2194:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2195:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2196:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2197:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2198:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2199:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2200:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2201:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xCoRoutinePreviouslyWoken;
2202:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2203:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2204:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2205:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2206:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2207:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2208:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2209:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxCoRoutineWo
2210:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2211:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
2212:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2213:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2214:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* We cannot block from an ISR, so check there is data available. If
2215:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		not then just leave without doing anything. */
2216:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2217:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2218:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Copy the data from the queue. */
2219:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2220:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
ARM GAS  /tmp/cc3YdTbX.s 			page 97


2221:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2222:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->u.pcReadFrom = pxQueue->pcHead;
2223:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2224:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2225:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2226:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2227:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2228:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			--( pxQueue->uxMessagesWaiting );
2229:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->ux
2230:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2231:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( ( *pxCoRoutineWoken ) == pdFALSE )
2232:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2233:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2234:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2235:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2236:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2237:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						*pxCoRoutineWoken = pdTRUE;
2238:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2239:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2240:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2241:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2242:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2243:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2244:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2245:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2246:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2247:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2248:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2249:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2250:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2251:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2252:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2253:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2254:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
2255:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2256:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2257:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2258:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
2259:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2260:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2261:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xReturn;
2262:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2263:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2264:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2265:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2266:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2267:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2268:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2269:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified
2270:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 3001              		.loc 1 2270 0
 3002              		.cfi_startproc
 3003              		@ args = 0, pretend = 0, frame = 16
 3004              		@ frame_needed = 1, uses_anonymous_args = 0
 3005              		@ link register save eliminated.
 3006 0000 80B4     		push	{r7}
 3007              	.LCFI113:
ARM GAS  /tmp/cc3YdTbX.s 			page 98


 3008              		.cfi_def_cfa_offset 4
 3009              		.cfi_offset 7, -4
 3010 0002 85B0     		sub	sp, sp, #20
 3011              	.LCFI114:
 3012              		.cfi_def_cfa_offset 24
 3013 0004 00AF     		add	r7, sp, #0
 3014              	.LCFI115:
 3015              		.cfi_def_cfa_register 7
 3016 0006 7860     		str	r0, [r7, #4]
 3017 0008 3960     		str	r1, [r7]
2271:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t ux;
2272:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2273:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* See if there is an empty space in the registry.  A NULL name denotes
2274:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		a free slot. */
2275:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 3018              		.loc 1 2275 0
 3019 000a 0023     		movs	r3, #0
 3020 000c FB60     		str	r3, [r7, #12]
 3021 000e 14E0     		b	.L208
 3022              	.L211:
2276:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2277:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 3023              		.loc 1 2277 0
 3024 0010 0E4A     		ldr	r2, .L212
 3025 0012 FB68     		ldr	r3, [r7, #12]
 3026 0014 52F83330 		ldr	r3, [r2, r3, lsl #3]
 3027 0018 002B     		cmp	r3, #0
 3028 001a 0BD1     		bne	.L209
2278:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2279:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Store the information on this queue. */
2280:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 3029              		.loc 1 2280 0
 3030 001c 0B49     		ldr	r1, .L212
 3031 001e FB68     		ldr	r3, [r7, #12]
 3032 0020 3A68     		ldr	r2, [r7]
 3033 0022 41F83320 		str	r2, [r1, r3, lsl #3]
2281:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].xHandle = xQueue;
 3034              		.loc 1 2281 0
 3035 0026 094A     		ldr	r2, .L212
 3036 0028 FB68     		ldr	r3, [r7, #12]
 3037 002a DB00     		lsls	r3, r3, #3
 3038 002c 1344     		add	r3, r3, r2
 3039 002e 7A68     		ldr	r2, [r7, #4]
 3040 0030 5A60     		str	r2, [r3, #4]
2282:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2283:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
2284:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				break;
 3041              		.loc 1 2284 0
 3042 0032 05E0     		b	.L207
 3043              	.L209:
2275:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 3044              		.loc 1 2275 0 discriminator 2
 3045 0034 FB68     		ldr	r3, [r7, #12]
 3046 0036 0133     		adds	r3, r3, #1
 3047 0038 FB60     		str	r3, [r7, #12]
 3048              	.L208:
2275:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
ARM GAS  /tmp/cc3YdTbX.s 			page 99


 3049              		.loc 1 2275 0 is_stmt 0 discriminator 1
 3050 003a FB68     		ldr	r3, [r7, #12]
 3051 003c 072B     		cmp	r3, #7
 3052 003e E7D9     		bls	.L211
 3053              	.L207:
2285:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2286:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2287:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2288:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2289:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2290:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2291:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 3054              		.loc 1 2291 0 is_stmt 1
 3055 0040 1437     		adds	r7, r7, #20
 3056              	.LCFI116:
 3057              		.cfi_def_cfa_offset 4
 3058 0042 BD46     		mov	sp, r7
 3059              	.LCFI117:
 3060              		.cfi_def_cfa_register 13
 3061              		@ sp needed
 3062 0044 5DF8047B 		ldr	r7, [sp], #4
 3063              	.LCFI118:
 3064              		.cfi_restore 7
 3065              		.cfi_def_cfa_offset 0
 3066 0048 7047     		bx	lr
 3067              	.L213:
 3068 004a 00BF     		.align	2
 3069              	.L212:
 3070 004c 00000000 		.word	xQueueRegistry
 3071              		.cfi_endproc
 3072              	.LFE27:
 3074              		.section	.text.pcQueueGetName,"ax",%progbits
 3075              		.align	2
 3076              		.global	pcQueueGetName
 3077              		.thumb
 3078              		.thumb_func
 3080              	pcQueueGetName:
 3081              	.LFB28:
2292:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2293:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2294:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2295:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2296:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2297:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2298:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed
2299:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 3082              		.loc 1 2299 0
 3083              		.cfi_startproc
 3084              		@ args = 0, pretend = 0, frame = 16
 3085              		@ frame_needed = 1, uses_anonymous_args = 0
 3086              		@ link register save eliminated.
 3087 0000 80B4     		push	{r7}
 3088              	.LCFI119:
 3089              		.cfi_def_cfa_offset 4
 3090              		.cfi_offset 7, -4
 3091 0002 85B0     		sub	sp, sp, #20
 3092              	.LCFI120:
ARM GAS  /tmp/cc3YdTbX.s 			page 100


 3093              		.cfi_def_cfa_offset 24
 3094 0004 00AF     		add	r7, sp, #0
 3095              	.LCFI121:
 3096              		.cfi_def_cfa_register 7
 3097 0006 7860     		str	r0, [r7, #4]
2300:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t ux;
2301:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and singl
 3098              		.loc 1 2301 0
 3099 0008 0023     		movs	r3, #0
 3100 000a BB60     		str	r3, [r7, #8]
2302:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2303:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Note there is nothing here to protect against another task adding or
2304:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		removing entries from the registry while it is being searched. */
2305:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 3101              		.loc 1 2305 0
 3102 000c 0023     		movs	r3, #0
 3103 000e FB60     		str	r3, [r7, #12]
 3104 0010 10E0     		b	.L215
 3105              	.L218:
2306:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2307:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 3106              		.loc 1 2307 0
 3107 0012 0D4A     		ldr	r2, .L220
 3108 0014 FB68     		ldr	r3, [r7, #12]
 3109 0016 DB00     		lsls	r3, r3, #3
 3110 0018 1344     		add	r3, r3, r2
 3111 001a 5A68     		ldr	r2, [r3, #4]
 3112 001c 7B68     		ldr	r3, [r7, #4]
 3113 001e 9A42     		cmp	r2, r3
 3114 0020 05D1     		bne	.L216
2308:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2309:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pcReturn = xQueueRegistry[ ux ].pcQueueName;
 3115              		.loc 1 2309 0
 3116 0022 094A     		ldr	r2, .L220
 3117 0024 FB68     		ldr	r3, [r7, #12]
 3118 0026 52F83330 		ldr	r3, [r2, r3, lsl #3]
 3119 002a BB60     		str	r3, [r7, #8]
2310:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				break;
 3120              		.loc 1 2310 0
 3121 002c 05E0     		b	.L217
 3122              	.L216:
2305:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 3123              		.loc 1 2305 0 discriminator 2
 3124 002e FB68     		ldr	r3, [r7, #12]
 3125 0030 0133     		adds	r3, r3, #1
 3126 0032 FB60     		str	r3, [r7, #12]
 3127              	.L215:
2305:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 3128              		.loc 1 2305 0 is_stmt 0 discriminator 1
 3129 0034 FB68     		ldr	r3, [r7, #12]
 3130 0036 072B     		cmp	r3, #7
 3131 0038 EBD9     		bls	.L218
 3132              	.L217:
2311:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2312:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2313:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2314:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/cc3YdTbX.s 			page 101


2315:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2316:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2317:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2318:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pcReturn;
 3133              		.loc 1 2318 0 is_stmt 1
 3134 003a BB68     		ldr	r3, [r7, #8]
2319:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 3135              		.loc 1 2319 0
 3136 003c 1846     		mov	r0, r3
 3137 003e 1437     		adds	r7, r7, #20
 3138              	.LCFI122:
 3139              		.cfi_def_cfa_offset 4
 3140 0040 BD46     		mov	sp, r7
 3141              	.LCFI123:
 3142              		.cfi_def_cfa_register 13
 3143              		@ sp needed
 3144 0042 5DF8047B 		ldr	r7, [sp], #4
 3145              	.LCFI124:
 3146              		.cfi_restore 7
 3147              		.cfi_def_cfa_offset 0
 3148 0046 7047     		bx	lr
 3149              	.L221:
 3150              		.align	2
 3151              	.L220:
 3152 0048 00000000 		.word	xQueueRegistry
 3153              		.cfi_endproc
 3154              	.LFE28:
 3156              		.section	.text.vQueueUnregisterQueue,"ax",%progbits
 3157              		.align	2
 3158              		.global	vQueueUnregisterQueue
 3159              		.thumb
 3160              		.thumb_func
 3162              	vQueueUnregisterQueue:
 3163              	.LFB29:
2320:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2321:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2322:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2323:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2324:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2325:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2326:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void vQueueUnregisterQueue( QueueHandle_t xQueue )
2327:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 3164              		.loc 1 2327 0
 3165              		.cfi_startproc
 3166              		@ args = 0, pretend = 0, frame = 16
 3167              		@ frame_needed = 1, uses_anonymous_args = 0
 3168              		@ link register save eliminated.
 3169 0000 80B4     		push	{r7}
 3170              	.LCFI125:
 3171              		.cfi_def_cfa_offset 4
 3172              		.cfi_offset 7, -4
 3173 0002 85B0     		sub	sp, sp, #20
 3174              	.LCFI126:
 3175              		.cfi_def_cfa_offset 24
 3176 0004 00AF     		add	r7, sp, #0
 3177              	.LCFI127:
 3178              		.cfi_def_cfa_register 7
ARM GAS  /tmp/cc3YdTbX.s 			page 102


 3179 0006 7860     		str	r0, [r7, #4]
2328:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t ux;
2329:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2330:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* See if the handle of the queue being unregistered in actually in the
2331:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		registry. */
2332:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 3180              		.loc 1 2332 0
 3181 0008 0023     		movs	r3, #0
 3182 000a FB60     		str	r3, [r7, #12]
 3183 000c 16E0     		b	.L223
 3184              	.L226:
2333:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2334:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 3185              		.loc 1 2334 0
 3186 000e 0F4A     		ldr	r2, .L227
 3187 0010 FB68     		ldr	r3, [r7, #12]
 3188 0012 DB00     		lsls	r3, r3, #3
 3189 0014 1344     		add	r3, r3, r2
 3190 0016 5A68     		ldr	r2, [r3, #4]
 3191 0018 7B68     		ldr	r3, [r7, #4]
 3192 001a 9A42     		cmp	r2, r3
 3193 001c 0BD1     		bne	.L224
2335:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2336:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Set the name to NULL to show that this slot if free again. */
2337:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = NULL;
 3194              		.loc 1 2337 0
 3195 001e 0B4A     		ldr	r2, .L227
 3196 0020 FB68     		ldr	r3, [r7, #12]
 3197 0022 0021     		movs	r1, #0
 3198 0024 42F83310 		str	r1, [r2, r3, lsl #3]
2338:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2339:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Set the handle to NULL to ensure the same queue handle cannot
2340:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				appear in the registry twice if it is added, removed, then
2341:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				added again. */
2342:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 3199              		.loc 1 2342 0
 3200 0028 084A     		ldr	r2, .L227
 3201 002a FB68     		ldr	r3, [r7, #12]
 3202 002c DB00     		lsls	r3, r3, #3
 3203 002e 1344     		add	r3, r3, r2
 3204 0030 0022     		movs	r2, #0
 3205 0032 5A60     		str	r2, [r3, #4]
2343:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				break;
 3206              		.loc 1 2343 0
 3207 0034 05E0     		b	.L222
 3208              	.L224:
2332:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 3209              		.loc 1 2332 0 discriminator 2
 3210 0036 FB68     		ldr	r3, [r7, #12]
 3211 0038 0133     		adds	r3, r3, #1
 3212 003a FB60     		str	r3, [r7, #12]
 3213              	.L223:
2332:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 3214              		.loc 1 2332 0 is_stmt 0 discriminator 1
 3215 003c FB68     		ldr	r3, [r7, #12]
 3216 003e 072B     		cmp	r3, #7
 3217 0040 E5D9     		bls	.L226
ARM GAS  /tmp/cc3YdTbX.s 			page 103


 3218              	.L222:
2344:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2345:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2346:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2347:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2348:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2349:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2350:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2351:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 3219              		.loc 1 2351 0 is_stmt 1
 3220 0042 1437     		adds	r7, r7, #20
 3221              	.LCFI128:
 3222              		.cfi_def_cfa_offset 4
 3223 0044 BD46     		mov	sp, r7
 3224              	.LCFI129:
 3225              		.cfi_def_cfa_register 13
 3226              		@ sp needed
 3227 0046 5DF8047B 		ldr	r7, [sp], #4
 3228              	.LCFI130:
 3229              		.cfi_restore 7
 3230              		.cfi_def_cfa_offset 0
 3231 004a 7047     		bx	lr
 3232              	.L228:
 3233              		.align	2
 3234              	.L227:
 3235 004c 00000000 		.word	xQueueRegistry
 3236              		.cfi_endproc
 3237              	.LFE29:
 3239              		.text
 3240              	.Letext0:
 3241              		.file 3 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h"
 3242              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 3243              		.file 5 "/usr/include/newlib/sys/_stdint.h"
 3244              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 3245              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 3246              		.file 8 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
ARM GAS  /tmp/cc3YdTbX.s 			page 104


DEFINED SYMBOLS
                            *ABS*:0000000000000000 queue.c
                            *COM*:0000000000000040 xQueueRegistry
     /tmp/cc3YdTbX.s:22     .text.xQueueGenericReset:0000000000000000 $t
     /tmp/cc3YdTbX.s:27     .text.xQueueGenericReset:0000000000000000 xQueueGenericReset
     /tmp/cc3YdTbX.s:173    .text.xQueueGenericReset:00000000000000cc $d
     /tmp/cc3YdTbX.s:178    .text.xQueueGenericCreate:0000000000000000 $t
     /tmp/cc3YdTbX.s:183    .text.xQueueGenericCreate:0000000000000000 xQueueGenericCreate
     /tmp/cc3YdTbX.s:286    .text.prvInitialiseNewQueue:0000000000000000 prvInitialiseNewQueue
     /tmp/cc3YdTbX.s:282    .text.prvInitialiseNewQueue:0000000000000000 $t
     /tmp/cc3YdTbX.s:347    .text.prvInitialiseMutex:0000000000000000 $t
     /tmp/cc3YdTbX.s:351    .text.prvInitialiseMutex:0000000000000000 prvInitialiseMutex
     /tmp/cc3YdTbX.s:465    .text.xQueueGenericSend:0000000000000000 xQueueGenericSend
     /tmp/cc3YdTbX.s:405    .text.xQueueCreateMutex:0000000000000000 $t
     /tmp/cc3YdTbX.s:410    .text.xQueueCreateMutex:0000000000000000 xQueueCreateMutex
     /tmp/cc3YdTbX.s:460    .text.xQueueGenericSend:0000000000000000 $t
     /tmp/cc3YdTbX.s:2364   .text.prvCopyDataToQueue:0000000000000000 prvCopyDataToQueue
     /tmp/cc3YdTbX.s:2859   .text.prvIsQueueFull:0000000000000000 prvIsQueueFull
     /tmp/cc3YdTbX.s:2593   .text.prvUnlockQueue:0000000000000000 prvUnlockQueue
     /tmp/cc3YdTbX.s:824    .text.xQueueGenericSend:00000000000001f8 $d
     /tmp/cc3YdTbX.s:829    .text.xQueueGenericSendFromISR:0000000000000000 $t
     /tmp/cc3YdTbX.s:834    .text.xQueueGenericSendFromISR:0000000000000000 xQueueGenericSendFromISR
     /tmp/cc3YdTbX.s:1074   .text.xQueueGiveFromISR:0000000000000000 $t
     /tmp/cc3YdTbX.s:1079   .text.xQueueGiveFromISR:0000000000000000 xQueueGiveFromISR
     /tmp/cc3YdTbX.s:1302   .text.xQueueGenericReceive:0000000000000000 $t
     /tmp/cc3YdTbX.s:1307   .text.xQueueGenericReceive:0000000000000000 xQueueGenericReceive
     /tmp/cc3YdTbX.s:2521   .text.prvCopyDataFromQueue:0000000000000000 prvCopyDataFromQueue
     /tmp/cc3YdTbX.s:2724   .text.prvIsQueueEmpty:0000000000000000 prvIsQueueEmpty
     /tmp/cc3YdTbX.s:1682   .text.xQueueGenericReceive:0000000000000228 $d
     /tmp/cc3YdTbX.s:1687   .text.xQueueReceiveFromISR:0000000000000000 $t
     /tmp/cc3YdTbX.s:1692   .text.xQueueReceiveFromISR:0000000000000000 xQueueReceiveFromISR
     /tmp/cc3YdTbX.s:1894   .text.xQueuePeekFromISR:0000000000000000 $t
     /tmp/cc3YdTbX.s:1899   .text.xQueuePeekFromISR:0000000000000000 xQueuePeekFromISR
     /tmp/cc3YdTbX.s:2080   .text.uxQueueMessagesWaiting:0000000000000000 $t
     /tmp/cc3YdTbX.s:2085   .text.uxQueueMessagesWaiting:0000000000000000 uxQueueMessagesWaiting
     /tmp/cc3YdTbX.s:2149   .text.uxQueueSpacesAvailable:0000000000000000 $t
     /tmp/cc3YdTbX.s:2154   .text.uxQueueSpacesAvailable:0000000000000000 uxQueueSpacesAvailable
     /tmp/cc3YdTbX.s:2224   .text.uxQueueMessagesWaitingFromISR:0000000000000000 $t
     /tmp/cc3YdTbX.s:2229   .text.uxQueueMessagesWaitingFromISR:0000000000000000 uxQueueMessagesWaitingFromISR
     /tmp/cc3YdTbX.s:2293   .text.vQueueDelete:0000000000000000 $t
     /tmp/cc3YdTbX.s:2298   .text.vQueueDelete:0000000000000000 vQueueDelete
     /tmp/cc3YdTbX.s:3162   .text.vQueueUnregisterQueue:0000000000000000 vQueueUnregisterQueue
     /tmp/cc3YdTbX.s:2360   .text.prvCopyDataToQueue:0000000000000000 $t
     /tmp/cc3YdTbX.s:2517   .text.prvCopyDataFromQueue:0000000000000000 $t
     /tmp/cc3YdTbX.s:2589   .text.prvUnlockQueue:0000000000000000 $t
     /tmp/cc3YdTbX.s:2720   .text.prvIsQueueEmpty:0000000000000000 $t
     /tmp/cc3YdTbX.s:2776   .text.xQueueIsQueueEmptyFromISR:0000000000000000 $t
     /tmp/cc3YdTbX.s:2781   .text.xQueueIsQueueEmptyFromISR:0000000000000000 xQueueIsQueueEmptyFromISR
     /tmp/cc3YdTbX.s:2855   .text.prvIsQueueFull:0000000000000000 $t
     /tmp/cc3YdTbX.s:2913   .text.xQueueIsQueueFullFromISR:0000000000000000 $t
     /tmp/cc3YdTbX.s:2918   .text.xQueueIsQueueFullFromISR:0000000000000000 xQueueIsQueueFullFromISR
     /tmp/cc3YdTbX.s:2994   .text.vQueueAddToRegistry:0000000000000000 $t
     /tmp/cc3YdTbX.s:2999   .text.vQueueAddToRegistry:0000000000000000 vQueueAddToRegistry
     /tmp/cc3YdTbX.s:3070   .text.vQueueAddToRegistry:000000000000004c $d
     /tmp/cc3YdTbX.s:3075   .text.pcQueueGetName:0000000000000000 $t
     /tmp/cc3YdTbX.s:3080   .text.pcQueueGetName:0000000000000000 pcQueueGetName
     /tmp/cc3YdTbX.s:3152   .text.pcQueueGetName:0000000000000048 $d
ARM GAS  /tmp/cc3YdTbX.s 			page 105


     /tmp/cc3YdTbX.s:3157   .text.vQueueUnregisterQueue:0000000000000000 $t
     /tmp/cc3YdTbX.s:3235   .text.vQueueUnregisterQueue:000000000000004c $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
vPortEnterCritical
xTaskRemoveFromEventList
vListInitialise
vPortExitCritical
pvPortMalloc
xTaskGetSchedulerState
vTaskSetTimeOutState
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
xTaskResumeAll
vPortValidateInterruptPriority
pvTaskIncrementMutexHeldCount
vTaskPriorityInherit
vPortFree
xTaskPriorityDisinherit
memcpy
vTaskMissedYield
