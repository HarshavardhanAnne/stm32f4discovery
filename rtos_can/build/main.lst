ARM GAS  /tmp/ccgPo7nr.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.StartDefaultTask,"ax",%progbits
  21              		.align	2
  22              		.global	StartDefaultTask
  23              		.thumb
  24              		.thumb_func
  26              	StartDefaultTask:
  27              	.LFB143:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * Copyright (c) 2018 STMicroelectronics International N.V. 
  14:Src/main.c    ****   * All rights reserved.
  15:Src/main.c    ****   *
  16:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without 
  17:Src/main.c    ****   * modification, are permitted, provided that the following conditions are met:
  18:Src/main.c    ****   *
  19:Src/main.c    ****   * 1. Redistribution of source code must retain the above copyright notice, 
  20:Src/main.c    ****   *    this list of conditions and the following disclaimer.
  21:Src/main.c    ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  22:Src/main.c    ****   *    this list of conditions and the following disclaimer in the documentation
  23:Src/main.c    ****   *    and/or other materials provided with the distribution.
  24:Src/main.c    ****   * 3. Neither the name of STMicroelectronics nor the names of other 
  25:Src/main.c    ****   *    contributors to this software may be used to endorse or promote products 
  26:Src/main.c    ****   *    derived from this software without specific written permission.
  27:Src/main.c    ****   * 4. This software, including modifications and/or derivative works of this 
  28:Src/main.c    ****   *    software, must execute solely and exclusively on microcontroller or
  29:Src/main.c    ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  30:Src/main.c    ****   * 5. Redistribution and use of this software other than as permitted under 
ARM GAS  /tmp/ccgPo7nr.s 			page 2


  31:Src/main.c    ****   *    this license is void and will automatically terminate your rights under 
  32:Src/main.c    ****   *    this license. 
  33:Src/main.c    ****   *
  34:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  35:Src/main.c    ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  36:Src/main.c    ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  37:Src/main.c    ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  38:Src/main.c    ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  39:Src/main.c    ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  40:Src/main.c    ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  41:Src/main.c    ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  42:Src/main.c    ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  43:Src/main.c    ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  44:Src/main.c    ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  45:Src/main.c    ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  46:Src/main.c    ****   *
  47:Src/main.c    ****   ******************************************************************************
  48:Src/main.c    ****   */
  49:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  50:Src/main.c    **** #include "main.h"
  51:Src/main.c    **** #include "stm32f4xx_hal.h"
  52:Src/main.c    **** #include "cmsis_os.h"
  53:Src/main.c    **** #include <eecs473.h>
  54:Src/main.c    **** 
  55:Src/main.c    **** /* USER CODE BEGIN Includes */
  56:Src/main.c    **** 
  57:Src/main.c    **** /* USER CODE END Includes */
  58:Src/main.c    **** 
  59:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  60:Src/main.c    **** CAN_HandleTypeDef hcan1;
  61:Src/main.c    **** 
  62:Src/main.c    **** I2C_HandleTypeDef hi2c1;
  63:Src/main.c    **** 
  64:Src/main.c    **** SPI_HandleTypeDef hspi1;
  65:Src/main.c    **** 
  66:Src/main.c    **** UART_HandleTypeDef huart4;
  67:Src/main.c    **** 
  68:Src/main.c    **** osThreadId defaultTaskHandle;
  69:Src/main.c    **** 
  70:Src/main.c    **** /* USER CODE BEGIN PV */
  71:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  72:Src/main.c    **** osThreadId i2cTaskHandle;
  73:Src/main.c    **** osThreadId uartTaskHandle;
  74:Src/main.c    **** osThreadId canTaskHandle;
  75:Src/main.c    **** osThreadId spiTaskHandle;
  76:Src/main.c    **** osThreadId adcTaskHandle;
  77:Src/main.c    **** ADC_HandleTypeDef g_AdcHandle;
  78:Src/main.c    **** struct eecs_GPIO eecsGPIO = {&eecs_GPIO_Init,&eecs_GPIO_Write,&eecs_GPIO_Toggle,0};
  79:Src/main.c    **** 
  80:Src/main.c    **** //osThreadId ledTaskHandle;
  81:Src/main.c    **** #define MY_I2C_SPEED 400000
  82:Src/main.c    **** #define I2C_ADDRESS_IMU (uint16_t)(0b1101000 << 1)
  83:Src/main.c    **** #define RED_LED GPIO_PIN_14
  84:Src/main.c    **** #define GREEN_LED GPIO_PIN_12
  85:Src/main.c    **** #define BLUE_LED GPIO_PIN_15
  86:Src/main.c    **** #define ORANGE_LED GPIO_PIN_13
  87:Src/main.c    **** uint8_t i2c_rx_buff_accel[6];
ARM GAS  /tmp/ccgPo7nr.s 			page 3


  88:Src/main.c    **** uint8_t i2c_tx_buff_accel[6];
  89:Src/main.c    **** uint8_t i2c_tx_buff_gyro[6];
  90:Src/main.c    **** uint8_t i2c_rx_buff_gyro[6];
  91:Src/main.c    **** int16_t i2c_accel[3];
  92:Src/main.c    **** uint8_t spi_address[2] = {0b10000100,0b00000000};
  93:Src/main.c    **** uint8_t spi_rx_buff[2];
  94:Src/main.c    **** uint8_t arr[9];
  95:Src/main.c    **** volatile uint32_t g_ADCValue;
  96:Src/main.c    **** //CANTX - PB9
  97:Src/main.c    **** //CANRX - PB8
  98:Src/main.c    **** //I2CSDA - PB7
  99:Src/main.c    **** //I2CSCL - PB6
 100:Src/main.c    **** //UARTtx - PA0
 101:Src/main.c    **** //UARTrx - PA1
 102:Src/main.c    **** //SPISCK - PA5
 103:Src/main.c    **** //SPIMISO - PA6
 104:Src/main.c    **** //SPIMOSI - PA7
 105:Src/main.c    **** //SPICS - PA4 //This is NSS pin
 106:Src/main.c    **** /* USER CODE END PV */
 107:Src/main.c    **** 
 108:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
 109:Src/main.c    **** void SystemClock_Config(void);
 110:Src/main.c    **** static void MX_GPIO_Init(void);
 111:Src/main.c    **** static void MX_UART4_Init(void);
 112:Src/main.c    **** static void MX_SPI1_Init(void);
 113:Src/main.c    **** static void MX_I2C1_Init(void);
 114:Src/main.c    **** static void MX_CAN1_Init(void);
 115:Src/main.c    **** void StartDefaultTask(void const * argument);
 116:Src/main.c    **** 
 117:Src/main.c    **** /* USER CODE BEGIN PFP */
 118:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
 119:Src/main.c    **** void write_i2c(void const *argument);
 120:Src/main.c    **** void uart_debug(uint8_t* arr, uint8_t buffsize);
 121:Src/main.c    **** void canTest(void const *argument);
 122:Src/main.c    **** void uartTest(void const *argument);
 123:Src/main.c    **** void ConfigureADC();
 124:Src/main.c    **** void adcTest(void const *argument);
 125:Src/main.c    **** /* USER CODE END PFP */
 126:Src/main.c    **** 
 127:Src/main.c    **** /* USER CODE BEGIN 0 */
 128:Src/main.c    **** void writei2c(void const *argument) {
 129:Src/main.c    ****   //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 130:Src/main.c    ****   HAL_StatusTypeDef status = HAL_OK;
 131:Src/main.c    ****   uint32_t prevWakeTime;
 132:Src/main.c    ****   uint32_t nextWakeTime;
 133:Src/main.c    ****   int addr = 59;
 134:Src/main.c    ****   int i;
 135:Src/main.c    ****   for (i = 0; i < 6; i++) {
 136:Src/main.c    ****     i2c_tx_buff_accel[i] = addr++;
 137:Src/main.c    ****     i2c_rx_buff_accel[i] = i;
 138:Src/main.c    ****   }
 139:Src/main.c    ****   //ACCEL_XOUT_H , ACCEL_XOUT_L
 140:Src/main.c    ****   while (1) {
 141:Src/main.c    ****     //prevWakeTime = osKernelSysTick();
 142:Src/main.c    ****     //nextWakeTime += (1000 * osKernelSysTick())
 143:Src/main.c    ****     //osDelayUntil(&prevWakeTime,5000);
 144:Src/main.c    ****     osDelay(3000);
ARM GAS  /tmp/ccgPo7nr.s 			page 4


 145:Src/main.c    ****     status = HAL_OK;
 146:Src/main.c    ****     for (i = 0; i < 6; i++) {
 147:Src/main.c    ****       status = HAL_I2C_Master_Transmit(&hi2c1,I2C_ADDRESS_IMU,i2c_tx_buff_accel+i,sizeof(uint8_t),1
 148:Src/main.c    **** 
 149:Src/main.c    ****       if (status != HAL_OK) {
 150:Src/main.c    ****         HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 151:Src/main.c    ****       }
 152:Src/main.c    ****       else {
 153:Src/main.c    ****         HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15, GPIO_PIN_RESET);
 154:Src/main.c    ****       }
 155:Src/main.c    ****       status = HAL_I2C_Master_Receive(&hi2c1,I2C_ADDRESS_IMU,i2c_rx_buff_accel+i,sizeof(uint8_t),10
 156:Src/main.c    ****     }
 157:Src/main.c    ****     //itoa
 158:Src/main.c    ****     //debug();
 159:Src/main.c    ****     i2c_accel[0] = (i2c_rx_buff_accel[0] << 8) + i2c_rx_buff_accel[1];
 160:Src/main.c    ****     i2c_accel[1] = (i2c_rx_buff_accel[2] << 8) + i2c_rx_buff_accel[3];
 161:Src/main.c    ****     i2c_accel[2] = (i2c_rx_buff_accel[4] << 8) + i2c_rx_buff_accel[5];
 162:Src/main.c    ****     //uart_debug(i2c_accel,sizeof(i2c_accel));
 163:Src/main.c    ****     //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 164:Src/main.c    ****     HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12); //GPIOD12 is green
 165:Src/main.c    ****   }
 166:Src/main.c    **** }
 167:Src/main.c    **** 
 168:Src/main.c    **** void uartTest(void const *argument) {
 169:Src/main.c    ****   int i = 0;
 170:Src/main.c    ****   for (i = 0; i < 9; i++) {
 171:Src/main.c    ****     arr[i] = i;
 172:Src/main.c    ****   }
 173:Src/main.c    ****   while (1) {
 174:Src/main.c    ****     HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 175:Src/main.c    ****     //HAL_UART_Transmit(&huart4,ptr,size_,HAL_MAX_DELAY);
 176:Src/main.c    ****     uart_debug(arr, sizeof(arr));
 177:Src/main.c    ****     osDelay(100);
 178:Src/main.c    ****   }
 179:Src/main.c    **** }
 180:Src/main.c    **** 
 181:Src/main.c    **** void spiTest(void const *argument) {
 182:Src/main.c    ****   HAL_StatusTypeDef status;
 183:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 184:Src/main.c    ****   while (1) {
 185:Src/main.c    ****     osDelay(1000);
 186:Src/main.c    ****     status = HAL_OK;
 187:Src/main.c    ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,GPIO_PIN_RESET);
 188:Src/main.c    ****     HAL_Delay(1);
 189:Src/main.c    ****     //status = HAL_SPI_Transmit(&hspi1, spi_address,1,HAL_MAX_DELAY);
 190:Src/main.c    ****     //status = HAL_SPI_Receive(&hspi1, spi_rx_buff,1,HAL_MAX_DELAY);
 191:Src/main.c    ****     //status = HAL_SPI_Transmit(&hspi1, spi_address+1,1,HAL_MAX_DELAY);
 192:Src/main.c    ****     //status = HAL_SPI_Receive(&hspi1, spi_rx_buff+1,1,HAL_MAX_DELAY);
 193:Src/main.c    ****     status = HAL_SPI_TransmitReceive(&hspi1,spi_address,spi_rx_buff,1,HAL_MAX_DELAY);
 194:Src/main.c    ****     //HAL_Delay(1);
 195:Src/main.c    ****     if (status != HAL_OK) {
 196:Src/main.c    ****       HAL_GPIO_WritePin(GPIOD, GREEN_LED, GPIO_PIN_SET);
 197:Src/main.c    ****     }
 198:Src/main.c    ****     else {
 199:Src/main.c    ****       HAL_GPIO_WritePin(GPIOD, GREEN_LED, GPIO_PIN_RESET);
 200:Src/main.c    ****     }
 201:Src/main.c    **** 
ARM GAS  /tmp/ccgPo7nr.s 			page 5


 202:Src/main.c    ****     status = HAL_SPI_TransmitReceive(&hspi1,spi_address+1,spi_rx_buff+1,1,HAL_MAX_DELAY);
 203:Src/main.c    ****     HAL_Delay(1);
 204:Src/main.c    ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 205:Src/main.c    ****     //spi_rx_buff[0] = 'A';
 206:Src/main.c    ****     //spi_rx_buff[1] = 'F';
 207:Src/main.c    ****     uart_debug(spi_rx_buff, sizeof(spi_rx_buff));
 208:Src/main.c    ****   }
 209:Src/main.c    **** }
 210:Src/main.c    **** 
 211:Src/main.c    **** //CANTX - PB9
 212:Src/main.c    **** //CANRX - PB8
 213:Src/main.c    **** void canTest(void const *argument) {
 214:Src/main.c    ****   HAL_CAN_Start(&hcan1);
 215:Src/main.c    ****   HAL_CAN_WakeUp(&hcan1);
 216:Src/main.c    ****   uint8_t data[8] = {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};
 217:Src/main.c    ****   uint8_t data2[8] = {0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA};
 218:Src/main.c    ****   uint8_t* data_ptr;
 219:Src/main.c    ****   uint8_t data_sel = 0;
 220:Src/main.c    ****   CAN_TxHeaderTypeDef tx_buffer;
 221:Src/main.c    ****   CAN_TxHeaderTypeDef* tx_buffer_ptr = &tx_buffer;
 222:Src/main.c    ****   tx_buffer.StdId = 0x500;
 223:Src/main.c    ****   tx_buffer.ExtId = 0x500;
 224:Src/main.c    ****   tx_buffer.IDE = CAN_ID_STD;
 225:Src/main.c    ****   tx_buffer.RTR = CAN_RTR_DATA;
 226:Src/main.c    ****   tx_buffer.DLC = sizeof(g_ADCValue);
 227:Src/main.c    ****   HAL_StatusTypeDef status = HAL_OK;
 228:Src/main.c    ****   while (1) {
 229:Src/main.c    ****     //osDelay(50); //20Hz 
 230:Src/main.c    ****     //osDelay(1); //1 kHz works for 8 bytes of data !THIS SOMETIMES FAILS
 231:Src/main.c    ****     osDelay(4); //250 Hz , this works with 8 bytes
 232:Src/main.c    ****     status = HAL_OK;
 233:Src/main.c    ****     data_ptr = &g_ADCValue;
 234:Src/main.c    ****     //data_ptr = (data_sel) ? data : data2;
 235:Src/main.c    ****     //data_sel ^= 0b1;
 236:Src/main.c    ****     while (HAL_CAN_IsTxMessagePending(&hcan1, (uint32_t)CAN_TX_MAILBOX0)) {
 237:Src/main.c    ****       //HAL_GPIO_WritePin(GPIOD, ORANGE_LED, GPIO_PIN_SET);
 238:Src/main.c    ****       //osDelay(100);
 239:Src/main.c    ****       //HAL_GPIO_WritePin(GPIOD, ORANGE_LED, GPIO_PIN_RESET);
 240:Src/main.c    ****     }
 241:Src/main.c    ****     status = HAL_CAN_AddTxMessage(&hcan1, tx_buffer_ptr, data_ptr, (uint32_t *)CAN_TX_MAILBOX0);
 242:Src/main.c    **** 
 243:Src/main.c    ****     if (status == HAL_OK) {
 244:Src/main.c    ****       HAL_GPIO_WritePin(GPIOD, GREEN_LED, GPIO_PIN_SET);
 245:Src/main.c    ****     }
 246:Src/main.c    ****     else {
 247:Src/main.c    ****       HAL_GPIO_WritePin(GPIOD, GREEN_LED, GPIO_PIN_RESET);
 248:Src/main.c    ****       HAL_GPIO_TogglePin(GPIOD, RED_LED);
 249:Src/main.c    ****       //unsigned char temparr[] = {"NOT WORKING"};
 250:Src/main.c    ****       //uart_debug(temparr, sizeof(temparr));
 251:Src/main.c    ****     }
 252:Src/main.c    **** 
 253:Src/main.c    ****   }
 254:Src/main.c    **** 
 255:Src/main.c    **** }
 256:Src/main.c    **** 
 257:Src/main.c    **** void uart_debug(uint8_t* arr, uint8_t buffsize) {
 258:Src/main.c    ****   HAL_StatusTypeDef status = HAL_OK;
ARM GAS  /tmp/ccgPo7nr.s 			page 6


 259:Src/main.c    ****   
 260:Src/main.c    ****   status = HAL_UART_Transmit(&huart4, arr, buffsize, HAL_MAX_DELAY);
 261:Src/main.c    ****   if (status != HAL_OK) {
 262:Src/main.c    ****     //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 263:Src/main.c    ****   }
 264:Src/main.c    ****   else {
 265:Src/main.c    ****     HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_15);
 266:Src/main.c    ****     //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 267:Src/main.c    ****   }
 268:Src/main.c    **** }
 269:Src/main.c    **** 
 270:Src/main.c    **** void Leds(void const *argument) {
 271:Src/main.c    **** 
 272:Src/main.c    ****   /*GPIO_InitTypeDef GPIO_InitStruct;
 273:Src/main.c    **** 
 274:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 275:Src/main.c    ****   //HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 276:Src/main.c    **** 
 277:Src/main.c    ****   //Configure GPIO pin Output Level 
 278:Src/main.c    ****   //HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 279:Src/main.c    **** 
 280:Src/main.c    ****   //Configure GPIO pin Output Level
 281:Src/main.c    ****   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12, GPIO_PIN_RESET);
 282:Src/main.c    **** 
 283:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12;
 284:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 285:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 286:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 287:Src/main.c    ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);*/
 288:Src/main.c    ****   uint32_t prevWakeTime;
 289:Src/main.c    ****   while (1) {
 290:Src/main.c    ****     //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12);
 291:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 292:Src/main.c    ****     osDelay(100);
 293:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 294:Src/main.c    ****     osDelay(100);
 295:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 296:Src/main.c    ****     osDelay(100);
 297:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 298:Src/main.c    ****     osDelay(100);
 299:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 300:Src/main.c    ****     osDelay(100);
 301:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 302:Src/main.c    ****     osDelay(100);
 303:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 304:Src/main.c    ****     osDelay(100);
 305:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 306:Src/main.c    **** 
 307:Src/main.c    ****     prevWakeTime = osKernelSysTick();
 308:Src/main.c    ****     osDelayUntil(&prevWakeTime, 50);
 309:Src/main.c    ****   }
 310:Src/main.c    **** }
 311:Src/main.c    **** void ConfigureADC() {
 312:Src/main.c    ****     GPIO_InitTypeDef gpioInit;
 313:Src/main.c    ****  
 314:Src/main.c    ****     __GPIOC_CLK_ENABLE();
 315:Src/main.c    ****     __ADC1_CLK_ENABLE();
ARM GAS  /tmp/ccgPo7nr.s 			page 7


 316:Src/main.c    ****  
 317:Src/main.c    ****     gpioInit.Pin = GPIO_PIN_1;
 318:Src/main.c    ****     gpioInit.Mode = GPIO_MODE_ANALOG;
 319:Src/main.c    ****     gpioInit.Pull = GPIO_NOPULL;
 320:Src/main.c    ****     HAL_GPIO_Init(GPIOC, &gpioInit);
 321:Src/main.c    ****  
 322:Src/main.c    ****     HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 323:Src/main.c    ****     HAL_NVIC_EnableIRQ(ADC_IRQn);
 324:Src/main.c    ****  
 325:Src/main.c    ****     ADC_ChannelConfTypeDef adcChannel;
 326:Src/main.c    ****  
 327:Src/main.c    ****     g_AdcHandle.Instance = ADC1;
 328:Src/main.c    ****  
 329:Src/main.c    ****     g_AdcHandle.Init.ClockPrescaler = ADC_CLOCKPRESCALER_PCLK_DIV2;
 330:Src/main.c    ****     g_AdcHandle.Init.Resolution = ADC_RESOLUTION_12B;
 331:Src/main.c    ****     g_AdcHandle.Init.ScanConvMode = DISABLE;
 332:Src/main.c    ****     g_AdcHandle.Init.ContinuousConvMode = ENABLE;
 333:Src/main.c    ****     g_AdcHandle.Init.DiscontinuousConvMode = DISABLE;
 334:Src/main.c    ****     g_AdcHandle.Init.NbrOfDiscConversion = 0;
 335:Src/main.c    ****     g_AdcHandle.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 336:Src/main.c    ****     g_AdcHandle.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 337:Src/main.c    ****     g_AdcHandle.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 338:Src/main.c    ****     g_AdcHandle.Init.NbrOfConversion = 1;
 339:Src/main.c    ****     g_AdcHandle.Init.DMAContinuousRequests = ENABLE;
 340:Src/main.c    ****     g_AdcHandle.Init.EOCSelection = DISABLE;
 341:Src/main.c    ****  
 342:Src/main.c    ****     HAL_ADC_Init(&g_AdcHandle);
 343:Src/main.c    ****  
 344:Src/main.c    ****     adcChannel.Channel = ADC_CHANNEL_11;
 345:Src/main.c    ****     adcChannel.Rank = 1;
 346:Src/main.c    ****     adcChannel.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 347:Src/main.c    ****     adcChannel.Offset = 0;
 348:Src/main.c    ****  
 349:Src/main.c    ****     if (HAL_ADC_ConfigChannel(&g_AdcHandle, &adcChannel) != HAL_OK)
 350:Src/main.c    ****     {
 351:Src/main.c    ****         while (1) {
 352:Src/main.c    ****           HAL_GPIO_TogglePin(GPIOD,BLUE_LED);
 353:Src/main.c    ****           HAL_Delay(100);
 354:Src/main.c    ****         }
 355:Src/main.c    ****     }
 356:Src/main.c    **** }
 357:Src/main.c    **** 
 358:Src/main.c    **** void adcTest(void const *argument) {
 359:Src/main.c    ****   ConfigureADC();
 360:Src/main.c    ****   HAL_ADC_Start(&g_AdcHandle);
 361:Src/main.c    ****   int g_MeasurementNumber;
 362:Src/main.c    ****   while (1) {
 363:Src/main.c    ****     osDelay(100);
 364:Src/main.c    ****     if (HAL_ADC_PollForConversion(&g_AdcHandle,1000000) == HAL_OK) {
 365:Src/main.c    ****       g_ADCValue = HAL_ADC_GetValue(&g_AdcHandle);
 366:Src/main.c    ****       g_MeasurementNumber++;
 367:Src/main.c    ****     }
 368:Src/main.c    ****   }
 369:Src/main.c    **** 
 370:Src/main.c    **** }
 371:Src/main.c    **** 
 372:Src/main.c    **** /* USER CODE END 0 */
ARM GAS  /tmp/ccgPo7nr.s 			page 8


 373:Src/main.c    **** 
 374:Src/main.c    **** /**
 375:Src/main.c    ****   * @brief  The application entry point.
 376:Src/main.c    ****   *
 377:Src/main.c    ****   * @retval None
 378:Src/main.c    ****   */
 379:Src/main.c    **** int main(void)
 380:Src/main.c    **** {
 381:Src/main.c    ****   /* USER CODE BEGIN 1 */
 382:Src/main.c    **** 
 383:Src/main.c    ****   /* USER CODE END 1 */
 384:Src/main.c    **** 
 385:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
 386:Src/main.c    **** 
 387:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 388:Src/main.c    ****   HAL_Init();
 389:Src/main.c    **** 
 390:Src/main.c    ****   /* USER CODE BEGIN Init */
 391:Src/main.c    **** 
 392:Src/main.c    ****   /* USER CODE END Init */
 393:Src/main.c    **** 
 394:Src/main.c    ****   /* Configure the system clock */
 395:Src/main.c    ****   SystemClock_Config();
 396:Src/main.c    **** 
 397:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 398:Src/main.c    **** 
 399:Src/main.c    ****   /* USER CODE END SysInit */
 400:Src/main.c    **** 
 401:Src/main.c    ****   /* Initialize all configured peripherals */
 402:Src/main.c    ****   MX_GPIO_Init();
 403:Src/main.c    ****   MX_UART4_Init();
 404:Src/main.c    ****   MX_SPI1_Init();
 405:Src/main.c    ****   MX_I2C1_Init();
 406:Src/main.c    ****   MX_CAN1_Init();
 407:Src/main.c    ****   /* USER CODE BEGIN 2 */
 408:Src/main.c    **** 
 409:Src/main.c    ****   /* USER CODE END 2 */
 410:Src/main.c    **** 
 411:Src/main.c    ****   /* USER CODE BEGIN RTOS_MUTEX */
 412:Src/main.c    ****   /* add mutexes, ... */
 413:Src/main.c    ****   /* USER CODE END RTOS_MUTEX */
 414:Src/main.c    **** 
 415:Src/main.c    ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 416:Src/main.c    ****   /* add semaphores, ... */
 417:Src/main.c    ****   /* USER CODE END RTOS_SEMAPHORES */
 418:Src/main.c    **** 
 419:Src/main.c    ****   /* USER CODE BEGIN RTOS_TIMERS */
 420:Src/main.c    ****   /* start timers, add new ones, ... */
 421:Src/main.c    ****   /* USER CODE END RTOS_TIMERS */
 422:Src/main.c    **** 
 423:Src/main.c    ****   /* Create the thread(s) */
 424:Src/main.c    ****   /* definition and creation of defaultTask */
 425:Src/main.c    ****   osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 426:Src/main.c    ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 427:Src/main.c    **** 
 428:Src/main.c    ****   /* USER CODE BEGIN RTOS_THREADS */
 429:Src/main.c    ****   /* add threads, ... */
ARM GAS  /tmp/ccgPo7nr.s 			page 9


 430:Src/main.c    ****   osThreadDef(adcTask, adcTest, osPriorityAboveNormal,1,128);
 431:Src/main.c    ****   adcTaskHandle = osThreadCreate(osThread(adcTask),NULL);
 432:Src/main.c    ****   osThreadDef(canTask, canTest, osPriorityAboveNormal, 1, 128);
 433:Src/main.c    ****   canTaskHandle = osThreadCreate(osThread(canTask),NULL);
 434:Src/main.c    ****   //osThreadDef(uartTask, uartTest, osPriorityAboveNormal, 1, 128);
 435:Src/main.c    ****   //uartTaskHandle = osThreadCreate(osThread(uartTask), NULL);
 436:Src/main.c    ****   //osThreadDef(i2cTask, writei2c, osPriorityAboveNormal,1,256);
 437:Src/main.c    ****   //i2cTaskHandle = osThreadCreate(osThread(i2cTask),NULL);
 438:Src/main.c    ****   //osThreadDef(ledTask, Leds, osPriorityAboveNormal, 1, 128);
 439:Src/main.c    ****   //ledTaskHandle = osThreadCreate(osThread(ledTask),NULL);
 440:Src/main.c    ****   //osThreadDef(spiTask,spiTest,osPriorityAboveNormal,1,128);
 441:Src/main.c    ****   //spiTaskHandle = osThreadCreate(osThread(spiTask),NULL);
 442:Src/main.c    ****   /* USER CODE END RTOS_THREADS */
 443:Src/main.c    **** 
 444:Src/main.c    ****   /* USER CODE BEGIN RTOS_QUEUES */
 445:Src/main.c    ****   /* add queues, ... */
 446:Src/main.c    ****   /* USER CODE END RTOS_QUEUES */
 447:Src/main.c    ****  
 448:Src/main.c    **** 
 449:Src/main.c    ****   /* Start scheduler */
 450:Src/main.c    ****   osKernelStart();
 451:Src/main.c    ****   
 452:Src/main.c    ****   /* We should never get here as control is now taken by the scheduler */
 453:Src/main.c    **** 
 454:Src/main.c    ****   /* Infinite loop */
 455:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 456:Src/main.c    ****   while (1)
 457:Src/main.c    ****   {
 458:Src/main.c    **** 
 459:Src/main.c    ****   /* USER CODE END WHILE */
 460:Src/main.c    **** 
 461:Src/main.c    ****   /* USER CODE BEGIN 3 */
 462:Src/main.c    **** 
 463:Src/main.c    ****   }
 464:Src/main.c    ****   /* USER CODE END 3 */
 465:Src/main.c    **** 
 466:Src/main.c    **** }
 467:Src/main.c    **** 
 468:Src/main.c    **** /**
 469:Src/main.c    ****   * @brief System Clock Configuration
 470:Src/main.c    ****   * @retval None
 471:Src/main.c    ****   */
 472:Src/main.c    **** void SystemClock_Config(void)
 473:Src/main.c    **** {
 474:Src/main.c    **** 
 475:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 476:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 477:Src/main.c    **** 
 478:Src/main.c    ****     /**Configure the main internal regulator output voltage 
 479:Src/main.c    ****     */
 480:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 481:Src/main.c    **** 
 482:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 483:Src/main.c    **** 
 484:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 485:Src/main.c    ****     */
 486:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
ARM GAS  /tmp/ccgPo7nr.s 			page 10


 487:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 488:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 489:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 490:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 491:Src/main.c    ****   {
 492:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 493:Src/main.c    ****   }
 494:Src/main.c    **** 
 495:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 496:Src/main.c    ****     */
 497:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 498:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 499:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 500:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 501:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 502:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 503:Src/main.c    **** 
 504:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 505:Src/main.c    ****   {
 506:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 507:Src/main.c    ****   }
 508:Src/main.c    **** 
 509:Src/main.c    ****     /**Configure the Systick interrupt time 
 510:Src/main.c    ****     */
 511:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 512:Src/main.c    **** 
 513:Src/main.c    ****     /**Configure the Systick 
 514:Src/main.c    ****     */
 515:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 516:Src/main.c    **** 
 517:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 518:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 519:Src/main.c    **** }
 520:Src/main.c    **** 
 521:Src/main.c    **** /* CAN1 init function */
 522:Src/main.c    **** static void MX_CAN1_Init(void)
 523:Src/main.c    **** {
 524:Src/main.c    **** 
 525:Src/main.c    ****   hcan1.Instance = CAN1;
 526:Src/main.c    ****   hcan1.Init.Prescaler = 2;
 527:Src/main.c    ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 528:Src/main.c    ****   hcan1.Init.SyncJumpWidth = CAN_SJW_4TQ;
 529:Src/main.c    ****   hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 530:Src/main.c    ****   hcan1.Init.TimeSeg2 = CAN_BS2_6TQ;
 531:Src/main.c    ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 532:Src/main.c    ****   hcan1.Init.AutoBusOff = ENABLE;
 533:Src/main.c    ****   hcan1.Init.AutoWakeUp = DISABLE;
 534:Src/main.c    ****   hcan1.Init.AutoRetransmission = DISABLE;
 535:Src/main.c    ****   hcan1.Init.ReceiveFifoLocked = ENABLE;
 536:Src/main.c    ****   hcan1.Init.TransmitFifoPriority = ENABLE;
 537:Src/main.c    ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 538:Src/main.c    ****   {
 539:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 540:Src/main.c    ****   }
 541:Src/main.c    **** 
 542:Src/main.c    **** }
 543:Src/main.c    **** 
ARM GAS  /tmp/ccgPo7nr.s 			page 11


 544:Src/main.c    **** /* I2C1 init function */
 545:Src/main.c    **** static void MX_I2C1_Init(void)
 546:Src/main.c    **** {
 547:Src/main.c    **** 
 548:Src/main.c    ****   hi2c1.Instance = I2C1;
 549:Src/main.c    ****   hi2c1.Init.ClockSpeed = 100000;
 550:Src/main.c    ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 551:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 0;
 552:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 553:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 554:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 555:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 556:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 557:Src/main.c    ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 558:Src/main.c    ****   {
 559:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 560:Src/main.c    ****   }
 561:Src/main.c    **** 
 562:Src/main.c    **** }
 563:Src/main.c    **** 
 564:Src/main.c    **** /* SPI1 init function */
 565:Src/main.c    **** static void MX_SPI1_Init(void)
 566:Src/main.c    **** {
 567:Src/main.c    **** 
 568:Src/main.c    ****   /* SPI1 parameter configuration*/
 569:Src/main.c    ****   hspi1.Instance = SPI1;
 570:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 571:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 572:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 573:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 574:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 575:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 576:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 577:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 578:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 579:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 580:Src/main.c    ****   hspi1.Init.CRCPolynomial = 10;
 581:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 582:Src/main.c    ****   {
 583:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 584:Src/main.c    ****   }
 585:Src/main.c    ****   
 586:Src/main.c    **** }
 587:Src/main.c    **** 
 588:Src/main.c    **** /* UART4 init function */
 589:Src/main.c    **** static void MX_UART4_Init(void)
 590:Src/main.c    **** {
 591:Src/main.c    **** 
 592:Src/main.c    ****   huart4.Instance = UART4;
 593:Src/main.c    ****   huart4.Init.BaudRate = 57600;
 594:Src/main.c    ****   huart4.Init.WordLength = UART_WORDLENGTH_8B;
 595:Src/main.c    ****   huart4.Init.StopBits = UART_STOPBITS_1;
 596:Src/main.c    ****   huart4.Init.Parity = UART_PARITY_NONE;
 597:Src/main.c    ****   huart4.Init.Mode = UART_MODE_TX_RX;
 598:Src/main.c    ****   huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 599:Src/main.c    ****   huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 600:Src/main.c    ****   if (HAL_UART_Init(&huart4) != HAL_OK)
ARM GAS  /tmp/ccgPo7nr.s 			page 12


 601:Src/main.c    ****   {
 602:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 603:Src/main.c    ****   }
 604:Src/main.c    **** 
 605:Src/main.c    **** }
 606:Src/main.c    **** 
 607:Src/main.c    **** /** Configure pins as 
 608:Src/main.c    ****         * Analog 
 609:Src/main.c    ****         * Input 
 610:Src/main.c    ****         * Output
 611:Src/main.c    ****         * EVENT_OUT
 612:Src/main.c    ****         * EXTI
 613:Src/main.c    **** */
 614:Src/main.c    **** static void MX_GPIO_Init(void)
 615:Src/main.c    **** {
 616:Src/main.c    **** 
 617:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct;
 618:Src/main.c    **** 
 619:Src/main.c    ****   /* GPIO Ports Clock Enable */
 620:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 621:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 622:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 623:Src/main.c    **** 
 624:Src/main.c    ****   /*Configure GPIO pin Output Level */
 625:Src/main.c    ****   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 626:Src/main.c    **** 
 627:Src/main.c    ****   /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
 628:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 629:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 630:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 631:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 632:Src/main.c    ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 633:Src/main.c    **** 
 634:Src/main.c    **** 
 635:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 636:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 637:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 638:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 639:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 640:Src/main.c    **** 
 641:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_4;
 642:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 643:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 644:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 645:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 646:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 647:Src/main.c    **** 
 648:Src/main.c    **** }
 649:Src/main.c    **** 
 650:Src/main.c    **** /* USER CODE BEGIN 4 */
 651:Src/main.c    **** 
 652:Src/main.c    **** /* USER CODE END 4 */
 653:Src/main.c    **** 
 654:Src/main.c    **** /* USER CODE BEGIN Header_StartDefaultTask */
 655:Src/main.c    **** /**
 656:Src/main.c    ****   * @brief  Function implementing the defaultTask thread.
 657:Src/main.c    ****   * @param  argument: Not used 
ARM GAS  /tmp/ccgPo7nr.s 			page 13


 658:Src/main.c    ****   * @retval None
 659:Src/main.c    ****   */
 660:Src/main.c    **** /* USER CODE END Header_StartDefaultTask */
 661:Src/main.c    **** void StartDefaultTask(void const * argument)
 662:Src/main.c    **** {
  29              		.loc 1 662 0
  30              		.cfi_startproc
  31              		@ Volatile: function does not return.
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              	.LVL0:
  35 0000 08B5     		push	{r3, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 3, -8
  39              		.cfi_offset 14, -4
  40              	.LVL1:
  41              	.L2:
 663:Src/main.c    **** 
 664:Src/main.c    ****   /* USER CODE BEGIN 5 */
 665:Src/main.c    ****   /* Infinite loop */
 666:Src/main.c    ****   for(;;)
 667:Src/main.c    ****   {
 668:Src/main.c    ****     osDelay(1);
  42              		.loc 1 668 0 discriminator 1
  43 0002 0120     		movs	r0, #1
  44 0004 FFF7FEFF 		bl	osDelay
  45              	.LVL2:
 669:Src/main.c    ****   }
  46              		.loc 1 669 0 discriminator 1
  47 0008 FBE7     		b	.L2
  48              		.cfi_endproc
  49              	.LFE143:
  51 000a 00BF     		.section	.text.canTest,"ax",%progbits
  52              		.align	2
  53              		.global	canTest
  54              		.thumb
  55              		.thumb_func
  57              	canTest:
  58              	.LFB131:
 213:Src/main.c    ****   HAL_CAN_Start(&hcan1);
  59              		.loc 1 213 0
  60              		.cfi_startproc
  61              		@ args = 0, pretend = 0, frame = 24
  62              		@ frame_needed = 0, uses_anonymous_args = 0
  63              	.LVL3:
  64 0000 10B5     		push	{r4, lr}
  65              	.LCFI1:
  66              		.cfi_def_cfa_offset 8
  67              		.cfi_offset 4, -8
  68              		.cfi_offset 14, -4
  69 0002 86B0     		sub	sp, sp, #24
  70              	.LCFI2:
  71              		.cfi_def_cfa_offset 32
 214:Src/main.c    ****   HAL_CAN_WakeUp(&hcan1);
  72              		.loc 1 214 0
  73 0004 194C     		ldr	r4, .L10
ARM GAS  /tmp/ccgPo7nr.s 			page 14


  74 0006 2046     		mov	r0, r4
  75              	.LVL4:
  76 0008 FFF7FEFF 		bl	HAL_CAN_Start
  77              	.LVL5:
 215:Src/main.c    ****   uint8_t data[8] = {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};
  78              		.loc 1 215 0
  79 000c 2046     		mov	r0, r4
  80 000e FFF7FEFF 		bl	HAL_CAN_WakeUp
  81              	.LVL6:
 222:Src/main.c    ****   tx_buffer.ExtId = 0x500;
  82              		.loc 1 222 0
  83 0012 4FF4A063 		mov	r3, #1280
  84 0016 0093     		str	r3, [sp]
 223:Src/main.c    ****   tx_buffer.IDE = CAN_ID_STD;
  85              		.loc 1 223 0
  86 0018 0193     		str	r3, [sp, #4]
 224:Src/main.c    ****   tx_buffer.RTR = CAN_RTR_DATA;
  87              		.loc 1 224 0
  88 001a 0023     		movs	r3, #0
  89 001c 0293     		str	r3, [sp, #8]
 225:Src/main.c    ****   tx_buffer.DLC = sizeof(g_ADCValue);
  90              		.loc 1 225 0
  91 001e 0393     		str	r3, [sp, #12]
 226:Src/main.c    ****   HAL_StatusTypeDef status = HAL_OK;
  92              		.loc 1 226 0
  93 0020 0423     		movs	r3, #4
  94 0022 0493     		str	r3, [sp, #16]
  95              	.LVL7:
  96              	.L5:
 231:Src/main.c    ****     status = HAL_OK;
  97              		.loc 1 231 0
  98 0024 0420     		movs	r0, #4
  99 0026 FFF7FEFF 		bl	osDelay
 100              	.LVL8:
 101              	.L6:
 236:Src/main.c    ****       //HAL_GPIO_WritePin(GPIOD, ORANGE_LED, GPIO_PIN_SET);
 102              		.loc 1 236 0 discriminator 1
 103 002a 1048     		ldr	r0, .L10
 104 002c 0121     		movs	r1, #1
 105 002e FFF7FEFF 		bl	HAL_CAN_IsTxMessagePending
 106              	.LVL9:
 107 0032 0028     		cmp	r0, #0
 108 0034 F9D1     		bne	.L6
 241:Src/main.c    **** 
 109              		.loc 1 241 0
 110 0036 0D48     		ldr	r0, .L10
 111 0038 6946     		mov	r1, sp
 112 003a 0D4A     		ldr	r2, .L10+4
 113 003c 0123     		movs	r3, #1
 114 003e FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 115              	.LVL10:
 243:Src/main.c    ****       HAL_GPIO_WritePin(GPIOD, GREEN_LED, GPIO_PIN_SET);
 116              		.loc 1 243 0
 117 0042 30B9     		cbnz	r0, .L7
 244:Src/main.c    ****     }
 118              		.loc 1 244 0
 119 0044 0B48     		ldr	r0, .L10+8
ARM GAS  /tmp/ccgPo7nr.s 			page 15


 120              	.LVL11:
 121 0046 4FF48051 		mov	r1, #4096
 122 004a 0122     		movs	r2, #1
 123 004c FFF7FEFF 		bl	HAL_GPIO_WritePin
 124              	.LVL12:
 125 0050 E8E7     		b	.L5
 126              	.LVL13:
 127              	.L7:
 247:Src/main.c    ****       HAL_GPIO_TogglePin(GPIOD, RED_LED);
 128              		.loc 1 247 0
 129 0052 084C     		ldr	r4, .L10+8
 130 0054 2046     		mov	r0, r4
 131              	.LVL14:
 132 0056 4FF48051 		mov	r1, #4096
 133 005a 0022     		movs	r2, #0
 134 005c FFF7FEFF 		bl	HAL_GPIO_WritePin
 135              	.LVL15:
 248:Src/main.c    ****       //unsigned char temparr[] = {"NOT WORKING"};
 136              		.loc 1 248 0
 137 0060 2046     		mov	r0, r4
 138 0062 4FF48041 		mov	r1, #16384
 139 0066 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 140              	.LVL16:
 141 006a DBE7     		b	.L5
 142              	.L11:
 143              		.align	2
 144              	.L10:
 145 006c 00000000 		.word	hcan1
 146 0070 00000000 		.word	g_ADCValue
 147 0074 000C0240 		.word	1073875968
 148              		.cfi_endproc
 149              	.LFE131:
 151              		.section	.text.MX_GPIO_Init,"ax",%progbits
 152              		.align	2
 153              		.thumb
 154              		.thumb_func
 156              	MX_GPIO_Init:
 157              	.LFB142:
 615:Src/main.c    **** 
 158              		.loc 1 615 0
 159              		.cfi_startproc
 160              		@ args = 0, pretend = 0, frame = 32
 161              		@ frame_needed = 0, uses_anonymous_args = 0
 162 0000 70B5     		push	{r4, r5, r6, lr}
 163              	.LCFI3:
 164              		.cfi_def_cfa_offset 16
 165              		.cfi_offset 4, -16
 166              		.cfi_offset 5, -12
 167              		.cfi_offset 6, -8
 168              		.cfi_offset 14, -4
 169 0002 88B0     		sub	sp, sp, #32
 170              	.LCFI4:
 171              		.cfi_def_cfa_offset 48
 172              	.LBB2:
 620:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 173              		.loc 1 620 0
 174 0004 0024     		movs	r4, #0
ARM GAS  /tmp/ccgPo7nr.s 			page 16


 175 0006 0094     		str	r4, [sp]
 176 0008 264B     		ldr	r3, .L14
 177 000a 1A6B     		ldr	r2, [r3, #48]
 178 000c 42F00102 		orr	r2, r2, #1
 179 0010 1A63     		str	r2, [r3, #48]
 180 0012 1A6B     		ldr	r2, [r3, #48]
 181 0014 02F00102 		and	r2, r2, #1
 182 0018 0092     		str	r2, [sp]
 183 001a 009A     		ldr	r2, [sp]
 184              	.LBE2:
 185              	.LBB3:
 621:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 186              		.loc 1 621 0
 187 001c 0194     		str	r4, [sp, #4]
 188 001e 1A6B     		ldr	r2, [r3, #48]
 189 0020 42F00802 		orr	r2, r2, #8
 190 0024 1A63     		str	r2, [r3, #48]
 191 0026 1A6B     		ldr	r2, [r3, #48]
 192 0028 02F00802 		and	r2, r2, #8
 193 002c 0192     		str	r2, [sp, #4]
 194 002e 019A     		ldr	r2, [sp, #4]
 195              	.LBE3:
 196              	.LBB4:
 622:Src/main.c    **** 
 197              		.loc 1 622 0
 198 0030 0294     		str	r4, [sp, #8]
 199 0032 1A6B     		ldr	r2, [r3, #48]
 200 0034 42F00202 		orr	r2, r2, #2
 201 0038 1A63     		str	r2, [r3, #48]
 202 003a 1B6B     		ldr	r3, [r3, #48]
 203 003c 03F00203 		and	r3, r3, #2
 204 0040 0293     		str	r3, [sp, #8]
 205 0042 029B     		ldr	r3, [sp, #8]
 206              	.LBE4:
 625:Src/main.c    **** 
 207              		.loc 1 625 0
 208 0044 184E     		ldr	r6, .L14+4
 209 0046 3046     		mov	r0, r6
 210 0048 4FF47041 		mov	r1, #61440
 211 004c 2246     		mov	r2, r4
 212 004e FFF7FEFF 		bl	HAL_GPIO_WritePin
 213              	.LVL17:
 628:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 214              		.loc 1 628 0
 215 0052 4FF47043 		mov	r3, #61440
 216 0056 0393     		str	r3, [sp, #12]
 629:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 217              		.loc 1 629 0
 218 0058 0125     		movs	r5, #1
 219 005a 0495     		str	r5, [sp, #16]
 630:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 220              		.loc 1 630 0
 221 005c 0594     		str	r4, [sp, #20]
 631:Src/main.c    ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 222              		.loc 1 631 0
 223 005e 0694     		str	r4, [sp, #24]
 632:Src/main.c    **** 
ARM GAS  /tmp/ccgPo7nr.s 			page 17


 224              		.loc 1 632 0
 225 0060 3046     		mov	r0, r6
 226 0062 03A9     		add	r1, sp, #12
 227 0064 FFF7FEFF 		bl	HAL_GPIO_Init
 228              	.LVL18:
 635:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 229              		.loc 1 635 0
 230 0068 4FF44073 		mov	r3, #768
 231 006c 0393     		str	r3, [sp, #12]
 636:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 232              		.loc 1 636 0
 233 006e 0223     		movs	r3, #2
 234 0070 0493     		str	r3, [sp, #16]
 637:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 235              		.loc 1 637 0
 236 0072 0594     		str	r4, [sp, #20]
 638:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 237              		.loc 1 638 0
 238 0074 0323     		movs	r3, #3
 239 0076 0693     		str	r3, [sp, #24]
 639:Src/main.c    **** 
 240              		.loc 1 639 0
 241 0078 0C48     		ldr	r0, .L14+8
 242 007a 03A9     		add	r1, sp, #12
 243 007c FFF7FEFF 		bl	HAL_GPIO_Init
 244              	.LVL19:
 641:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 245              		.loc 1 641 0
 246 0080 1026     		movs	r6, #16
 247 0082 0396     		str	r6, [sp, #12]
 642:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 248              		.loc 1 642 0
 249 0084 0495     		str	r5, [sp, #16]
 643:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 250              		.loc 1 643 0
 251 0086 0594     		str	r4, [sp, #20]
 644:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 252              		.loc 1 644 0
 253 0088 0694     		str	r4, [sp, #24]
 645:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 254              		.loc 1 645 0
 255 008a 094C     		ldr	r4, .L14+12
 256 008c 2046     		mov	r0, r4
 257 008e 03A9     		add	r1, sp, #12
 258 0090 FFF7FEFF 		bl	HAL_GPIO_Init
 259              	.LVL20:
 646:Src/main.c    **** 
 260              		.loc 1 646 0
 261 0094 2046     		mov	r0, r4
 262 0096 3146     		mov	r1, r6
 263 0098 2A46     		mov	r2, r5
 264 009a FFF7FEFF 		bl	HAL_GPIO_WritePin
 265              	.LVL21:
 648:Src/main.c    **** 
 266              		.loc 1 648 0
 267 009e 08B0     		add	sp, sp, #32
 268              	.LCFI5:
ARM GAS  /tmp/ccgPo7nr.s 			page 18


 269              		.cfi_def_cfa_offset 16
 270              		@ sp needed
 271 00a0 70BD     		pop	{r4, r5, r6, pc}
 272              	.L15:
 273 00a2 00BF     		.align	2
 274              	.L14:
 275 00a4 00380240 		.word	1073887232
 276 00a8 000C0240 		.word	1073875968
 277 00ac 00040240 		.word	1073873920
 278 00b0 00000240 		.word	1073872896
 279              		.cfi_endproc
 280              	.LFE142:
 282              		.section	.text.writei2c,"ax",%progbits
 283              		.align	2
 284              		.global	writei2c
 285              		.thumb
 286              		.thumb_func
 288              	writei2c:
 289              	.LFB128:
 128:Src/main.c    ****   //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 290              		.loc 1 128 0
 291              		.cfi_startproc
 292              		@ args = 0, pretend = 0, frame = 0
 293              		@ frame_needed = 0, uses_anonymous_args = 0
 294              	.LVL22:
 135:Src/main.c    ****     i2c_tx_buff_accel[i] = addr++;
 295              		.loc 1 135 0
 296 0000 0023     		movs	r3, #0
 133:Src/main.c    ****   int i;
 297              		.loc 1 133 0
 298 0002 3B22     		movs	r2, #59
 135:Src/main.c    ****     i2c_tx_buff_accel[i] = addr++;
 299              		.loc 1 135 0
 300 0004 05E0     		b	.L17
 301              	.LVL23:
 302              	.L18:
 136:Src/main.c    ****     i2c_rx_buff_accel[i] = i;
 303              		.loc 1 136 0 discriminator 3
 304 0006 2549     		ldr	r1, .L25
 305 0008 CA54     		strb	r2, [r1, r3]
 137:Src/main.c    ****   }
 306              		.loc 1 137 0 discriminator 3
 307 000a 2549     		ldr	r1, .L25+4
 308 000c CB54     		strb	r3, [r1, r3]
 135:Src/main.c    ****     i2c_tx_buff_accel[i] = addr++;
 309              		.loc 1 135 0 discriminator 3
 310 000e 0133     		adds	r3, r3, #1
 311              	.LVL24:
 136:Src/main.c    ****     i2c_rx_buff_accel[i] = i;
 312              		.loc 1 136 0 discriminator 3
 313 0010 0132     		adds	r2, r2, #1
 314              	.LVL25:
 315              	.L17:
 135:Src/main.c    ****     i2c_tx_buff_accel[i] = addr++;
 316              		.loc 1 135 0 discriminator 1
 317 0012 052B     		cmp	r3, #5
 318 0014 F7DD     		ble	.L18
ARM GAS  /tmp/ccgPo7nr.s 			page 19


 128:Src/main.c    ****   //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 319              		.loc 1 128 0
 320 0016 30B5     		push	{r4, r5, lr}
 321              	.LCFI6:
 322              		.cfi_def_cfa_offset 12
 323              		.cfi_offset 4, -12
 324              		.cfi_offset 5, -8
 325              		.cfi_offset 14, -4
 326 0018 83B0     		sub	sp, sp, #12
 327              	.LCFI7:
 328              		.cfi_def_cfa_offset 24
 329              	.LVL26:
 330              	.L23:
 144:Src/main.c    ****     status = HAL_OK;
 331              		.loc 1 144 0
 332 001a 40F6B830 		movw	r0, #3000
 333 001e FFF7FEFF 		bl	osDelay
 334              	.LVL27:
 146:Src/main.c    ****       status = HAL_I2C_Master_Transmit(&hi2c1,I2C_ADDRESS_IMU,i2c_tx_buff_accel+i,sizeof(uint8_t),1
 335              		.loc 1 146 0
 336 0022 0024     		movs	r4, #0
 337 0024 21E0     		b	.L19
 338              	.LVL28:
 339              	.L22:
 147:Src/main.c    **** 
 340              		.loc 1 147 0
 341 0026 2546     		mov	r5, r4
 342 0028 0A23     		movs	r3, #10
 343 002a 0093     		str	r3, [sp]
 344 002c 1D48     		ldr	r0, .L25+8
 345 002e D021     		movs	r1, #208
 346 0030 1A4A     		ldr	r2, .L25
 347 0032 2244     		add	r2, r2, r4
 348 0034 0123     		movs	r3, #1
 349 0036 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 350              	.LVL29:
 149:Src/main.c    ****         HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 351              		.loc 1 149 0
 352 003a 30B1     		cbz	r0, .L20
 150:Src/main.c    ****       }
 353              		.loc 1 150 0
 354 003c 1A48     		ldr	r0, .L25+12
 355              	.LVL30:
 356 003e 4FF40041 		mov	r1, #32768
 357 0042 0122     		movs	r2, #1
 358 0044 FFF7FEFF 		bl	HAL_GPIO_WritePin
 359              	.LVL31:
 360 0048 05E0     		b	.L21
 361              	.LVL32:
 362              	.L20:
 153:Src/main.c    ****       }
 363              		.loc 1 153 0
 364 004a 1748     		ldr	r0, .L25+12
 365              	.LVL33:
 366 004c 4FF40041 		mov	r1, #32768
 367 0050 0022     		movs	r2, #0
 368 0052 FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  /tmp/ccgPo7nr.s 			page 20


 369              	.LVL34:
 370              	.L21:
 155:Src/main.c    ****     }
 371              		.loc 1 155 0 discriminator 2
 372 0056 0A23     		movs	r3, #10
 373 0058 0093     		str	r3, [sp]
 374 005a 1248     		ldr	r0, .L25+8
 375 005c D021     		movs	r1, #208
 376 005e 104A     		ldr	r2, .L25+4
 377 0060 2A44     		add	r2, r2, r5
 378 0062 0123     		movs	r3, #1
 379 0064 FFF7FEFF 		bl	HAL_I2C_Master_Receive
 380              	.LVL35:
 146:Src/main.c    ****       status = HAL_I2C_Master_Transmit(&hi2c1,I2C_ADDRESS_IMU,i2c_tx_buff_accel+i,sizeof(uint8_t),1
 381              		.loc 1 146 0 discriminator 2
 382 0068 0134     		adds	r4, r4, #1
 383              	.LVL36:
 384              	.L19:
 146:Src/main.c    ****       status = HAL_I2C_Master_Transmit(&hi2c1,I2C_ADDRESS_IMU,i2c_tx_buff_accel+i,sizeof(uint8_t),1
 385              		.loc 1 146 0 is_stmt 0 discriminator 1
 386 006a 052C     		cmp	r4, #5
 387 006c DBDD     		ble	.L22
 159:Src/main.c    ****     i2c_accel[1] = (i2c_rx_buff_accel[2] << 8) + i2c_rx_buff_accel[3];
 388              		.loc 1 159 0 is_stmt 1
 389 006e 0C4B     		ldr	r3, .L25+4
 390 0070 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 391 0072 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
 392 0074 0D4A     		ldr	r2, .L25+16
 393 0076 01EB0021 		add	r1, r1, r0, lsl #8
 394 007a 1180     		strh	r1, [r2]	@ movhi
 160:Src/main.c    ****     i2c_accel[2] = (i2c_rx_buff_accel[4] << 8) + i2c_rx_buff_accel[5];
 395              		.loc 1 160 0
 396 007c 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 397 007e D978     		ldrb	r1, [r3, #3]	@ zero_extendqisi2
 398 0080 01EB0021 		add	r1, r1, r0, lsl #8
 399 0084 5180     		strh	r1, [r2, #2]	@ movhi
 161:Src/main.c    ****     //uart_debug(i2c_accel,sizeof(i2c_accel));
 400              		.loc 1 161 0
 401 0086 1979     		ldrb	r1, [r3, #4]	@ zero_extendqisi2
 402 0088 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 403 008a 03EB0123 		add	r3, r3, r1, lsl #8
 404 008e 9380     		strh	r3, [r2, #4]	@ movhi
 164:Src/main.c    ****   }
 405              		.loc 1 164 0
 406 0090 0548     		ldr	r0, .L25+12
 407 0092 4FF48051 		mov	r1, #4096
 408 0096 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 409              	.LVL37:
 165:Src/main.c    **** }
 410              		.loc 1 165 0
 411 009a BEE7     		b	.L23
 412              	.L26:
 413              		.align	2
 414              	.L25:
 415 009c 00000000 		.word	i2c_tx_buff_accel
 416 00a0 00000000 		.word	i2c_rx_buff_accel
 417 00a4 00000000 		.word	hi2c1
ARM GAS  /tmp/ccgPo7nr.s 			page 21


 418 00a8 000C0240 		.word	1073875968
 419 00ac 00000000 		.word	i2c_accel
 420              		.cfi_endproc
 421              	.LFE128:
 423              		.section	.text.uart_debug,"ax",%progbits
 424              		.align	2
 425              		.global	uart_debug
 426              		.thumb
 427              		.thumb_func
 429              	uart_debug:
 430              	.LFB132:
 257:Src/main.c    ****   HAL_StatusTypeDef status = HAL_OK;
 431              		.loc 1 257 0
 432              		.cfi_startproc
 433              		@ args = 0, pretend = 0, frame = 0
 434              		@ frame_needed = 0, uses_anonymous_args = 0
 435              	.LVL38:
 436 0000 08B5     		push	{r3, lr}
 437              	.LCFI8:
 438              		.cfi_def_cfa_offset 8
 439              		.cfi_offset 3, -8
 440              		.cfi_offset 14, -4
 441 0002 0346     		mov	r3, r0
 442              	.LVL39:
 260:Src/main.c    ****   if (status != HAL_OK) {
 443              		.loc 1 260 0
 444 0004 0A46     		mov	r2, r1
 445 0006 0648     		ldr	r0, .L30
 446              	.LVL40:
 447 0008 1946     		mov	r1, r3
 448              	.LVL41:
 449 000a 4FF0FF33 		mov	r3, #-1
 450              	.LVL42:
 451 000e FFF7FEFF 		bl	HAL_UART_Transmit
 452              	.LVL43:
 261:Src/main.c    ****     //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 453              		.loc 1 261 0
 454 0012 20B9     		cbnz	r0, .L27
 265:Src/main.c    ****     //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 455              		.loc 1 265 0
 456 0014 0348     		ldr	r0, .L30+4
 457              	.LVL44:
 458 0016 4FF40041 		mov	r1, #32768
 459 001a FFF7FEFF 		bl	HAL_GPIO_TogglePin
 460              	.LVL45:
 461              	.L27:
 462 001e 08BD     		pop	{r3, pc}
 463              	.L31:
 464              		.align	2
 465              	.L30:
 466 0020 00000000 		.word	huart4
 467 0024 000C0240 		.word	1073875968
 468              		.cfi_endproc
 469              	.LFE132:
 471              		.section	.text.uartTest,"ax",%progbits
 472              		.align	2
 473              		.global	uartTest
ARM GAS  /tmp/ccgPo7nr.s 			page 22


 474              		.thumb
 475              		.thumb_func
 477              	uartTest:
 478              	.LFB129:
 168:Src/main.c    ****   int i = 0;
 479              		.loc 1 168 0
 480              		.cfi_startproc
 481              		@ args = 0, pretend = 0, frame = 0
 482              		@ frame_needed = 0, uses_anonymous_args = 0
 483              	.LVL46:
 484 0000 08B5     		push	{r3, lr}
 485              	.LCFI9:
 486              		.cfi_def_cfa_offset 8
 487              		.cfi_offset 3, -8
 488              		.cfi_offset 14, -4
 489              	.LVL47:
 170:Src/main.c    ****     arr[i] = i;
 490              		.loc 1 170 0
 491 0002 0023     		movs	r3, #0
 492 0004 02E0     		b	.L33
 493              	.LVL48:
 494              	.L34:
 171:Src/main.c    ****   }
 495              		.loc 1 171 0 discriminator 3
 496 0006 094A     		ldr	r2, .L37
 497 0008 D354     		strb	r3, [r2, r3]
 170:Src/main.c    ****     arr[i] = i;
 498              		.loc 1 170 0 discriminator 3
 499 000a 0133     		adds	r3, r3, #1
 500              	.LVL49:
 501              	.L33:
 170:Src/main.c    ****     arr[i] = i;
 502              		.loc 1 170 0 is_stmt 0 discriminator 1
 503 000c 082B     		cmp	r3, #8
 504 000e FADD     		ble	.L34
 505              	.LVL50:
 506              	.L35:
 174:Src/main.c    ****     //HAL_UART_Transmit(&huart4,ptr,size_,HAL_MAX_DELAY);
 507              		.loc 1 174 0 is_stmt 1 discriminator 1
 508 0010 0748     		ldr	r0, .L37+4
 509 0012 4FF48051 		mov	r1, #4096
 510 0016 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 511              	.LVL51:
 176:Src/main.c    ****     osDelay(100);
 512              		.loc 1 176 0 discriminator 1
 513 001a 0448     		ldr	r0, .L37
 514 001c 0921     		movs	r1, #9
 515 001e FFF7FEFF 		bl	uart_debug
 516              	.LVL52:
 177:Src/main.c    ****   }
 517              		.loc 1 177 0 discriminator 1
 518 0022 6420     		movs	r0, #100
 519 0024 FFF7FEFF 		bl	osDelay
 520              	.LVL53:
 178:Src/main.c    **** }
 521              		.loc 1 178 0 discriminator 1
 522 0028 F2E7     		b	.L35
ARM GAS  /tmp/ccgPo7nr.s 			page 23


 523              	.L38:
 524 002a 00BF     		.align	2
 525              	.L37:
 526 002c 00000000 		.word	arr
 527 0030 000C0240 		.word	1073875968
 528              		.cfi_endproc
 529              	.LFE129:
 531              		.section	.text.spiTest,"ax",%progbits
 532              		.align	2
 533              		.global	spiTest
 534              		.thumb
 535              		.thumb_func
 537              	spiTest:
 538              	.LFB130:
 181:Src/main.c    ****   HAL_StatusTypeDef status;
 539              		.loc 1 181 0
 540              		.cfi_startproc
 541              		@ args = 0, pretend = 0, frame = 0
 542              		@ frame_needed = 0, uses_anonymous_args = 0
 543              	.LVL54:
 544 0000 10B5     		push	{r4, lr}
 545              	.LCFI10:
 546              		.cfi_def_cfa_offset 8
 547              		.cfi_offset 4, -8
 548              		.cfi_offset 14, -4
 549 0002 82B0     		sub	sp, sp, #8
 550              	.LCFI11:
 551              		.cfi_def_cfa_offset 16
 183:Src/main.c    ****   while (1) {
 552              		.loc 1 183 0
 553 0004 1F48     		ldr	r0, .L44
 554              	.LVL55:
 555 0006 1021     		movs	r1, #16
 556 0008 0122     		movs	r2, #1
 557 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
 558              	.LVL56:
 559              	.L42:
 185:Src/main.c    ****     status = HAL_OK;
 560              		.loc 1 185 0
 561 000e 4FF47A70 		mov	r0, #1000
 562 0012 FFF7FEFF 		bl	osDelay
 563              	.LVL57:
 187:Src/main.c    ****     HAL_Delay(1);
 564              		.loc 1 187 0
 565 0016 1B48     		ldr	r0, .L44
 566 0018 1021     		movs	r1, #16
 567 001a 0022     		movs	r2, #0
 568 001c FFF7FEFF 		bl	HAL_GPIO_WritePin
 569              	.LVL58:
 188:Src/main.c    ****     //status = HAL_SPI_Transmit(&hspi1, spi_address,1,HAL_MAX_DELAY);
 570              		.loc 1 188 0
 571 0020 0120     		movs	r0, #1
 572 0022 FFF7FEFF 		bl	HAL_Delay
 573              	.LVL59:
 193:Src/main.c    ****     //HAL_Delay(1);
 574              		.loc 1 193 0
 575 0026 4FF0FF33 		mov	r3, #-1
ARM GAS  /tmp/ccgPo7nr.s 			page 24


 576 002a 0093     		str	r3, [sp]
 577 002c 1648     		ldr	r0, .L44+4
 578 002e 1749     		ldr	r1, .L44+8
 579 0030 174A     		ldr	r2, .L44+12
 580 0032 0123     		movs	r3, #1
 581 0034 FFF7FEFF 		bl	HAL_SPI_TransmitReceive
 582              	.LVL60:
 195:Src/main.c    ****       HAL_GPIO_WritePin(GPIOD, GREEN_LED, GPIO_PIN_SET);
 583              		.loc 1 195 0
 584 0038 30B1     		cbz	r0, .L40
 196:Src/main.c    ****     }
 585              		.loc 1 196 0
 586 003a 1648     		ldr	r0, .L44+16
 587              	.LVL61:
 588 003c 4FF48051 		mov	r1, #4096
 589 0040 0122     		movs	r2, #1
 590 0042 FFF7FEFF 		bl	HAL_GPIO_WritePin
 591              	.LVL62:
 592 0046 05E0     		b	.L41
 593              	.LVL63:
 594              	.L40:
 199:Src/main.c    ****     }
 595              		.loc 1 199 0
 596 0048 1248     		ldr	r0, .L44+16
 597              	.LVL64:
 598 004a 4FF48051 		mov	r1, #4096
 599 004e 0022     		movs	r2, #0
 600 0050 FFF7FEFF 		bl	HAL_GPIO_WritePin
 601              	.LVL65:
 602              	.L41:
 202:Src/main.c    ****     HAL_Delay(1);
 603              		.loc 1 202 0
 604 0054 104C     		ldr	r4, .L44+20
 605 0056 4FF0FF33 		mov	r3, #-1
 606 005a 0093     		str	r3, [sp]
 607 005c 0A48     		ldr	r0, .L44+4
 608 005e 0F49     		ldr	r1, .L44+24
 609 0060 2246     		mov	r2, r4
 610 0062 0123     		movs	r3, #1
 611 0064 FFF7FEFF 		bl	HAL_SPI_TransmitReceive
 612              	.LVL66:
 203:Src/main.c    ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 613              		.loc 1 203 0
 614 0068 0120     		movs	r0, #1
 615 006a FFF7FEFF 		bl	HAL_Delay
 616              	.LVL67:
 204:Src/main.c    ****     //spi_rx_buff[0] = 'A';
 617              		.loc 1 204 0
 618 006e 0548     		ldr	r0, .L44
 619 0070 1021     		movs	r1, #16
 620 0072 0122     		movs	r2, #1
 621 0074 FFF7FEFF 		bl	HAL_GPIO_WritePin
 622              	.LVL68:
 207:Src/main.c    ****   }
 623              		.loc 1 207 0
 624 0078 601E     		subs	r0, r4, #1
 625 007a 0221     		movs	r1, #2
ARM GAS  /tmp/ccgPo7nr.s 			page 25


 626 007c FFF7FEFF 		bl	uart_debug
 627              	.LVL69:
 208:Src/main.c    **** }
 628              		.loc 1 208 0
 629 0080 C5E7     		b	.L42
 630              	.L45:
 631 0082 00BF     		.align	2
 632              	.L44:
 633 0084 00000240 		.word	1073872896
 634 0088 00000000 		.word	hspi1
 635 008c 00000000 		.word	.LANCHOR0
 636 0090 00000000 		.word	spi_rx_buff
 637 0094 000C0240 		.word	1073875968
 638 0098 01000000 		.word	spi_rx_buff+1
 639 009c 01000000 		.word	.LANCHOR0+1
 640              		.cfi_endproc
 641              	.LFE130:
 643              		.section	.text.Leds,"ax",%progbits
 644              		.align	2
 645              		.global	Leds
 646              		.thumb
 647              		.thumb_func
 649              	Leds:
 650              	.LFB133:
 270:Src/main.c    **** 
 651              		.loc 1 270 0
 652              		.cfi_startproc
 653              		@ args = 0, pretend = 0, frame = 8
 654              		@ frame_needed = 0, uses_anonymous_args = 0
 655              	.LVL70:
 656 0000 10B5     		push	{r4, lr}
 657              	.LCFI12:
 658              		.cfi_def_cfa_offset 8
 659              		.cfi_offset 4, -8
 660              		.cfi_offset 14, -4
 661 0002 82B0     		sub	sp, sp, #8
 662              	.LCFI13:
 663              		.cfi_def_cfa_offset 16
 664              	.LVL71:
 665              	.L47:
 291:Src/main.c    ****     osDelay(100);
 666              		.loc 1 291 0 discriminator 1
 667 0004 274C     		ldr	r4, .L49
 668 0006 2046     		mov	r0, r4
 669 0008 4FF40041 		mov	r1, #32768
 670 000c 0122     		movs	r2, #1
 671 000e FFF7FEFF 		bl	HAL_GPIO_WritePin
 672              	.LVL72:
 292:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 673              		.loc 1 292 0 discriminator 1
 674 0012 6420     		movs	r0, #100
 675 0014 FFF7FEFF 		bl	osDelay
 676              	.LVL73:
 293:Src/main.c    ****     osDelay(100);
 677              		.loc 1 293 0 discriminator 1
 678 0018 2046     		mov	r0, r4
 679 001a 4FF40041 		mov	r1, #32768
ARM GAS  /tmp/ccgPo7nr.s 			page 26


 680 001e 0022     		movs	r2, #0
 681 0020 FFF7FEFF 		bl	HAL_GPIO_WritePin
 682              	.LVL74:
 294:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 683              		.loc 1 294 0 discriminator 1
 684 0024 6420     		movs	r0, #100
 685 0026 FFF7FEFF 		bl	osDelay
 686              	.LVL75:
 295:Src/main.c    ****     osDelay(100);
 687              		.loc 1 295 0 discriminator 1
 688 002a 2046     		mov	r0, r4
 689 002c 4FF48051 		mov	r1, #4096
 690 0030 0122     		movs	r2, #1
 691 0032 FFF7FEFF 		bl	HAL_GPIO_WritePin
 692              	.LVL76:
 296:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 693              		.loc 1 296 0 discriminator 1
 694 0036 6420     		movs	r0, #100
 695 0038 FFF7FEFF 		bl	osDelay
 696              	.LVL77:
 297:Src/main.c    ****     osDelay(100);
 697              		.loc 1 297 0 discriminator 1
 698 003c 2046     		mov	r0, r4
 699 003e 4FF48051 		mov	r1, #4096
 700 0042 0022     		movs	r2, #0
 701 0044 FFF7FEFF 		bl	HAL_GPIO_WritePin
 702              	.LVL78:
 298:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 703              		.loc 1 298 0 discriminator 1
 704 0048 6420     		movs	r0, #100
 705 004a FFF7FEFF 		bl	osDelay
 706              	.LVL79:
 299:Src/main.c    ****     osDelay(100);
 707              		.loc 1 299 0 discriminator 1
 708 004e 2046     		mov	r0, r4
 709 0050 4FF40051 		mov	r1, #8192
 710 0054 0122     		movs	r2, #1
 711 0056 FFF7FEFF 		bl	HAL_GPIO_WritePin
 712              	.LVL80:
 300:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 713              		.loc 1 300 0 discriminator 1
 714 005a 6420     		movs	r0, #100
 715 005c FFF7FEFF 		bl	osDelay
 716              	.LVL81:
 301:Src/main.c    ****     osDelay(100);
 717              		.loc 1 301 0 discriminator 1
 718 0060 2046     		mov	r0, r4
 719 0062 4FF40051 		mov	r1, #8192
 720 0066 0022     		movs	r2, #0
 721 0068 FFF7FEFF 		bl	HAL_GPIO_WritePin
 722              	.LVL82:
 302:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 723              		.loc 1 302 0 discriminator 1
 724 006c 6420     		movs	r0, #100
 725 006e FFF7FEFF 		bl	osDelay
 726              	.LVL83:
 303:Src/main.c    ****     osDelay(100);
ARM GAS  /tmp/ccgPo7nr.s 			page 27


 727              		.loc 1 303 0 discriminator 1
 728 0072 2046     		mov	r0, r4
 729 0074 4FF48041 		mov	r1, #16384
 730 0078 0122     		movs	r2, #1
 731 007a FFF7FEFF 		bl	HAL_GPIO_WritePin
 732              	.LVL84:
 304:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 733              		.loc 1 304 0 discriminator 1
 734 007e 6420     		movs	r0, #100
 735 0080 FFF7FEFF 		bl	osDelay
 736              	.LVL85:
 305:Src/main.c    **** 
 737              		.loc 1 305 0 discriminator 1
 738 0084 2046     		mov	r0, r4
 739 0086 4FF48041 		mov	r1, #16384
 740 008a 0022     		movs	r2, #0
 741 008c FFF7FEFF 		bl	HAL_GPIO_WritePin
 742              	.LVL86:
 307:Src/main.c    ****     osDelayUntil(&prevWakeTime, 50);
 743              		.loc 1 307 0 discriminator 1
 744 0090 FFF7FEFF 		bl	osKernelSysTick
 745              	.LVL87:
 746 0094 02AB     		add	r3, sp, #8
 747 0096 43F8040D 		str	r0, [r3, #-4]!
 308:Src/main.c    ****   }
 748              		.loc 1 308 0 discriminator 1
 749 009a 1846     		mov	r0, r3
 750 009c 3221     		movs	r1, #50
 751 009e FFF7FEFF 		bl	osDelayUntil
 752              	.LVL88:
 309:Src/main.c    **** }
 753              		.loc 1 309 0 discriminator 1
 754 00a2 AFE7     		b	.L47
 755              	.L50:
 756              		.align	2
 757              	.L49:
 758 00a4 000C0240 		.word	1073875968
 759              		.cfi_endproc
 760              	.LFE133:
 762              		.section	.text.ConfigureADC,"ax",%progbits
 763              		.align	2
 764              		.global	ConfigureADC
 765              		.thumb
 766              		.thumb_func
 768              	ConfigureADC:
 769              	.LFB134:
 311:Src/main.c    ****     GPIO_InitTypeDef gpioInit;
 770              		.loc 1 311 0
 771              		.cfi_startproc
 772              		@ args = 0, pretend = 0, frame = 48
 773              		@ frame_needed = 0, uses_anonymous_args = 0
 774 0000 70B5     		push	{r4, r5, r6, lr}
 775              	.LCFI14:
 776              		.cfi_def_cfa_offset 16
 777              		.cfi_offset 4, -16
 778              		.cfi_offset 5, -12
 779              		.cfi_offset 6, -8
ARM GAS  /tmp/ccgPo7nr.s 			page 28


 780              		.cfi_offset 14, -4
 781 0002 8CB0     		sub	sp, sp, #48
 782              	.LCFI15:
 783              		.cfi_def_cfa_offset 64
 784              	.LBB5:
 314:Src/main.c    ****     __ADC1_CLK_ENABLE();
 785              		.loc 1 314 0
 786 0004 0025     		movs	r5, #0
 787 0006 0195     		str	r5, [sp, #4]
 788 0008 264B     		ldr	r3, .L55
 789 000a 1A6B     		ldr	r2, [r3, #48]
 790 000c 42F00402 		orr	r2, r2, #4
 791 0010 1A63     		str	r2, [r3, #48]
 792 0012 1A6B     		ldr	r2, [r3, #48]
 793 0014 02F00402 		and	r2, r2, #4
 794 0018 0192     		str	r2, [sp, #4]
 795 001a 019A     		ldr	r2, [sp, #4]
 796              	.LBE5:
 797              	.LBB6:
 315:Src/main.c    ****  
 798              		.loc 1 315 0
 799 001c 0295     		str	r5, [sp, #8]
 800 001e 5A6C     		ldr	r2, [r3, #68]
 801 0020 42F48072 		orr	r2, r2, #256
 802 0024 5A64     		str	r2, [r3, #68]
 803 0026 5B6C     		ldr	r3, [r3, #68]
 804 0028 03F48073 		and	r3, r3, #256
 805 002c 0293     		str	r3, [sp, #8]
 806 002e 029B     		ldr	r3, [sp, #8]
 807              	.LBE6:
 317:Src/main.c    ****     gpioInit.Mode = GPIO_MODE_ANALOG;
 808              		.loc 1 317 0
 809 0030 0223     		movs	r3, #2
 810 0032 0793     		str	r3, [sp, #28]
 318:Src/main.c    ****     gpioInit.Pull = GPIO_NOPULL;
 811              		.loc 1 318 0
 812 0034 0323     		movs	r3, #3
 813 0036 0893     		str	r3, [sp, #32]
 319:Src/main.c    ****     HAL_GPIO_Init(GPIOC, &gpioInit);
 814              		.loc 1 319 0
 815 0038 0995     		str	r5, [sp, #36]
 320:Src/main.c    ****  
 816              		.loc 1 320 0
 817 003a 1B48     		ldr	r0, .L55+4
 818 003c 07A9     		add	r1, sp, #28
 819 003e FFF7FEFF 		bl	HAL_GPIO_Init
 820              	.LVL89:
 322:Src/main.c    ****     HAL_NVIC_EnableIRQ(ADC_IRQn);
 821              		.loc 1 322 0
 822 0042 1220     		movs	r0, #18
 823 0044 2946     		mov	r1, r5
 824 0046 2A46     		mov	r2, r5
 825 0048 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 826              	.LVL90:
 323:Src/main.c    ****  
 827              		.loc 1 323 0
 828 004c 1220     		movs	r0, #18
ARM GAS  /tmp/ccgPo7nr.s 			page 29


 829 004e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 830              	.LVL91:
 327:Src/main.c    ****  
 831              		.loc 1 327 0
 832 0052 164C     		ldr	r4, .L55+8
 833 0054 164B     		ldr	r3, .L55+12
 834 0056 2360     		str	r3, [r4]
 329:Src/main.c    ****     g_AdcHandle.Init.Resolution = ADC_RESOLUTION_12B;
 835              		.loc 1 329 0
 836 0058 6560     		str	r5, [r4, #4]
 330:Src/main.c    ****     g_AdcHandle.Init.ScanConvMode = DISABLE;
 837              		.loc 1 330 0
 838 005a A560     		str	r5, [r4, #8]
 331:Src/main.c    ****     g_AdcHandle.Init.ContinuousConvMode = ENABLE;
 839              		.loc 1 331 0
 840 005c 2561     		str	r5, [r4, #16]
 332:Src/main.c    ****     g_AdcHandle.Init.DiscontinuousConvMode = DISABLE;
 841              		.loc 1 332 0
 842 005e 0126     		movs	r6, #1
 843 0060 A661     		str	r6, [r4, #24]
 333:Src/main.c    ****     g_AdcHandle.Init.NbrOfDiscConversion = 0;
 844              		.loc 1 333 0
 845 0062 2562     		str	r5, [r4, #32]
 334:Src/main.c    ****     g_AdcHandle.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 846              		.loc 1 334 0
 847 0064 6562     		str	r5, [r4, #36]
 335:Src/main.c    ****     g_AdcHandle.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 848              		.loc 1 335 0
 849 0066 E562     		str	r5, [r4, #44]
 336:Src/main.c    ****     g_AdcHandle.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 850              		.loc 1 336 0
 851 0068 A562     		str	r5, [r4, #40]
 337:Src/main.c    ****     g_AdcHandle.Init.NbrOfConversion = 1;
 852              		.loc 1 337 0
 853 006a E560     		str	r5, [r4, #12]
 338:Src/main.c    ****     g_AdcHandle.Init.DMAContinuousRequests = ENABLE;
 854              		.loc 1 338 0
 855 006c E661     		str	r6, [r4, #28]
 339:Src/main.c    ****     g_AdcHandle.Init.EOCSelection = DISABLE;
 856              		.loc 1 339 0
 857 006e 2663     		str	r6, [r4, #48]
 340:Src/main.c    ****  
 858              		.loc 1 340 0
 859 0070 6561     		str	r5, [r4, #20]
 342:Src/main.c    ****  
 860              		.loc 1 342 0
 861 0072 2046     		mov	r0, r4
 862 0074 FFF7FEFF 		bl	HAL_ADC_Init
 863              	.LVL92:
 344:Src/main.c    ****     adcChannel.Rank = 1;
 864              		.loc 1 344 0
 865 0078 0B23     		movs	r3, #11
 866 007a 0393     		str	r3, [sp, #12]
 345:Src/main.c    ****     adcChannel.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 867              		.loc 1 345 0
 868 007c 0496     		str	r6, [sp, #16]
 346:Src/main.c    ****     adcChannel.Offset = 0;
ARM GAS  /tmp/ccgPo7nr.s 			page 30


 869              		.loc 1 346 0
 870 007e 0723     		movs	r3, #7
 871 0080 0593     		str	r3, [sp, #20]
 347:Src/main.c    ****  
 872              		.loc 1 347 0
 873 0082 0695     		str	r5, [sp, #24]
 349:Src/main.c    ****     {
 874              		.loc 1 349 0
 875 0084 2046     		mov	r0, r4
 876 0086 03A9     		add	r1, sp, #12
 877 0088 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 878              	.LVL93:
 879 008c 40B1     		cbz	r0, .L51
 880              	.L53:
 352:Src/main.c    ****           HAL_Delay(100);
 881              		.loc 1 352 0 discriminator 1
 882 008e 0948     		ldr	r0, .L55+16
 883 0090 4FF40041 		mov	r1, #32768
 884 0094 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 885              	.LVL94:
 353:Src/main.c    ****         }
 886              		.loc 1 353 0 discriminator 1
 887 0098 6420     		movs	r0, #100
 888 009a FFF7FEFF 		bl	HAL_Delay
 889              	.LVL95:
 354:Src/main.c    ****     }
 890              		.loc 1 354 0 discriminator 1
 891 009e F6E7     		b	.L53
 892              	.L51:
 356:Src/main.c    **** 
 893              		.loc 1 356 0
 894 00a0 0CB0     		add	sp, sp, #48
 895              	.LCFI16:
 896              		.cfi_def_cfa_offset 16
 897              		@ sp needed
 898 00a2 70BD     		pop	{r4, r5, r6, pc}
 899              	.L56:
 900              		.align	2
 901              	.L55:
 902 00a4 00380240 		.word	1073887232
 903 00a8 00080240 		.word	1073874944
 904 00ac 00000000 		.word	g_AdcHandle
 905 00b0 00200140 		.word	1073815552
 906 00b4 000C0240 		.word	1073875968
 907              		.cfi_endproc
 908              	.LFE134:
 910              		.section	.text.adcTest,"ax",%progbits
 911              		.align	2
 912              		.global	adcTest
 913              		.thumb
 914              		.thumb_func
 916              	adcTest:
 917              	.LFB135:
 358:Src/main.c    ****   ConfigureADC();
 918              		.loc 1 358 0
 919              		.cfi_startproc
 920              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccgPo7nr.s 			page 31


 921              		@ frame_needed = 0, uses_anonymous_args = 0
 922              	.LVL96:
 923 0000 08B5     		push	{r3, lr}
 924              	.LCFI17:
 925              		.cfi_def_cfa_offset 8
 926              		.cfi_offset 3, -8
 927              		.cfi_offset 14, -4
 359:Src/main.c    ****   HAL_ADC_Start(&g_AdcHandle);
 928              		.loc 1 359 0
 929 0002 FFF7FEFF 		bl	ConfigureADC
 930              	.LVL97:
 360:Src/main.c    ****   int g_MeasurementNumber;
 931              		.loc 1 360 0
 932 0006 0948     		ldr	r0, .L61
 933 0008 FFF7FEFF 		bl	HAL_ADC_Start
 934              	.LVL98:
 935              	.L58:
 363:Src/main.c    ****     if (HAL_ADC_PollForConversion(&g_AdcHandle,1000000) == HAL_OK) {
 936              		.loc 1 363 0
 937 000c 6420     		movs	r0, #100
 938 000e FFF7FEFF 		bl	osDelay
 939              	.LVL99:
 364:Src/main.c    ****       g_ADCValue = HAL_ADC_GetValue(&g_AdcHandle);
 940              		.loc 1 364 0
 941 0012 0648     		ldr	r0, .L61
 942 0014 0649     		ldr	r1, .L61+4
 943 0016 FFF7FEFF 		bl	HAL_ADC_PollForConversion
 944              	.LVL100:
 945 001a 0028     		cmp	r0, #0
 946 001c F6D1     		bne	.L58
 365:Src/main.c    ****       g_MeasurementNumber++;
 947              		.loc 1 365 0
 948 001e 0348     		ldr	r0, .L61
 949 0020 FFF7FEFF 		bl	HAL_ADC_GetValue
 950              	.LVL101:
 951 0024 034B     		ldr	r3, .L61+8
 952 0026 1860     		str	r0, [r3]
 953 0028 F0E7     		b	.L58
 954              	.L62:
 955 002a 00BF     		.align	2
 956              	.L61:
 957 002c 00000000 		.word	g_AdcHandle
 958 0030 40420F00 		.word	1000000
 959 0034 00000000 		.word	g_ADCValue
 960              		.cfi_endproc
 961              	.LFE135:
 963              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 964              		.align	2
 965              		.global	HAL_TIM_PeriodElapsedCallback
 966              		.thumb
 967              		.thumb_func
 969              	HAL_TIM_PeriodElapsedCallback:
 970              	.LFB144:
 670:Src/main.c    ****   /* USER CODE END 5 */ 
 671:Src/main.c    **** }
 672:Src/main.c    **** 
 673:Src/main.c    **** /**
ARM GAS  /tmp/ccgPo7nr.s 			page 32


 674:Src/main.c    ****   * @brief  Period elapsed callback in non blocking mode
 675:Src/main.c    ****   * @note   This function is called  when TIM1 interrupt took place, inside
 676:Src/main.c    ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 677:Src/main.c    ****   * a global variable "uwTick" used as application time base.
 678:Src/main.c    ****   * @param  htim : TIM handle
 679:Src/main.c    ****   * @retval None
 680:Src/main.c    ****   */
 681:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 682:Src/main.c    **** {
 971              		.loc 1 682 0
 972              		.cfi_startproc
 973              		@ args = 0, pretend = 0, frame = 0
 974              		@ frame_needed = 0, uses_anonymous_args = 0
 975              	.LVL102:
 976 0000 08B5     		push	{r3, lr}
 977              	.LCFI18:
 978              		.cfi_def_cfa_offset 8
 979              		.cfi_offset 3, -8
 980              		.cfi_offset 14, -4
 683:Src/main.c    ****   /* USER CODE BEGIN Callback 0 */
 684:Src/main.c    **** 
 685:Src/main.c    ****   /* USER CODE END Callback 0 */
 686:Src/main.c    ****   if (htim->Instance == TIM1) {
 981              		.loc 1 686 0
 982 0002 0268     		ldr	r2, [r0]
 983 0004 024B     		ldr	r3, .L66
 984 0006 9A42     		cmp	r2, r3
 985 0008 01D1     		bne	.L63
 687:Src/main.c    ****     HAL_IncTick();
 986              		.loc 1 687 0
 987 000a FFF7FEFF 		bl	HAL_IncTick
 988              	.LVL103:
 989              	.L63:
 990 000e 08BD     		pop	{r3, pc}
 991              	.L67:
 992              		.align	2
 993              	.L66:
 994 0010 00000140 		.word	1073807360
 995              		.cfi_endproc
 996              	.LFE144:
 998              		.section	.text._Error_Handler,"ax",%progbits
 999              		.align	2
 1000              		.global	_Error_Handler
 1001              		.thumb
 1002              		.thumb_func
 1004              	_Error_Handler:
 1005              	.LFB145:
 688:Src/main.c    ****   }
 689:Src/main.c    ****   /* USER CODE BEGIN Callback 1 */
 690:Src/main.c    **** 
 691:Src/main.c    ****   /* USER CODE END Callback 1 */
 692:Src/main.c    **** }
 693:Src/main.c    **** 
 694:Src/main.c    **** /**
 695:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 696:Src/main.c    ****   * @param  file: The file name as string.
 697:Src/main.c    ****   * @param  line: The line in file as a number.
ARM GAS  /tmp/ccgPo7nr.s 			page 33


 698:Src/main.c    ****   * @retval None
 699:Src/main.c    ****   */
 700:Src/main.c    **** void _Error_Handler(char *file, int line)
 701:Src/main.c    **** {
 1006              		.loc 1 701 0
 1007              		.cfi_startproc
 1008              		@ Volatile: function does not return.
 1009              		@ args = 0, pretend = 0, frame = 0
 1010              		@ frame_needed = 0, uses_anonymous_args = 0
 1011              	.LVL104:
 1012 0000 08B5     		push	{r3, lr}
 1013              	.LCFI19:
 1014              		.cfi_def_cfa_offset 8
 1015              		.cfi_offset 3, -8
 1016              		.cfi_offset 14, -4
 1017              	.LVL105:
 1018              	.L69:
 702:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 703:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 704:Src/main.c    ****   volatile int i;
 705:Src/main.c    ****   while(1)
 706:Src/main.c    ****   {
 707:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, BLUE_LED, GPIO_PIN_SET);
 1019              		.loc 1 707 0 discriminator 1
 1020 0002 0348     		ldr	r0, .L71
 1021 0004 4FF40041 		mov	r1, #32768
 1022 0008 0122     		movs	r2, #1
 1023 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
 1024              	.LVL106:
 708:Src/main.c    ****   }
 1025              		.loc 1 708 0 discriminator 1
 1026 000e F8E7     		b	.L69
 1027              	.L72:
 1028              		.align	2
 1029              	.L71:
 1030 0010 000C0240 		.word	1073875968
 1031              		.cfi_endproc
 1032              	.LFE145:
 1034              		.section	.text.MX_UART4_Init,"ax",%progbits
 1035              		.align	2
 1036              		.thumb
 1037              		.thumb_func
 1039              	MX_UART4_Init:
 1040              	.LFB141:
 590:Src/main.c    **** 
 1041              		.loc 1 590 0
 1042              		.cfi_startproc
 1043              		@ args = 0, pretend = 0, frame = 0
 1044              		@ frame_needed = 0, uses_anonymous_args = 0
 1045 0000 08B5     		push	{r3, lr}
 1046              	.LCFI20:
 1047              		.cfi_def_cfa_offset 8
 1048              		.cfi_offset 3, -8
 1049              		.cfi_offset 14, -4
 592:Src/main.c    ****   huart4.Init.BaudRate = 57600;
 1050              		.loc 1 592 0
 1051 0002 0B48     		ldr	r0, .L76
ARM GAS  /tmp/ccgPo7nr.s 			page 34


 1052 0004 0B4B     		ldr	r3, .L76+4
 1053 0006 0360     		str	r3, [r0]
 593:Src/main.c    ****   huart4.Init.WordLength = UART_WORDLENGTH_8B;
 1054              		.loc 1 593 0
 1055 0008 4FF46143 		mov	r3, #57600
 1056 000c 4360     		str	r3, [r0, #4]
 594:Src/main.c    ****   huart4.Init.StopBits = UART_STOPBITS_1;
 1057              		.loc 1 594 0
 1058 000e 0023     		movs	r3, #0
 1059 0010 8360     		str	r3, [r0, #8]
 595:Src/main.c    ****   huart4.Init.Parity = UART_PARITY_NONE;
 1060              		.loc 1 595 0
 1061 0012 C360     		str	r3, [r0, #12]
 596:Src/main.c    ****   huart4.Init.Mode = UART_MODE_TX_RX;
 1062              		.loc 1 596 0
 1063 0014 0361     		str	r3, [r0, #16]
 597:Src/main.c    ****   huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1064              		.loc 1 597 0
 1065 0016 0C22     		movs	r2, #12
 1066 0018 4261     		str	r2, [r0, #20]
 598:Src/main.c    ****   huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 1067              		.loc 1 598 0
 1068 001a 8361     		str	r3, [r0, #24]
 599:Src/main.c    ****   if (HAL_UART_Init(&huart4) != HAL_OK)
 1069              		.loc 1 599 0
 1070 001c C361     		str	r3, [r0, #28]
 600:Src/main.c    ****   {
 1071              		.loc 1 600 0
 1072 001e FFF7FEFF 		bl	HAL_UART_Init
 1073              	.LVL107:
 1074 0022 20B1     		cbz	r0, .L73
 602:Src/main.c    ****   }
 1075              		.loc 1 602 0
 1076 0024 0448     		ldr	r0, .L76+8
 1077 0026 40F25A21 		movw	r1, #602
 1078 002a FFF7FEFF 		bl	_Error_Handler
 1079              	.LVL108:
 1080              	.L73:
 1081 002e 08BD     		pop	{r3, pc}
 1082              	.L77:
 1083              		.align	2
 1084              	.L76:
 1085 0030 00000000 		.word	huart4
 1086 0034 004C0040 		.word	1073761280
 1087 0038 00000000 		.word	.LC8
 1088              		.cfi_endproc
 1089              	.LFE141:
 1091              		.section	.text.MX_SPI1_Init,"ax",%progbits
 1092              		.align	2
 1093              		.thumb
 1094              		.thumb_func
 1096              	MX_SPI1_Init:
 1097              	.LFB140:
 566:Src/main.c    **** 
 1098              		.loc 1 566 0
 1099              		.cfi_startproc
 1100              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccgPo7nr.s 			page 35


 1101              		@ frame_needed = 0, uses_anonymous_args = 0
 1102 0000 08B5     		push	{r3, lr}
 1103              	.LCFI21:
 1104              		.cfi_def_cfa_offset 8
 1105              		.cfi_offset 3, -8
 1106              		.cfi_offset 14, -4
 569:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 1107              		.loc 1 569 0
 1108 0002 0E48     		ldr	r0, .L81
 1109 0004 0E4B     		ldr	r3, .L81+4
 1110 0006 0360     		str	r3, [r0]
 570:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 1111              		.loc 1 570 0
 1112 0008 4FF48273 		mov	r3, #260
 1113 000c 4360     		str	r3, [r0, #4]
 571:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 1114              		.loc 1 571 0
 1115 000e 0023     		movs	r3, #0
 1116 0010 8360     		str	r3, [r0, #8]
 572:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 1117              		.loc 1 572 0
 1118 0012 C360     		str	r3, [r0, #12]
 573:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 1119              		.loc 1 573 0
 1120 0014 0361     		str	r3, [r0, #16]
 574:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 1121              		.loc 1 574 0
 1122 0016 4361     		str	r3, [r0, #20]
 575:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 1123              		.loc 1 575 0
 1124 0018 4FF40072 		mov	r2, #512
 1125 001c 8261     		str	r2, [r0, #24]
 576:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 1126              		.loc 1 576 0
 1127 001e C361     		str	r3, [r0, #28]
 577:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 1128              		.loc 1 577 0
 1129 0020 0362     		str	r3, [r0, #32]
 578:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 1130              		.loc 1 578 0
 1131 0022 4362     		str	r3, [r0, #36]
 579:Src/main.c    ****   hspi1.Init.CRCPolynomial = 10;
 1132              		.loc 1 579 0
 1133 0024 8362     		str	r3, [r0, #40]
 580:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 1134              		.loc 1 580 0
 1135 0026 0A23     		movs	r3, #10
 1136 0028 C362     		str	r3, [r0, #44]
 581:Src/main.c    ****   {
 1137              		.loc 1 581 0
 1138 002a FFF7FEFF 		bl	HAL_SPI_Init
 1139              	.LVL109:
 1140 002e 20B1     		cbz	r0, .L78
 583:Src/main.c    ****   }
 1141              		.loc 1 583 0
 1142 0030 0448     		ldr	r0, .L81+8
 1143 0032 40F24721 		movw	r1, #583
ARM GAS  /tmp/ccgPo7nr.s 			page 36


 1144 0036 FFF7FEFF 		bl	_Error_Handler
 1145              	.LVL110:
 1146              	.L78:
 1147 003a 08BD     		pop	{r3, pc}
 1148              	.L82:
 1149              		.align	2
 1150              	.L81:
 1151 003c 00000000 		.word	hspi1
 1152 0040 00300140 		.word	1073819648
 1153 0044 00000000 		.word	.LC8
 1154              		.cfi_endproc
 1155              	.LFE140:
 1157              		.section	.text.MX_I2C1_Init,"ax",%progbits
 1158              		.align	2
 1159              		.thumb
 1160              		.thumb_func
 1162              	MX_I2C1_Init:
 1163              	.LFB139:
 546:Src/main.c    **** 
 1164              		.loc 1 546 0
 1165              		.cfi_startproc
 1166              		@ args = 0, pretend = 0, frame = 0
 1167              		@ frame_needed = 0, uses_anonymous_args = 0
 1168 0000 08B5     		push	{r3, lr}
 1169              	.LCFI22:
 1170              		.cfi_def_cfa_offset 8
 1171              		.cfi_offset 3, -8
 1172              		.cfi_offset 14, -4
 548:Src/main.c    ****   hi2c1.Init.ClockSpeed = 100000;
 1173              		.loc 1 548 0
 1174 0002 0C48     		ldr	r0, .L86
 1175 0004 0C4B     		ldr	r3, .L86+4
 1176 0006 0360     		str	r3, [r0]
 549:Src/main.c    ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 1177              		.loc 1 549 0
 1178 0008 0C4B     		ldr	r3, .L86+8
 1179 000a 4360     		str	r3, [r0, #4]
 550:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 0;
 1180              		.loc 1 550 0
 1181 000c 0023     		movs	r3, #0
 1182 000e 8360     		str	r3, [r0, #8]
 551:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1183              		.loc 1 551 0
 1184 0010 C360     		str	r3, [r0, #12]
 552:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1185              		.loc 1 552 0
 1186 0012 4FF48042 		mov	r2, #16384
 1187 0016 0261     		str	r2, [r0, #16]
 553:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 1188              		.loc 1 553 0
 1189 0018 4361     		str	r3, [r0, #20]
 554:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1190              		.loc 1 554 0
 1191 001a 8361     		str	r3, [r0, #24]
 555:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 1192              		.loc 1 555 0
 1193 001c C361     		str	r3, [r0, #28]
ARM GAS  /tmp/ccgPo7nr.s 			page 37


 556:Src/main.c    ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 1194              		.loc 1 556 0
 1195 001e 0362     		str	r3, [r0, #32]
 557:Src/main.c    ****   {
 1196              		.loc 1 557 0
 1197 0020 FFF7FEFF 		bl	HAL_I2C_Init
 1198              	.LVL111:
 1199 0024 20B1     		cbz	r0, .L83
 559:Src/main.c    ****   }
 1200              		.loc 1 559 0
 1201 0026 0648     		ldr	r0, .L86+12
 1202 0028 40F22F21 		movw	r1, #559
 1203 002c FFF7FEFF 		bl	_Error_Handler
 1204              	.LVL112:
 1205              	.L83:
 1206 0030 08BD     		pop	{r3, pc}
 1207              	.L87:
 1208 0032 00BF     		.align	2
 1209              	.L86:
 1210 0034 00000000 		.word	hi2c1
 1211 0038 00540040 		.word	1073763328
 1212 003c A0860100 		.word	100000
 1213 0040 00000000 		.word	.LC8
 1214              		.cfi_endproc
 1215              	.LFE139:
 1217              		.section	.text.MX_CAN1_Init,"ax",%progbits
 1218              		.align	2
 1219              		.thumb
 1220              		.thumb_func
 1222              	MX_CAN1_Init:
 1223              	.LFB138:
 523:Src/main.c    **** 
 1224              		.loc 1 523 0
 1225              		.cfi_startproc
 1226              		@ args = 0, pretend = 0, frame = 0
 1227              		@ frame_needed = 0, uses_anonymous_args = 0
 1228 0000 08B5     		push	{r3, lr}
 1229              	.LCFI23:
 1230              		.cfi_def_cfa_offset 8
 1231              		.cfi_offset 3, -8
 1232              		.cfi_offset 14, -4
 525:Src/main.c    ****   hcan1.Init.Prescaler = 2;
 1233              		.loc 1 525 0
 1234 0002 1048     		ldr	r0, .L91
 1235 0004 104B     		ldr	r3, .L91+4
 1236 0006 0360     		str	r3, [r0]
 526:Src/main.c    ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 1237              		.loc 1 526 0
 1238 0008 0223     		movs	r3, #2
 1239 000a 4360     		str	r3, [r0, #4]
 527:Src/main.c    ****   hcan1.Init.SyncJumpWidth = CAN_SJW_4TQ;
 1240              		.loc 1 527 0
 1241 000c 0023     		movs	r3, #0
 1242 000e 8360     		str	r3, [r0, #8]
 528:Src/main.c    ****   hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 1243              		.loc 1 528 0
 1244 0010 4FF04072 		mov	r2, #50331648
ARM GAS  /tmp/ccgPo7nr.s 			page 38


 1245 0014 C260     		str	r2, [r0, #12]
 529:Src/main.c    ****   hcan1.Init.TimeSeg2 = CAN_BS2_6TQ;
 1246              		.loc 1 529 0
 1247 0016 4FF40022 		mov	r2, #524288
 1248 001a 0261     		str	r2, [r0, #16]
 530:Src/main.c    ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 1249              		.loc 1 530 0
 1250 001c 4FF4A002 		mov	r2, #5242880
 1251 0020 4261     		str	r2, [r0, #20]
 531:Src/main.c    ****   hcan1.Init.AutoBusOff = ENABLE;
 1252              		.loc 1 531 0
 1253 0022 0376     		strb	r3, [r0, #24]
 532:Src/main.c    ****   hcan1.Init.AutoWakeUp = DISABLE;
 1254              		.loc 1 532 0
 1255 0024 0122     		movs	r2, #1
 1256 0026 4276     		strb	r2, [r0, #25]
 533:Src/main.c    ****   hcan1.Init.AutoRetransmission = DISABLE;
 1257              		.loc 1 533 0
 1258 0028 8376     		strb	r3, [r0, #26]
 534:Src/main.c    ****   hcan1.Init.ReceiveFifoLocked = ENABLE;
 1259              		.loc 1 534 0
 1260 002a C376     		strb	r3, [r0, #27]
 535:Src/main.c    ****   hcan1.Init.TransmitFifoPriority = ENABLE;
 1261              		.loc 1 535 0
 1262 002c 0277     		strb	r2, [r0, #28]
 536:Src/main.c    ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 1263              		.loc 1 536 0
 1264 002e 4277     		strb	r2, [r0, #29]
 537:Src/main.c    ****   {
 1265              		.loc 1 537 0
 1266 0030 FFF7FEFF 		bl	HAL_CAN_Init
 1267              	.LVL113:
 1268 0034 20B1     		cbz	r0, .L88
 539:Src/main.c    ****   }
 1269              		.loc 1 539 0
 1270 0036 0548     		ldr	r0, .L91+8
 1271 0038 40F21B21 		movw	r1, #539
 1272 003c FFF7FEFF 		bl	_Error_Handler
 1273              	.LVL114:
 1274              	.L88:
 1275 0040 08BD     		pop	{r3, pc}
 1276              	.L92:
 1277 0042 00BF     		.align	2
 1278              	.L91:
 1279 0044 00000000 		.word	hcan1
 1280 0048 00640040 		.word	1073767424
 1281 004c 00000000 		.word	.LC8
 1282              		.cfi_endproc
 1283              	.LFE138:
 1285              		.section	.text.SystemClock_Config,"ax",%progbits
 1286              		.align	2
 1287              		.global	SystemClock_Config
 1288              		.thumb
 1289              		.thumb_func
 1291              	SystemClock_Config:
 1292              	.LFB137:
 473:Src/main.c    **** 
ARM GAS  /tmp/ccgPo7nr.s 			page 39


 1293              		.loc 1 473 0
 1294              		.cfi_startproc
 1295              		@ args = 0, pretend = 0, frame = 80
 1296              		@ frame_needed = 0, uses_anonymous_args = 0
 1297 0000 00B5     		push	{lr}
 1298              	.LCFI24:
 1299              		.cfi_def_cfa_offset 4
 1300              		.cfi_offset 14, -4
 1301 0002 95B0     		sub	sp, sp, #84
 1302              	.LCFI25:
 1303              		.cfi_def_cfa_offset 88
 1304              	.LBB7:
 480:Src/main.c    **** 
 1305              		.loc 1 480 0
 1306 0004 0023     		movs	r3, #0
 1307 0006 0193     		str	r3, [sp, #4]
 1308 0008 244A     		ldr	r2, .L97
 1309 000a 116C     		ldr	r1, [r2, #64]
 1310 000c 41F08051 		orr	r1, r1, #268435456
 1311 0010 1164     		str	r1, [r2, #64]
 1312 0012 126C     		ldr	r2, [r2, #64]
 1313 0014 02F08052 		and	r2, r2, #268435456
 1314 0018 0192     		str	r2, [sp, #4]
 1315 001a 019A     		ldr	r2, [sp, #4]
 1316              	.LBE7:
 1317              	.LBB8:
 482:Src/main.c    **** 
 1318              		.loc 1 482 0
 1319 001c 0293     		str	r3, [sp, #8]
 1320 001e 204A     		ldr	r2, .L97+4
 1321 0020 1168     		ldr	r1, [r2]
 1322 0022 41F48041 		orr	r1, r1, #16384
 1323 0026 1160     		str	r1, [r2]
 1324 0028 1268     		ldr	r2, [r2]
 1325 002a 02F48042 		and	r2, r2, #16384
 1326 002e 0292     		str	r2, [sp, #8]
 1327 0030 029A     		ldr	r2, [sp, #8]
 1328              	.LBE8:
 486:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1329              		.loc 1 486 0
 1330 0032 0222     		movs	r2, #2
 1331 0034 0892     		str	r2, [sp, #32]
 487:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 1332              		.loc 1 487 0
 1333 0036 0122     		movs	r2, #1
 1334 0038 0B92     		str	r2, [sp, #44]
 488:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1335              		.loc 1 488 0
 1336 003a 1022     		movs	r2, #16
 1337 003c 0C92     		str	r2, [sp, #48]
 489:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1338              		.loc 1 489 0
 1339 003e 0E93     		str	r3, [sp, #56]
 490:Src/main.c    ****   {
 1340              		.loc 1 490 0
 1341 0040 08A8     		add	r0, sp, #32
 1342 0042 FFF7FEFF 		bl	HAL_RCC_OscConfig
ARM GAS  /tmp/ccgPo7nr.s 			page 40


 1343              	.LVL115:
 1344 0046 20B1     		cbz	r0, .L94
 492:Src/main.c    ****   }
 1345              		.loc 1 492 0
 1346 0048 1648     		ldr	r0, .L97+8
 1347 004a 4FF4F671 		mov	r1, #492
 1348 004e FFF7FEFF 		bl	_Error_Handler
 1349              	.LVL116:
 1350              	.L94:
 497:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1351              		.loc 1 497 0
 1352 0052 0F23     		movs	r3, #15
 1353 0054 0393     		str	r3, [sp, #12]
 499:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1354              		.loc 1 499 0
 1355 0056 0021     		movs	r1, #0
 1356 0058 0491     		str	r1, [sp, #16]
 500:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1357              		.loc 1 500 0
 1358 005a 0591     		str	r1, [sp, #20]
 501:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1359              		.loc 1 501 0
 1360 005c 0691     		str	r1, [sp, #24]
 502:Src/main.c    **** 
 1361              		.loc 1 502 0
 1362 005e 0791     		str	r1, [sp, #28]
 504:Src/main.c    ****   {
 1363              		.loc 1 504 0
 1364 0060 03A8     		add	r0, sp, #12
 1365 0062 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1366              	.LVL117:
 1367 0066 20B1     		cbz	r0, .L95
 506:Src/main.c    ****   }
 1368              		.loc 1 506 0
 1369 0068 0E48     		ldr	r0, .L97+8
 1370 006a 4FF4FD71 		mov	r1, #506
 1371 006e FFF7FEFF 		bl	_Error_Handler
 1372              	.LVL118:
 1373              	.L95:
 511:Src/main.c    **** 
 1374              		.loc 1 511 0
 1375 0072 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1376              	.LVL119:
 1377 0076 0C4B     		ldr	r3, .L97+12
 1378 0078 A3FB0030 		umull	r3, r0, r3, r0
 1379 007c 8009     		lsrs	r0, r0, #6
 1380 007e FFF7FEFF 		bl	HAL_SYSTICK_Config
 1381              	.LVL120:
 515:Src/main.c    **** 
 1382              		.loc 1 515 0
 1383 0082 0420     		movs	r0, #4
 1384 0084 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 1385              	.LVL121:
 518:Src/main.c    **** }
 1386              		.loc 1 518 0
 1387 0088 4FF0FF30 		mov	r0, #-1
 1388 008c 0F21     		movs	r1, #15
ARM GAS  /tmp/ccgPo7nr.s 			page 41


 1389 008e 0022     		movs	r2, #0
 1390 0090 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 1391              	.LVL122:
 519:Src/main.c    **** 
 1392              		.loc 1 519 0
 1393 0094 15B0     		add	sp, sp, #84
 1394              	.LCFI26:
 1395              		.cfi_def_cfa_offset 4
 1396              		@ sp needed
 1397 0096 5DF804FB 		ldr	pc, [sp], #4
 1398              	.L98:
 1399 009a 00BF     		.align	2
 1400              	.L97:
 1401 009c 00380240 		.word	1073887232
 1402 00a0 00700040 		.word	1073770496
 1403 00a4 00000000 		.word	.LC8
 1404 00a8 D34D6210 		.word	274877907
 1405              		.cfi_endproc
 1406              	.LFE137:
 1408              		.section	.text.main,"ax",%progbits
 1409              		.align	2
 1410              		.global	main
 1411              		.thumb
 1412              		.thumb_func
 1414              	main:
 1415              	.LFB136:
 380:Src/main.c    ****   /* USER CODE BEGIN 1 */
 1416              		.loc 1 380 0
 1417              		.cfi_startproc
 1418              		@ args = 0, pretend = 0, frame = 64
 1419              		@ frame_needed = 0, uses_anonymous_args = 0
 1420 0000 70B5     		push	{r4, r5, r6, lr}
 1421              	.LCFI27:
 1422              		.cfi_def_cfa_offset 16
 1423              		.cfi_offset 4, -16
 1424              		.cfi_offset 5, -12
 1425              		.cfi_offset 6, -8
 1426              		.cfi_offset 14, -4
 1427 0002 90B0     		sub	sp, sp, #64
 1428              	.LCFI28:
 1429              		.cfi_def_cfa_offset 80
 388:Src/main.c    **** 
 1430              		.loc 1 388 0
 1431 0004 FFF7FEFF 		bl	HAL_Init
 1432              	.LVL123:
 395:Src/main.c    **** 
 1433              		.loc 1 395 0
 1434 0008 FFF7FEFF 		bl	SystemClock_Config
 1435              	.LVL124:
 402:Src/main.c    ****   MX_UART4_Init();
 1436              		.loc 1 402 0
 1437 000c FFF7FEFF 		bl	MX_GPIO_Init
 1438              	.LVL125:
 403:Src/main.c    ****   MX_SPI1_Init();
 1439              		.loc 1 403 0
 1440 0010 FFF7FEFF 		bl	MX_UART4_Init
 1441              	.LVL126:
ARM GAS  /tmp/ccgPo7nr.s 			page 42


 404:Src/main.c    ****   MX_I2C1_Init();
 1442              		.loc 1 404 0
 1443 0014 FFF7FEFF 		bl	MX_SPI1_Init
 1444              	.LVL127:
 405:Src/main.c    ****   MX_CAN1_Init();
 1445              		.loc 1 405 0
 1446 0018 FFF7FEFF 		bl	MX_I2C1_Init
 1447              	.LVL128:
 406:Src/main.c    ****   /* USER CODE BEGIN 2 */
 1448              		.loc 1 406 0
 1449 001c FFF7FEFF 		bl	MX_CAN1_Init
 1450              	.LVL129:
 425:Src/main.c    ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 1451              		.loc 1 425 0
 1452 0020 144C     		ldr	r4, .L102
 1453 0022 0BAD     		add	r5, sp, #44
 1454 0024 2646     		mov	r6, r4
 1455 0026 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 1456 0028 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 1457 002a 3368     		ldr	r3, [r6]
 1458 002c 2B60     		str	r3, [r5]
 426:Src/main.c    **** 
 1459              		.loc 1 426 0
 1460 002e 0BA8     		add	r0, sp, #44
 1461 0030 0021     		movs	r1, #0
 1462 0032 FFF7FEFF 		bl	osThreadCreate
 1463              	.LVL130:
 1464 0036 104B     		ldr	r3, .L102+4
 1465 0038 1860     		str	r0, [r3]
 430:Src/main.c    ****   adcTaskHandle = osThreadCreate(osThread(adcTask),NULL);
 1466              		.loc 1 430 0
 1467 003a 06AD     		add	r5, sp, #24
 1468 003c 04F11406 		add	r6, r4, #20
 1469 0040 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 1470 0042 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 1471 0044 3368     		ldr	r3, [r6]
 1472 0046 2B60     		str	r3, [r5]
 431:Src/main.c    ****   osThreadDef(canTask, canTest, osPriorityAboveNormal, 1, 128);
 1473              		.loc 1 431 0
 1474 0048 06A8     		add	r0, sp, #24
 1475 004a 0021     		movs	r1, #0
 1476 004c FFF7FEFF 		bl	osThreadCreate
 1477              	.LVL131:
 1478 0050 0A4B     		ldr	r3, .L102+8
 1479 0052 1860     		str	r0, [r3]
 432:Src/main.c    ****   canTaskHandle = osThreadCreate(osThread(canTask),NULL);
 1480              		.loc 1 432 0
 1481 0054 01AD     		add	r5, sp, #4
 1482 0056 2834     		adds	r4, r4, #40
 1483 0058 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 1484 005a 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 1485 005c 2368     		ldr	r3, [r4]
 1486 005e 2B60     		str	r3, [r5]
 433:Src/main.c    ****   //osThreadDef(uartTask, uartTest, osPriorityAboveNormal, 1, 128);
 1487              		.loc 1 433 0
 1488 0060 01A8     		add	r0, sp, #4
 1489 0062 0021     		movs	r1, #0
ARM GAS  /tmp/ccgPo7nr.s 			page 43


 1490 0064 FFF7FEFF 		bl	osThreadCreate
 1491              	.LVL132:
 1492 0068 054B     		ldr	r3, .L102+12
 1493 006a 1860     		str	r0, [r3]
 450:Src/main.c    ****   
 1494              		.loc 1 450 0
 1495 006c FFF7FEFF 		bl	osKernelStart
 1496              	.LVL133:
 1497              	.L100:
 463:Src/main.c    ****   /* USER CODE END 3 */
 1498              		.loc 1 463 0 discriminator 1
 1499 0070 FEE7     		b	.L100
 1500              	.L103:
 1501 0072 00BF     		.align	2
 1502              	.L102:
 1503 0074 00000000 		.word	.LANCHOR1
 1504 0078 00000000 		.word	defaultTaskHandle
 1505 007c 00000000 		.word	adcTaskHandle
 1506 0080 00000000 		.word	canTaskHandle
 1507              		.cfi_endproc
 1508              	.LFE136:
 1510              		.comm	g_ADCValue,4,4
 1511              		.comm	arr,9,4
 1512              		.comm	spi_rx_buff,2,4
 1513              		.global	spi_address
 1514              		.comm	i2c_accel,6,4
 1515              		.comm	i2c_rx_buff_gyro,6,4
 1516              		.comm	i2c_tx_buff_gyro,6,4
 1517              		.comm	i2c_tx_buff_accel,6,4
 1518              		.comm	i2c_rx_buff_accel,6,4
 1519              		.global	eecsGPIO
 1520              		.comm	g_AdcHandle,72,4
 1521              		.comm	adcTaskHandle,4,4
 1522              		.comm	spiTaskHandle,4,4
 1523              		.comm	canTaskHandle,4,4
 1524              		.comm	uartTaskHandle,4,4
 1525              		.comm	i2cTaskHandle,4,4
 1526              		.comm	defaultTaskHandle,4,4
 1527              		.comm	huart4,64,4
 1528              		.comm	hspi1,88,4
 1529              		.comm	hi2c1,84,4
 1530              		.comm	hcan1,40,4
 1531              		.section	.rodata
 1532              		.align	2
 1533              		.set	.LANCHOR1,. + 0
 1534              	.LC9:
 1535 0000 1C000000 		.word	.LC2
 1536 0004 00000000 		.word	StartDefaultTask
 1537 0008 0000     		.short	0
 1538 000a 0000     		.space	2
 1539 000c 00000000 		.word	0
 1540 0010 80000000 		.word	128
 1541              	.LC10:
 1542 0014 14000000 		.word	.LC4
 1543 0018 00000000 		.word	adcTest
 1544 001c 0100     		.short	1
 1545 001e 0000     		.space	2
ARM GAS  /tmp/ccgPo7nr.s 			page 44


 1546 0020 01000000 		.word	1
 1547 0024 80000000 		.word	128
 1548              	.LC11:
 1549 0028 0C000000 		.word	.LC6
 1550 002c 00000000 		.word	canTest
 1551 0030 0100     		.short	1
 1552 0032 0000     		.space	2
 1553 0034 01000000 		.word	1
 1554 0038 80000000 		.word	128
 1555              		.section	.data.spi_address,"aw",%progbits
 1556              		.align	2
 1557              		.set	.LANCHOR0,. + 0
 1560              	spi_address:
 1561 0000 84       		.byte	-124
 1562 0001 00       		.byte	0
 1563              		.section	.rodata.str1.4,"aMS",%progbits,1
 1564              		.align	2
 1565              	.LC8:
 1566 0000 5372632F 		.ascii	"Src/main.c\000"
 1566      6D61696E 
 1566      2E6300
 1567 000b 00       		.space	1
 1568              	.LC6:
 1569 000c 63616E54 		.ascii	"canTask\000"
 1569      61736B00 
 1570              	.LC4:
 1571 0014 61646354 		.ascii	"adcTask\000"
 1571      61736B00 
 1572              	.LC2:
 1573 001c 64656661 		.ascii	"defaultTask\000"
 1573      756C7454 
 1573      61736B00 
 1574              		.section	.data.eecsGPIO,"aw",%progbits
 1575              		.align	2
 1578              	eecsGPIO:
 1579 0000 00000000 		.word	eecs_GPIO_Init
 1580 0004 00000000 		.word	eecs_GPIO_Write
 1581 0008 00000000 		.word	eecs_GPIO_Toggle
 1582 000c 00000000 		.word	0
 1583              		.text
 1584              	.Letext0:
 1585              		.file 2 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 1586              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 1587              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 1588              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1589              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1590              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1591              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1592              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1593              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1594              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 1595              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 1596              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 1597              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_spi.h"
 1598              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1599              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1600              		.file 17 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
ARM GAS  /tmp/ccgPo7nr.s 			page 45


 1601              		.file 18 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 1602              		.file 19 "Inc/eecs473.h"
 1603              		.file 20 "Drivers/CMSIS/Include/core_cm4.h"
 1604              		.file 21 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1605              		.file 22 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
ARM GAS  /tmp/ccgPo7nr.s 			page 46


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccgPo7nr.s:21     .text.StartDefaultTask:0000000000000000 $t
     /tmp/ccgPo7nr.s:26     .text.StartDefaultTask:0000000000000000 StartDefaultTask
     /tmp/ccgPo7nr.s:52     .text.canTest:0000000000000000 $t
     /tmp/ccgPo7nr.s:57     .text.canTest:0000000000000000 canTest
     /tmp/ccgPo7nr.s:145    .text.canTest:000000000000006c $d
                            *COM*:0000000000000028 hcan1
                            *COM*:0000000000000004 g_ADCValue
     /tmp/ccgPo7nr.s:152    .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccgPo7nr.s:156    .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccgPo7nr.s:275    .text.MX_GPIO_Init:00000000000000a4 $d
     /tmp/ccgPo7nr.s:283    .text.writei2c:0000000000000000 $t
     /tmp/ccgPo7nr.s:288    .text.writei2c:0000000000000000 writei2c
     /tmp/ccgPo7nr.s:415    .text.writei2c:000000000000009c $d
                            *COM*:0000000000000006 i2c_tx_buff_accel
                            *COM*:0000000000000006 i2c_rx_buff_accel
                            *COM*:0000000000000054 hi2c1
                            *COM*:0000000000000006 i2c_accel
     /tmp/ccgPo7nr.s:424    .text.uart_debug:0000000000000000 $t
     /tmp/ccgPo7nr.s:429    .text.uart_debug:0000000000000000 uart_debug
     /tmp/ccgPo7nr.s:466    .text.uart_debug:0000000000000020 $d
                            *COM*:0000000000000040 huart4
     /tmp/ccgPo7nr.s:472    .text.uartTest:0000000000000000 $t
     /tmp/ccgPo7nr.s:477    .text.uartTest:0000000000000000 uartTest
     /tmp/ccgPo7nr.s:526    .text.uartTest:000000000000002c $d
                            *COM*:0000000000000009 arr
     /tmp/ccgPo7nr.s:532    .text.spiTest:0000000000000000 $t
     /tmp/ccgPo7nr.s:537    .text.spiTest:0000000000000000 spiTest
     /tmp/ccgPo7nr.s:633    .text.spiTest:0000000000000084 $d
                            *COM*:0000000000000058 hspi1
                            *COM*:0000000000000002 spi_rx_buff
     /tmp/ccgPo7nr.s:644    .text.Leds:0000000000000000 $t
     /tmp/ccgPo7nr.s:649    .text.Leds:0000000000000000 Leds
     /tmp/ccgPo7nr.s:758    .text.Leds:00000000000000a4 $d
     /tmp/ccgPo7nr.s:763    .text.ConfigureADC:0000000000000000 $t
     /tmp/ccgPo7nr.s:768    .text.ConfigureADC:0000000000000000 ConfigureADC
     /tmp/ccgPo7nr.s:902    .text.ConfigureADC:00000000000000a4 $d
                            *COM*:0000000000000048 g_AdcHandle
     /tmp/ccgPo7nr.s:911    .text.adcTest:0000000000000000 $t
     /tmp/ccgPo7nr.s:916    .text.adcTest:0000000000000000 adcTest
     /tmp/ccgPo7nr.s:957    .text.adcTest:000000000000002c $d
     /tmp/ccgPo7nr.s:964    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccgPo7nr.s:969    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccgPo7nr.s:994    .text.HAL_TIM_PeriodElapsedCallback:0000000000000010 $d
     /tmp/ccgPo7nr.s:999    .text._Error_Handler:0000000000000000 $t
     /tmp/ccgPo7nr.s:1004   .text._Error_Handler:0000000000000000 _Error_Handler
     /tmp/ccgPo7nr.s:1030   .text._Error_Handler:0000000000000010 $d
     /tmp/ccgPo7nr.s:1035   .text.MX_UART4_Init:0000000000000000 $t
     /tmp/ccgPo7nr.s:1039   .text.MX_UART4_Init:0000000000000000 MX_UART4_Init
     /tmp/ccgPo7nr.s:1085   .text.MX_UART4_Init:0000000000000030 $d
     /tmp/ccgPo7nr.s:1092   .text.MX_SPI1_Init:0000000000000000 $t
     /tmp/ccgPo7nr.s:1096   .text.MX_SPI1_Init:0000000000000000 MX_SPI1_Init
     /tmp/ccgPo7nr.s:1151   .text.MX_SPI1_Init:000000000000003c $d
     /tmp/ccgPo7nr.s:1158   .text.MX_I2C1_Init:0000000000000000 $t
     /tmp/ccgPo7nr.s:1162   .text.MX_I2C1_Init:0000000000000000 MX_I2C1_Init
     /tmp/ccgPo7nr.s:1210   .text.MX_I2C1_Init:0000000000000034 $d
ARM GAS  /tmp/ccgPo7nr.s 			page 47


     /tmp/ccgPo7nr.s:1218   .text.MX_CAN1_Init:0000000000000000 $t
     /tmp/ccgPo7nr.s:1222   .text.MX_CAN1_Init:0000000000000000 MX_CAN1_Init
     /tmp/ccgPo7nr.s:1279   .text.MX_CAN1_Init:0000000000000044 $d
     /tmp/ccgPo7nr.s:1286   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccgPo7nr.s:1291   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccgPo7nr.s:1401   .text.SystemClock_Config:000000000000009c $d
     /tmp/ccgPo7nr.s:1409   .text.main:0000000000000000 $t
     /tmp/ccgPo7nr.s:1414   .text.main:0000000000000000 main
     /tmp/ccgPo7nr.s:1503   .text.main:0000000000000074 $d
                            *COM*:0000000000000004 defaultTaskHandle
                            *COM*:0000000000000004 adcTaskHandle
                            *COM*:0000000000000004 canTaskHandle
     /tmp/ccgPo7nr.s:1560   .data.spi_address:0000000000000000 spi_address
                            *COM*:0000000000000006 i2c_rx_buff_gyro
                            *COM*:0000000000000006 i2c_tx_buff_gyro
     /tmp/ccgPo7nr.s:1578   .data.eecsGPIO:0000000000000000 eecsGPIO
                            *COM*:0000000000000004 spiTaskHandle
                            *COM*:0000000000000004 uartTaskHandle
                            *COM*:0000000000000004 i2cTaskHandle
     /tmp/ccgPo7nr.s:1532   .rodata:0000000000000000 $d
     /tmp/ccgPo7nr.s:1556   .data.spi_address:0000000000000000 $d
     /tmp/ccgPo7nr.s:1564   .rodata.str1.4:0000000000000000 $d
     /tmp/ccgPo7nr.s:1575   .data.eecsGPIO:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
osDelay
HAL_CAN_Start
HAL_CAN_WakeUp
HAL_CAN_IsTxMessagePending
HAL_CAN_AddTxMessage
HAL_GPIO_WritePin
HAL_GPIO_TogglePin
HAL_GPIO_Init
HAL_I2C_Master_Transmit
HAL_I2C_Master_Receive
HAL_UART_Transmit
HAL_Delay
HAL_SPI_TransmitReceive
osKernelSysTick
osDelayUntil
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_ADC_Start
HAL_ADC_PollForConversion
HAL_ADC_GetValue
HAL_IncTick
HAL_UART_Init
HAL_SPI_Init
HAL_I2C_Init
HAL_CAN_Init
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
ARM GAS  /tmp/ccgPo7nr.s 			page 48


HAL_SYSTICK_CLKSourceConfig
HAL_Init
osThreadCreate
osKernelStart
eecs_GPIO_Init
eecs_GPIO_Write
eecs_GPIO_Toggle
