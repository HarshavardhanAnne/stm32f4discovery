ARM GAS  /tmp/ccw7Bx3r.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.MX_GPIO_Init,"ax",%progbits
  21              		.align	2
  22              		.thumb
  23              		.thumb_func
  25              	MX_GPIO_Init:
  26              	.LFB151:
  27              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * Copyright (c) 2018 STMicroelectronics International N.V. 
  14:Src/main.c    ****   * All rights reserved.
  15:Src/main.c    ****   *
  16:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without 
  17:Src/main.c    ****   * modification, are permitted, provided that the following conditions are met:
  18:Src/main.c    ****   *
  19:Src/main.c    ****   * 1. Redistribution of source code must retain the above copyright notice, 
  20:Src/main.c    ****   *    this list of conditions and the following disclaimer.
  21:Src/main.c    ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  22:Src/main.c    ****   *    this list of conditions and the following disclaimer in the documentation
  23:Src/main.c    ****   *    and/or other materials provided with the distribution.
  24:Src/main.c    ****   * 3. Neither the name of STMicroelectronics nor the names of other 
  25:Src/main.c    ****   *    contributors to this software may be used to endorse or promote products 
  26:Src/main.c    ****   *    derived from this software without specific written permission.
  27:Src/main.c    ****   * 4. This software, including modifications and/or derivative works of this 
  28:Src/main.c    ****   *    software, must execute solely and exclusively on microcontroller or
  29:Src/main.c    ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  30:Src/main.c    ****   * 5. Redistribution and use of this software other than as permitted under 
  31:Src/main.c    ****   *    this license is void and will automatically terminate your rights under 
ARM GAS  /tmp/ccw7Bx3r.s 			page 2


  32:Src/main.c    ****   *    this license. 
  33:Src/main.c    ****   *
  34:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  35:Src/main.c    ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  36:Src/main.c    ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  37:Src/main.c    ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  38:Src/main.c    ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  39:Src/main.c    ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  40:Src/main.c    ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  41:Src/main.c    ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  42:Src/main.c    ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  43:Src/main.c    ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  44:Src/main.c    ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  45:Src/main.c    ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  46:Src/main.c    ****   *
  47:Src/main.c    ****   ******************************************************************************
  48:Src/main.c    ****   */
  49:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  50:Src/main.c    **** #include "main.h"
  51:Src/main.c    **** #include "stm32f4xx_hal.h"
  52:Src/main.c    **** #include "cmsis_os.h"
  53:Src/main.c    **** 
  54:Src/main.c    **** /* USER CODE BEGIN Includes */
  55:Src/main.c    **** #include <eecs473.h>
  56:Src/main.c    **** /* USER CODE END Includes */
  57:Src/main.c    **** 
  58:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  59:Src/main.c    **** CAN_HandleTypeDef hcan1;
  60:Src/main.c    **** 
  61:Src/main.c    **** I2C_HandleTypeDef hi2c1;
  62:Src/main.c    **** 
  63:Src/main.c    **** SPI_HandleTypeDef hspi1;
  64:Src/main.c    **** 
  65:Src/main.c    **** UART_HandleTypeDef huart4;
  66:Src/main.c    **** 
  67:Src/main.c    **** osThreadId defaultTaskHandle;
  68:Src/main.c    **** 
  69:Src/main.c    **** /* USER CODE BEGIN PV */
  70:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  71:Src/main.c    **** osThreadId i2cTaskHandle;
  72:Src/main.c    **** osThreadId uartTaskHandle;
  73:Src/main.c    **** osThreadId canTaskHandle;
  74:Src/main.c    **** osThreadId spiTaskHandle;
  75:Src/main.c    **** osThreadId adcTaskHandle;
  76:Src/main.c    **** ADC_HandleTypeDef g_AdcHandle;
  77:Src/main.c    **** //osThreadId ledTaskHandle;
  78:Src/main.c    **** #define MY_I2C_SPEED 400000
  79:Src/main.c    **** #define I2C_ADDRESS_IMU (uint16_t)(0b1101000 << 1)
  80:Src/main.c    **** #define RED_LED GPIO_PIN_14
  81:Src/main.c    **** #define GREEN_LED GPIO_PIN_12
  82:Src/main.c    **** #define BLUE_LED GPIO_PIN_15
  83:Src/main.c    **** #define ORANGE_LED GPIO_PIN_13
  84:Src/main.c    **** uint8_t i2c_rx_buff_accel[6];
  85:Src/main.c    **** uint8_t i2c_tx_buff_accel[6];
  86:Src/main.c    **** uint8_t i2c_tx_buff_gyro[6];
  87:Src/main.c    **** uint8_t i2c_rx_buff_gyro[6];
  88:Src/main.c    **** int16_t i2c_accel[3];
ARM GAS  /tmp/ccw7Bx3r.s 			page 3


  89:Src/main.c    **** uint8_t spi_address[2] = {0b10000100,0b00000000};
  90:Src/main.c    **** uint8_t spi_rx_buff[2];
  91:Src/main.c    **** uint8_t max_data_addr[2] = {0b00111000,0b00000000};
  92:Src/main.c    **** uint8_t max_rx_buff[2];
  93:Src/main.c    **** uint8_t arr[9];
  94:Src/main.c    **** volatile uint32_t g_ADCValue;
  95:Src/main.c    **** 
  96:Src/main.c    **** //CANTX - PB9
  97:Src/main.c    **** //CANRX - PB8
  98:Src/main.c    **** //I2CSDA - PB7
  99:Src/main.c    **** //I2CSCL - PB6
 100:Src/main.c    **** //UARTtx - PA0
 101:Src/main.c    **** //UARTrx - PA1
 102:Src/main.c    **** //SPISCK - PA5
 103:Src/main.c    **** //SPIMISO - PA6
 104:Src/main.c    **** //SPIMOSI - PA7
 105:Src/main.c    **** //SPICS - PA4 //This is NSS pin
 106:Src/main.c    **** /* USER CODE END PV */
 107:Src/main.c    **** 
 108:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
 109:Src/main.c    **** void SystemClock_Config(void);
 110:Src/main.c    **** static void MX_GPIO_Init(void);
 111:Src/main.c    **** static void MX_UART4_Init(void);
 112:Src/main.c    **** static void MX_SPI1_Init(void);
 113:Src/main.c    **** static void MX_I2C1_Init(void);
 114:Src/main.c    **** static void MX_CAN1_Init(void);
 115:Src/main.c    **** void StartDefaultTask(void const * argument);
 116:Src/main.c    **** 
 117:Src/main.c    **** /* USER CODE BEGIN PFP */
 118:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
 119:Src/main.c    **** void write_i2c(void const *argument);
 120:Src/main.c    **** void uart_debug(uint8_t* arr, uint8_t buffsize);
 121:Src/main.c    **** void canTest(void const *argument);
 122:Src/main.c    **** void uartTest(void const *argument);
 123:Src/main.c    **** void ConfigureADC();
 124:Src/main.c    **** void adcTest(void const *argument);
 125:Src/main.c    **** /* USER CODE END PFP */
 126:Src/main.c    **** 
 127:Src/main.c    **** /* USER CODE BEGIN 0 */
 128:Src/main.c    **** void writei2c(void const *argument) {
 129:Src/main.c    ****   //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 130:Src/main.c    ****   HAL_StatusTypeDef status = HAL_OK;
 131:Src/main.c    ****   uint32_t prevWakeTime;
 132:Src/main.c    ****   uint32_t nextWakeTime;
 133:Src/main.c    ****   int addr = 59;
 134:Src/main.c    ****   int i;
 135:Src/main.c    ****   for (i = 0; i < 6; i++) {
 136:Src/main.c    ****     i2c_tx_buff_accel[i] = addr++;
 137:Src/main.c    ****     i2c_rx_buff_accel[i] = i;
 138:Src/main.c    ****   }
 139:Src/main.c    ****   //ACCEL_XOUT_H , ACCEL_XOUT_L
 140:Src/main.c    ****   while (1) {
 141:Src/main.c    ****     //prevWakeTime = osKernelSysTick();
 142:Src/main.c    ****     //nextWakeTime += (1000 * osKernelSysTick())
 143:Src/main.c    ****     //osDelayUntil(&prevWakeTime,5000);
 144:Src/main.c    ****     osDelay(3000);
 145:Src/main.c    ****     status = HAL_OK;
ARM GAS  /tmp/ccw7Bx3r.s 			page 4


 146:Src/main.c    ****     for (i = 0; i < 6; i++) {
 147:Src/main.c    ****       status = HAL_I2C_Master_Transmit(&hi2c1,I2C_ADDRESS_IMU,i2c_tx_buff_accel+i,sizeof(uint8_t),1
 148:Src/main.c    **** 
 149:Src/main.c    ****       if (status != HAL_OK) {
 150:Src/main.c    ****         HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 151:Src/main.c    ****       }
 152:Src/main.c    ****       else {
 153:Src/main.c    ****         HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15, GPIO_PIN_RESET);
 154:Src/main.c    ****       }
 155:Src/main.c    ****       status = HAL_I2C_Master_Receive(&hi2c1,I2C_ADDRESS_IMU,i2c_rx_buff_accel+i,sizeof(uint8_t),10
 156:Src/main.c    ****     }
 157:Src/main.c    ****     //itoa
 158:Src/main.c    ****     //debug();
 159:Src/main.c    ****     i2c_accel[0] = (i2c_rx_buff_accel[0] << 8) + i2c_rx_buff_accel[1];
 160:Src/main.c    ****     i2c_accel[1] = (i2c_rx_buff_accel[2] << 8) + i2c_rx_buff_accel[3];
 161:Src/main.c    ****     i2c_accel[2] = (i2c_rx_buff_accel[4] << 8) + i2c_rx_buff_accel[5];
 162:Src/main.c    ****     //uart_debug(i2c_accel,sizeof(i2c_accel));
 163:Src/main.c    ****     //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 164:Src/main.c    ****     HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12); //GPIOD12 is green
 165:Src/main.c    ****   }
 166:Src/main.c    **** }
 167:Src/main.c    **** 
 168:Src/main.c    **** void uartTest(void const *argument) {
 169:Src/main.c    ****   int i = 0;
 170:Src/main.c    ****   for (i = 0; i < 9; i++) {
 171:Src/main.c    ****     arr[i] = i;
 172:Src/main.c    ****   }
 173:Src/main.c    ****   while (1) {
 174:Src/main.c    ****     HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 175:Src/main.c    ****     //HAL_UART_Transmit(&huart4,ptr,size_,HAL_MAX_DELAY);
 176:Src/main.c    ****     uart_debug(arr, sizeof(arr));
 177:Src/main.c    ****     osDelay(100);
 178:Src/main.c    ****   }
 179:Src/main.c    **** }
 180:Src/main.c    **** 
 181:Src/main.c    **** void spiTest(void const *argument) {
 182:Src/main.c    ****   HAL_StatusTypeDef status;
 183:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 184:Src/main.c    ****   while (1) {
 185:Src/main.c    ****     osDelay(1000);
 186:Src/main.c    ****     status = HAL_OK;
 187:Src/main.c    ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,GPIO_PIN_RESET);
 188:Src/main.c    ****     HAL_Delay(1);
 189:Src/main.c    ****     //status = HAL_SPI_Transmit(&hspi1, spi_address,1,HAL_MAX_DELAY);
 190:Src/main.c    ****     //status = HAL_SPI_Receive(&hspi1, spi_rx_buff,1,HAL_MAX_DELAY);
 191:Src/main.c    ****     //status = HAL_SPI_Transmit(&hspi1, spi_address+1,1,HAL_MAX_DELAY);
 192:Src/main.c    ****     //status = HAL_SPI_Receive(&hspi1, spi_rx_buff+1,1,HAL_MAX_DELAY);
 193:Src/main.c    ****     status = HAL_SPI_TransmitReceive(&hspi1,max_data_addr,max_rx_buff,1,HAL_MAX_DELAY);
 194:Src/main.c    ****     //HAL_Delay(1);
 195:Src/main.c    ****     if (status != HAL_OK) {
 196:Src/main.c    ****       HAL_GPIO_WritePin(GPIOD, GREEN_LED, GPIO_PIN_SET);
 197:Src/main.c    ****     }
 198:Src/main.c    ****     else {
 199:Src/main.c    ****       HAL_GPIO_WritePin(GPIOD, GREEN_LED, GPIO_PIN_RESET);
 200:Src/main.c    ****     }
 201:Src/main.c    **** 
 202:Src/main.c    ****     status = HAL_SPI_TransmitReceive(&hspi1,max_data_addr+1,max_rx_buff+1,1,HAL_MAX_DELAY);
ARM GAS  /tmp/ccw7Bx3r.s 			page 5


 203:Src/main.c    ****     HAL_Delay(1);
 204:Src/main.c    ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 205:Src/main.c    ****     //spi_rx_buff[0] = 'A';
 206:Src/main.c    ****     //spi_rx_buff[1] = 'F';
 207:Src/main.c    ****     uart_debug(max_rx_buff, sizeof(max_rx_buff));
 208:Src/main.c    ****   }
 209:Src/main.c    **** }
 210:Src/main.c    **** 
 211:Src/main.c    **** //CANTX - PB9
 212:Src/main.c    **** //CANRX - PB8
 213:Src/main.c    **** void canTest(void const *argument) {
 214:Src/main.c    ****   HAL_CAN_Start(&hcan1);
 215:Src/main.c    ****   HAL_CAN_WakeUp(&hcan1);
 216:Src/main.c    ****   uint8_t data[8] = {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};
 217:Src/main.c    ****   uint8_t data2[8] = {0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA};
 218:Src/main.c    ****   uint8_t* data_ptr;
 219:Src/main.c    ****   uint8_t data_sel = 0;
 220:Src/main.c    ****   CAN_TxHeaderTypeDef tx_buffer;
 221:Src/main.c    ****   CAN_TxHeaderTypeDef* tx_buffer_ptr = &tx_buffer;
 222:Src/main.c    ****   tx_buffer.StdId = 0x500;
 223:Src/main.c    ****   tx_buffer.ExtId = 0x500;
 224:Src/main.c    ****   tx_buffer.IDE = CAN_ID_STD;
 225:Src/main.c    ****   tx_buffer.RTR = CAN_RTR_DATA;
 226:Src/main.c    ****   tx_buffer.DLC = sizeof(g_ADCValue);
 227:Src/main.c    ****   HAL_StatusTypeDef status = HAL_OK;
 228:Src/main.c    ****   while (1) {
 229:Src/main.c    ****     //osDelay(50); //20Hz 
 230:Src/main.c    ****     //osDelay(1); //1 kHz works for 8 bytes of data !THIS SOMETIMES FAILS
 231:Src/main.c    ****     osDelay(4); //250 Hz , this works with 8 bytes
 232:Src/main.c    ****     status = HAL_OK;
 233:Src/main.c    ****     data_ptr = &g_ADCValue;
 234:Src/main.c    ****     //data_ptr = (data_sel) ? data : data2;
 235:Src/main.c    ****     //data_sel ^= 0b1;
 236:Src/main.c    ****     while (HAL_CAN_IsTxMessagePending(&hcan1, (uint32_t)CAN_TX_MAILBOX0)) {
 237:Src/main.c    ****       //HAL_GPIO_WritePin(GPIOD, ORANGE_LED, GPIO_PIN_SET);
 238:Src/main.c    ****       //osDelay(100);
 239:Src/main.c    ****       //HAL_GPIO_WritePin(GPIOD, ORANGE_LED, GPIO_PIN_RESET);
 240:Src/main.c    ****     }
 241:Src/main.c    ****     status = HAL_CAN_AddTxMessage(&hcan1, tx_buffer_ptr, data_ptr, (uint32_t *)CAN_TX_MAILBOX0);
 242:Src/main.c    **** 
 243:Src/main.c    ****     if (status == HAL_OK) {
 244:Src/main.c    ****       HAL_GPIO_WritePin(GPIOD, GREEN_LED, GPIO_PIN_SET);
 245:Src/main.c    ****     }
 246:Src/main.c    ****     else {
 247:Src/main.c    ****       HAL_GPIO_WritePin(GPIOD, GREEN_LED, GPIO_PIN_RESET);
 248:Src/main.c    ****       HAL_GPIO_TogglePin(GPIOD, RED_LED);
 249:Src/main.c    ****       //unsigned char temparr[] = {"NOT WORKING"};
 250:Src/main.c    ****       //uart_debug(temparr, sizeof(temparr));
 251:Src/main.c    ****     }
 252:Src/main.c    **** 
 253:Src/main.c    ****   }
 254:Src/main.c    **** 
 255:Src/main.c    **** }
 256:Src/main.c    **** 
 257:Src/main.c    **** void uart_debug(uint8_t* arr, uint8_t buffsize) {
 258:Src/main.c    ****   HAL_StatusTypeDef status = HAL_OK;
 259:Src/main.c    ****   
ARM GAS  /tmp/ccw7Bx3r.s 			page 6


 260:Src/main.c    ****   status = HAL_UART_Transmit(&huart4, arr, buffsize, HAL_MAX_DELAY);
 261:Src/main.c    ****   if (status != HAL_OK) {
 262:Src/main.c    ****     //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 263:Src/main.c    ****   }
 264:Src/main.c    ****   else {
 265:Src/main.c    ****     HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_15);
 266:Src/main.c    ****     //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 267:Src/main.c    ****   }
 268:Src/main.c    **** }
 269:Src/main.c    **** 
 270:Src/main.c    **** void Leds(void const *argument) {
 271:Src/main.c    **** 
 272:Src/main.c    ****   /*GPIO_InitTypeDef GPIO_InitStruct;
 273:Src/main.c    **** 
 274:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 275:Src/main.c    ****   //HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 276:Src/main.c    **** 
 277:Src/main.c    ****   //Configure GPIO pin Output Level 
 278:Src/main.c    ****   //HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 279:Src/main.c    **** 
 280:Src/main.c    ****   //Configure GPIO pin Output Level
 281:Src/main.c    ****   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12, GPIO_PIN_RESET);
 282:Src/main.c    **** 
 283:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12;
 284:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 285:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 286:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 287:Src/main.c    ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);*/
 288:Src/main.c    ****   uint32_t prevWakeTime;
 289:Src/main.c    ****   while (1) {
 290:Src/main.c    ****     //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12);
 291:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 292:Src/main.c    ****     osDelay(100);
 293:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 294:Src/main.c    ****     osDelay(100);
 295:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 296:Src/main.c    ****     osDelay(100);
 297:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 298:Src/main.c    ****     osDelay(100);
 299:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 300:Src/main.c    ****     osDelay(100);
 301:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 302:Src/main.c    ****     osDelay(100);
 303:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 304:Src/main.c    ****     osDelay(100);
 305:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 306:Src/main.c    **** 
 307:Src/main.c    ****     prevWakeTime = osKernelSysTick();
 308:Src/main.c    ****     osDelayUntil(&prevWakeTime, 50);
 309:Src/main.c    ****   }
 310:Src/main.c    **** }
 311:Src/main.c    **** void ConfigureADC() {
 312:Src/main.c    ****     GPIO_InitTypeDef gpioInit;
 313:Src/main.c    ****  
 314:Src/main.c    ****     __GPIOC_CLK_ENABLE();
 315:Src/main.c    ****     __ADC1_CLK_ENABLE();
 316:Src/main.c    ****  
ARM GAS  /tmp/ccw7Bx3r.s 			page 7


 317:Src/main.c    ****     gpioInit.Pin = GPIO_PIN_1;
 318:Src/main.c    ****     gpioInit.Mode = GPIO_MODE_ANALOG;
 319:Src/main.c    ****     gpioInit.Pull = GPIO_NOPULL;
 320:Src/main.c    ****     HAL_GPIO_Init(GPIOC, &gpioInit);
 321:Src/main.c    ****  
 322:Src/main.c    ****     HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 323:Src/main.c    ****     HAL_NVIC_EnableIRQ(ADC_IRQn);
 324:Src/main.c    ****  
 325:Src/main.c    ****     ADC_ChannelConfTypeDef adcChannel;
 326:Src/main.c    ****  
 327:Src/main.c    ****     g_AdcHandle.Instance = ADC1;
 328:Src/main.c    ****  
 329:Src/main.c    ****     g_AdcHandle.Init.ClockPrescaler = ADC_CLOCKPRESCALER_PCLK_DIV2;
 330:Src/main.c    ****     g_AdcHandle.Init.Resolution = ADC_RESOLUTION_12B;
 331:Src/main.c    ****     g_AdcHandle.Init.ScanConvMode = DISABLE;
 332:Src/main.c    ****     g_AdcHandle.Init.ContinuousConvMode = ENABLE;
 333:Src/main.c    ****     g_AdcHandle.Init.DiscontinuousConvMode = DISABLE;
 334:Src/main.c    ****     g_AdcHandle.Init.NbrOfDiscConversion = 0;
 335:Src/main.c    ****     g_AdcHandle.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 336:Src/main.c    ****     g_AdcHandle.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 337:Src/main.c    ****     g_AdcHandle.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 338:Src/main.c    ****     g_AdcHandle.Init.NbrOfConversion = 1;
 339:Src/main.c    ****     g_AdcHandle.Init.DMAContinuousRequests = ENABLE;
 340:Src/main.c    ****     g_AdcHandle.Init.EOCSelection = DISABLE;
 341:Src/main.c    ****  
 342:Src/main.c    ****     HAL_ADC_Init(&g_AdcHandle);
 343:Src/main.c    ****  
 344:Src/main.c    ****     adcChannel.Channel = ADC_CHANNEL_11;
 345:Src/main.c    ****     adcChannel.Rank = 1;
 346:Src/main.c    ****     adcChannel.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 347:Src/main.c    ****     adcChannel.Offset = 0;
 348:Src/main.c    ****  
 349:Src/main.c    ****     if (HAL_ADC_ConfigChannel(&g_AdcHandle, &adcChannel) != HAL_OK)
 350:Src/main.c    ****     {
 351:Src/main.c    ****         while (1) {
 352:Src/main.c    ****           HAL_GPIO_TogglePin(GPIOD,BLUE_LED);
 353:Src/main.c    ****           HAL_Delay(100);
 354:Src/main.c    ****         }
 355:Src/main.c    ****     }
 356:Src/main.c    **** }
 357:Src/main.c    **** 
 358:Src/main.c    **** void adcTest(void const *argument) {
 359:Src/main.c    ****   ConfigureADC();
 360:Src/main.c    ****   HAL_ADC_Start(&g_AdcHandle);
 361:Src/main.c    ****   int g_MeasurementNumber;
 362:Src/main.c    ****   while (1) {
 363:Src/main.c    ****     osDelay(100);
 364:Src/main.c    ****     if (HAL_ADC_PollForConversion(&g_AdcHandle,1000000) == HAL_OK) {
 365:Src/main.c    ****       g_ADCValue = HAL_ADC_GetValue(&g_AdcHandle);
 366:Src/main.c    ****       g_MeasurementNumber++;
 367:Src/main.c    ****     }
 368:Src/main.c    ****   }
 369:Src/main.c    **** 
 370:Src/main.c    **** }
 371:Src/main.c    **** 
 372:Src/main.c    **** /* USER CODE END 0 */
 373:Src/main.c    **** 
ARM GAS  /tmp/ccw7Bx3r.s 			page 8


 374:Src/main.c    **** /**
 375:Src/main.c    ****   * @brief  The application entry point.
 376:Src/main.c    ****   *
 377:Src/main.c    ****   * @retval None
 378:Src/main.c    ****   */
 379:Src/main.c    **** int main(void)
 380:Src/main.c    **** {
 381:Src/main.c    ****   /* USER CODE BEGIN 1 */
 382:Src/main.c    **** 
 383:Src/main.c    ****   /* USER CODE END 1 */
 384:Src/main.c    **** 
 385:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
 386:Src/main.c    **** 
 387:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 388:Src/main.c    ****   HAL_Init();
 389:Src/main.c    **** 
 390:Src/main.c    ****   /* USER CODE BEGIN Init */
 391:Src/main.c    **** 
 392:Src/main.c    ****   /* USER CODE END Init */
 393:Src/main.c    **** 
 394:Src/main.c    ****   /* Configure the system clock */
 395:Src/main.c    ****   SystemClock_Config();
 396:Src/main.c    **** 
 397:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 398:Src/main.c    **** 
 399:Src/main.c    ****   /* USER CODE END SysInit */
 400:Src/main.c    **** 
 401:Src/main.c    ****   /* Initialize all configured peripherals */
 402:Src/main.c    ****   MX_GPIO_Init();
 403:Src/main.c    ****   MX_UART4_Init();
 404:Src/main.c    ****   MX_SPI1_Init();
 405:Src/main.c    ****   MX_I2C1_Init();
 406:Src/main.c    ****   MX_CAN1_Init();
 407:Src/main.c    ****   /* USER CODE BEGIN 2 */
 408:Src/main.c    **** 
 409:Src/main.c    ****   /* USER CODE END 2 */
 410:Src/main.c    **** 
 411:Src/main.c    ****   /* USER CODE BEGIN RTOS_MUTEX */
 412:Src/main.c    ****   /* add mutexes, ... */
 413:Src/main.c    ****   /* USER CODE END RTOS_MUTEX */
 414:Src/main.c    **** 
 415:Src/main.c    ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 416:Src/main.c    ****   /* add semaphores, ... */
 417:Src/main.c    ****   /* USER CODE END RTOS_SEMAPHORES */
 418:Src/main.c    **** 
 419:Src/main.c    ****   /* USER CODE BEGIN RTOS_TIMERS */
 420:Src/main.c    ****   /* start timers, add new ones, ... */
 421:Src/main.c    ****   /* USER CODE END RTOS_TIMERS */
 422:Src/main.c    **** 
 423:Src/main.c    ****   /* Create the thread(s) */
 424:Src/main.c    ****   /* definition and creation of defaultTask */
 425:Src/main.c    ****   osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 426:Src/main.c    ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 427:Src/main.c    **** 
 428:Src/main.c    ****   /* USER CODE BEGIN RTOS_THREADS */
 429:Src/main.c    ****   /* add threads, ... */
 430:Src/main.c    ****   osThreadDef(adcTask, adcTest, osPriorityAboveNormal,1,128);
ARM GAS  /tmp/ccw7Bx3r.s 			page 9


 431:Src/main.c    ****   adcTaskHandle = osThreadCreate(osThread(adcTask),NULL);
 432:Src/main.c    ****   osThreadDef(canTask, canTest, osPriorityAboveNormal, 1, 128);
 433:Src/main.c    ****   canTaskHandle = osThreadCreate(osThread(canTask),NULL);
 434:Src/main.c    ****   //osThreadDef(uartTask, uartTest, osPriorityAboveNormal, 1, 128);
 435:Src/main.c    ****   //uartTaskHandle = osThreadCreate(osThread(uartTask), NULL);
 436:Src/main.c    ****   //osThreadDef(i2cTask, writei2c, osPriorityAboveNormal,1,256);
 437:Src/main.c    ****   //i2cTaskHandle = osThreadCreate(osThread(i2cTask),NULL);
 438:Src/main.c    ****   //osThreadDef(ledTask, Leds, osPriorityAboveNormal, 1, 128);
 439:Src/main.c    ****   //ledTaskHandle = osThreadCreate(osThread(ledTask),NULL);
 440:Src/main.c    ****   //osThreadDef(spiTask,spiTest,osPriorityAboveNormal,1,128);
 441:Src/main.c    ****   //spiTaskHandle = osThreadCreate(osThread(spiTask),NULL);
 442:Src/main.c    ****   /* USER CODE END RTOS_THREADS */
 443:Src/main.c    **** 
 444:Src/main.c    ****   /* USER CODE BEGIN RTOS_QUEUES */
 445:Src/main.c    ****   /* add queues, ... */
 446:Src/main.c    ****   /* USER CODE END RTOS_QUEUES */
 447:Src/main.c    ****  
 448:Src/main.c    **** 
 449:Src/main.c    ****   /* Start scheduler */
 450:Src/main.c    ****   osKernelStart();
 451:Src/main.c    ****   
 452:Src/main.c    ****   /* We should never get here as control is now taken by the scheduler */
 453:Src/main.c    **** 
 454:Src/main.c    ****   /* Infinite loop */
 455:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 456:Src/main.c    ****   while (1)
 457:Src/main.c    ****   {
 458:Src/main.c    **** 
 459:Src/main.c    ****   /* USER CODE END WHILE */
 460:Src/main.c    **** 
 461:Src/main.c    ****   /* USER CODE BEGIN 3 */
 462:Src/main.c    **** 
 463:Src/main.c    ****   }
 464:Src/main.c    ****   /* USER CODE END 3 */
 465:Src/main.c    **** 
 466:Src/main.c    **** }
 467:Src/main.c    **** 
 468:Src/main.c    **** /**
 469:Src/main.c    ****   * @brief System Clock Configuration
 470:Src/main.c    ****   * @retval None
 471:Src/main.c    ****   */
 472:Src/main.c    **** void SystemClock_Config(void)
 473:Src/main.c    **** {
 474:Src/main.c    **** 
 475:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 476:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 477:Src/main.c    **** 
 478:Src/main.c    ****     /**Configure the main internal regulator output voltage 
 479:Src/main.c    ****     */
 480:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 481:Src/main.c    **** 
 482:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 483:Src/main.c    **** 
 484:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 485:Src/main.c    ****     */
 486:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 487:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
ARM GAS  /tmp/ccw7Bx3r.s 			page 10


 488:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 489:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 490:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 491:Src/main.c    ****   {
 492:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 493:Src/main.c    ****   }
 494:Src/main.c    **** 
 495:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 496:Src/main.c    ****     */
 497:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 498:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 499:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 500:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 501:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 502:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 503:Src/main.c    **** 
 504:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 505:Src/main.c    ****   {
 506:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 507:Src/main.c    ****   }
 508:Src/main.c    **** 
 509:Src/main.c    ****     /**Configure the Systick interrupt time 
 510:Src/main.c    ****     */
 511:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 512:Src/main.c    **** 
 513:Src/main.c    ****     /**Configure the Systick 
 514:Src/main.c    ****     */
 515:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 516:Src/main.c    **** 
 517:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 518:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 519:Src/main.c    **** }
 520:Src/main.c    **** 
 521:Src/main.c    **** /* CAN1 init function */
 522:Src/main.c    **** static void MX_CAN1_Init(void)
 523:Src/main.c    **** {
 524:Src/main.c    **** 
 525:Src/main.c    ****   hcan1.Instance = CAN1;
 526:Src/main.c    ****   hcan1.Init.Prescaler = 2;
 527:Src/main.c    ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 528:Src/main.c    ****   hcan1.Init.SyncJumpWidth = CAN_SJW_4TQ;
 529:Src/main.c    ****   hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 530:Src/main.c    ****   hcan1.Init.TimeSeg2 = CAN_BS2_6TQ;
 531:Src/main.c    ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 532:Src/main.c    ****   hcan1.Init.AutoBusOff = ENABLE;
 533:Src/main.c    ****   hcan1.Init.AutoWakeUp = DISABLE;
 534:Src/main.c    ****   hcan1.Init.AutoRetransmission = DISABLE;
 535:Src/main.c    ****   hcan1.Init.ReceiveFifoLocked = ENABLE;
 536:Src/main.c    ****   hcan1.Init.TransmitFifoPriority = ENABLE;
 537:Src/main.c    ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 538:Src/main.c    ****   {
 539:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 540:Src/main.c    ****   }
 541:Src/main.c    **** 
 542:Src/main.c    **** }
 543:Src/main.c    **** 
 544:Src/main.c    **** /* I2C1 init function */
ARM GAS  /tmp/ccw7Bx3r.s 			page 11


 545:Src/main.c    **** static void MX_I2C1_Init(void)
 546:Src/main.c    **** {
 547:Src/main.c    **** 
 548:Src/main.c    ****   hi2c1.Instance = I2C1;
 549:Src/main.c    ****   hi2c1.Init.ClockSpeed = 100000;
 550:Src/main.c    ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 551:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 0;
 552:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 553:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 554:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 555:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 556:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 557:Src/main.c    ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 558:Src/main.c    ****   {
 559:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 560:Src/main.c    ****   }
 561:Src/main.c    **** 
 562:Src/main.c    **** }
 563:Src/main.c    **** 
 564:Src/main.c    **** /* SPI1 init function */
 565:Src/main.c    **** static void MX_SPI1_Init(void)
 566:Src/main.c    **** {
 567:Src/main.c    **** 
 568:Src/main.c    ****   /* SPI1 parameter configuration*/
 569:Src/main.c    ****   hspi1.Instance = SPI1;
 570:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 571:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 572:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 573:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 574:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 575:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 576:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 577:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 578:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 579:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 580:Src/main.c    ****   hspi1.Init.CRCPolynomial = 10;
 581:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 582:Src/main.c    ****   {
 583:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 584:Src/main.c    ****   }
 585:Src/main.c    ****   
 586:Src/main.c    **** }
 587:Src/main.c    **** 
 588:Src/main.c    **** /* UART4 init function */
 589:Src/main.c    **** static void MX_UART4_Init(void)
 590:Src/main.c    **** {
 591:Src/main.c    **** 
 592:Src/main.c    ****   huart4.Instance = UART4;
 593:Src/main.c    ****   huart4.Init.BaudRate = 57600;
 594:Src/main.c    ****   huart4.Init.WordLength = UART_WORDLENGTH_8B;
 595:Src/main.c    ****   huart4.Init.StopBits = UART_STOPBITS_1;
 596:Src/main.c    ****   huart4.Init.Parity = UART_PARITY_NONE;
 597:Src/main.c    ****   huart4.Init.Mode = UART_MODE_TX_RX;
 598:Src/main.c    ****   huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 599:Src/main.c    ****   huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 600:Src/main.c    ****   if (HAL_UART_Init(&huart4) != HAL_OK)
 601:Src/main.c    ****   {
ARM GAS  /tmp/ccw7Bx3r.s 			page 12


 602:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 603:Src/main.c    ****   }
 604:Src/main.c    **** 
 605:Src/main.c    **** }
 606:Src/main.c    **** 
 607:Src/main.c    **** /** Configure pins as 
 608:Src/main.c    ****         * Analog 
 609:Src/main.c    ****         * Input 
 610:Src/main.c    ****         * Output
 611:Src/main.c    ****         * EVENT_OUT
 612:Src/main.c    ****         * EXTI
 613:Src/main.c    **** */
 614:Src/main.c    **** static void MX_GPIO_Init(void)
 615:Src/main.c    **** {
  28              		.loc 1 615 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 32
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 70B5     		push	{r4, r5, r6, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 16
  35              		.cfi_offset 4, -16
  36              		.cfi_offset 5, -12
  37              		.cfi_offset 6, -8
  38              		.cfi_offset 14, -4
  39 0002 88B0     		sub	sp, sp, #32
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 48
  42              	.LBB2:
 616:Src/main.c    **** 
 617:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct;
 618:Src/main.c    **** 
 619:Src/main.c    ****   /* GPIO Ports Clock Enable */
 620:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  43              		.loc 1 620 0
  44 0004 0024     		movs	r4, #0
  45 0006 0094     		str	r4, [sp]
  46 0008 264B     		ldr	r3, .L3
  47 000a 1A6B     		ldr	r2, [r3, #48]
  48 000c 42F00102 		orr	r2, r2, #1
  49 0010 1A63     		str	r2, [r3, #48]
  50 0012 1A6B     		ldr	r2, [r3, #48]
  51 0014 02F00102 		and	r2, r2, #1
  52 0018 0092     		str	r2, [sp]
  53 001a 009A     		ldr	r2, [sp]
  54              	.LBE2:
  55              	.LBB3:
 621:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  56              		.loc 1 621 0
  57 001c 0194     		str	r4, [sp, #4]
  58 001e 1A6B     		ldr	r2, [r3, #48]
  59 0020 42F00802 		orr	r2, r2, #8
  60 0024 1A63     		str	r2, [r3, #48]
  61 0026 1A6B     		ldr	r2, [r3, #48]
  62 0028 02F00802 		and	r2, r2, #8
  63 002c 0192     		str	r2, [sp, #4]
  64 002e 019A     		ldr	r2, [sp, #4]
ARM GAS  /tmp/ccw7Bx3r.s 			page 13


  65              	.LBE3:
  66              	.LBB4:
 622:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  67              		.loc 1 622 0
  68 0030 0294     		str	r4, [sp, #8]
  69 0032 1A6B     		ldr	r2, [r3, #48]
  70 0034 42F00202 		orr	r2, r2, #2
  71 0038 1A63     		str	r2, [r3, #48]
  72 003a 1B6B     		ldr	r3, [r3, #48]
  73 003c 03F00203 		and	r3, r3, #2
  74 0040 0293     		str	r3, [sp, #8]
  75 0042 029B     		ldr	r3, [sp, #8]
  76              	.LBE4:
 623:Src/main.c    **** 
 624:Src/main.c    ****   /*Configure GPIO pin Output Level */
 625:Src/main.c    ****   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
  77              		.loc 1 625 0
  78 0044 184E     		ldr	r6, .L3+4
  79 0046 3046     		mov	r0, r6
  80 0048 4FF47041 		mov	r1, #61440
  81 004c 2246     		mov	r2, r4
  82 004e FFF7FEFF 		bl	HAL_GPIO_WritePin
  83              	.LVL0:
 626:Src/main.c    **** 
 627:Src/main.c    ****   /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
 628:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  84              		.loc 1 628 0
  85 0052 4FF47043 		mov	r3, #61440
  86 0056 0393     		str	r3, [sp, #12]
 629:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  87              		.loc 1 629 0
  88 0058 0125     		movs	r5, #1
  89 005a 0495     		str	r5, [sp, #16]
 630:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  90              		.loc 1 630 0
  91 005c 0594     		str	r4, [sp, #20]
 631:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  92              		.loc 1 631 0
  93 005e 0694     		str	r4, [sp, #24]
 632:Src/main.c    ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
  94              		.loc 1 632 0
  95 0060 3046     		mov	r0, r6
  96 0062 03A9     		add	r1, sp, #12
  97 0064 FFF7FEFF 		bl	HAL_GPIO_Init
  98              	.LVL1:
 633:Src/main.c    **** 
 634:Src/main.c    **** 
 635:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
  99              		.loc 1 635 0
 100 0068 4FF44073 		mov	r3, #768
 101 006c 0393     		str	r3, [sp, #12]
 636:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 102              		.loc 1 636 0
 103 006e 0223     		movs	r3, #2
 104 0070 0493     		str	r3, [sp, #16]
 637:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 105              		.loc 1 637 0
ARM GAS  /tmp/ccw7Bx3r.s 			page 14


 106 0072 0594     		str	r4, [sp, #20]
 638:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 107              		.loc 1 638 0
 108 0074 0323     		movs	r3, #3
 109 0076 0693     		str	r3, [sp, #24]
 639:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 110              		.loc 1 639 0
 111 0078 0C48     		ldr	r0, .L3+8
 112 007a 03A9     		add	r1, sp, #12
 113 007c FFF7FEFF 		bl	HAL_GPIO_Init
 114              	.LVL2:
 640:Src/main.c    **** 
 641:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_4;
 115              		.loc 1 641 0
 116 0080 1026     		movs	r6, #16
 117 0082 0396     		str	r6, [sp, #12]
 642:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 118              		.loc 1 642 0
 119 0084 0495     		str	r5, [sp, #16]
 643:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 120              		.loc 1 643 0
 121 0086 0594     		str	r4, [sp, #20]
 644:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 122              		.loc 1 644 0
 123 0088 0694     		str	r4, [sp, #24]
 645:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 124              		.loc 1 645 0
 125 008a 094C     		ldr	r4, .L3+12
 126 008c 2046     		mov	r0, r4
 127 008e 03A9     		add	r1, sp, #12
 128 0090 FFF7FEFF 		bl	HAL_GPIO_Init
 129              	.LVL3:
 646:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 130              		.loc 1 646 0
 131 0094 2046     		mov	r0, r4
 132 0096 3146     		mov	r1, r6
 133 0098 2A46     		mov	r2, r5
 134 009a FFF7FEFF 		bl	HAL_GPIO_WritePin
 135              	.LVL4:
 647:Src/main.c    **** 
 648:Src/main.c    **** }
 136              		.loc 1 648 0
 137 009e 08B0     		add	sp, sp, #32
 138              	.LCFI2:
 139              		.cfi_def_cfa_offset 16
 140              		@ sp needed
 141 00a0 70BD     		pop	{r4, r5, r6, pc}
 142              	.L4:
 143 00a2 00BF     		.align	2
 144              	.L3:
 145 00a4 00380240 		.word	1073887232
 146 00a8 000C0240 		.word	1073875968
 147 00ac 00040240 		.word	1073873920
 148 00b0 00000240 		.word	1073872896
 149              		.cfi_endproc
 150              	.LFE151:
 152              		.section	.text.StartDefaultTask,"ax",%progbits
ARM GAS  /tmp/ccw7Bx3r.s 			page 15


 153              		.align	2
 154              		.global	StartDefaultTask
 155              		.thumb
 156              		.thumb_func
 158              	StartDefaultTask:
 159              	.LFB152:
 649:Src/main.c    **** 
 650:Src/main.c    **** /* USER CODE BEGIN 4 */
 651:Src/main.c    **** 
 652:Src/main.c    **** /* USER CODE END 4 */
 653:Src/main.c    **** 
 654:Src/main.c    **** /* USER CODE BEGIN Header_StartDefaultTask */
 655:Src/main.c    **** /**
 656:Src/main.c    ****   * @brief  Function implementing the defaultTask thread.
 657:Src/main.c    ****   * @param  argument: Not used 
 658:Src/main.c    ****   * @retval None
 659:Src/main.c    ****   */
 660:Src/main.c    **** /* USER CODE END Header_StartDefaultTask */
 661:Src/main.c    **** void StartDefaultTask(void const * argument)
 662:Src/main.c    **** {
 160              		.loc 1 662 0
 161              		.cfi_startproc
 162              		@ Volatile: function does not return.
 163              		@ args = 0, pretend = 0, frame = 0
 164              		@ frame_needed = 0, uses_anonymous_args = 0
 165              	.LVL5:
 166 0000 08B5     		push	{r3, lr}
 167              	.LCFI3:
 168              		.cfi_def_cfa_offset 8
 169              		.cfi_offset 3, -8
 170              		.cfi_offset 14, -4
 171              	.LVL6:
 172              	.L6:
 663:Src/main.c    **** 
 664:Src/main.c    ****   /* USER CODE BEGIN 5 */
 665:Src/main.c    ****   /* Infinite loop */
 666:Src/main.c    ****   for(;;)
 667:Src/main.c    ****   {
 668:Src/main.c    ****     osDelay(1);
 173              		.loc 1 668 0 discriminator 1
 174 0002 0120     		movs	r0, #1
 175 0004 FFF7FEFF 		bl	osDelay
 176              	.LVL7:
 669:Src/main.c    ****   }
 177              		.loc 1 669 0 discriminator 1
 178 0008 FBE7     		b	.L6
 179              		.cfi_endproc
 180              	.LFE152:
 182 000a 00BF     		.section	.text.canTest,"ax",%progbits
 183              		.align	2
 184              		.global	canTest
 185              		.thumb
 186              		.thumb_func
 188              	canTest:
 189              	.LFB140:
 213:Src/main.c    ****   HAL_CAN_Start(&hcan1);
 190              		.loc 1 213 0
ARM GAS  /tmp/ccw7Bx3r.s 			page 16


 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 24
 193              		@ frame_needed = 0, uses_anonymous_args = 0
 194              	.LVL8:
 195 0000 10B5     		push	{r4, lr}
 196              	.LCFI4:
 197              		.cfi_def_cfa_offset 8
 198              		.cfi_offset 4, -8
 199              		.cfi_offset 14, -4
 200 0002 86B0     		sub	sp, sp, #24
 201              	.LCFI5:
 202              		.cfi_def_cfa_offset 32
 214:Src/main.c    ****   HAL_CAN_WakeUp(&hcan1);
 203              		.loc 1 214 0
 204 0004 194C     		ldr	r4, .L14
 205 0006 2046     		mov	r0, r4
 206              	.LVL9:
 207 0008 FFF7FEFF 		bl	HAL_CAN_Start
 208              	.LVL10:
 215:Src/main.c    ****   uint8_t data[8] = {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};
 209              		.loc 1 215 0
 210 000c 2046     		mov	r0, r4
 211 000e FFF7FEFF 		bl	HAL_CAN_WakeUp
 212              	.LVL11:
 222:Src/main.c    ****   tx_buffer.ExtId = 0x500;
 213              		.loc 1 222 0
 214 0012 4FF4A063 		mov	r3, #1280
 215 0016 0093     		str	r3, [sp]
 223:Src/main.c    ****   tx_buffer.IDE = CAN_ID_STD;
 216              		.loc 1 223 0
 217 0018 0193     		str	r3, [sp, #4]
 224:Src/main.c    ****   tx_buffer.RTR = CAN_RTR_DATA;
 218              		.loc 1 224 0
 219 001a 0023     		movs	r3, #0
 220 001c 0293     		str	r3, [sp, #8]
 225:Src/main.c    ****   tx_buffer.DLC = sizeof(g_ADCValue);
 221              		.loc 1 225 0
 222 001e 0393     		str	r3, [sp, #12]
 226:Src/main.c    ****   HAL_StatusTypeDef status = HAL_OK;
 223              		.loc 1 226 0
 224 0020 0423     		movs	r3, #4
 225 0022 0493     		str	r3, [sp, #16]
 226              	.LVL12:
 227              	.L9:
 231:Src/main.c    ****     status = HAL_OK;
 228              		.loc 1 231 0
 229 0024 0420     		movs	r0, #4
 230 0026 FFF7FEFF 		bl	osDelay
 231              	.LVL13:
 232              	.L10:
 236:Src/main.c    ****       //HAL_GPIO_WritePin(GPIOD, ORANGE_LED, GPIO_PIN_SET);
 233              		.loc 1 236 0 discriminator 1
 234 002a 1048     		ldr	r0, .L14
 235 002c 0121     		movs	r1, #1
 236 002e FFF7FEFF 		bl	HAL_CAN_IsTxMessagePending
 237              	.LVL14:
 238 0032 0028     		cmp	r0, #0
ARM GAS  /tmp/ccw7Bx3r.s 			page 17


 239 0034 F9D1     		bne	.L10
 241:Src/main.c    **** 
 240              		.loc 1 241 0
 241 0036 0D48     		ldr	r0, .L14
 242 0038 6946     		mov	r1, sp
 243 003a 0D4A     		ldr	r2, .L14+4
 244 003c 0123     		movs	r3, #1
 245 003e FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 246              	.LVL15:
 243:Src/main.c    ****       HAL_GPIO_WritePin(GPIOD, GREEN_LED, GPIO_PIN_SET);
 247              		.loc 1 243 0
 248 0042 30B9     		cbnz	r0, .L11
 244:Src/main.c    ****     }
 249              		.loc 1 244 0
 250 0044 0B48     		ldr	r0, .L14+8
 251              	.LVL16:
 252 0046 4FF48051 		mov	r1, #4096
 253 004a 0122     		movs	r2, #1
 254 004c FFF7FEFF 		bl	HAL_GPIO_WritePin
 255              	.LVL17:
 256 0050 E8E7     		b	.L9
 257              	.LVL18:
 258              	.L11:
 247:Src/main.c    ****       HAL_GPIO_TogglePin(GPIOD, RED_LED);
 259              		.loc 1 247 0
 260 0052 084C     		ldr	r4, .L14+8
 261 0054 2046     		mov	r0, r4
 262              	.LVL19:
 263 0056 4FF48051 		mov	r1, #4096
 264 005a 0022     		movs	r2, #0
 265 005c FFF7FEFF 		bl	HAL_GPIO_WritePin
 266              	.LVL20:
 248:Src/main.c    ****       //unsigned char temparr[] = {"NOT WORKING"};
 267              		.loc 1 248 0
 268 0060 2046     		mov	r0, r4
 269 0062 4FF48041 		mov	r1, #16384
 270 0066 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 271              	.LVL21:
 272 006a DBE7     		b	.L9
 273              	.L15:
 274              		.align	2
 275              	.L14:
 276 006c 00000000 		.word	hcan1
 277 0070 00000000 		.word	g_ADCValue
 278 0074 000C0240 		.word	1073875968
 279              		.cfi_endproc
 280              	.LFE140:
 282              		.section	.text.eecs_GPIO_Clock_Init,"ax",%progbits
 283              		.align	2
 284              		.global	eecs_GPIO_Clock_Init
 285              		.thumb
 286              		.thumb_func
 288              	eecs_GPIO_Clock_Init:
 289              	.LFB128:
 290              		.file 2 "Inc/eecs473.h"
   1:Inc/eecs473.h **** //EECS 473 - Advanced Embedded Systems 
   2:Inc/eecs473.h **** //UM Solar Car
ARM GAS  /tmp/ccw7Bx3r.s 			page 18


   3:Inc/eecs473.h **** 
   4:Inc/eecs473.h **** #include <stdlib.h>
   5:Inc/eecs473.h **** #include <stdint.h>
   6:Inc/eecs473.h **** #include "stm32f4xx_hal.h"
   7:Inc/eecs473.h **** 
   8:Inc/eecs473.h **** int CLOCK_ENABLED = 0;
   9:Inc/eecs473.h **** 
  10:Inc/eecs473.h **** const uint16_t pins[] = {GPIO_PIN_0,
  11:Inc/eecs473.h **** 				 GPIO_PIN_1,
  12:Inc/eecs473.h **** 				 GPIO_PIN_2,
  13:Inc/eecs473.h **** 				 GPIO_PIN_3,
  14:Inc/eecs473.h **** 				 GPIO_PIN_4,
  15:Inc/eecs473.h **** 				 GPIO_PIN_5,
  16:Inc/eecs473.h **** 				 GPIO_PIN_6,
  17:Inc/eecs473.h **** 				 GPIO_PIN_7,
  18:Inc/eecs473.h **** 				 GPIO_PIN_8,
  19:Inc/eecs473.h **** 				 GPIO_PIN_9,
  20:Inc/eecs473.h **** 				 GPIO_PIN_10,
  21:Inc/eecs473.h **** 				 GPIO_PIN_11,
  22:Inc/eecs473.h **** 				 GPIO_PIN_12,
  23:Inc/eecs473.h **** 				 GPIO_PIN_13,
  24:Inc/eecs473.h **** 				 GPIO_PIN_14,
  25:Inc/eecs473.h **** 				 GPIO_PIN_15};
  26:Inc/eecs473.h **** 
  27:Inc/eecs473.h **** /*#define GREEN_LED pins[12];
  28:Inc/eecs473.h **** #define ORANGE_LED pins[13];
  29:Inc/eecs473.h **** #define RED_LED pins[14];
  30:Inc/eecs473.h **** #define BLUE_LED pins[15];*/
  31:Inc/eecs473.h **** 
  32:Inc/eecs473.h **** const uint32_t modes[] = {GPIO_MODE_INPUT,
  33:Inc/eecs473.h **** 				  GPIO_MODE_OUTPUT_PP,
  34:Inc/eecs473.h **** 				  GPIO_MODE_OUTPUT_OD,
  35:Inc/eecs473.h **** 				  GPIO_MODE_AF_PP,
  36:Inc/eecs473.h **** 				  GPIO_MODE_AF_OD,
  37:Inc/eecs473.h **** 				  GPIO_MODE_ANALOG,
  38:Inc/eecs473.h **** 				  GPIO_MODE_IT_RISING,
  39:Inc/eecs473.h **** 				  GPIO_MODE_IT_FALLING,
  40:Inc/eecs473.h **** 				  GPIO_MODE_IT_RISING_FALLING,
  41:Inc/eecs473.h **** 				  GPIO_MODE_EVT_RISING,
  42:Inc/eecs473.h **** 				  GPIO_MODE_EVT_FALLING,
  43:Inc/eecs473.h **** 				  GPIO_MODE_EVT_RISING_FALLING};
  44:Inc/eecs473.h **** 
  45:Inc/eecs473.h **** const uint32_t speeds[] = {GPIO_SPEED_FREQ_LOW,
  46:Inc/eecs473.h **** 				   GPIO_SPEED_FREQ_MEDIUM,
  47:Inc/eecs473.h **** 				   GPIO_SPEED_FREQ_HIGH,
  48:Inc/eecs473.h **** 				   GPIO_SPEED_FREQ_VERY_HIGH};
  49:Inc/eecs473.h **** 
  50:Inc/eecs473.h **** const uint32_t pulls[] = {GPIO_NOPULL,
  51:Inc/eecs473.h **** 				  GPIO_PULLUP,
  52:Inc/eecs473.h **** 				  GPIO_PULLDOWN};
  53:Inc/eecs473.h **** 
  54:Inc/eecs473.h **** GPIO_PinState HIGH = GPIO_PIN_SET;
  55:Inc/eecs473.h **** GPIO_PinState LOW = GPIO_PIN_RESET;
  56:Inc/eecs473.h **** 
  57:Inc/eecs473.h **** 
  58:Inc/eecs473.h **** UART_HandleTypeDef huart;
  59:Inc/eecs473.h **** SPI_HandleTypeDef hspi2;
ARM GAS  /tmp/ccw7Bx3r.s 			page 19


  60:Inc/eecs473.h **** SPI_HandleTypeDef hspi3;
  61:Inc/eecs473.h **** I2C_HandleTypeDef hi2c;
  62:Inc/eecs473.h **** CAN_HandleTypeDef hcan;
  63:Inc/eecs473.h **** 
  64:Inc/eecs473.h **** 
  65:Inc/eecs473.h **** void eecs_Error_Handler();
  66:Inc/eecs473.h **** void eecs_GPIO_Init(GPIO_TypeDef*,uint16_t,uint32_t,uint32_t,uint32_t);
  67:Inc/eecs473.h **** void eecs_GPIO_Write(GPIO_TypeDef*,uint16_t,uint8_t);
  68:Inc/eecs473.h **** void eecs_GPIO_Toggle(GPIO_TypeDef*,uint16_t);
  69:Inc/eecs473.h **** 
  70:Inc/eecs473.h **** void eecs_UART_Init(void);
  71:Inc/eecs473.h **** void eecs_UART_Print(uint8_t*,uint8_t);
  72:Inc/eecs473.h **** void eecs_UART_Test(void const *);
  73:Inc/eecs473.h **** 
  74:Inc/eecs473.h **** void eecs_SPI_Init(int);
  75:Inc/eecs473.h **** void eecs_GPIO_Clock_Init(void) {
 291              		.loc 2 75 0
 292              		.cfi_startproc
 293              		@ args = 0, pretend = 0, frame = 16
 294              		@ frame_needed = 0, uses_anonymous_args = 0
 295              		@ link register save eliminated.
  76:Inc/eecs473.h ****   if (!CLOCK_ENABLED) {
 296              		.loc 2 76 0
 297 0000 144B     		ldr	r3, .L21
 298 0002 1B68     		ldr	r3, [r3]
 299 0004 23BB     		cbnz	r3, .L20
  75:Inc/eecs473.h ****   if (!CLOCK_ENABLED) {
 300              		.loc 2 75 0
 301 0006 84B0     		sub	sp, sp, #16
 302              	.LCFI6:
 303              		.cfi_def_cfa_offset 16
 304              	.LBB5:
  77:Inc/eecs473.h ****     /* GPIO Ports Clock Enable */
  78:Inc/eecs473.h ****     __HAL_RCC_GPIOA_CLK_ENABLE();
 305              		.loc 2 78 0
 306 0008 0022     		movs	r2, #0
 307 000a 0192     		str	r2, [sp, #4]
 308 000c 124B     		ldr	r3, .L21+4
 309 000e 196B     		ldr	r1, [r3, #48]
 310 0010 41F00101 		orr	r1, r1, #1
 311 0014 1963     		str	r1, [r3, #48]
 312 0016 196B     		ldr	r1, [r3, #48]
 313 0018 01F00101 		and	r1, r1, #1
 314 001c 0191     		str	r1, [sp, #4]
 315 001e 0199     		ldr	r1, [sp, #4]
 316              	.LBE5:
 317              	.LBB6:
  79:Inc/eecs473.h ****     __HAL_RCC_GPIOD_CLK_ENABLE();
 318              		.loc 2 79 0
 319 0020 0292     		str	r2, [sp, #8]
 320 0022 196B     		ldr	r1, [r3, #48]
 321 0024 41F00801 		orr	r1, r1, #8
 322 0028 1963     		str	r1, [r3, #48]
 323 002a 196B     		ldr	r1, [r3, #48]
 324 002c 01F00801 		and	r1, r1, #8
 325 0030 0291     		str	r1, [sp, #8]
 326 0032 0299     		ldr	r1, [sp, #8]
ARM GAS  /tmp/ccw7Bx3r.s 			page 20


 327              	.LBE6:
 328              	.LBB7:
  80:Inc/eecs473.h ****     __HAL_RCC_GPIOB_CLK_ENABLE();
 329              		.loc 2 80 0
 330 0034 0392     		str	r2, [sp, #12]
 331 0036 1A6B     		ldr	r2, [r3, #48]
 332 0038 42F00202 		orr	r2, r2, #2
 333 003c 1A63     		str	r2, [r3, #48]
 334 003e 1B6B     		ldr	r3, [r3, #48]
 335 0040 03F00203 		and	r3, r3, #2
 336 0044 0393     		str	r3, [sp, #12]
 337 0046 039B     		ldr	r3, [sp, #12]
 338              	.LBE7:
  81:Inc/eecs473.h ****     CLOCK_ENABLED = 1;
 339              		.loc 2 81 0
 340 0048 0122     		movs	r2, #1
 341 004a 024B     		ldr	r3, .L21
 342 004c 1A60     		str	r2, [r3]
  82:Inc/eecs473.h ****   }
  83:Inc/eecs473.h **** }
 343              		.loc 2 83 0
 344 004e 04B0     		add	sp, sp, #16
 345              	.LCFI7:
 346              		.cfi_def_cfa_offset 0
 347              		@ sp needed
 348              	.L20:
 349 0050 7047     		bx	lr
 350              	.L22:
 351 0052 00BF     		.align	2
 352              	.L21:
 353 0054 00000000 		.word	.LANCHOR0
 354 0058 00380240 		.word	1073887232
 355              		.cfi_endproc
 356              	.LFE128:
 358              		.section	.text.eecs_GPIO_Init,"ax",%progbits
 359              		.align	2
 360              		.global	eecs_GPIO_Init
 361              		.thumb
 362              		.thumb_func
 364              	eecs_GPIO_Init:
 365              	.LFB129:
  84:Inc/eecs473.h **** 
  85:Inc/eecs473.h **** void eecs_GPIO_Init(GPIO_TypeDef *GPIOx,uint16_t Pins,uint32_t Mode,uint32_t Pull,uint32_t Speed) {
 366              		.loc 2 85 0
 367              		.cfi_startproc
 368              		@ args = 4, pretend = 0, frame = 24
 369              		@ frame_needed = 0, uses_anonymous_args = 0
 370              	.LVL22:
 371 0000 00B5     		push	{lr}
 372              	.LCFI8:
 373              		.cfi_def_cfa_offset 4
 374              		.cfi_offset 14, -4
 375 0002 87B0     		sub	sp, sp, #28
 376              	.LCFI9:
 377              		.cfi_def_cfa_offset 32
  86:Inc/eecs473.h ****   GPIO_InitTypeDef GPIO_InitStruct;
  87:Inc/eecs473.h ****   GPIO_InitStruct.Pin = Pins;
ARM GAS  /tmp/ccw7Bx3r.s 			page 21


 378              		.loc 2 87 0
 379 0004 0191     		str	r1, [sp, #4]
  88:Inc/eecs473.h ****   GPIO_InitStruct.Mode = Mode;
 380              		.loc 2 88 0
 381 0006 0292     		str	r2, [sp, #8]
  89:Inc/eecs473.h ****   GPIO_InitStruct.Pull = Pull;
 382              		.loc 2 89 0
 383 0008 0393     		str	r3, [sp, #12]
  90:Inc/eecs473.h ****   GPIO_InitStruct.Speed = Speed;
 384              		.loc 2 90 0
 385 000a 089B     		ldr	r3, [sp, #32]
 386              	.LVL23:
 387 000c 0493     		str	r3, [sp, #16]
  91:Inc/eecs473.h ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 388              		.loc 2 91 0
 389 000e 0348     		ldr	r0, .L25
 390              	.LVL24:
 391 0010 01A9     		add	r1, sp, #4
 392              	.LVL25:
 393 0012 FFF7FEFF 		bl	HAL_GPIO_Init
 394              	.LVL26:
  92:Inc/eecs473.h **** }
 395              		.loc 2 92 0
 396 0016 07B0     		add	sp, sp, #28
 397              	.LCFI10:
 398              		.cfi_def_cfa_offset 4
 399              		@ sp needed
 400 0018 5DF804FB 		ldr	pc, [sp], #4
 401              	.LVL27:
 402              	.L26:
 403              		.align	2
 404              	.L25:
 405 001c 000C0240 		.word	1073875968
 406              		.cfi_endproc
 407              	.LFE129:
 409              		.section	.text.eecs_GPIO_Write,"ax",%progbits
 410              		.align	2
 411              		.global	eecs_GPIO_Write
 412              		.thumb
 413              		.thumb_func
 415              	eecs_GPIO_Write:
 416              	.LFB130:
  93:Inc/eecs473.h **** 
  94:Inc/eecs473.h **** void eecs_GPIO_Write(GPIO_TypeDef *GPIOx,uint16_t Pin, GPIO_PinState PinState) {
 417              		.loc 2 94 0
 418              		.cfi_startproc
 419              		@ args = 0, pretend = 0, frame = 0
 420              		@ frame_needed = 0, uses_anonymous_args = 0
 421              	.LVL28:
 422 0000 08B5     		push	{r3, lr}
 423              	.LCFI11:
 424              		.cfi_def_cfa_offset 8
 425              		.cfi_offset 3, -8
 426              		.cfi_offset 14, -4
  95:Inc/eecs473.h ****   HAL_GPIO_WritePin(GPIOx,Pin,PinState);
 427              		.loc 2 95 0
 428 0002 FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  /tmp/ccw7Bx3r.s 			page 22


 429              	.LVL29:
 430 0006 08BD     		pop	{r3, pc}
 431              		.cfi_endproc
 432              	.LFE130:
 434              		.section	.text.eecs_GPIO_Toggle,"ax",%progbits
 435              		.align	2
 436              		.global	eecs_GPIO_Toggle
 437              		.thumb
 438              		.thumb_func
 440              	eecs_GPIO_Toggle:
 441              	.LFB131:
  96:Inc/eecs473.h **** }
  97:Inc/eecs473.h **** 
  98:Inc/eecs473.h **** void eecs_GPIO_Toggle(GPIO_TypeDef *GPIOx, uint16_t Pin) {
 442              		.loc 2 98 0
 443              		.cfi_startproc
 444              		@ args = 0, pretend = 0, frame = 0
 445              		@ frame_needed = 0, uses_anonymous_args = 0
 446              	.LVL30:
 447 0000 08B5     		push	{r3, lr}
 448              	.LCFI12:
 449              		.cfi_def_cfa_offset 8
 450              		.cfi_offset 3, -8
 451              		.cfi_offset 14, -4
  99:Inc/eecs473.h ****   HAL_GPIO_TogglePin(GPIOx,Pin);
 452              		.loc 2 99 0
 453 0002 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 454              	.LVL31:
 455 0006 08BD     		pop	{r3, pc}
 456              		.cfi_endproc
 457              	.LFE131:
 459              		.section	.text.eecs_UART_Write,"ax",%progbits
 460              		.align	2
 461              		.global	eecs_UART_Write
 462              		.thumb
 463              		.thumb_func
 465              	eecs_UART_Write:
 466              	.LFB133:
 100:Inc/eecs473.h **** }
 101:Inc/eecs473.h **** 
 102:Inc/eecs473.h **** void eecs_UART_Init(void) {
 103:Inc/eecs473.h ****   huart.Instance = UART4;
 104:Inc/eecs473.h ****   huart.Init.BaudRate = 57600;
 105:Inc/eecs473.h ****   huart.Init.WordLength = UART_WORDLENGTH_8B;
 106:Inc/eecs473.h ****   huart.Init.StopBits = UART_STOPBITS_1;
 107:Inc/eecs473.h ****   huart.Init.Parity = UART_PARITY_NONE;
 108:Inc/eecs473.h ****   huart.Init.Mode = UART_MODE_TX_RX;
 109:Inc/eecs473.h ****   huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 110:Inc/eecs473.h ****   huart.Init.OverSampling = UART_OVERSAMPLING_16;
 111:Inc/eecs473.h ****   if (HAL_UART_Init(&huart) != HAL_OK) {
 112:Inc/eecs473.h ****   	eecs_Error_Handler();
 113:Inc/eecs473.h ****   }
 114:Inc/eecs473.h **** }
 115:Inc/eecs473.h **** 
 116:Inc/eecs473.h **** void eecs_UART_Write(uint8_t* arr, uint8_t buffsize) {
 467              		.loc 2 116 0
 468              		.cfi_startproc
ARM GAS  /tmp/ccw7Bx3r.s 			page 23


 469              		@ args = 0, pretend = 0, frame = 0
 470              		@ frame_needed = 0, uses_anonymous_args = 0
 471              	.LVL32:
 472 0000 08B5     		push	{r3, lr}
 473              	.LCFI13:
 474              		.cfi_def_cfa_offset 8
 475              		.cfi_offset 3, -8
 476              		.cfi_offset 14, -4
 477 0002 0346     		mov	r3, r0
 117:Inc/eecs473.h **** 	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart,arr,buffsize,HAL_MAX_DELAY);
 478              		.loc 2 117 0
 479 0004 0A46     		mov	r2, r1
 480 0006 0348     		ldr	r0, .L33
 481              	.LVL33:
 482 0008 1946     		mov	r1, r3
 483              	.LVL34:
 484 000a 4FF0FF33 		mov	r3, #-1
 485              	.LVL35:
 486 000e FFF7FEFF 		bl	HAL_UART_Transmit
 487              	.LVL36:
 488 0012 08BD     		pop	{r3, pc}
 489              	.L34:
 490              		.align	2
 491              	.L33:
 492 0014 00000000 		.word	huart
 493              		.cfi_endproc
 494              	.LFE133:
 496              		.section	.text.eecs_Error_Handler,"ax",%progbits
 497              		.align	2
 498              		.global	eecs_Error_Handler
 499              		.thumb
 500              		.thumb_func
 502              	eecs_Error_Handler:
 503              	.LFB136:
 118:Inc/eecs473.h **** 	if (status != HAL_OK) {
 119:Inc/eecs473.h **** 
 120:Inc/eecs473.h **** 	}
 121:Inc/eecs473.h **** }
 122:Inc/eecs473.h **** 
 123:Inc/eecs473.h **** void eecs_UART_Test(void const *argument) {
 124:Inc/eecs473.h ****   char arr[] = "TESTING UART FUNCTION";
 125:Inc/eecs473.h ****   while (1) {
 126:Inc/eecs473.h ****     HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 127:Inc/eecs473.h ****     //HAL_UART_Transmit(&huart4,ptr,size_,HAL_MAX_DELAY);
 128:Inc/eecs473.h ****     uart_debug(arr, sizeof(arr));
 129:Inc/eecs473.h ****     osDelay(100);
 130:Inc/eecs473.h ****   }
 131:Inc/eecs473.h **** }
 132:Inc/eecs473.h **** 
 133:Inc/eecs473.h **** void eecs_SPI_Init(int spi_bus) {
 134:Inc/eecs473.h ****   SPI_HandleTypeDef* spiptr = (spi_bus==2) ? &hspi2:&hspi3;
 135:Inc/eecs473.h ****   spiptr->Instance = (spi_bus == 2) ? SPI2:SPI3;
 136:Inc/eecs473.h ****   spiptr->Init.Mode = SPI_MODE_MASTER;
 137:Inc/eecs473.h ****   spiptr->Init.Direction = SPI_DIRECTION_2LINES;
 138:Inc/eecs473.h ****   spiptr->Init.DataSize = SPI_DATASIZE_8BIT;
 139:Inc/eecs473.h ****   spiptr->Init.CLKPolarity = SPI_POLARITY_LOW;
 140:Inc/eecs473.h ****   spiptr->Init.CLKPhase = SPI_PHASE_1EDGE;
ARM GAS  /tmp/ccw7Bx3r.s 			page 24


 141:Inc/eecs473.h ****   spiptr->Init.NSS = SPI_NSS_SOFT;
 142:Inc/eecs473.h ****   spiptr->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 143:Inc/eecs473.h ****   spiptr->Init.FirstBit = SPI_FIRSTBIT_MSB;
 144:Inc/eecs473.h ****   spiptr->Init.TIMode = SPI_TIMODE_DISABLE;
 145:Inc/eecs473.h ****   spiptr->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 146:Inc/eecs473.h ****   spiptr->Init.CRCPolynomial = 10;
 147:Inc/eecs473.h **** 
 148:Inc/eecs473.h ****   /*hspi1.Instance = (spi_bus == 2) ? SPI2:SPI3;
 149:Inc/eecs473.h ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 150:Inc/eecs473.h ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 151:Inc/eecs473.h ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 152:Inc/eecs473.h ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 153:Inc/eecs473.h ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 154:Inc/eecs473.h ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 155:Inc/eecs473.h ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 156:Inc/eecs473.h ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 157:Inc/eecs473.h ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 158:Inc/eecs473.h ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 159:Inc/eecs473.h ****   hspi1.Init.CRCPolynomial = 10;*/
 160:Inc/eecs473.h **** 
 161:Inc/eecs473.h ****   if (HAL_SPI_Init(spiptr) != HAL_OK)
 162:Inc/eecs473.h ****   {
 163:Inc/eecs473.h ****     _Error_Handler(__FILE__, __LINE__);
 164:Inc/eecs473.h ****   }
 165:Inc/eecs473.h **** }
 166:Inc/eecs473.h **** 
 167:Inc/eecs473.h **** 
 168:Inc/eecs473.h **** 
 169:Inc/eecs473.h **** 
 170:Inc/eecs473.h **** void eecs_Error_Handler() {
 504              		.loc 2 170 0
 505              		.cfi_startproc
 506              		@ Volatile: function does not return.
 507              		@ args = 0, pretend = 0, frame = 0
 508              		@ frame_needed = 0, uses_anonymous_args = 0
 509 0000 08B5     		push	{r3, lr}
 510              	.LCFI14:
 511              		.cfi_def_cfa_offset 8
 512              		.cfi_offset 3, -8
 513              		.cfi_offset 14, -4
 514              	.L36:
 515              	.LBB8:
 171:Inc/eecs473.h **** 	while (1) {
 172:Inc/eecs473.h **** 		eecs_GPIO_Toggle(GPIOD, pins[15]);
 516              		.loc 2 172 0 discriminator 1
 517 0002 0548     		ldr	r0, .L38
 518 0004 4FF40041 		mov	r1, #32768
 519 0008 FFF7FEFF 		bl	eecs_GPIO_Toggle
 520              	.LVL37:
 173:Inc/eecs473.h **** 		HAL_DELAY(1000);
 521              		.loc 2 173 0 discriminator 1
 522 000c 4FF47A70 		mov	r0, #1000
 523 0010 FFF7FEFF 		bl	HAL_DELAY
 524              	.LVL38:
 525              	.LBE8:
 174:Inc/eecs473.h **** 	}
 526              		.loc 2 174 0 discriminator 1
ARM GAS  /tmp/ccw7Bx3r.s 			page 25


 527 0014 F5E7     		b	.L36
 528              	.L39:
 529 0016 00BF     		.align	2
 530              	.L38:
 531 0018 000C0240 		.word	1073875968
 532              		.cfi_endproc
 533              	.LFE136:
 535              		.section	.text.eecs_UART_Init,"ax",%progbits
 536              		.align	2
 537              		.global	eecs_UART_Init
 538              		.thumb
 539              		.thumb_func
 541              	eecs_UART_Init:
 542              	.LFB132:
 102:Inc/eecs473.h ****   huart.Instance = UART4;
 543              		.loc 2 102 0
 544              		.cfi_startproc
 545              		@ args = 0, pretend = 0, frame = 0
 546              		@ frame_needed = 0, uses_anonymous_args = 0
 547 0000 08B5     		push	{r3, lr}
 548              	.LCFI15:
 549              		.cfi_def_cfa_offset 8
 550              		.cfi_offset 3, -8
 551              		.cfi_offset 14, -4
 103:Inc/eecs473.h ****   huart.Init.BaudRate = 57600;
 552              		.loc 2 103 0
 553 0002 0A48     		ldr	r0, .L43
 554 0004 0A4B     		ldr	r3, .L43+4
 555 0006 0360     		str	r3, [r0]
 104:Inc/eecs473.h ****   huart.Init.WordLength = UART_WORDLENGTH_8B;
 556              		.loc 2 104 0
 557 0008 4FF46143 		mov	r3, #57600
 558 000c 4360     		str	r3, [r0, #4]
 105:Inc/eecs473.h ****   huart.Init.StopBits = UART_STOPBITS_1;
 559              		.loc 2 105 0
 560 000e 0023     		movs	r3, #0
 561 0010 8360     		str	r3, [r0, #8]
 106:Inc/eecs473.h ****   huart.Init.Parity = UART_PARITY_NONE;
 562              		.loc 2 106 0
 563 0012 C360     		str	r3, [r0, #12]
 107:Inc/eecs473.h ****   huart.Init.Mode = UART_MODE_TX_RX;
 564              		.loc 2 107 0
 565 0014 0361     		str	r3, [r0, #16]
 108:Inc/eecs473.h ****   huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 566              		.loc 2 108 0
 567 0016 0C22     		movs	r2, #12
 568 0018 4261     		str	r2, [r0, #20]
 109:Inc/eecs473.h ****   huart.Init.OverSampling = UART_OVERSAMPLING_16;
 569              		.loc 2 109 0
 570 001a 8361     		str	r3, [r0, #24]
 110:Inc/eecs473.h ****   if (HAL_UART_Init(&huart) != HAL_OK) {
 571              		.loc 2 110 0
 572 001c C361     		str	r3, [r0, #28]
 111:Inc/eecs473.h ****   	eecs_Error_Handler();
 573              		.loc 2 111 0
 574 001e FFF7FEFF 		bl	HAL_UART_Init
 575              	.LVL39:
ARM GAS  /tmp/ccw7Bx3r.s 			page 26


 576 0022 08B1     		cbz	r0, .L40
 112:Inc/eecs473.h ****   }
 577              		.loc 2 112 0
 578 0024 FFF7FEFF 		bl	eecs_Error_Handler
 579              	.LVL40:
 580              	.L40:
 581 0028 08BD     		pop	{r3, pc}
 582              	.L44:
 583 002a 00BF     		.align	2
 584              	.L43:
 585 002c 00000000 		.word	huart
 586 0030 004C0040 		.word	1073761280
 587              		.cfi_endproc
 588              	.LFE132:
 590              		.section	.text.writei2c,"ax",%progbits
 591              		.align	2
 592              		.global	writei2c
 593              		.thumb
 594              		.thumb_func
 596              	writei2c:
 597              	.LFB137:
 128:Src/main.c    ****   //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 598              		.loc 1 128 0
 599              		.cfi_startproc
 600              		@ args = 0, pretend = 0, frame = 0
 601              		@ frame_needed = 0, uses_anonymous_args = 0
 602              	.LVL41:
 135:Src/main.c    ****     i2c_tx_buff_accel[i] = addr++;
 603              		.loc 1 135 0
 604 0000 0023     		movs	r3, #0
 133:Src/main.c    ****   int i;
 605              		.loc 1 133 0
 606 0002 3B22     		movs	r2, #59
 135:Src/main.c    ****     i2c_tx_buff_accel[i] = addr++;
 607              		.loc 1 135 0
 608 0004 05E0     		b	.L46
 609              	.LVL42:
 610              	.L47:
 136:Src/main.c    ****     i2c_rx_buff_accel[i] = i;
 611              		.loc 1 136 0 discriminator 3
 612 0006 2549     		ldr	r1, .L54
 613 0008 CA54     		strb	r2, [r1, r3]
 137:Src/main.c    ****   }
 614              		.loc 1 137 0 discriminator 3
 615 000a 2549     		ldr	r1, .L54+4
 616 000c CB54     		strb	r3, [r1, r3]
 135:Src/main.c    ****     i2c_tx_buff_accel[i] = addr++;
 617              		.loc 1 135 0 discriminator 3
 618 000e 0133     		adds	r3, r3, #1
 619              	.LVL43:
 136:Src/main.c    ****     i2c_rx_buff_accel[i] = i;
 620              		.loc 1 136 0 discriminator 3
 621 0010 0132     		adds	r2, r2, #1
 622              	.LVL44:
 623              	.L46:
 135:Src/main.c    ****     i2c_tx_buff_accel[i] = addr++;
 624              		.loc 1 135 0 discriminator 1
ARM GAS  /tmp/ccw7Bx3r.s 			page 27


 625 0012 052B     		cmp	r3, #5
 626 0014 F7DD     		ble	.L47
 128:Src/main.c    ****   //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 627              		.loc 1 128 0
 628 0016 30B5     		push	{r4, r5, lr}
 629              	.LCFI16:
 630              		.cfi_def_cfa_offset 12
 631              		.cfi_offset 4, -12
 632              		.cfi_offset 5, -8
 633              		.cfi_offset 14, -4
 634 0018 83B0     		sub	sp, sp, #12
 635              	.LCFI17:
 636              		.cfi_def_cfa_offset 24
 637              	.LVL45:
 638              	.L52:
 144:Src/main.c    ****     status = HAL_OK;
 639              		.loc 1 144 0
 640 001a 40F6B830 		movw	r0, #3000
 641 001e FFF7FEFF 		bl	osDelay
 642              	.LVL46:
 146:Src/main.c    ****       status = HAL_I2C_Master_Transmit(&hi2c1,I2C_ADDRESS_IMU,i2c_tx_buff_accel+i,sizeof(uint8_t),1
 643              		.loc 1 146 0
 644 0022 0024     		movs	r4, #0
 645 0024 21E0     		b	.L48
 646              	.LVL47:
 647              	.L51:
 147:Src/main.c    **** 
 648              		.loc 1 147 0
 649 0026 2546     		mov	r5, r4
 650 0028 0A23     		movs	r3, #10
 651 002a 0093     		str	r3, [sp]
 652 002c 1D48     		ldr	r0, .L54+8
 653 002e D021     		movs	r1, #208
 654 0030 1A4A     		ldr	r2, .L54
 655 0032 2244     		add	r2, r2, r4
 656 0034 0123     		movs	r3, #1
 657 0036 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 658              	.LVL48:
 149:Src/main.c    ****         HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 659              		.loc 1 149 0
 660 003a 30B1     		cbz	r0, .L49
 150:Src/main.c    ****       }
 661              		.loc 1 150 0
 662 003c 1A48     		ldr	r0, .L54+12
 663              	.LVL49:
 664 003e 4FF40041 		mov	r1, #32768
 665 0042 0122     		movs	r2, #1
 666 0044 FFF7FEFF 		bl	HAL_GPIO_WritePin
 667              	.LVL50:
 668 0048 05E0     		b	.L50
 669              	.LVL51:
 670              	.L49:
 153:Src/main.c    ****       }
 671              		.loc 1 153 0
 672 004a 1748     		ldr	r0, .L54+12
 673              	.LVL52:
 674 004c 4FF40041 		mov	r1, #32768
ARM GAS  /tmp/ccw7Bx3r.s 			page 28


 675 0050 0022     		movs	r2, #0
 676 0052 FFF7FEFF 		bl	HAL_GPIO_WritePin
 677              	.LVL53:
 678              	.L50:
 155:Src/main.c    ****     }
 679              		.loc 1 155 0 discriminator 2
 680 0056 0A23     		movs	r3, #10
 681 0058 0093     		str	r3, [sp]
 682 005a 1248     		ldr	r0, .L54+8
 683 005c D021     		movs	r1, #208
 684 005e 104A     		ldr	r2, .L54+4
 685 0060 2A44     		add	r2, r2, r5
 686 0062 0123     		movs	r3, #1
 687 0064 FFF7FEFF 		bl	HAL_I2C_Master_Receive
 688              	.LVL54:
 146:Src/main.c    ****       status = HAL_I2C_Master_Transmit(&hi2c1,I2C_ADDRESS_IMU,i2c_tx_buff_accel+i,sizeof(uint8_t),1
 689              		.loc 1 146 0 discriminator 2
 690 0068 0134     		adds	r4, r4, #1
 691              	.LVL55:
 692              	.L48:
 146:Src/main.c    ****       status = HAL_I2C_Master_Transmit(&hi2c1,I2C_ADDRESS_IMU,i2c_tx_buff_accel+i,sizeof(uint8_t),1
 693              		.loc 1 146 0 is_stmt 0 discriminator 1
 694 006a 052C     		cmp	r4, #5
 695 006c DBDD     		ble	.L51
 159:Src/main.c    ****     i2c_accel[1] = (i2c_rx_buff_accel[2] << 8) + i2c_rx_buff_accel[3];
 696              		.loc 1 159 0 is_stmt 1
 697 006e 0C4B     		ldr	r3, .L54+4
 698 0070 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 699 0072 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
 700 0074 0D4A     		ldr	r2, .L54+16
 701 0076 01EB0021 		add	r1, r1, r0, lsl #8
 702 007a 1180     		strh	r1, [r2]	@ movhi
 160:Src/main.c    ****     i2c_accel[2] = (i2c_rx_buff_accel[4] << 8) + i2c_rx_buff_accel[5];
 703              		.loc 1 160 0
 704 007c 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 705 007e D978     		ldrb	r1, [r3, #3]	@ zero_extendqisi2
 706 0080 01EB0021 		add	r1, r1, r0, lsl #8
 707 0084 5180     		strh	r1, [r2, #2]	@ movhi
 161:Src/main.c    ****     //uart_debug(i2c_accel,sizeof(i2c_accel));
 708              		.loc 1 161 0
 709 0086 1979     		ldrb	r1, [r3, #4]	@ zero_extendqisi2
 710 0088 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 711 008a 03EB0123 		add	r3, r3, r1, lsl #8
 712 008e 9380     		strh	r3, [r2, #4]	@ movhi
 164:Src/main.c    ****   }
 713              		.loc 1 164 0
 714 0090 0548     		ldr	r0, .L54+12
 715 0092 4FF48051 		mov	r1, #4096
 716 0096 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 717              	.LVL56:
 165:Src/main.c    **** }
 718              		.loc 1 165 0
 719 009a BEE7     		b	.L52
 720              	.L55:
 721              		.align	2
 722              	.L54:
 723 009c 00000000 		.word	i2c_tx_buff_accel
ARM GAS  /tmp/ccw7Bx3r.s 			page 29


 724 00a0 00000000 		.word	i2c_rx_buff_accel
 725 00a4 00000000 		.word	hi2c1
 726 00a8 000C0240 		.word	1073875968
 727 00ac 00000000 		.word	i2c_accel
 728              		.cfi_endproc
 729              	.LFE137:
 731              		.section	.text.uart_debug,"ax",%progbits
 732              		.align	2
 733              		.global	uart_debug
 734              		.thumb
 735              		.thumb_func
 737              	uart_debug:
 738              	.LFB141:
 257:Src/main.c    ****   HAL_StatusTypeDef status = HAL_OK;
 739              		.loc 1 257 0
 740              		.cfi_startproc
 741              		@ args = 0, pretend = 0, frame = 0
 742              		@ frame_needed = 0, uses_anonymous_args = 0
 743              	.LVL57:
 744 0000 08B5     		push	{r3, lr}
 745              	.LCFI18:
 746              		.cfi_def_cfa_offset 8
 747              		.cfi_offset 3, -8
 748              		.cfi_offset 14, -4
 749 0002 0346     		mov	r3, r0
 750              	.LVL58:
 260:Src/main.c    ****   if (status != HAL_OK) {
 751              		.loc 1 260 0
 752 0004 0A46     		mov	r2, r1
 753 0006 0648     		ldr	r0, .L59
 754              	.LVL59:
 755 0008 1946     		mov	r1, r3
 756              	.LVL60:
 757 000a 4FF0FF33 		mov	r3, #-1
 758              	.LVL61:
 759 000e FFF7FEFF 		bl	HAL_UART_Transmit
 760              	.LVL62:
 261:Src/main.c    ****     //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 761              		.loc 1 261 0
 762 0012 20B9     		cbnz	r0, .L56
 265:Src/main.c    ****     //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 763              		.loc 1 265 0
 764 0014 0348     		ldr	r0, .L59+4
 765              	.LVL63:
 766 0016 4FF40041 		mov	r1, #32768
 767 001a FFF7FEFF 		bl	HAL_GPIO_TogglePin
 768              	.LVL64:
 769              	.L56:
 770 001e 08BD     		pop	{r3, pc}
 771              	.L60:
 772              		.align	2
 773              	.L59:
 774 0020 00000000 		.word	huart4
 775 0024 000C0240 		.word	1073875968
 776              		.cfi_endproc
 777              	.LFE141:
 779              		.section	.text.eecs_UART_Test,"ax",%progbits
ARM GAS  /tmp/ccw7Bx3r.s 			page 30


 780              		.align	2
 781              		.global	eecs_UART_Test
 782              		.thumb
 783              		.thumb_func
 785              	eecs_UART_Test:
 786              	.LFB134:
 123:Inc/eecs473.h ****   char arr[] = "TESTING UART FUNCTION";
 787              		.loc 2 123 0
 788              		.cfi_startproc
 789              		@ args = 0, pretend = 0, frame = 24
 790              		@ frame_needed = 0, uses_anonymous_args = 0
 791              	.LVL65:
 792 0000 30B5     		push	{r4, r5, lr}
 793              	.LCFI19:
 794              		.cfi_def_cfa_offset 12
 795              		.cfi_offset 4, -12
 796              		.cfi_offset 5, -8
 797              		.cfi_offset 14, -4
 798 0002 87B0     		sub	sp, sp, #28
 799              	.LCFI20:
 800              		.cfi_def_cfa_offset 40
 124:Inc/eecs473.h ****   while (1) {
 801              		.loc 2 124 0
 802 0004 6C46     		mov	r4, sp
 803 0006 0A4D     		ldr	r5, .L64
 804 0008 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 805              	.LVL66:
 806 000a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 807 000c 95E80300 		ldmia	r5, {r0, r1}
 808 0010 44F8040B 		str	r0, [r4], #4
 809 0014 2180     		strh	r1, [r4]	@ movhi
 810              	.L62:
 811              	.LBB9:
 126:Inc/eecs473.h ****     //HAL_UART_Transmit(&huart4,ptr,size_,HAL_MAX_DELAY);
 812              		.loc 2 126 0 discriminator 1
 813 0016 0748     		ldr	r0, .L64+4
 814 0018 4FF48051 		mov	r1, #4096
 815 001c FFF7FEFF 		bl	HAL_GPIO_TogglePin
 816              	.LVL67:
 128:Inc/eecs473.h ****     osDelay(100);
 817              		.loc 2 128 0 discriminator 1
 818 0020 6846     		mov	r0, sp
 819 0022 1621     		movs	r1, #22
 820 0024 FFF7FEFF 		bl	uart_debug
 821              	.LVL68:
 129:Inc/eecs473.h ****   }
 822              		.loc 2 129 0 discriminator 1
 823 0028 6420     		movs	r0, #100
 824 002a FFF7FEFF 		bl	osDelay
 825              	.LVL69:
 826              	.LBE9:
 130:Inc/eecs473.h **** }
 827              		.loc 2 130 0 discriminator 1
 828 002e F2E7     		b	.L62
 829              	.L65:
 830              		.align	2
 831              	.L64:
ARM GAS  /tmp/ccw7Bx3r.s 			page 31


 832 0030 00000000 		.word	.LC8
 833 0034 000C0240 		.word	1073875968
 834              		.cfi_endproc
 835              	.LFE134:
 837              		.section	.text.uartTest,"ax",%progbits
 838              		.align	2
 839              		.global	uartTest
 840              		.thumb
 841              		.thumb_func
 843              	uartTest:
 844              	.LFB138:
 168:Src/main.c    ****   int i = 0;
 845              		.loc 1 168 0
 846              		.cfi_startproc
 847              		@ args = 0, pretend = 0, frame = 0
 848              		@ frame_needed = 0, uses_anonymous_args = 0
 849              	.LVL70:
 850 0000 08B5     		push	{r3, lr}
 851              	.LCFI21:
 852              		.cfi_def_cfa_offset 8
 853              		.cfi_offset 3, -8
 854              		.cfi_offset 14, -4
 855              	.LVL71:
 170:Src/main.c    ****     arr[i] = i;
 856              		.loc 1 170 0
 857 0002 0023     		movs	r3, #0
 858 0004 02E0     		b	.L67
 859              	.LVL72:
 860              	.L68:
 171:Src/main.c    ****   }
 861              		.loc 1 171 0 discriminator 3
 862 0006 094A     		ldr	r2, .L71
 863 0008 D354     		strb	r3, [r2, r3]
 170:Src/main.c    ****     arr[i] = i;
 864              		.loc 1 170 0 discriminator 3
 865 000a 0133     		adds	r3, r3, #1
 866              	.LVL73:
 867              	.L67:
 170:Src/main.c    ****     arr[i] = i;
 868              		.loc 1 170 0 is_stmt 0 discriminator 1
 869 000c 082B     		cmp	r3, #8
 870 000e FADD     		ble	.L68
 871              	.LVL74:
 872              	.L69:
 174:Src/main.c    ****     //HAL_UART_Transmit(&huart4,ptr,size_,HAL_MAX_DELAY);
 873              		.loc 1 174 0 is_stmt 1 discriminator 1
 874 0010 0748     		ldr	r0, .L71+4
 875 0012 4FF48051 		mov	r1, #4096
 876 0016 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 877              	.LVL75:
 176:Src/main.c    ****     osDelay(100);
 878              		.loc 1 176 0 discriminator 1
 879 001a 0448     		ldr	r0, .L71
 880 001c 0921     		movs	r1, #9
 881 001e FFF7FEFF 		bl	uart_debug
 882              	.LVL76:
 177:Src/main.c    ****   }
ARM GAS  /tmp/ccw7Bx3r.s 			page 32


 883              		.loc 1 177 0 discriminator 1
 884 0022 6420     		movs	r0, #100
 885 0024 FFF7FEFF 		bl	osDelay
 886              	.LVL77:
 178:Src/main.c    **** }
 887              		.loc 1 178 0 discriminator 1
 888 0028 F2E7     		b	.L69
 889              	.L72:
 890 002a 00BF     		.align	2
 891              	.L71:
 892 002c 00000000 		.word	arr
 893 0030 000C0240 		.word	1073875968
 894              		.cfi_endproc
 895              	.LFE138:
 897              		.section	.text.spiTest,"ax",%progbits
 898              		.align	2
 899              		.global	spiTest
 900              		.thumb
 901              		.thumb_func
 903              	spiTest:
 904              	.LFB139:
 181:Src/main.c    ****   HAL_StatusTypeDef status;
 905              		.loc 1 181 0
 906              		.cfi_startproc
 907              		@ args = 0, pretend = 0, frame = 0
 908              		@ frame_needed = 0, uses_anonymous_args = 0
 909              	.LVL78:
 910 0000 10B5     		push	{r4, lr}
 911              	.LCFI22:
 912              		.cfi_def_cfa_offset 8
 913              		.cfi_offset 4, -8
 914              		.cfi_offset 14, -4
 915 0002 82B0     		sub	sp, sp, #8
 916              	.LCFI23:
 917              		.cfi_def_cfa_offset 16
 183:Src/main.c    ****   while (1) {
 918              		.loc 1 183 0
 919 0004 1F48     		ldr	r0, .L78
 920              	.LVL79:
 921 0006 1021     		movs	r1, #16
 922 0008 0122     		movs	r2, #1
 923 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
 924              	.LVL80:
 925              	.L76:
 185:Src/main.c    ****     status = HAL_OK;
 926              		.loc 1 185 0
 927 000e 4FF47A70 		mov	r0, #1000
 928 0012 FFF7FEFF 		bl	osDelay
 929              	.LVL81:
 187:Src/main.c    ****     HAL_Delay(1);
 930              		.loc 1 187 0
 931 0016 1B48     		ldr	r0, .L78
 932 0018 1021     		movs	r1, #16
 933 001a 0022     		movs	r2, #0
 934 001c FFF7FEFF 		bl	HAL_GPIO_WritePin
 935              	.LVL82:
 188:Src/main.c    ****     //status = HAL_SPI_Transmit(&hspi1, spi_address,1,HAL_MAX_DELAY);
ARM GAS  /tmp/ccw7Bx3r.s 			page 33


 936              		.loc 1 188 0
 937 0020 0120     		movs	r0, #1
 938 0022 FFF7FEFF 		bl	HAL_Delay
 939              	.LVL83:
 193:Src/main.c    ****     //HAL_Delay(1);
 940              		.loc 1 193 0
 941 0026 4FF0FF33 		mov	r3, #-1
 942 002a 0093     		str	r3, [sp]
 943 002c 1648     		ldr	r0, .L78+4
 944 002e 1749     		ldr	r1, .L78+8
 945 0030 174A     		ldr	r2, .L78+12
 946 0032 0123     		movs	r3, #1
 947 0034 FFF7FEFF 		bl	HAL_SPI_TransmitReceive
 948              	.LVL84:
 195:Src/main.c    ****       HAL_GPIO_WritePin(GPIOD, GREEN_LED, GPIO_PIN_SET);
 949              		.loc 1 195 0
 950 0038 30B1     		cbz	r0, .L74
 196:Src/main.c    ****     }
 951              		.loc 1 196 0
 952 003a 1648     		ldr	r0, .L78+16
 953              	.LVL85:
 954 003c 4FF48051 		mov	r1, #4096
 955 0040 0122     		movs	r2, #1
 956 0042 FFF7FEFF 		bl	HAL_GPIO_WritePin
 957              	.LVL86:
 958 0046 05E0     		b	.L75
 959              	.LVL87:
 960              	.L74:
 199:Src/main.c    ****     }
 961              		.loc 1 199 0
 962 0048 1248     		ldr	r0, .L78+16
 963              	.LVL88:
 964 004a 4FF48051 		mov	r1, #4096
 965 004e 0022     		movs	r2, #0
 966 0050 FFF7FEFF 		bl	HAL_GPIO_WritePin
 967              	.LVL89:
 968              	.L75:
 202:Src/main.c    ****     HAL_Delay(1);
 969              		.loc 1 202 0
 970 0054 104C     		ldr	r4, .L78+20
 971 0056 4FF0FF33 		mov	r3, #-1
 972 005a 0093     		str	r3, [sp]
 973 005c 0A48     		ldr	r0, .L78+4
 974 005e 0F49     		ldr	r1, .L78+24
 975 0060 2246     		mov	r2, r4
 976 0062 0123     		movs	r3, #1
 977 0064 FFF7FEFF 		bl	HAL_SPI_TransmitReceive
 978              	.LVL90:
 203:Src/main.c    ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 979              		.loc 1 203 0
 980 0068 0120     		movs	r0, #1
 981 006a FFF7FEFF 		bl	HAL_Delay
 982              	.LVL91:
 204:Src/main.c    ****     //spi_rx_buff[0] = 'A';
 983              		.loc 1 204 0
 984 006e 0548     		ldr	r0, .L78
 985 0070 1021     		movs	r1, #16
ARM GAS  /tmp/ccw7Bx3r.s 			page 34


 986 0072 0122     		movs	r2, #1
 987 0074 FFF7FEFF 		bl	HAL_GPIO_WritePin
 988              	.LVL92:
 207:Src/main.c    ****   }
 989              		.loc 1 207 0
 990 0078 601E     		subs	r0, r4, #1
 991 007a 0221     		movs	r1, #2
 992 007c FFF7FEFF 		bl	uart_debug
 993              	.LVL93:
 208:Src/main.c    **** }
 994              		.loc 1 208 0
 995 0080 C5E7     		b	.L76
 996              	.L79:
 997 0082 00BF     		.align	2
 998              	.L78:
 999 0084 00000240 		.word	1073872896
 1000 0088 00000000 		.word	hspi1
 1001 008c 00000000 		.word	.LANCHOR1
 1002 0090 00000000 		.word	max_rx_buff
 1003 0094 000C0240 		.word	1073875968
 1004 0098 01000000 		.word	max_rx_buff+1
 1005 009c 01000000 		.word	.LANCHOR1+1
 1006              		.cfi_endproc
 1007              	.LFE139:
 1009              		.section	.text.Leds,"ax",%progbits
 1010              		.align	2
 1011              		.global	Leds
 1012              		.thumb
 1013              		.thumb_func
 1015              	Leds:
 1016              	.LFB142:
 270:Src/main.c    **** 
 1017              		.loc 1 270 0
 1018              		.cfi_startproc
 1019              		@ args = 0, pretend = 0, frame = 8
 1020              		@ frame_needed = 0, uses_anonymous_args = 0
 1021              	.LVL94:
 1022 0000 10B5     		push	{r4, lr}
 1023              	.LCFI24:
 1024              		.cfi_def_cfa_offset 8
 1025              		.cfi_offset 4, -8
 1026              		.cfi_offset 14, -4
 1027 0002 82B0     		sub	sp, sp, #8
 1028              	.LCFI25:
 1029              		.cfi_def_cfa_offset 16
 1030              	.LVL95:
 1031              	.L81:
 291:Src/main.c    ****     osDelay(100);
 1032              		.loc 1 291 0 discriminator 1
 1033 0004 274C     		ldr	r4, .L83
 1034 0006 2046     		mov	r0, r4
 1035 0008 4FF40041 		mov	r1, #32768
 1036 000c 0122     		movs	r2, #1
 1037 000e FFF7FEFF 		bl	HAL_GPIO_WritePin
 1038              	.LVL96:
 292:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 1039              		.loc 1 292 0 discriminator 1
ARM GAS  /tmp/ccw7Bx3r.s 			page 35


 1040 0012 6420     		movs	r0, #100
 1041 0014 FFF7FEFF 		bl	osDelay
 1042              	.LVL97:
 293:Src/main.c    ****     osDelay(100);
 1043              		.loc 1 293 0 discriminator 1
 1044 0018 2046     		mov	r0, r4
 1045 001a 4FF40041 		mov	r1, #32768
 1046 001e 0022     		movs	r2, #0
 1047 0020 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1048              	.LVL98:
 294:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 1049              		.loc 1 294 0 discriminator 1
 1050 0024 6420     		movs	r0, #100
 1051 0026 FFF7FEFF 		bl	osDelay
 1052              	.LVL99:
 295:Src/main.c    ****     osDelay(100);
 1053              		.loc 1 295 0 discriminator 1
 1054 002a 2046     		mov	r0, r4
 1055 002c 4FF48051 		mov	r1, #4096
 1056 0030 0122     		movs	r2, #1
 1057 0032 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1058              	.LVL100:
 296:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 1059              		.loc 1 296 0 discriminator 1
 1060 0036 6420     		movs	r0, #100
 1061 0038 FFF7FEFF 		bl	osDelay
 1062              	.LVL101:
 297:Src/main.c    ****     osDelay(100);
 1063              		.loc 1 297 0 discriminator 1
 1064 003c 2046     		mov	r0, r4
 1065 003e 4FF48051 		mov	r1, #4096
 1066 0042 0022     		movs	r2, #0
 1067 0044 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1068              	.LVL102:
 298:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 1069              		.loc 1 298 0 discriminator 1
 1070 0048 6420     		movs	r0, #100
 1071 004a FFF7FEFF 		bl	osDelay
 1072              	.LVL103:
 299:Src/main.c    ****     osDelay(100);
 1073              		.loc 1 299 0 discriminator 1
 1074 004e 2046     		mov	r0, r4
 1075 0050 4FF40051 		mov	r1, #8192
 1076 0054 0122     		movs	r2, #1
 1077 0056 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1078              	.LVL104:
 300:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 1079              		.loc 1 300 0 discriminator 1
 1080 005a 6420     		movs	r0, #100
 1081 005c FFF7FEFF 		bl	osDelay
 1082              	.LVL105:
 301:Src/main.c    ****     osDelay(100);
 1083              		.loc 1 301 0 discriminator 1
 1084 0060 2046     		mov	r0, r4
 1085 0062 4FF40051 		mov	r1, #8192
 1086 0066 0022     		movs	r2, #0
 1087 0068 FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  /tmp/ccw7Bx3r.s 			page 36


 1088              	.LVL106:
 302:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 1089              		.loc 1 302 0 discriminator 1
 1090 006c 6420     		movs	r0, #100
 1091 006e FFF7FEFF 		bl	osDelay
 1092              	.LVL107:
 303:Src/main.c    ****     osDelay(100);
 1093              		.loc 1 303 0 discriminator 1
 1094 0072 2046     		mov	r0, r4
 1095 0074 4FF48041 		mov	r1, #16384
 1096 0078 0122     		movs	r2, #1
 1097 007a FFF7FEFF 		bl	HAL_GPIO_WritePin
 1098              	.LVL108:
 304:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 1099              		.loc 1 304 0 discriminator 1
 1100 007e 6420     		movs	r0, #100
 1101 0080 FFF7FEFF 		bl	osDelay
 1102              	.LVL109:
 305:Src/main.c    **** 
 1103              		.loc 1 305 0 discriminator 1
 1104 0084 2046     		mov	r0, r4
 1105 0086 4FF48041 		mov	r1, #16384
 1106 008a 0022     		movs	r2, #0
 1107 008c FFF7FEFF 		bl	HAL_GPIO_WritePin
 1108              	.LVL110:
 307:Src/main.c    ****     osDelayUntil(&prevWakeTime, 50);
 1109              		.loc 1 307 0 discriminator 1
 1110 0090 FFF7FEFF 		bl	osKernelSysTick
 1111              	.LVL111:
 1112 0094 02AB     		add	r3, sp, #8
 1113 0096 43F8040D 		str	r0, [r3, #-4]!
 308:Src/main.c    ****   }
 1114              		.loc 1 308 0 discriminator 1
 1115 009a 1846     		mov	r0, r3
 1116 009c 3221     		movs	r1, #50
 1117 009e FFF7FEFF 		bl	osDelayUntil
 1118              	.LVL112:
 309:Src/main.c    **** }
 1119              		.loc 1 309 0 discriminator 1
 1120 00a2 AFE7     		b	.L81
 1121              	.L84:
 1122              		.align	2
 1123              	.L83:
 1124 00a4 000C0240 		.word	1073875968
 1125              		.cfi_endproc
 1126              	.LFE142:
 1128              		.section	.text.ConfigureADC,"ax",%progbits
 1129              		.align	2
 1130              		.global	ConfigureADC
 1131              		.thumb
 1132              		.thumb_func
 1134              	ConfigureADC:
 1135              	.LFB143:
 311:Src/main.c    ****     GPIO_InitTypeDef gpioInit;
 1136              		.loc 1 311 0
 1137              		.cfi_startproc
 1138              		@ args = 0, pretend = 0, frame = 48
ARM GAS  /tmp/ccw7Bx3r.s 			page 37


 1139              		@ frame_needed = 0, uses_anonymous_args = 0
 1140 0000 70B5     		push	{r4, r5, r6, lr}
 1141              	.LCFI26:
 1142              		.cfi_def_cfa_offset 16
 1143              		.cfi_offset 4, -16
 1144              		.cfi_offset 5, -12
 1145              		.cfi_offset 6, -8
 1146              		.cfi_offset 14, -4
 1147 0002 8CB0     		sub	sp, sp, #48
 1148              	.LCFI27:
 1149              		.cfi_def_cfa_offset 64
 1150              	.LBB10:
 314:Src/main.c    ****     __ADC1_CLK_ENABLE();
 1151              		.loc 1 314 0
 1152 0004 0025     		movs	r5, #0
 1153 0006 0195     		str	r5, [sp, #4]
 1154 0008 264B     		ldr	r3, .L89
 1155 000a 1A6B     		ldr	r2, [r3, #48]
 1156 000c 42F00402 		orr	r2, r2, #4
 1157 0010 1A63     		str	r2, [r3, #48]
 1158 0012 1A6B     		ldr	r2, [r3, #48]
 1159 0014 02F00402 		and	r2, r2, #4
 1160 0018 0192     		str	r2, [sp, #4]
 1161 001a 019A     		ldr	r2, [sp, #4]
 1162              	.LBE10:
 1163              	.LBB11:
 315:Src/main.c    ****  
 1164              		.loc 1 315 0
 1165 001c 0295     		str	r5, [sp, #8]
 1166 001e 5A6C     		ldr	r2, [r3, #68]
 1167 0020 42F48072 		orr	r2, r2, #256
 1168 0024 5A64     		str	r2, [r3, #68]
 1169 0026 5B6C     		ldr	r3, [r3, #68]
 1170 0028 03F48073 		and	r3, r3, #256
 1171 002c 0293     		str	r3, [sp, #8]
 1172 002e 029B     		ldr	r3, [sp, #8]
 1173              	.LBE11:
 317:Src/main.c    ****     gpioInit.Mode = GPIO_MODE_ANALOG;
 1174              		.loc 1 317 0
 1175 0030 0223     		movs	r3, #2
 1176 0032 0793     		str	r3, [sp, #28]
 318:Src/main.c    ****     gpioInit.Pull = GPIO_NOPULL;
 1177              		.loc 1 318 0
 1178 0034 0323     		movs	r3, #3
 1179 0036 0893     		str	r3, [sp, #32]
 319:Src/main.c    ****     HAL_GPIO_Init(GPIOC, &gpioInit);
 1180              		.loc 1 319 0
 1181 0038 0995     		str	r5, [sp, #36]
 320:Src/main.c    ****  
 1182              		.loc 1 320 0
 1183 003a 1B48     		ldr	r0, .L89+4
 1184 003c 07A9     		add	r1, sp, #28
 1185 003e FFF7FEFF 		bl	HAL_GPIO_Init
 1186              	.LVL113:
 322:Src/main.c    ****     HAL_NVIC_EnableIRQ(ADC_IRQn);
 1187              		.loc 1 322 0
 1188 0042 1220     		movs	r0, #18
ARM GAS  /tmp/ccw7Bx3r.s 			page 38


 1189 0044 2946     		mov	r1, r5
 1190 0046 2A46     		mov	r2, r5
 1191 0048 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 1192              	.LVL114:
 323:Src/main.c    ****  
 1193              		.loc 1 323 0
 1194 004c 1220     		movs	r0, #18
 1195 004e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 1196              	.LVL115:
 327:Src/main.c    ****  
 1197              		.loc 1 327 0
 1198 0052 164C     		ldr	r4, .L89+8
 1199 0054 164B     		ldr	r3, .L89+12
 1200 0056 2360     		str	r3, [r4]
 329:Src/main.c    ****     g_AdcHandle.Init.Resolution = ADC_RESOLUTION_12B;
 1201              		.loc 1 329 0
 1202 0058 6560     		str	r5, [r4, #4]
 330:Src/main.c    ****     g_AdcHandle.Init.ScanConvMode = DISABLE;
 1203              		.loc 1 330 0
 1204 005a A560     		str	r5, [r4, #8]
 331:Src/main.c    ****     g_AdcHandle.Init.ContinuousConvMode = ENABLE;
 1205              		.loc 1 331 0
 1206 005c 2561     		str	r5, [r4, #16]
 332:Src/main.c    ****     g_AdcHandle.Init.DiscontinuousConvMode = DISABLE;
 1207              		.loc 1 332 0
 1208 005e 0126     		movs	r6, #1
 1209 0060 A661     		str	r6, [r4, #24]
 333:Src/main.c    ****     g_AdcHandle.Init.NbrOfDiscConversion = 0;
 1210              		.loc 1 333 0
 1211 0062 2562     		str	r5, [r4, #32]
 334:Src/main.c    ****     g_AdcHandle.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 1212              		.loc 1 334 0
 1213 0064 6562     		str	r5, [r4, #36]
 335:Src/main.c    ****     g_AdcHandle.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 1214              		.loc 1 335 0
 1215 0066 E562     		str	r5, [r4, #44]
 336:Src/main.c    ****     g_AdcHandle.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1216              		.loc 1 336 0
 1217 0068 A562     		str	r5, [r4, #40]
 337:Src/main.c    ****     g_AdcHandle.Init.NbrOfConversion = 1;
 1218              		.loc 1 337 0
 1219 006a E560     		str	r5, [r4, #12]
 338:Src/main.c    ****     g_AdcHandle.Init.DMAContinuousRequests = ENABLE;
 1220              		.loc 1 338 0
 1221 006c E661     		str	r6, [r4, #28]
 339:Src/main.c    ****     g_AdcHandle.Init.EOCSelection = DISABLE;
 1222              		.loc 1 339 0
 1223 006e 2663     		str	r6, [r4, #48]
 340:Src/main.c    ****  
 1224              		.loc 1 340 0
 1225 0070 6561     		str	r5, [r4, #20]
 342:Src/main.c    ****  
 1226              		.loc 1 342 0
 1227 0072 2046     		mov	r0, r4
 1228 0074 FFF7FEFF 		bl	HAL_ADC_Init
 1229              	.LVL116:
 344:Src/main.c    ****     adcChannel.Rank = 1;
ARM GAS  /tmp/ccw7Bx3r.s 			page 39


 1230              		.loc 1 344 0
 1231 0078 0B23     		movs	r3, #11
 1232 007a 0393     		str	r3, [sp, #12]
 345:Src/main.c    ****     adcChannel.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 1233              		.loc 1 345 0
 1234 007c 0496     		str	r6, [sp, #16]
 346:Src/main.c    ****     adcChannel.Offset = 0;
 1235              		.loc 1 346 0
 1236 007e 0723     		movs	r3, #7
 1237 0080 0593     		str	r3, [sp, #20]
 347:Src/main.c    ****  
 1238              		.loc 1 347 0
 1239 0082 0695     		str	r5, [sp, #24]
 349:Src/main.c    ****     {
 1240              		.loc 1 349 0
 1241 0084 2046     		mov	r0, r4
 1242 0086 03A9     		add	r1, sp, #12
 1243 0088 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1244              	.LVL117:
 1245 008c 40B1     		cbz	r0, .L85
 1246              	.L87:
 352:Src/main.c    ****           HAL_Delay(100);
 1247              		.loc 1 352 0 discriminator 1
 1248 008e 0948     		ldr	r0, .L89+16
 1249 0090 4FF40041 		mov	r1, #32768
 1250 0094 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1251              	.LVL118:
 353:Src/main.c    ****         }
 1252              		.loc 1 353 0 discriminator 1
 1253 0098 6420     		movs	r0, #100
 1254 009a FFF7FEFF 		bl	HAL_Delay
 1255              	.LVL119:
 354:Src/main.c    ****     }
 1256              		.loc 1 354 0 discriminator 1
 1257 009e F6E7     		b	.L87
 1258              	.L85:
 356:Src/main.c    **** 
 1259              		.loc 1 356 0
 1260 00a0 0CB0     		add	sp, sp, #48
 1261              	.LCFI28:
 1262              		.cfi_def_cfa_offset 16
 1263              		@ sp needed
 1264 00a2 70BD     		pop	{r4, r5, r6, pc}
 1265              	.L90:
 1266              		.align	2
 1267              	.L89:
 1268 00a4 00380240 		.word	1073887232
 1269 00a8 00080240 		.word	1073874944
 1270 00ac 00000000 		.word	g_AdcHandle
 1271 00b0 00200140 		.word	1073815552
 1272 00b4 000C0240 		.word	1073875968
 1273              		.cfi_endproc
 1274              	.LFE143:
 1276              		.section	.text.adcTest,"ax",%progbits
 1277              		.align	2
 1278              		.global	adcTest
 1279              		.thumb
ARM GAS  /tmp/ccw7Bx3r.s 			page 40


 1280              		.thumb_func
 1282              	adcTest:
 1283              	.LFB144:
 358:Src/main.c    ****   ConfigureADC();
 1284              		.loc 1 358 0
 1285              		.cfi_startproc
 1286              		@ args = 0, pretend = 0, frame = 0
 1287              		@ frame_needed = 0, uses_anonymous_args = 0
 1288              	.LVL120:
 1289 0000 08B5     		push	{r3, lr}
 1290              	.LCFI29:
 1291              		.cfi_def_cfa_offset 8
 1292              		.cfi_offset 3, -8
 1293              		.cfi_offset 14, -4
 359:Src/main.c    ****   HAL_ADC_Start(&g_AdcHandle);
 1294              		.loc 1 359 0
 1295 0002 FFF7FEFF 		bl	ConfigureADC
 1296              	.LVL121:
 360:Src/main.c    ****   int g_MeasurementNumber;
 1297              		.loc 1 360 0
 1298 0006 0948     		ldr	r0, .L95
 1299 0008 FFF7FEFF 		bl	HAL_ADC_Start
 1300              	.LVL122:
 1301              	.L92:
 363:Src/main.c    ****     if (HAL_ADC_PollForConversion(&g_AdcHandle,1000000) == HAL_OK) {
 1302              		.loc 1 363 0
 1303 000c 6420     		movs	r0, #100
 1304 000e FFF7FEFF 		bl	osDelay
 1305              	.LVL123:
 364:Src/main.c    ****       g_ADCValue = HAL_ADC_GetValue(&g_AdcHandle);
 1306              		.loc 1 364 0
 1307 0012 0648     		ldr	r0, .L95
 1308 0014 0649     		ldr	r1, .L95+4
 1309 0016 FFF7FEFF 		bl	HAL_ADC_PollForConversion
 1310              	.LVL124:
 1311 001a 0028     		cmp	r0, #0
 1312 001c F6D1     		bne	.L92
 365:Src/main.c    ****       g_MeasurementNumber++;
 1313              		.loc 1 365 0
 1314 001e 0348     		ldr	r0, .L95
 1315 0020 FFF7FEFF 		bl	HAL_ADC_GetValue
 1316              	.LVL125:
 1317 0024 034B     		ldr	r3, .L95+8
 1318 0026 1860     		str	r0, [r3]
 1319 0028 F0E7     		b	.L92
 1320              	.L96:
 1321 002a 00BF     		.align	2
 1322              	.L95:
 1323 002c 00000000 		.word	g_AdcHandle
 1324 0030 40420F00 		.word	1000000
 1325 0034 00000000 		.word	g_ADCValue
 1326              		.cfi_endproc
 1327              	.LFE144:
 1329              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 1330              		.align	2
 1331              		.global	HAL_TIM_PeriodElapsedCallback
 1332              		.thumb
ARM GAS  /tmp/ccw7Bx3r.s 			page 41


 1333              		.thumb_func
 1335              	HAL_TIM_PeriodElapsedCallback:
 1336              	.LFB153:
 670:Src/main.c    ****   /* USER CODE END 5 */ 
 671:Src/main.c    **** }
 672:Src/main.c    **** 
 673:Src/main.c    **** /**
 674:Src/main.c    ****   * @brief  Period elapsed callback in non blocking mode
 675:Src/main.c    ****   * @note   This function is called  when TIM1 interrupt took place, inside
 676:Src/main.c    ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 677:Src/main.c    ****   * a global variable "uwTick" used as application time base.
 678:Src/main.c    ****   * @param  htim : TIM handle
 679:Src/main.c    ****   * @retval None
 680:Src/main.c    ****   */
 681:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 682:Src/main.c    **** {
 1337              		.loc 1 682 0
 1338              		.cfi_startproc
 1339              		@ args = 0, pretend = 0, frame = 0
 1340              		@ frame_needed = 0, uses_anonymous_args = 0
 1341              	.LVL126:
 1342 0000 08B5     		push	{r3, lr}
 1343              	.LCFI30:
 1344              		.cfi_def_cfa_offset 8
 1345              		.cfi_offset 3, -8
 1346              		.cfi_offset 14, -4
 683:Src/main.c    ****   /* USER CODE BEGIN Callback 0 */
 684:Src/main.c    **** 
 685:Src/main.c    ****   /* USER CODE END Callback 0 */
 686:Src/main.c    ****   if (htim->Instance == TIM1) {
 1347              		.loc 1 686 0
 1348 0002 0268     		ldr	r2, [r0]
 1349 0004 024B     		ldr	r3, .L100
 1350 0006 9A42     		cmp	r2, r3
 1351 0008 01D1     		bne	.L97
 687:Src/main.c    ****     HAL_IncTick();
 1352              		.loc 1 687 0
 1353 000a FFF7FEFF 		bl	HAL_IncTick
 1354              	.LVL127:
 1355              	.L97:
 1356 000e 08BD     		pop	{r3, pc}
 1357              	.L101:
 1358              		.align	2
 1359              	.L100:
 1360 0010 00000140 		.word	1073807360
 1361              		.cfi_endproc
 1362              	.LFE153:
 1364              		.section	.text._Error_Handler,"ax",%progbits
 1365              		.align	2
 1366              		.global	_Error_Handler
 1367              		.thumb
 1368              		.thumb_func
 1370              	_Error_Handler:
 1371              	.LFB154:
 688:Src/main.c    ****   }
 689:Src/main.c    ****   /* USER CODE BEGIN Callback 1 */
 690:Src/main.c    **** 
ARM GAS  /tmp/ccw7Bx3r.s 			page 42


 691:Src/main.c    ****   /* USER CODE END Callback 1 */
 692:Src/main.c    **** }
 693:Src/main.c    **** 
 694:Src/main.c    **** /**
 695:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 696:Src/main.c    ****   * @param  file: The file name as string.
 697:Src/main.c    ****   * @param  line: The line in file as a number.
 698:Src/main.c    ****   * @retval None
 699:Src/main.c    ****   */
 700:Src/main.c    **** void _Error_Handler(char *file, int line)
 701:Src/main.c    **** {
 1372              		.loc 1 701 0
 1373              		.cfi_startproc
 1374              		@ Volatile: function does not return.
 1375              		@ args = 0, pretend = 0, frame = 0
 1376              		@ frame_needed = 0, uses_anonymous_args = 0
 1377              	.LVL128:
 1378 0000 08B5     		push	{r3, lr}
 1379              	.LCFI31:
 1380              		.cfi_def_cfa_offset 8
 1381              		.cfi_offset 3, -8
 1382              		.cfi_offset 14, -4
 1383              	.LVL129:
 1384              	.L103:
 702:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 703:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 704:Src/main.c    ****   volatile int i;
 705:Src/main.c    ****   while(1)
 706:Src/main.c    ****   {
 707:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, BLUE_LED, GPIO_PIN_SET);
 1385              		.loc 1 707 0 discriminator 1
 1386 0002 0348     		ldr	r0, .L105
 1387 0004 4FF40041 		mov	r1, #32768
 1388 0008 0122     		movs	r2, #1
 1389 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
 1390              	.LVL130:
 708:Src/main.c    ****   }
 1391              		.loc 1 708 0 discriminator 1
 1392 000e F8E7     		b	.L103
 1393              	.L106:
 1394              		.align	2
 1395              	.L105:
 1396 0010 000C0240 		.word	1073875968
 1397              		.cfi_endproc
 1398              	.LFE154:
 1400              		.section	.text.eecs_SPI_Init,"ax",%progbits
 1401              		.align	2
 1402              		.global	eecs_SPI_Init
 1403              		.thumb
 1404              		.thumb_func
 1406              	eecs_SPI_Init:
 1407              	.LFB135:
 133:Inc/eecs473.h ****   SPI_HandleTypeDef* spiptr = (spi_bus==2) ? &hspi2:&hspi3;
 1408              		.loc 2 133 0
 1409              		.cfi_startproc
 1410              		@ args = 0, pretend = 0, frame = 0
 1411              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccw7Bx3r.s 			page 43


 1412              	.LVL131:
 1413 0000 08B5     		push	{r3, lr}
 1414              	.LCFI32:
 1415              		.cfi_def_cfa_offset 8
 1416              		.cfi_offset 3, -8
 1417              		.cfi_offset 14, -4
 134:Inc/eecs473.h ****   spiptr->Instance = (spi_bus == 2) ? SPI2:SPI3;
 1418              		.loc 2 134 0
 1419 0002 0228     		cmp	r0, #2
 1420 0004 01D1     		bne	.L111
 1421 0006 114B     		ldr	r3, .L114
 1422 0008 00E0     		b	.L108
 1423              	.L111:
 1424 000a 114B     		ldr	r3, .L114+4
 1425              	.L108:
 1426              	.LVL132:
 135:Inc/eecs473.h ****   spiptr->Init.Mode = SPI_MODE_MASTER;
 1427              		.loc 2 135 0 discriminator 4
 1428 000c 0228     		cmp	r0, #2
 1429 000e 01D1     		bne	.L112
 135:Inc/eecs473.h ****   spiptr->Init.Mode = SPI_MODE_MASTER;
 1430              		.loc 2 135 0 is_stmt 0
 1431 0010 104A     		ldr	r2, .L114+8
 1432 0012 00E0     		b	.L109
 1433              	.L112:
 1434 0014 104A     		ldr	r2, .L114+12
 1435              	.L109:
 135:Inc/eecs473.h ****   spiptr->Init.Mode = SPI_MODE_MASTER;
 1436              		.loc 2 135 0 discriminator 4
 1437 0016 1A60     		str	r2, [r3]
 136:Inc/eecs473.h ****   spiptr->Init.Direction = SPI_DIRECTION_2LINES;
 1438              		.loc 2 136 0 is_stmt 1 discriminator 4
 1439 0018 4FF48272 		mov	r2, #260
 1440 001c 5A60     		str	r2, [r3, #4]
 137:Inc/eecs473.h ****   spiptr->Init.DataSize = SPI_DATASIZE_8BIT;
 1441              		.loc 2 137 0 discriminator 4
 1442 001e 0022     		movs	r2, #0
 1443 0020 9A60     		str	r2, [r3, #8]
 138:Inc/eecs473.h ****   spiptr->Init.CLKPolarity = SPI_POLARITY_LOW;
 1444              		.loc 2 138 0 discriminator 4
 1445 0022 DA60     		str	r2, [r3, #12]
 139:Inc/eecs473.h ****   spiptr->Init.CLKPhase = SPI_PHASE_1EDGE;
 1446              		.loc 2 139 0 discriminator 4
 1447 0024 1A61     		str	r2, [r3, #16]
 140:Inc/eecs473.h ****   spiptr->Init.NSS = SPI_NSS_SOFT;
 1448              		.loc 2 140 0 discriminator 4
 1449 0026 5A61     		str	r2, [r3, #20]
 141:Inc/eecs473.h ****   spiptr->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 1450              		.loc 2 141 0 discriminator 4
 1451 0028 4FF40071 		mov	r1, #512
 1452 002c 9961     		str	r1, [r3, #24]
 142:Inc/eecs473.h ****   spiptr->Init.FirstBit = SPI_FIRSTBIT_MSB;
 1453              		.loc 2 142 0 discriminator 4
 1454 002e DA61     		str	r2, [r3, #28]
 143:Inc/eecs473.h ****   spiptr->Init.TIMode = SPI_TIMODE_DISABLE;
 1455              		.loc 2 143 0 discriminator 4
 1456 0030 1A62     		str	r2, [r3, #32]
ARM GAS  /tmp/ccw7Bx3r.s 			page 44


 144:Inc/eecs473.h ****   spiptr->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 1457              		.loc 2 144 0 discriminator 4
 1458 0032 5A62     		str	r2, [r3, #36]
 145:Inc/eecs473.h ****   spiptr->Init.CRCPolynomial = 10;
 1459              		.loc 2 145 0 discriminator 4
 1460 0034 9A62     		str	r2, [r3, #40]
 146:Inc/eecs473.h **** 
 1461              		.loc 2 146 0 discriminator 4
 1462 0036 0A22     		movs	r2, #10
 1463 0038 DA62     		str	r2, [r3, #44]
 161:Inc/eecs473.h ****   {
 1464              		.loc 2 161 0 discriminator 4
 1465 003a 1846     		mov	r0, r3
 1466              	.LVL133:
 1467 003c FFF7FEFF 		bl	HAL_SPI_Init
 1468              	.LVL134:
 1469 0040 18B1     		cbz	r0, .L107
 163:Inc/eecs473.h ****   }
 1470              		.loc 2 163 0
 1471 0042 0648     		ldr	r0, .L114+16
 1472 0044 A321     		movs	r1, #163
 1473 0046 FFF7FEFF 		bl	_Error_Handler
 1474              	.LVL135:
 1475              	.L107:
 1476 004a 08BD     		pop	{r3, pc}
 1477              	.L115:
 1478              		.align	2
 1479              	.L114:
 1480 004c 00000000 		.word	hspi2
 1481 0050 00000000 		.word	hspi3
 1482 0054 00380040 		.word	1073756160
 1483 0058 003C0040 		.word	1073757184
 1484 005c 18000000 		.word	.LC9
 1485              		.cfi_endproc
 1486              	.LFE135:
 1488              		.section	.text.MX_UART4_Init,"ax",%progbits
 1489              		.align	2
 1490              		.thumb
 1491              		.thumb_func
 1493              	MX_UART4_Init:
 1494              	.LFB150:
 590:Src/main.c    **** 
 1495              		.loc 1 590 0
 1496              		.cfi_startproc
 1497              		@ args = 0, pretend = 0, frame = 0
 1498              		@ frame_needed = 0, uses_anonymous_args = 0
 1499 0000 08B5     		push	{r3, lr}
 1500              	.LCFI33:
 1501              		.cfi_def_cfa_offset 8
 1502              		.cfi_offset 3, -8
 1503              		.cfi_offset 14, -4
 592:Src/main.c    ****   huart4.Init.BaudRate = 57600;
 1504              		.loc 1 592 0
 1505 0002 0B48     		ldr	r0, .L119
 1506 0004 0B4B     		ldr	r3, .L119+4
 1507 0006 0360     		str	r3, [r0]
 593:Src/main.c    ****   huart4.Init.WordLength = UART_WORDLENGTH_8B;
ARM GAS  /tmp/ccw7Bx3r.s 			page 45


 1508              		.loc 1 593 0
 1509 0008 4FF46143 		mov	r3, #57600
 1510 000c 4360     		str	r3, [r0, #4]
 594:Src/main.c    ****   huart4.Init.StopBits = UART_STOPBITS_1;
 1511              		.loc 1 594 0
 1512 000e 0023     		movs	r3, #0
 1513 0010 8360     		str	r3, [r0, #8]
 595:Src/main.c    ****   huart4.Init.Parity = UART_PARITY_NONE;
 1514              		.loc 1 595 0
 1515 0012 C360     		str	r3, [r0, #12]
 596:Src/main.c    ****   huart4.Init.Mode = UART_MODE_TX_RX;
 1516              		.loc 1 596 0
 1517 0014 0361     		str	r3, [r0, #16]
 597:Src/main.c    ****   huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1518              		.loc 1 597 0
 1519 0016 0C22     		movs	r2, #12
 1520 0018 4261     		str	r2, [r0, #20]
 598:Src/main.c    ****   huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 1521              		.loc 1 598 0
 1522 001a 8361     		str	r3, [r0, #24]
 599:Src/main.c    ****   if (HAL_UART_Init(&huart4) != HAL_OK)
 1523              		.loc 1 599 0
 1524 001c C361     		str	r3, [r0, #28]
 600:Src/main.c    ****   {
 1525              		.loc 1 600 0
 1526 001e FFF7FEFF 		bl	HAL_UART_Init
 1527              	.LVL136:
 1528 0022 20B1     		cbz	r0, .L116
 602:Src/main.c    ****   }
 1529              		.loc 1 602 0
 1530 0024 0448     		ldr	r0, .L119+8
 1531 0026 40F25A21 		movw	r1, #602
 1532 002a FFF7FEFF 		bl	_Error_Handler
 1533              	.LVL137:
 1534              	.L116:
 1535 002e 08BD     		pop	{r3, pc}
 1536              	.L120:
 1537              		.align	2
 1538              	.L119:
 1539 0030 00000000 		.word	huart4
 1540 0034 004C0040 		.word	1073761280
 1541 0038 28000000 		.word	.LC10
 1542              		.cfi_endproc
 1543              	.LFE150:
 1545              		.section	.text.MX_SPI1_Init,"ax",%progbits
 1546              		.align	2
 1547              		.thumb
 1548              		.thumb_func
 1550              	MX_SPI1_Init:
 1551              	.LFB149:
 566:Src/main.c    **** 
 1552              		.loc 1 566 0
 1553              		.cfi_startproc
 1554              		@ args = 0, pretend = 0, frame = 0
 1555              		@ frame_needed = 0, uses_anonymous_args = 0
 1556 0000 08B5     		push	{r3, lr}
 1557              	.LCFI34:
ARM GAS  /tmp/ccw7Bx3r.s 			page 46


 1558              		.cfi_def_cfa_offset 8
 1559              		.cfi_offset 3, -8
 1560              		.cfi_offset 14, -4
 569:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 1561              		.loc 1 569 0
 1562 0002 0E48     		ldr	r0, .L124
 1563 0004 0E4B     		ldr	r3, .L124+4
 1564 0006 0360     		str	r3, [r0]
 570:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 1565              		.loc 1 570 0
 1566 0008 4FF48273 		mov	r3, #260
 1567 000c 4360     		str	r3, [r0, #4]
 571:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 1568              		.loc 1 571 0
 1569 000e 0023     		movs	r3, #0
 1570 0010 8360     		str	r3, [r0, #8]
 572:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 1571              		.loc 1 572 0
 1572 0012 C360     		str	r3, [r0, #12]
 573:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 1573              		.loc 1 573 0
 1574 0014 0361     		str	r3, [r0, #16]
 574:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 1575              		.loc 1 574 0
 1576 0016 4361     		str	r3, [r0, #20]
 575:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 1577              		.loc 1 575 0
 1578 0018 4FF40072 		mov	r2, #512
 1579 001c 8261     		str	r2, [r0, #24]
 576:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 1580              		.loc 1 576 0
 1581 001e C361     		str	r3, [r0, #28]
 577:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 1582              		.loc 1 577 0
 1583 0020 0362     		str	r3, [r0, #32]
 578:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 1584              		.loc 1 578 0
 1585 0022 4362     		str	r3, [r0, #36]
 579:Src/main.c    ****   hspi1.Init.CRCPolynomial = 10;
 1586              		.loc 1 579 0
 1587 0024 8362     		str	r3, [r0, #40]
 580:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 1588              		.loc 1 580 0
 1589 0026 0A23     		movs	r3, #10
 1590 0028 C362     		str	r3, [r0, #44]
 581:Src/main.c    ****   {
 1591              		.loc 1 581 0
 1592 002a FFF7FEFF 		bl	HAL_SPI_Init
 1593              	.LVL138:
 1594 002e 20B1     		cbz	r0, .L121
 583:Src/main.c    ****   }
 1595              		.loc 1 583 0
 1596 0030 0448     		ldr	r0, .L124+8
 1597 0032 40F24721 		movw	r1, #583
 1598 0036 FFF7FEFF 		bl	_Error_Handler
 1599              	.LVL139:
 1600              	.L121:
ARM GAS  /tmp/ccw7Bx3r.s 			page 47


 1601 003a 08BD     		pop	{r3, pc}
 1602              	.L125:
 1603              		.align	2
 1604              	.L124:
 1605 003c 00000000 		.word	hspi1
 1606 0040 00300140 		.word	1073819648
 1607 0044 28000000 		.word	.LC10
 1608              		.cfi_endproc
 1609              	.LFE149:
 1611              		.section	.text.MX_I2C1_Init,"ax",%progbits
 1612              		.align	2
 1613              		.thumb
 1614              		.thumb_func
 1616              	MX_I2C1_Init:
 1617              	.LFB148:
 546:Src/main.c    **** 
 1618              		.loc 1 546 0
 1619              		.cfi_startproc
 1620              		@ args = 0, pretend = 0, frame = 0
 1621              		@ frame_needed = 0, uses_anonymous_args = 0
 1622 0000 08B5     		push	{r3, lr}
 1623              	.LCFI35:
 1624              		.cfi_def_cfa_offset 8
 1625              		.cfi_offset 3, -8
 1626              		.cfi_offset 14, -4
 548:Src/main.c    ****   hi2c1.Init.ClockSpeed = 100000;
 1627              		.loc 1 548 0
 1628 0002 0C48     		ldr	r0, .L129
 1629 0004 0C4B     		ldr	r3, .L129+4
 1630 0006 0360     		str	r3, [r0]
 549:Src/main.c    ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 1631              		.loc 1 549 0
 1632 0008 0C4B     		ldr	r3, .L129+8
 1633 000a 4360     		str	r3, [r0, #4]
 550:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 0;
 1634              		.loc 1 550 0
 1635 000c 0023     		movs	r3, #0
 1636 000e 8360     		str	r3, [r0, #8]
 551:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1637              		.loc 1 551 0
 1638 0010 C360     		str	r3, [r0, #12]
 552:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1639              		.loc 1 552 0
 1640 0012 4FF48042 		mov	r2, #16384
 1641 0016 0261     		str	r2, [r0, #16]
 553:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 1642              		.loc 1 553 0
 1643 0018 4361     		str	r3, [r0, #20]
 554:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1644              		.loc 1 554 0
 1645 001a 8361     		str	r3, [r0, #24]
 555:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 1646              		.loc 1 555 0
 1647 001c C361     		str	r3, [r0, #28]
 556:Src/main.c    ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 1648              		.loc 1 556 0
 1649 001e 0362     		str	r3, [r0, #32]
ARM GAS  /tmp/ccw7Bx3r.s 			page 48


 557:Src/main.c    ****   {
 1650              		.loc 1 557 0
 1651 0020 FFF7FEFF 		bl	HAL_I2C_Init
 1652              	.LVL140:
 1653 0024 20B1     		cbz	r0, .L126
 559:Src/main.c    ****   }
 1654              		.loc 1 559 0
 1655 0026 0648     		ldr	r0, .L129+12
 1656 0028 40F22F21 		movw	r1, #559
 1657 002c FFF7FEFF 		bl	_Error_Handler
 1658              	.LVL141:
 1659              	.L126:
 1660 0030 08BD     		pop	{r3, pc}
 1661              	.L130:
 1662 0032 00BF     		.align	2
 1663              	.L129:
 1664 0034 00000000 		.word	hi2c1
 1665 0038 00540040 		.word	1073763328
 1666 003c A0860100 		.word	100000
 1667 0040 28000000 		.word	.LC10
 1668              		.cfi_endproc
 1669              	.LFE148:
 1671              		.section	.text.MX_CAN1_Init,"ax",%progbits
 1672              		.align	2
 1673              		.thumb
 1674              		.thumb_func
 1676              	MX_CAN1_Init:
 1677              	.LFB147:
 523:Src/main.c    **** 
 1678              		.loc 1 523 0
 1679              		.cfi_startproc
 1680              		@ args = 0, pretend = 0, frame = 0
 1681              		@ frame_needed = 0, uses_anonymous_args = 0
 1682 0000 08B5     		push	{r3, lr}
 1683              	.LCFI36:
 1684              		.cfi_def_cfa_offset 8
 1685              		.cfi_offset 3, -8
 1686              		.cfi_offset 14, -4
 525:Src/main.c    ****   hcan1.Init.Prescaler = 2;
 1687              		.loc 1 525 0
 1688 0002 1048     		ldr	r0, .L134
 1689 0004 104B     		ldr	r3, .L134+4
 1690 0006 0360     		str	r3, [r0]
 526:Src/main.c    ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 1691              		.loc 1 526 0
 1692 0008 0223     		movs	r3, #2
 1693 000a 4360     		str	r3, [r0, #4]
 527:Src/main.c    ****   hcan1.Init.SyncJumpWidth = CAN_SJW_4TQ;
 1694              		.loc 1 527 0
 1695 000c 0023     		movs	r3, #0
 1696 000e 8360     		str	r3, [r0, #8]
 528:Src/main.c    ****   hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 1697              		.loc 1 528 0
 1698 0010 4FF04072 		mov	r2, #50331648
 1699 0014 C260     		str	r2, [r0, #12]
 529:Src/main.c    ****   hcan1.Init.TimeSeg2 = CAN_BS2_6TQ;
 1700              		.loc 1 529 0
ARM GAS  /tmp/ccw7Bx3r.s 			page 49


 1701 0016 4FF40022 		mov	r2, #524288
 1702 001a 0261     		str	r2, [r0, #16]
 530:Src/main.c    ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 1703              		.loc 1 530 0
 1704 001c 4FF4A002 		mov	r2, #5242880
 1705 0020 4261     		str	r2, [r0, #20]
 531:Src/main.c    ****   hcan1.Init.AutoBusOff = ENABLE;
 1706              		.loc 1 531 0
 1707 0022 0376     		strb	r3, [r0, #24]
 532:Src/main.c    ****   hcan1.Init.AutoWakeUp = DISABLE;
 1708              		.loc 1 532 0
 1709 0024 0122     		movs	r2, #1
 1710 0026 4276     		strb	r2, [r0, #25]
 533:Src/main.c    ****   hcan1.Init.AutoRetransmission = DISABLE;
 1711              		.loc 1 533 0
 1712 0028 8376     		strb	r3, [r0, #26]
 534:Src/main.c    ****   hcan1.Init.ReceiveFifoLocked = ENABLE;
 1713              		.loc 1 534 0
 1714 002a C376     		strb	r3, [r0, #27]
 535:Src/main.c    ****   hcan1.Init.TransmitFifoPriority = ENABLE;
 1715              		.loc 1 535 0
 1716 002c 0277     		strb	r2, [r0, #28]
 536:Src/main.c    ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 1717              		.loc 1 536 0
 1718 002e 4277     		strb	r2, [r0, #29]
 537:Src/main.c    ****   {
 1719              		.loc 1 537 0
 1720 0030 FFF7FEFF 		bl	HAL_CAN_Init
 1721              	.LVL142:
 1722 0034 20B1     		cbz	r0, .L131
 539:Src/main.c    ****   }
 1723              		.loc 1 539 0
 1724 0036 0548     		ldr	r0, .L134+8
 1725 0038 40F21B21 		movw	r1, #539
 1726 003c FFF7FEFF 		bl	_Error_Handler
 1727              	.LVL143:
 1728              	.L131:
 1729 0040 08BD     		pop	{r3, pc}
 1730              	.L135:
 1731 0042 00BF     		.align	2
 1732              	.L134:
 1733 0044 00000000 		.word	hcan1
 1734 0048 00640040 		.word	1073767424
 1735 004c 28000000 		.word	.LC10
 1736              		.cfi_endproc
 1737              	.LFE147:
 1739              		.section	.text.SystemClock_Config,"ax",%progbits
 1740              		.align	2
 1741              		.global	SystemClock_Config
 1742              		.thumb
 1743              		.thumb_func
 1745              	SystemClock_Config:
 1746              	.LFB146:
 473:Src/main.c    **** 
 1747              		.loc 1 473 0
 1748              		.cfi_startproc
 1749              		@ args = 0, pretend = 0, frame = 80
ARM GAS  /tmp/ccw7Bx3r.s 			page 50


 1750              		@ frame_needed = 0, uses_anonymous_args = 0
 1751 0000 00B5     		push	{lr}
 1752              	.LCFI37:
 1753              		.cfi_def_cfa_offset 4
 1754              		.cfi_offset 14, -4
 1755 0002 95B0     		sub	sp, sp, #84
 1756              	.LCFI38:
 1757              		.cfi_def_cfa_offset 88
 1758              	.LBB12:
 480:Src/main.c    **** 
 1759              		.loc 1 480 0
 1760 0004 0023     		movs	r3, #0
 1761 0006 0193     		str	r3, [sp, #4]
 1762 0008 244A     		ldr	r2, .L140
 1763 000a 116C     		ldr	r1, [r2, #64]
 1764 000c 41F08051 		orr	r1, r1, #268435456
 1765 0010 1164     		str	r1, [r2, #64]
 1766 0012 126C     		ldr	r2, [r2, #64]
 1767 0014 02F08052 		and	r2, r2, #268435456
 1768 0018 0192     		str	r2, [sp, #4]
 1769 001a 019A     		ldr	r2, [sp, #4]
 1770              	.LBE12:
 1771              	.LBB13:
 482:Src/main.c    **** 
 1772              		.loc 1 482 0
 1773 001c 0293     		str	r3, [sp, #8]
 1774 001e 204A     		ldr	r2, .L140+4
 1775 0020 1168     		ldr	r1, [r2]
 1776 0022 41F48041 		orr	r1, r1, #16384
 1777 0026 1160     		str	r1, [r2]
 1778 0028 1268     		ldr	r2, [r2]
 1779 002a 02F48042 		and	r2, r2, #16384
 1780 002e 0292     		str	r2, [sp, #8]
 1781 0030 029A     		ldr	r2, [sp, #8]
 1782              	.LBE13:
 486:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1783              		.loc 1 486 0
 1784 0032 0222     		movs	r2, #2
 1785 0034 0892     		str	r2, [sp, #32]
 487:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 1786              		.loc 1 487 0
 1787 0036 0122     		movs	r2, #1
 1788 0038 0B92     		str	r2, [sp, #44]
 488:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1789              		.loc 1 488 0
 1790 003a 1022     		movs	r2, #16
 1791 003c 0C92     		str	r2, [sp, #48]
 489:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1792              		.loc 1 489 0
 1793 003e 0E93     		str	r3, [sp, #56]
 490:Src/main.c    ****   {
 1794              		.loc 1 490 0
 1795 0040 08A8     		add	r0, sp, #32
 1796 0042 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1797              	.LVL144:
 1798 0046 20B1     		cbz	r0, .L137
 492:Src/main.c    ****   }
ARM GAS  /tmp/ccw7Bx3r.s 			page 51


 1799              		.loc 1 492 0
 1800 0048 1648     		ldr	r0, .L140+8
 1801 004a 4FF4F671 		mov	r1, #492
 1802 004e FFF7FEFF 		bl	_Error_Handler
 1803              	.LVL145:
 1804              	.L137:
 497:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1805              		.loc 1 497 0
 1806 0052 0F23     		movs	r3, #15
 1807 0054 0393     		str	r3, [sp, #12]
 499:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1808              		.loc 1 499 0
 1809 0056 0021     		movs	r1, #0
 1810 0058 0491     		str	r1, [sp, #16]
 500:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1811              		.loc 1 500 0
 1812 005a 0591     		str	r1, [sp, #20]
 501:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1813              		.loc 1 501 0
 1814 005c 0691     		str	r1, [sp, #24]
 502:Src/main.c    **** 
 1815              		.loc 1 502 0
 1816 005e 0791     		str	r1, [sp, #28]
 504:Src/main.c    ****   {
 1817              		.loc 1 504 0
 1818 0060 03A8     		add	r0, sp, #12
 1819 0062 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1820              	.LVL146:
 1821 0066 20B1     		cbz	r0, .L138
 506:Src/main.c    ****   }
 1822              		.loc 1 506 0
 1823 0068 0E48     		ldr	r0, .L140+8
 1824 006a 4FF4FD71 		mov	r1, #506
 1825 006e FFF7FEFF 		bl	_Error_Handler
 1826              	.LVL147:
 1827              	.L138:
 511:Src/main.c    **** 
 1828              		.loc 1 511 0
 1829 0072 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1830              	.LVL148:
 1831 0076 0C4B     		ldr	r3, .L140+12
 1832 0078 A3FB0030 		umull	r3, r0, r3, r0
 1833 007c 8009     		lsrs	r0, r0, #6
 1834 007e FFF7FEFF 		bl	HAL_SYSTICK_Config
 1835              	.LVL149:
 515:Src/main.c    **** 
 1836              		.loc 1 515 0
 1837 0082 0420     		movs	r0, #4
 1838 0084 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 1839              	.LVL150:
 518:Src/main.c    **** }
 1840              		.loc 1 518 0
 1841 0088 4FF0FF30 		mov	r0, #-1
 1842 008c 0F21     		movs	r1, #15
 1843 008e 0022     		movs	r2, #0
 1844 0090 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 1845              	.LVL151:
ARM GAS  /tmp/ccw7Bx3r.s 			page 52


 519:Src/main.c    **** 
 1846              		.loc 1 519 0
 1847 0094 15B0     		add	sp, sp, #84
 1848              	.LCFI39:
 1849              		.cfi_def_cfa_offset 4
 1850              		@ sp needed
 1851 0096 5DF804FB 		ldr	pc, [sp], #4
 1852              	.L141:
 1853 009a 00BF     		.align	2
 1854              	.L140:
 1855 009c 00380240 		.word	1073887232
 1856 00a0 00700040 		.word	1073770496
 1857 00a4 28000000 		.word	.LC10
 1858 00a8 D34D6210 		.word	274877907
 1859              		.cfi_endproc
 1860              	.LFE146:
 1862              		.section	.text.main,"ax",%progbits
 1863              		.align	2
 1864              		.global	main
 1865              		.thumb
 1866              		.thumb_func
 1868              	main:
 1869              	.LFB145:
 380:Src/main.c    ****   /* USER CODE BEGIN 1 */
 1870              		.loc 1 380 0
 1871              		.cfi_startproc
 1872              		@ args = 0, pretend = 0, frame = 64
 1873              		@ frame_needed = 0, uses_anonymous_args = 0
 1874 0000 70B5     		push	{r4, r5, r6, lr}
 1875              	.LCFI40:
 1876              		.cfi_def_cfa_offset 16
 1877              		.cfi_offset 4, -16
 1878              		.cfi_offset 5, -12
 1879              		.cfi_offset 6, -8
 1880              		.cfi_offset 14, -4
 1881 0002 90B0     		sub	sp, sp, #64
 1882              	.LCFI41:
 1883              		.cfi_def_cfa_offset 80
 388:Src/main.c    **** 
 1884              		.loc 1 388 0
 1885 0004 FFF7FEFF 		bl	HAL_Init
 1886              	.LVL152:
 395:Src/main.c    **** 
 1887              		.loc 1 395 0
 1888 0008 FFF7FEFF 		bl	SystemClock_Config
 1889              	.LVL153:
 402:Src/main.c    ****   MX_UART4_Init();
 1890              		.loc 1 402 0
 1891 000c FFF7FEFF 		bl	MX_GPIO_Init
 1892              	.LVL154:
 403:Src/main.c    ****   MX_SPI1_Init();
 1893              		.loc 1 403 0
 1894 0010 FFF7FEFF 		bl	MX_UART4_Init
 1895              	.LVL155:
 404:Src/main.c    ****   MX_I2C1_Init();
 1896              		.loc 1 404 0
 1897 0014 FFF7FEFF 		bl	MX_SPI1_Init
ARM GAS  /tmp/ccw7Bx3r.s 			page 53


 1898              	.LVL156:
 405:Src/main.c    ****   MX_CAN1_Init();
 1899              		.loc 1 405 0
 1900 0018 FFF7FEFF 		bl	MX_I2C1_Init
 1901              	.LVL157:
 406:Src/main.c    ****   /* USER CODE BEGIN 2 */
 1902              		.loc 1 406 0
 1903 001c FFF7FEFF 		bl	MX_CAN1_Init
 1904              	.LVL158:
 425:Src/main.c    ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 1905              		.loc 1 425 0
 1906 0020 144C     		ldr	r4, .L145
 1907 0022 0BAD     		add	r5, sp, #44
 1908 0024 2646     		mov	r6, r4
 1909 0026 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 1910 0028 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 1911 002a 3368     		ldr	r3, [r6]
 1912 002c 2B60     		str	r3, [r5]
 426:Src/main.c    **** 
 1913              		.loc 1 426 0
 1914 002e 0BA8     		add	r0, sp, #44
 1915 0030 0021     		movs	r1, #0
 1916 0032 FFF7FEFF 		bl	osThreadCreate
 1917              	.LVL159:
 1918 0036 104B     		ldr	r3, .L145+4
 1919 0038 1860     		str	r0, [r3]
 430:Src/main.c    ****   adcTaskHandle = osThreadCreate(osThread(adcTask),NULL);
 1920              		.loc 1 430 0
 1921 003a 06AD     		add	r5, sp, #24
 1922 003c 04F11406 		add	r6, r4, #20
 1923 0040 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 1924 0042 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 1925 0044 3368     		ldr	r3, [r6]
 1926 0046 2B60     		str	r3, [r5]
 431:Src/main.c    ****   osThreadDef(canTask, canTest, osPriorityAboveNormal, 1, 128);
 1927              		.loc 1 431 0
 1928 0048 06A8     		add	r0, sp, #24
 1929 004a 0021     		movs	r1, #0
 1930 004c FFF7FEFF 		bl	osThreadCreate
 1931              	.LVL160:
 1932 0050 0A4B     		ldr	r3, .L145+8
 1933 0052 1860     		str	r0, [r3]
 432:Src/main.c    ****   canTaskHandle = osThreadCreate(osThread(canTask),NULL);
 1934              		.loc 1 432 0
 1935 0054 01AD     		add	r5, sp, #4
 1936 0056 2834     		adds	r4, r4, #40
 1937 0058 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 1938 005a 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 1939 005c 2368     		ldr	r3, [r4]
 1940 005e 2B60     		str	r3, [r5]
 433:Src/main.c    ****   //osThreadDef(uartTask, uartTest, osPriorityAboveNormal, 1, 128);
 1941              		.loc 1 433 0
 1942 0060 01A8     		add	r0, sp, #4
 1943 0062 0021     		movs	r1, #0
 1944 0064 FFF7FEFF 		bl	osThreadCreate
 1945              	.LVL161:
 1946 0068 054B     		ldr	r3, .L145+12
ARM GAS  /tmp/ccw7Bx3r.s 			page 54


 1947 006a 1860     		str	r0, [r3]
 450:Src/main.c    ****   
 1948              		.loc 1 450 0
 1949 006c FFF7FEFF 		bl	osKernelStart
 1950              	.LVL162:
 1951              	.L143:
 463:Src/main.c    ****   /* USER CODE END 3 */
 1952              		.loc 1 463 0 discriminator 1
 1953 0070 FEE7     		b	.L143
 1954              	.L146:
 1955 0072 00BF     		.align	2
 1956              	.L145:
 1957 0074 00000000 		.word	.LANCHOR2
 1958 0078 00000000 		.word	defaultTaskHandle
 1959 007c 00000000 		.word	adcTaskHandle
 1960 0080 00000000 		.word	canTaskHandle
 1961              		.cfi_endproc
 1962              	.LFE145:
 1964              		.comm	g_ADCValue,4,4
 1965              		.comm	arr,9,4
 1966              		.comm	max_rx_buff,2,4
 1967              		.global	max_data_addr
 1968              		.comm	spi_rx_buff,2,4
 1969              		.global	spi_address
 1970              		.comm	i2c_accel,6,4
 1971              		.comm	i2c_rx_buff_gyro,6,4
 1972              		.comm	i2c_tx_buff_gyro,6,4
 1973              		.comm	i2c_tx_buff_accel,6,4
 1974              		.comm	i2c_rx_buff_accel,6,4
 1975              		.comm	g_AdcHandle,72,4
 1976              		.comm	adcTaskHandle,4,4
 1977              		.comm	spiTaskHandle,4,4
 1978              		.comm	canTaskHandle,4,4
 1979              		.comm	uartTaskHandle,4,4
 1980              		.comm	i2cTaskHandle,4,4
 1981              		.comm	defaultTaskHandle,4,4
 1982              		.comm	huart4,64,4
 1983              		.comm	hspi1,88,4
 1984              		.comm	hi2c1,84,4
 1985              		.comm	hcan1,40,4
 1986              		.comm	hcan,40,4
 1987              		.comm	hi2c,84,4
 1988              		.comm	hspi3,88,4
 1989              		.comm	hspi2,88,4
 1990              		.comm	huart,64,4
 1991              		.global	LOW
 1992              		.global	HIGH
 1993              		.global	pulls
 1994              		.global	speeds
 1995              		.global	modes
 1996              		.global	pins
 1997              		.global	CLOCK_ENABLED
 1998              		.section	.rodata
 1999              		.align	2
 2000              		.set	.LANCHOR2,. + 0
 2001              	.LC11:
 2002 0000 44000000 		.word	.LC2
ARM GAS  /tmp/ccw7Bx3r.s 			page 55


 2003 0004 00000000 		.word	StartDefaultTask
 2004 0008 0000     		.short	0
 2005 000a 0000     		.space	2
 2006 000c 00000000 		.word	0
 2007 0010 80000000 		.word	128
 2008              	.LC12:
 2009 0014 3C000000 		.word	.LC4
 2010 0018 00000000 		.word	adcTest
 2011 001c 0100     		.short	1
 2012 001e 0000     		.space	2
 2013 0020 01000000 		.word	1
 2014 0024 80000000 		.word	128
 2015              	.LC13:
 2016 0028 34000000 		.word	.LC6
 2017 002c 00000000 		.word	canTest
 2018 0030 0100     		.short	1
 2019 0032 0000     		.space	2
 2020 0034 01000000 		.word	1
 2021 0038 80000000 		.word	128
 2022              		.section	.data.max_data_addr,"aw",%progbits
 2023              		.align	2
 2024              		.set	.LANCHOR1,. + 0
 2027              	max_data_addr:
 2028 0000 38       		.byte	56
 2029 0001 00       		.byte	0
 2030              		.section	.data.spi_address,"aw",%progbits
 2031              		.align	2
 2034              	spi_address:
 2035 0000 84       		.byte	-124
 2036 0001 00       		.byte	0
 2037              		.section	.data.HIGH,"aw",%progbits
 2040              	HIGH:
 2041 0000 01       		.byte	1
 2042              		.section	.rodata.speeds,"a",%progbits
 2043              		.align	2
 2046              	speeds:
 2047 0000 00000000 		.word	0
 2048 0004 01000000 		.word	1
 2049 0008 02000000 		.word	2
 2050 000c 03000000 		.word	3
 2051              		.section	.bss.CLOCK_ENABLED,"aw",%nobits
 2052              		.align	2
 2053              		.set	.LANCHOR0,. + 0
 2056              	CLOCK_ENABLED:
 2057 0000 00000000 		.space	4
 2058              		.section	.bss.LOW,"aw",%nobits
 2061              	LOW:
 2062 0000 00       		.space	1
 2063              		.section	.rodata.modes,"a",%progbits
 2064              		.align	2
 2067              	modes:
 2068 0000 00000000 		.word	0
 2069 0004 01000000 		.word	1
 2070 0008 11000000 		.word	17
 2071 000c 02000000 		.word	2
 2072 0010 12000000 		.word	18
 2073 0014 03000000 		.word	3
ARM GAS  /tmp/ccw7Bx3r.s 			page 56


 2074 0018 00001110 		.word	269549568
 2075 001c 00002110 		.word	270598144
 2076 0020 00003110 		.word	271646720
 2077 0024 00001210 		.word	269615104
 2078 0028 00002210 		.word	270663680
 2079 002c 00003210 		.word	271712256
 2080              		.section	.rodata.str1.4,"aMS",%progbits,1
 2081              		.align	2
 2082              	.LC8:
 2083 0000 54455354 		.ascii	"TESTING UART FUNCTION\000"
 2083      494E4720 
 2083      55415254 
 2083      2046554E 
 2083      4354494F 
 2084 0016 0000     		.space	2
 2085              	.LC9:
 2086 0018 496E632F 		.ascii	"Inc/eecs473.h\000"
 2086      65656373 
 2086      3437332E 
 2086      6800
 2087 0026 0000     		.space	2
 2088              	.LC10:
 2089 0028 5372632F 		.ascii	"Src/main.c\000"
 2089      6D61696E 
 2089      2E6300
 2090 0033 00       		.space	1
 2091              	.LC6:
 2092 0034 63616E54 		.ascii	"canTask\000"
 2092      61736B00 
 2093              	.LC4:
 2094 003c 61646354 		.ascii	"adcTask\000"
 2094      61736B00 
 2095              	.LC2:
 2096 0044 64656661 		.ascii	"defaultTask\000"
 2096      756C7454 
 2096      61736B00 
 2097              		.section	.rodata.pins,"a",%progbits
 2098              		.align	2
 2101              	pins:
 2102 0000 0100     		.short	1
 2103 0002 0200     		.short	2
 2104 0004 0400     		.short	4
 2105 0006 0800     		.short	8
 2106 0008 1000     		.short	16
 2107 000a 2000     		.short	32
 2108 000c 4000     		.short	64
 2109 000e 8000     		.short	128
 2110 0010 0001     		.short	256
 2111 0012 0002     		.short	512
 2112 0014 0004     		.short	1024
 2113 0016 0008     		.short	2048
 2114 0018 0010     		.short	4096
 2115 001a 0020     		.short	8192
 2116 001c 0040     		.short	16384
 2117 001e 0080     		.short	-32768
 2118              		.section	.rodata.pulls,"a",%progbits
 2119              		.align	2
ARM GAS  /tmp/ccw7Bx3r.s 			page 57


 2122              	pulls:
 2123 0000 00000000 		.word	0
 2124 0004 01000000 		.word	1
 2125 0008 02000000 		.word	2
 2126              		.text
 2127              	.Letext0:
 2128              		.file 3 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 2129              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 2130              		.file 5 "/usr/include/newlib/sys/_stdint.h"
 2131              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 2132              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 2133              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 2134              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 2135              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 2136              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 2137              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 2138              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 2139              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 2140              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_spi.h"
 2141              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 2142              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 2143              		.file 18 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 2144              		.file 19 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 2145              		.file 20 "Drivers/CMSIS/Include/core_cm4.h"
 2146              		.file 21 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 2147              		.file 22 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
ARM GAS  /tmp/ccw7Bx3r.s 			page 58


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccw7Bx3r.s:21     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccw7Bx3r.s:25     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccw7Bx3r.s:145    .text.MX_GPIO_Init:00000000000000a4 $d
     /tmp/ccw7Bx3r.s:153    .text.StartDefaultTask:0000000000000000 $t
     /tmp/ccw7Bx3r.s:158    .text.StartDefaultTask:0000000000000000 StartDefaultTask
     /tmp/ccw7Bx3r.s:183    .text.canTest:0000000000000000 $t
     /tmp/ccw7Bx3r.s:188    .text.canTest:0000000000000000 canTest
     /tmp/ccw7Bx3r.s:276    .text.canTest:000000000000006c $d
                            *COM*:0000000000000028 hcan1
                            *COM*:0000000000000004 g_ADCValue
     /tmp/ccw7Bx3r.s:283    .text.eecs_GPIO_Clock_Init:0000000000000000 $t
     /tmp/ccw7Bx3r.s:288    .text.eecs_GPIO_Clock_Init:0000000000000000 eecs_GPIO_Clock_Init
     /tmp/ccw7Bx3r.s:353    .text.eecs_GPIO_Clock_Init:0000000000000054 $d
     /tmp/ccw7Bx3r.s:359    .text.eecs_GPIO_Init:0000000000000000 $t
     /tmp/ccw7Bx3r.s:364    .text.eecs_GPIO_Init:0000000000000000 eecs_GPIO_Init
     /tmp/ccw7Bx3r.s:405    .text.eecs_GPIO_Init:000000000000001c $d
     /tmp/ccw7Bx3r.s:410    .text.eecs_GPIO_Write:0000000000000000 $t
     /tmp/ccw7Bx3r.s:415    .text.eecs_GPIO_Write:0000000000000000 eecs_GPIO_Write
     /tmp/ccw7Bx3r.s:435    .text.eecs_GPIO_Toggle:0000000000000000 $t
     /tmp/ccw7Bx3r.s:440    .text.eecs_GPIO_Toggle:0000000000000000 eecs_GPIO_Toggle
     /tmp/ccw7Bx3r.s:460    .text.eecs_UART_Write:0000000000000000 $t
     /tmp/ccw7Bx3r.s:465    .text.eecs_UART_Write:0000000000000000 eecs_UART_Write
     /tmp/ccw7Bx3r.s:492    .text.eecs_UART_Write:0000000000000014 $d
                            *COM*:0000000000000040 huart
     /tmp/ccw7Bx3r.s:497    .text.eecs_Error_Handler:0000000000000000 $t
     /tmp/ccw7Bx3r.s:502    .text.eecs_Error_Handler:0000000000000000 eecs_Error_Handler
     /tmp/ccw7Bx3r.s:531    .text.eecs_Error_Handler:0000000000000018 $d
     /tmp/ccw7Bx3r.s:536    .text.eecs_UART_Init:0000000000000000 $t
     /tmp/ccw7Bx3r.s:541    .text.eecs_UART_Init:0000000000000000 eecs_UART_Init
     /tmp/ccw7Bx3r.s:585    .text.eecs_UART_Init:000000000000002c $d
     /tmp/ccw7Bx3r.s:591    .text.writei2c:0000000000000000 $t
     /tmp/ccw7Bx3r.s:596    .text.writei2c:0000000000000000 writei2c
     /tmp/ccw7Bx3r.s:723    .text.writei2c:000000000000009c $d
                            *COM*:0000000000000006 i2c_tx_buff_accel
                            *COM*:0000000000000006 i2c_rx_buff_accel
                            *COM*:0000000000000054 hi2c1
                            *COM*:0000000000000006 i2c_accel
     /tmp/ccw7Bx3r.s:732    .text.uart_debug:0000000000000000 $t
     /tmp/ccw7Bx3r.s:737    .text.uart_debug:0000000000000000 uart_debug
     /tmp/ccw7Bx3r.s:774    .text.uart_debug:0000000000000020 $d
                            *COM*:0000000000000040 huart4
     /tmp/ccw7Bx3r.s:780    .text.eecs_UART_Test:0000000000000000 $t
     /tmp/ccw7Bx3r.s:785    .text.eecs_UART_Test:0000000000000000 eecs_UART_Test
     /tmp/ccw7Bx3r.s:832    .text.eecs_UART_Test:0000000000000030 $d
     /tmp/ccw7Bx3r.s:838    .text.uartTest:0000000000000000 $t
     /tmp/ccw7Bx3r.s:843    .text.uartTest:0000000000000000 uartTest
     /tmp/ccw7Bx3r.s:892    .text.uartTest:000000000000002c $d
                            *COM*:0000000000000009 arr
     /tmp/ccw7Bx3r.s:898    .text.spiTest:0000000000000000 $t
     /tmp/ccw7Bx3r.s:903    .text.spiTest:0000000000000000 spiTest
     /tmp/ccw7Bx3r.s:999    .text.spiTest:0000000000000084 $d
                            *COM*:0000000000000058 hspi1
                            *COM*:0000000000000002 max_rx_buff
     /tmp/ccw7Bx3r.s:1010   .text.Leds:0000000000000000 $t
     /tmp/ccw7Bx3r.s:1015   .text.Leds:0000000000000000 Leds
ARM GAS  /tmp/ccw7Bx3r.s 			page 59


     /tmp/ccw7Bx3r.s:1124   .text.Leds:00000000000000a4 $d
     /tmp/ccw7Bx3r.s:1129   .text.ConfigureADC:0000000000000000 $t
     /tmp/ccw7Bx3r.s:1134   .text.ConfigureADC:0000000000000000 ConfigureADC
     /tmp/ccw7Bx3r.s:1268   .text.ConfigureADC:00000000000000a4 $d
                            *COM*:0000000000000048 g_AdcHandle
     /tmp/ccw7Bx3r.s:1277   .text.adcTest:0000000000000000 $t
     /tmp/ccw7Bx3r.s:1282   .text.adcTest:0000000000000000 adcTest
     /tmp/ccw7Bx3r.s:1323   .text.adcTest:000000000000002c $d
     /tmp/ccw7Bx3r.s:1330   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccw7Bx3r.s:1335   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccw7Bx3r.s:1360   .text.HAL_TIM_PeriodElapsedCallback:0000000000000010 $d
     /tmp/ccw7Bx3r.s:1365   .text._Error_Handler:0000000000000000 $t
     /tmp/ccw7Bx3r.s:1370   .text._Error_Handler:0000000000000000 _Error_Handler
     /tmp/ccw7Bx3r.s:1396   .text._Error_Handler:0000000000000010 $d
     /tmp/ccw7Bx3r.s:1401   .text.eecs_SPI_Init:0000000000000000 $t
     /tmp/ccw7Bx3r.s:1406   .text.eecs_SPI_Init:0000000000000000 eecs_SPI_Init
     /tmp/ccw7Bx3r.s:1480   .text.eecs_SPI_Init:000000000000004c $d
                            *COM*:0000000000000058 hspi2
                            *COM*:0000000000000058 hspi3
     /tmp/ccw7Bx3r.s:1489   .text.MX_UART4_Init:0000000000000000 $t
     /tmp/ccw7Bx3r.s:1493   .text.MX_UART4_Init:0000000000000000 MX_UART4_Init
     /tmp/ccw7Bx3r.s:1539   .text.MX_UART4_Init:0000000000000030 $d
     /tmp/ccw7Bx3r.s:1546   .text.MX_SPI1_Init:0000000000000000 $t
     /tmp/ccw7Bx3r.s:1550   .text.MX_SPI1_Init:0000000000000000 MX_SPI1_Init
     /tmp/ccw7Bx3r.s:1605   .text.MX_SPI1_Init:000000000000003c $d
     /tmp/ccw7Bx3r.s:1612   .text.MX_I2C1_Init:0000000000000000 $t
     /tmp/ccw7Bx3r.s:1616   .text.MX_I2C1_Init:0000000000000000 MX_I2C1_Init
     /tmp/ccw7Bx3r.s:1664   .text.MX_I2C1_Init:0000000000000034 $d
     /tmp/ccw7Bx3r.s:1672   .text.MX_CAN1_Init:0000000000000000 $t
     /tmp/ccw7Bx3r.s:1676   .text.MX_CAN1_Init:0000000000000000 MX_CAN1_Init
     /tmp/ccw7Bx3r.s:1733   .text.MX_CAN1_Init:0000000000000044 $d
     /tmp/ccw7Bx3r.s:1740   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccw7Bx3r.s:1745   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccw7Bx3r.s:1855   .text.SystemClock_Config:000000000000009c $d
     /tmp/ccw7Bx3r.s:1863   .text.main:0000000000000000 $t
     /tmp/ccw7Bx3r.s:1868   .text.main:0000000000000000 main
     /tmp/ccw7Bx3r.s:1957   .text.main:0000000000000074 $d
                            *COM*:0000000000000004 defaultTaskHandle
                            *COM*:0000000000000004 adcTaskHandle
                            *COM*:0000000000000004 canTaskHandle
     /tmp/ccw7Bx3r.s:2027   .data.max_data_addr:0000000000000000 max_data_addr
                            *COM*:0000000000000002 spi_rx_buff
     /tmp/ccw7Bx3r.s:2034   .data.spi_address:0000000000000000 spi_address
                            *COM*:0000000000000006 i2c_rx_buff_gyro
                            *COM*:0000000000000006 i2c_tx_buff_gyro
                            *COM*:0000000000000004 spiTaskHandle
                            *COM*:0000000000000004 uartTaskHandle
                            *COM*:0000000000000004 i2cTaskHandle
                            *COM*:0000000000000028 hcan
                            *COM*:0000000000000054 hi2c
     /tmp/ccw7Bx3r.s:2061   .bss.LOW:0000000000000000 LOW
     /tmp/ccw7Bx3r.s:2040   .data.HIGH:0000000000000000 HIGH
     /tmp/ccw7Bx3r.s:2122   .rodata.pulls:0000000000000000 pulls
     /tmp/ccw7Bx3r.s:2046   .rodata.speeds:0000000000000000 speeds
     /tmp/ccw7Bx3r.s:2067   .rodata.modes:0000000000000000 modes
     /tmp/ccw7Bx3r.s:2101   .rodata.pins:0000000000000000 pins
     /tmp/ccw7Bx3r.s:2056   .bss.CLOCK_ENABLED:0000000000000000 CLOCK_ENABLED
ARM GAS  /tmp/ccw7Bx3r.s 			page 60


     /tmp/ccw7Bx3r.s:1999   .rodata:0000000000000000 $d
     /tmp/ccw7Bx3r.s:2023   .data.max_data_addr:0000000000000000 $d
     /tmp/ccw7Bx3r.s:2031   .data.spi_address:0000000000000000 $d
     /tmp/ccw7Bx3r.s:2043   .rodata.speeds:0000000000000000 $d
     /tmp/ccw7Bx3r.s:2052   .bss.CLOCK_ENABLED:0000000000000000 $d
     /tmp/ccw7Bx3r.s:2062   .bss.LOW:0000000000000000 $d
     /tmp/ccw7Bx3r.s:2064   .rodata.modes:0000000000000000 $d
     /tmp/ccw7Bx3r.s:2081   .rodata.str1.4:0000000000000000 $d
     /tmp/ccw7Bx3r.s:2098   .rodata.pins:0000000000000000 $d
     /tmp/ccw7Bx3r.s:2119   .rodata.pulls:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
osDelay
HAL_CAN_Start
HAL_CAN_WakeUp
HAL_CAN_IsTxMessagePending
HAL_CAN_AddTxMessage
HAL_GPIO_TogglePin
HAL_UART_Transmit
HAL_DELAY
HAL_UART_Init
HAL_I2C_Master_Transmit
HAL_I2C_Master_Receive
HAL_Delay
HAL_SPI_TransmitReceive
osKernelSysTick
osDelayUntil
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_ADC_Start
HAL_ADC_PollForConversion
HAL_ADC_GetValue
HAL_IncTick
HAL_SPI_Init
HAL_I2C_Init
HAL_CAN_Init
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_Init
osThreadCreate
osKernelStart
