ARM GAS  /tmp/cck8mfEh.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.StartDefaultTask,"ax",%progbits
  21              		.align	2
  22              		.global	StartDefaultTask
  23              		.thumb
  24              		.thumb_func
  26              	StartDefaultTask:
  27              	.LFB140:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * Copyright (c) 2018 STMicroelectronics International N.V. 
  14:Src/main.c    ****   * All rights reserved.
  15:Src/main.c    ****   *
  16:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without 
  17:Src/main.c    ****   * modification, are permitted, provided that the following conditions are met:
  18:Src/main.c    ****   *
  19:Src/main.c    ****   * 1. Redistribution of source code must retain the above copyright notice, 
  20:Src/main.c    ****   *    this list of conditions and the following disclaimer.
  21:Src/main.c    ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  22:Src/main.c    ****   *    this list of conditions and the following disclaimer in the documentation
  23:Src/main.c    ****   *    and/or other materials provided with the distribution.
  24:Src/main.c    ****   * 3. Neither the name of STMicroelectronics nor the names of other 
  25:Src/main.c    ****   *    contributors to this software may be used to endorse or promote products 
  26:Src/main.c    ****   *    derived from this software without specific written permission.
  27:Src/main.c    ****   * 4. This software, including modifications and/or derivative works of this 
  28:Src/main.c    ****   *    software, must execute solely and exclusively on microcontroller or
  29:Src/main.c    ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  30:Src/main.c    ****   * 5. Redistribution and use of this software other than as permitted under 
ARM GAS  /tmp/cck8mfEh.s 			page 2


  31:Src/main.c    ****   *    this license is void and will automatically terminate your rights under 
  32:Src/main.c    ****   *    this license. 
  33:Src/main.c    ****   *
  34:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  35:Src/main.c    ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  36:Src/main.c    ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  37:Src/main.c    ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  38:Src/main.c    ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  39:Src/main.c    ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  40:Src/main.c    ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  41:Src/main.c    ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  42:Src/main.c    ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  43:Src/main.c    ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  44:Src/main.c    ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  45:Src/main.c    ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  46:Src/main.c    ****   *
  47:Src/main.c    ****   ******************************************************************************
  48:Src/main.c    ****   */
  49:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  50:Src/main.c    **** #include "main.h"
  51:Src/main.c    **** #include "stm32f4xx_hal.h"
  52:Src/main.c    **** #include "cmsis_os.h"
  53:Src/main.c    **** 
  54:Src/main.c    **** /* USER CODE BEGIN Includes */
  55:Src/main.c    **** 
  56:Src/main.c    **** /* USER CODE END Includes */
  57:Src/main.c    **** 
  58:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  59:Src/main.c    **** CAN_HandleTypeDef hcan1;
  60:Src/main.c    **** 
  61:Src/main.c    **** I2C_HandleTypeDef hi2c1;
  62:Src/main.c    **** 
  63:Src/main.c    **** SPI_HandleTypeDef hspi1;
  64:Src/main.c    **** 
  65:Src/main.c    **** UART_HandleTypeDef huart4;
  66:Src/main.c    **** 
  67:Src/main.c    **** osThreadId defaultTaskHandle;
  68:Src/main.c    **** 
  69:Src/main.c    **** /* USER CODE BEGIN PV */
  70:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  71:Src/main.c    **** osThreadId i2cTaskHandle;
  72:Src/main.c    **** osThreadId uartTaskHandle;
  73:Src/main.c    **** osThreadId canTaskHandle;
  74:Src/main.c    **** //osThreadId ledTaskHandle;
  75:Src/main.c    **** #define MY_I2C_SPEED 400000
  76:Src/main.c    **** #define I2C_ADDRESS_IMU (uint16_t)(0b1101000 << 1)
  77:Src/main.c    **** #define RED_LED GPIO_PIN_14
  78:Src/main.c    **** #define GREEN_LED GPIO_PIN_12
  79:Src/main.c    **** #define BLUE_LED GPIO_PIN_15
  80:Src/main.c    **** #define ORANGE_LED GPIO_PIN_13
  81:Src/main.c    **** uint8_t i2c_rx_buff_accel[6];
  82:Src/main.c    **** uint8_t i2c_tx_buff_accel[6];
  83:Src/main.c    **** uint8_t i2c_tx_buff_gyro[6];
  84:Src/main.c    **** uint8_t i2c_rx_buff_gyro[6];
  85:Src/main.c    **** int16_t i2c_accel[3];
  86:Src/main.c    **** /* USER CODE END PV */
  87:Src/main.c    **** 
ARM GAS  /tmp/cck8mfEh.s 			page 3


  88:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  89:Src/main.c    **** void SystemClock_Config(void);
  90:Src/main.c    **** static void MX_GPIO_Init(void);
  91:Src/main.c    **** static void MX_UART4_Init(void);
  92:Src/main.c    **** static void MX_SPI1_Init(void);
  93:Src/main.c    **** static void MX_I2C1_Init(void);
  94:Src/main.c    **** static void MX_CAN1_Init(void);
  95:Src/main.c    **** void StartDefaultTask(void const * argument);
  96:Src/main.c    **** 
  97:Src/main.c    **** /* USER CODE BEGIN PFP */
  98:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  99:Src/main.c    **** void write_i2c(void const *argument);
 100:Src/main.c    **** void uart_debug(uint8_t* arr, uint8_t buffsize);
 101:Src/main.c    **** void canTest(void const *argument);
 102:Src/main.c    **** /* USER CODE END PFP */
 103:Src/main.c    **** 
 104:Src/main.c    **** /* USER CODE BEGIN 0 */
 105:Src/main.c    **** void writei2c(void const *argument) {
 106:Src/main.c    ****   //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 107:Src/main.c    ****   HAL_StatusTypeDef status = HAL_OK;
 108:Src/main.c    ****   uint32_t prevWakeTime;
 109:Src/main.c    ****   uint32_t nextWakeTime;
 110:Src/main.c    ****   int addr = 59;
 111:Src/main.c    ****   int i;
 112:Src/main.c    ****   for (i = 0; i < 6; i++) {
 113:Src/main.c    ****     i2c_tx_buff_accel[i] = addr++;
 114:Src/main.c    ****     i2c_rx_buff_accel[i] = i;
 115:Src/main.c    ****   }
 116:Src/main.c    ****   //ACCEL_XOUT_H , ACCEL_XOUT_L
 117:Src/main.c    ****   while (1) {
 118:Src/main.c    ****     //prevWakeTime = osKernelSysTick();
 119:Src/main.c    ****     //nextWakeTime += (1000 * osKernelSysTick())
 120:Src/main.c    ****     //osDelayUntil(&prevWakeTime,5000);
 121:Src/main.c    ****     osDelay(3000);
 122:Src/main.c    ****     status = HAL_OK;
 123:Src/main.c    ****     for (i = 0; i < 6; i++) {
 124:Src/main.c    ****       status = HAL_I2C_Master_Transmit(&hi2c1,I2C_ADDRESS_IMU,i2c_tx_buff_accel+i,sizeof(uint8_t),1
 125:Src/main.c    **** 
 126:Src/main.c    ****       if (status != HAL_OK) {
 127:Src/main.c    ****         HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 128:Src/main.c    ****       }
 129:Src/main.c    ****       else {
 130:Src/main.c    ****         HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15, GPIO_PIN_RESET);
 131:Src/main.c    ****       }
 132:Src/main.c    ****       status = HAL_I2C_Master_Receive(&hi2c1,I2C_ADDRESS_IMU,i2c_rx_buff_accel+i,sizeof(uint8_t),10
 133:Src/main.c    ****     }
 134:Src/main.c    ****     //itoa
 135:Src/main.c    ****     //debug();
 136:Src/main.c    ****     i2c_accel[0] = (i2c_rx_buff_accel[0] << 8) + i2c_rx_buff_accel[1];
 137:Src/main.c    ****     i2c_accel[1] = (i2c_rx_buff_accel[2] << 8) + i2c_rx_buff_accel[3];
 138:Src/main.c    ****     i2c_accel[2] = (i2c_rx_buff_accel[4] << 8) + i2c_rx_buff_accel[5];
 139:Src/main.c    ****     //uart_debug(i2c_accel,sizeof(i2c_accel));
 140:Src/main.c    ****     //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 141:Src/main.c    ****     HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12); //GPIOD12 is green
 142:Src/main.c    ****   }
 143:Src/main.c    **** }
 144:Src/main.c    **** 
ARM GAS  /tmp/cck8mfEh.s 			page 4


 145:Src/main.c    **** void uartTest(void const *argument) {
 146:Src/main.c    ****   /*int i;
 147:Src/main.c    ****   int j = 0;
 148:Src/main.c    ****   for (i = 0; i < 9; i++) {
 149:Src/main.c    ****     i2c_rx_buff[i] = j;
 150:Src/main.c    ****     j += 1;
 151:Src/main.c    ****   }
 152:Src/main.c    **** 
 153:Src/main.c    ****   while (1) {
 154:Src/main.c    ****     HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 155:Src/main.c    ****     //uart_debug(i2c_rx_buff, sizeof(i2c_rx_buff));
 156:Src/main.c    ****     osDelay(1000);
 157:Src/main.c    ****   }*/
 158:Src/main.c    **** }
 159:Src/main.c    **** 
 160:Src/main.c    **** void canTest(void const *argument) {
 161:Src/main.c    ****   HAL_CAN_Start(&hcan1);
 162:Src/main.c    ****   HAL_CAN_WakeUp(&hcan1);
 163:Src/main.c    ****   uint8_t data[8] = {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};
 164:Src/main.c    ****   uint8_t data2[8] = {0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA};
 165:Src/main.c    ****   uint8_t* data_ptr;
 166:Src/main.c    ****   uint8_t data_sel = 0;
 167:Src/main.c    ****   CAN_TxHeaderTypeDef tx_buffer;
 168:Src/main.c    ****   CAN_TxHeaderTypeDef* tx_buffer_ptr = &tx_buffer;
 169:Src/main.c    ****   tx_buffer.StdId = 0x500;
 170:Src/main.c    ****   tx_buffer.ExtId = 0x500;
 171:Src/main.c    ****   tx_buffer.IDE = CAN_ID_STD;
 172:Src/main.c    ****   tx_buffer.RTR = CAN_RTR_DATA;
 173:Src/main.c    ****   tx_buffer.DLC = sizeof(data);
 174:Src/main.c    ****   HAL_StatusTypeDef status = HAL_OK;
 175:Src/main.c    ****   while (1) {
 176:Src/main.c    ****     //osDelay(50); //20Hz signal
 177:Src/main.c    ****     //osDelay(1); //1 kHz works for 8 bytes of data
 178:Src/main.c    ****     osDelay(4);
 179:Src/main.c    ****     status = HAL_OK;
 180:Src/main.c    ****     data_ptr = (data_sel) ? data : data2;
 181:Src/main.c    ****     data_sel ^= 0b1;
 182:Src/main.c    ****     while (HAL_CAN_IsTxMessagePending(&hcan1, (uint32_t)CAN_TX_MAILBOX0)) {
 183:Src/main.c    ****       //HAL_GPIO_WritePin(GPIOD, ORANGE_LED, GPIO_PIN_SET);
 184:Src/main.c    ****       //osDelay(100);
 185:Src/main.c    ****       //HAL_GPIO_WritePin(GPIOD, ORANGE_LED, GPIO_PIN_RESET);
 186:Src/main.c    ****     }
 187:Src/main.c    ****     status = HAL_CAN_AddTxMessage(&hcan1, tx_buffer_ptr, data_ptr, (uint32_t *)CAN_TX_MAILBOX0);
 188:Src/main.c    **** 
 189:Src/main.c    ****     if (status == HAL_OK) {
 190:Src/main.c    ****       HAL_GPIO_WritePin(GPIOD, GREEN_LED, GPIO_PIN_SET);
 191:Src/main.c    ****     }
 192:Src/main.c    ****     else {
 193:Src/main.c    ****       HAL_GPIO_WritePin(GPIOD, GREEN_LED, GPIO_PIN_RESET);
 194:Src/main.c    ****       HAL_GPIO_TogglePin(GPIOD, RED_LED);
 195:Src/main.c    ****       //unsigned char temparr[] = {"NOT WORKING"};
 196:Src/main.c    ****       //uart_debug(temparr, sizeof(temparr));
 197:Src/main.c    ****     }
 198:Src/main.c    **** 
 199:Src/main.c    ****   }
 200:Src/main.c    **** 
 201:Src/main.c    **** }
ARM GAS  /tmp/cck8mfEh.s 			page 5


 202:Src/main.c    **** 
 203:Src/main.c    **** void uart_debug(uint8_t* arr, uint8_t buffsize) {
 204:Src/main.c    ****   HAL_StatusTypeDef status = HAL_OK;
 205:Src/main.c    ****   status = HAL_UART_Transmit(&huart4, arr, buffsize, HAL_MAX_DELAY);
 206:Src/main.c    ****   if (status != HAL_OK) {
 207:Src/main.c    ****     //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 208:Src/main.c    ****   }
 209:Src/main.c    ****   else {
 210:Src/main.c    ****     //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 211:Src/main.c    ****   }
 212:Src/main.c    **** }
 213:Src/main.c    **** 
 214:Src/main.c    **** void Leds(void const *argument) {
 215:Src/main.c    **** 
 216:Src/main.c    ****   /*GPIO_InitTypeDef GPIO_InitStruct;
 217:Src/main.c    **** 
 218:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 219:Src/main.c    ****   //HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 220:Src/main.c    **** 
 221:Src/main.c    ****   //Configure GPIO pin Output Level 
 222:Src/main.c    ****   //HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 223:Src/main.c    **** 
 224:Src/main.c    ****   //Configure GPIO pin Output Level
 225:Src/main.c    ****   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12, GPIO_PIN_RESET);
 226:Src/main.c    **** 
 227:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12;
 228:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 229:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 230:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 231:Src/main.c    ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);*/
 232:Src/main.c    ****   uint32_t prevWakeTime;
 233:Src/main.c    ****   while (1) {
 234:Src/main.c    ****     //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12);
 235:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 236:Src/main.c    ****     osDelay(100);
 237:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 238:Src/main.c    ****     osDelay(100);
 239:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 240:Src/main.c    ****     osDelay(100);
 241:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 242:Src/main.c    ****     osDelay(100);
 243:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 244:Src/main.c    ****     osDelay(100);
 245:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 246:Src/main.c    ****     osDelay(100);
 247:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 248:Src/main.c    ****     osDelay(100);
 249:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 250:Src/main.c    **** 
 251:Src/main.c    ****     prevWakeTime = osKernelSysTick();
 252:Src/main.c    ****     osDelayUntil(&prevWakeTime, 50);
 253:Src/main.c    ****   }
 254:Src/main.c    **** }
 255:Src/main.c    **** /* USER CODE END 0 */
 256:Src/main.c    **** 
 257:Src/main.c    **** /**
 258:Src/main.c    ****   * @brief  The application entry point.
ARM GAS  /tmp/cck8mfEh.s 			page 6


 259:Src/main.c    ****   *
 260:Src/main.c    ****   * @retval None
 261:Src/main.c    ****   */
 262:Src/main.c    **** int main(void)
 263:Src/main.c    **** {
 264:Src/main.c    ****   /* USER CODE BEGIN 1 */
 265:Src/main.c    **** 
 266:Src/main.c    ****   /* USER CODE END 1 */
 267:Src/main.c    **** 
 268:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
 269:Src/main.c    **** 
 270:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 271:Src/main.c    ****   HAL_Init();
 272:Src/main.c    **** 
 273:Src/main.c    ****   /* USER CODE BEGIN Init */
 274:Src/main.c    **** 
 275:Src/main.c    ****   /* USER CODE END Init */
 276:Src/main.c    **** 
 277:Src/main.c    ****   /* Configure the system clock */
 278:Src/main.c    ****   SystemClock_Config();
 279:Src/main.c    **** 
 280:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 281:Src/main.c    **** 
 282:Src/main.c    ****   /* USER CODE END SysInit */
 283:Src/main.c    **** 
 284:Src/main.c    ****   /* Initialize all configured peripherals */
 285:Src/main.c    ****   MX_UART4_Init();
 286:Src/main.c    ****   MX_GPIO_Init();
 287:Src/main.c    ****   MX_SPI1_Init();
 288:Src/main.c    ****   MX_I2C1_Init();
 289:Src/main.c    ****   MX_CAN1_Init();
 290:Src/main.c    ****   /* USER CODE BEGIN 2 */
 291:Src/main.c    **** 
 292:Src/main.c    ****   /* USER CODE END 2 */
 293:Src/main.c    **** 
 294:Src/main.c    ****   /* USER CODE BEGIN RTOS_MUTEX */
 295:Src/main.c    ****   /* add mutexes, ... */
 296:Src/main.c    ****   /* USER CODE END RTOS_MUTEX */
 297:Src/main.c    **** 
 298:Src/main.c    ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 299:Src/main.c    ****   /* add semaphores, ... */
 300:Src/main.c    ****   /* USER CODE END RTOS_SEMAPHORES */
 301:Src/main.c    **** 
 302:Src/main.c    ****   /* USER CODE BEGIN RTOS_TIMERS */
 303:Src/main.c    ****   /* start timers, add new ones, ... */
 304:Src/main.c    ****   /* USER CODE END RTOS_TIMERS */
 305:Src/main.c    **** 
 306:Src/main.c    ****   /* Create the thread(s) */
 307:Src/main.c    ****   /* definition and creation of defaultTask */
 308:Src/main.c    ****   osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 309:Src/main.c    ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 310:Src/main.c    **** 
 311:Src/main.c    ****   /* USER CODE BEGIN RTOS_THREADS */
 312:Src/main.c    ****   /* add threads, ... */
 313:Src/main.c    ****   //osThreadDef(uartTask, uartTest, osPriorityAboveNormal, 1, 128);
 314:Src/main.c    ****   osThreadDef(canTask, canTest, osPriorityAboveNormal, 1, 128);
 315:Src/main.c    ****   canTaskHandle = osThreadCreate(osThread(canTask),NULL);
ARM GAS  /tmp/cck8mfEh.s 			page 7


 316:Src/main.c    ****   //uartTaskHandle = osThreadCreate(osThread(uartTask), NULL);
 317:Src/main.c    ****   //osThreadDef(i2cTask, writei2c, osPriorityAboveNormal,1,256);
 318:Src/main.c    ****   //i2cTaskHandle = osThreadCreate(osThread(i2cTask),NULL);
 319:Src/main.c    ****   //osThreadDef(ledTask, Leds, osPriorityAboveNormal, 1, 128);
 320:Src/main.c    ****   //ledTaskHandle = osThreadCreate(osThread(ledTask),NULL);
 321:Src/main.c    ****   /* USER CODE END RTOS_THREADS */
 322:Src/main.c    **** 
 323:Src/main.c    ****   /* USER CODE BEGIN RTOS_QUEUES */
 324:Src/main.c    ****   /* add queues, ... */
 325:Src/main.c    ****   /* USER CODE END RTOS_QUEUES */
 326:Src/main.c    ****  
 327:Src/main.c    **** 
 328:Src/main.c    ****   /* Start scheduler */
 329:Src/main.c    ****   osKernelStart();
 330:Src/main.c    ****   
 331:Src/main.c    ****   /* We should never get here as control is now taken by the scheduler */
 332:Src/main.c    **** 
 333:Src/main.c    ****   /* Infinite loop */
 334:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 335:Src/main.c    ****   while (1)
 336:Src/main.c    ****   {
 337:Src/main.c    **** 
 338:Src/main.c    ****   /* USER CODE END WHILE */
 339:Src/main.c    **** 
 340:Src/main.c    ****   /* USER CODE BEGIN 3 */
 341:Src/main.c    **** 
 342:Src/main.c    ****   }
 343:Src/main.c    ****   /* USER CODE END 3 */
 344:Src/main.c    **** 
 345:Src/main.c    **** }
 346:Src/main.c    **** 
 347:Src/main.c    **** /**
 348:Src/main.c    ****   * @brief System Clock Configuration
 349:Src/main.c    ****   * @retval None
 350:Src/main.c    ****   */
 351:Src/main.c    **** void SystemClock_Config(void)
 352:Src/main.c    **** {
 353:Src/main.c    **** 
 354:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 355:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 356:Src/main.c    **** 
 357:Src/main.c    ****     /**Configure the main internal regulator output voltage 
 358:Src/main.c    ****     */
 359:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 360:Src/main.c    **** 
 361:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 362:Src/main.c    **** 
 363:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 364:Src/main.c    ****     */
 365:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 366:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 367:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 368:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 369:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 370:Src/main.c    ****   {
 371:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 372:Src/main.c    ****   }
ARM GAS  /tmp/cck8mfEh.s 			page 8


 373:Src/main.c    **** 
 374:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 375:Src/main.c    ****     */
 376:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 377:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 378:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 379:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 380:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 381:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 382:Src/main.c    **** 
 383:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 384:Src/main.c    ****   {
 385:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 386:Src/main.c    ****   }
 387:Src/main.c    **** 
 388:Src/main.c    ****     /**Configure the Systick interrupt time 
 389:Src/main.c    ****     */
 390:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 391:Src/main.c    **** 
 392:Src/main.c    ****     /**Configure the Systick 
 393:Src/main.c    ****     */
 394:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 395:Src/main.c    **** 
 396:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 397:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 398:Src/main.c    **** }
 399:Src/main.c    **** 
 400:Src/main.c    **** /* CAN1 init function */
 401:Src/main.c    **** static void MX_CAN1_Init(void)
 402:Src/main.c    **** {
 403:Src/main.c    **** 
 404:Src/main.c    ****   hcan1.Instance = CAN1;
 405:Src/main.c    ****   hcan1.Init.Prescaler = 2;
 406:Src/main.c    ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 407:Src/main.c    ****   hcan1.Init.SyncJumpWidth = CAN_SJW_4TQ;
 408:Src/main.c    ****   hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 409:Src/main.c    ****   hcan1.Init.TimeSeg2 = CAN_BS2_6TQ;
 410:Src/main.c    ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 411:Src/main.c    ****   hcan1.Init.AutoBusOff = ENABLE;
 412:Src/main.c    ****   hcan1.Init.AutoWakeUp = DISABLE;
 413:Src/main.c    ****   hcan1.Init.AutoRetransmission = DISABLE;
 414:Src/main.c    ****   hcan1.Init.ReceiveFifoLocked = ENABLE;
 415:Src/main.c    ****   hcan1.Init.TransmitFifoPriority = ENABLE;
 416:Src/main.c    ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 417:Src/main.c    ****   {
 418:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 419:Src/main.c    ****   }
 420:Src/main.c    **** 
 421:Src/main.c    **** }
 422:Src/main.c    **** 
 423:Src/main.c    **** /* I2C1 init function */
 424:Src/main.c    **** static void MX_I2C1_Init(void)
 425:Src/main.c    **** {
 426:Src/main.c    **** 
 427:Src/main.c    ****   hi2c1.Instance = I2C1;
 428:Src/main.c    ****   hi2c1.Init.ClockSpeed = 100000;
 429:Src/main.c    ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
ARM GAS  /tmp/cck8mfEh.s 			page 9


 430:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 0;
 431:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 432:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 433:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 434:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 435:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 436:Src/main.c    ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 437:Src/main.c    ****   {
 438:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 439:Src/main.c    ****   }
 440:Src/main.c    **** 
 441:Src/main.c    **** }
 442:Src/main.c    **** 
 443:Src/main.c    **** /* SPI1 init function */
 444:Src/main.c    **** static void MX_SPI1_Init(void)
 445:Src/main.c    **** {
 446:Src/main.c    **** 
 447:Src/main.c    ****   /* SPI1 parameter configuration*/
 448:Src/main.c    ****   hspi1.Instance = SPI1;
 449:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 450:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 451:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 452:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 453:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 454:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 455:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 456:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 457:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 458:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 459:Src/main.c    ****   hspi1.Init.CRCPolynomial = 10;
 460:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 461:Src/main.c    ****   {
 462:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 463:Src/main.c    ****   }
 464:Src/main.c    **** 
 465:Src/main.c    **** }
 466:Src/main.c    **** 
 467:Src/main.c    **** /* UART4 init function */
 468:Src/main.c    **** static void MX_UART4_Init(void)
 469:Src/main.c    **** {
 470:Src/main.c    **** 
 471:Src/main.c    ****   huart4.Instance = UART4;
 472:Src/main.c    ****   huart4.Init.BaudRate = 115200;
 473:Src/main.c    ****   huart4.Init.WordLength = UART_WORDLENGTH_8B;
 474:Src/main.c    ****   huart4.Init.StopBits = UART_STOPBITS_1;
 475:Src/main.c    ****   huart4.Init.Parity = UART_PARITY_NONE;
 476:Src/main.c    ****   huart4.Init.Mode = UART_MODE_TX_RX;
 477:Src/main.c    ****   huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 478:Src/main.c    ****   huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 479:Src/main.c    ****   if (HAL_UART_Init(&huart4) != HAL_OK)
 480:Src/main.c    ****   {
 481:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 482:Src/main.c    ****   }
 483:Src/main.c    **** 
 484:Src/main.c    **** }
 485:Src/main.c    **** 
 486:Src/main.c    **** /** Configure pins as 
ARM GAS  /tmp/cck8mfEh.s 			page 10


 487:Src/main.c    ****         * Analog 
 488:Src/main.c    ****         * Input 
 489:Src/main.c    ****         * Output
 490:Src/main.c    ****         * EVENT_OUT
 491:Src/main.c    ****         * EXTI
 492:Src/main.c    **** */
 493:Src/main.c    **** static void MX_GPIO_Init(void)
 494:Src/main.c    **** {
 495:Src/main.c    **** 
 496:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct;
 497:Src/main.c    **** 
 498:Src/main.c    ****   /* GPIO Ports Clock Enable */
 499:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 500:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 501:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 502:Src/main.c    **** 
 503:Src/main.c    ****   /*Configure GPIO pin Output Level */
 504:Src/main.c    ****   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 505:Src/main.c    **** 
 506:Src/main.c    ****   /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
 507:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 508:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 509:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 510:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 511:Src/main.c    ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 512:Src/main.c    **** 
 513:Src/main.c    **** 
 514:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 515:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 516:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 517:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 518:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 519:Src/main.c    **** 
 520:Src/main.c    **** }
 521:Src/main.c    **** 
 522:Src/main.c    **** /* USER CODE BEGIN 4 */
 523:Src/main.c    **** 
 524:Src/main.c    **** /* USER CODE END 4 */
 525:Src/main.c    **** 
 526:Src/main.c    **** /* USER CODE BEGIN Header_StartDefaultTask */
 527:Src/main.c    **** /**
 528:Src/main.c    ****   * @brief  Function implementing the defaultTask thread.
 529:Src/main.c    ****   * @param  argument: Not used 
 530:Src/main.c    ****   * @retval None
 531:Src/main.c    ****   */
 532:Src/main.c    **** /* USER CODE END Header_StartDefaultTask */
 533:Src/main.c    **** void StartDefaultTask(void const * argument)
 534:Src/main.c    **** {
  29              		.loc 1 534 0
  30              		.cfi_startproc
  31              		@ Volatile: function does not return.
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              	.LVL0:
  35 0000 08B5     		push	{r3, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cck8mfEh.s 			page 11


  38              		.cfi_offset 3, -8
  39              		.cfi_offset 14, -4
  40              	.LVL1:
  41              	.L2:
 535:Src/main.c    **** 
 536:Src/main.c    ****   /* USER CODE BEGIN 5 */
 537:Src/main.c    ****   /* Infinite loop */
 538:Src/main.c    ****   for(;;)
 539:Src/main.c    ****   {
 540:Src/main.c    ****     osDelay(1);
  42              		.loc 1 540 0 discriminator 1
  43 0002 0120     		movs	r0, #1
  44 0004 FFF7FEFF 		bl	osDelay
  45              	.LVL2:
 541:Src/main.c    ****   }
  46              		.loc 1 541 0 discriminator 1
  47 0008 FBE7     		b	.L2
  48              		.cfi_endproc
  49              	.LFE140:
  51 000a 00BF     		.section	.text.canTest,"ax",%progbits
  52              		.align	2
  53              		.global	canTest
  54              		.thumb
  55              		.thumb_func
  57              	canTest:
  58              	.LFB130:
 160:Src/main.c    ****   HAL_CAN_Start(&hcan1);
  59              		.loc 1 160 0
  60              		.cfi_startproc
  61              		@ args = 0, pretend = 0, frame = 40
  62              		@ frame_needed = 0, uses_anonymous_args = 0
  63              	.LVL3:
  64 0000 30B5     		push	{r4, r5, lr}
  65              	.LCFI1:
  66              		.cfi_def_cfa_offset 12
  67              		.cfi_offset 4, -12
  68              		.cfi_offset 5, -8
  69              		.cfi_offset 14, -4
  70 0002 8BB0     		sub	sp, sp, #44
  71              	.LCFI2:
  72              		.cfi_def_cfa_offset 56
 161:Src/main.c    ****   HAL_CAN_WakeUp(&hcan1);
  73              		.loc 1 161 0
  74 0004 214C     		ldr	r4, .L12
  75 0006 2046     		mov	r0, r4
  76              	.LVL4:
  77 0008 FFF7FEFF 		bl	HAL_CAN_Start
  78              	.LVL5:
 162:Src/main.c    ****   uint8_t data[8] = {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};
  79              		.loc 1 162 0
  80 000c 2046     		mov	r0, r4
  81 000e FFF7FEFF 		bl	HAL_CAN_WakeUp
  82              	.LVL6:
 163:Src/main.c    ****   uint8_t data2[8] = {0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA};
  83              		.loc 1 163 0
  84 0012 1F4B     		ldr	r3, .L12+4
  85 0014 08AA     		add	r2, sp, #32
ARM GAS  /tmp/cck8mfEh.s 			page 12


  86 0016 1868     		ldr	r0, [r3]	@ unaligned
  87 0018 5968     		ldr	r1, [r3, #4]	@ unaligned
  88 001a 03C2     		stmia	r2!, {r0, r1}
 164:Src/main.c    ****   uint8_t* data_ptr;
  89              		.loc 1 164 0
  90 001c 06AA     		add	r2, sp, #24
  91 001e 53F8080F 		ldr	r0, [r3, #8]!	@ unaligned
  92 0022 5968     		ldr	r1, [r3, #4]	@ unaligned
  93 0024 03C2     		stmia	r2!, {r0, r1}
  94              	.LVL7:
 169:Src/main.c    ****   tx_buffer.ExtId = 0x500;
  95              		.loc 1 169 0
  96 0026 4FF4A063 		mov	r3, #1280
  97 002a 0093     		str	r3, [sp]
 170:Src/main.c    ****   tx_buffer.IDE = CAN_ID_STD;
  98              		.loc 1 170 0
  99 002c 0193     		str	r3, [sp, #4]
 171:Src/main.c    ****   tx_buffer.RTR = CAN_RTR_DATA;
 100              		.loc 1 171 0
 101 002e 0024     		movs	r4, #0
 102 0030 0294     		str	r4, [sp, #8]
 172:Src/main.c    ****   tx_buffer.DLC = sizeof(data);
 103              		.loc 1 172 0
 104 0032 0394     		str	r4, [sp, #12]
 173:Src/main.c    ****   HAL_StatusTypeDef status = HAL_OK;
 105              		.loc 1 173 0
 106 0034 0823     		movs	r3, #8
 107 0036 0493     		str	r3, [sp, #16]
 108              	.LVL8:
 109              	.L5:
 178:Src/main.c    ****     status = HAL_OK;
 110              		.loc 1 178 0
 111 0038 0420     		movs	r0, #4
 112 003a FFF7FEFF 		bl	osDelay
 113              	.LVL9:
 180:Src/main.c    ****     data_sel ^= 0b1;
 114              		.loc 1 180 0
 115 003e 0CB1     		cbz	r4, .L10
 116 0040 08AD     		add	r5, sp, #32
 117 0042 00E0     		b	.L6
 118              	.L10:
 119 0044 06AD     		add	r5, sp, #24
 120              	.L6:
 121              	.LVL10:
 181:Src/main.c    ****     while (HAL_CAN_IsTxMessagePending(&hcan1, (uint32_t)CAN_TX_MAILBOX0)) {
 122              		.loc 1 181 0 discriminator 4
 123 0046 84F00104 		eor	r4, r4, #1
 124              	.LVL11:
 125              	.L7:
 182:Src/main.c    ****       //HAL_GPIO_WritePin(GPIOD, ORANGE_LED, GPIO_PIN_SET);
 126              		.loc 1 182 0 discriminator 1
 127 004a 1048     		ldr	r0, .L12
 128 004c 0121     		movs	r1, #1
 129 004e FFF7FEFF 		bl	HAL_CAN_IsTxMessagePending
 130              	.LVL12:
 131 0052 0028     		cmp	r0, #0
 132 0054 F9D1     		bne	.L7
ARM GAS  /tmp/cck8mfEh.s 			page 13


 187:Src/main.c    **** 
 133              		.loc 1 187 0
 134 0056 0D48     		ldr	r0, .L12
 135 0058 6946     		mov	r1, sp
 136 005a 2A46     		mov	r2, r5
 137 005c 0123     		movs	r3, #1
 138 005e FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 139              	.LVL13:
 189:Src/main.c    ****       HAL_GPIO_WritePin(GPIOD, GREEN_LED, GPIO_PIN_SET);
 140              		.loc 1 189 0
 141 0062 30B9     		cbnz	r0, .L8
 190:Src/main.c    ****     }
 142              		.loc 1 190 0
 143 0064 0B48     		ldr	r0, .L12+8
 144              	.LVL14:
 145 0066 4FF48051 		mov	r1, #4096
 146 006a 0122     		movs	r2, #1
 147 006c FFF7FEFF 		bl	HAL_GPIO_WritePin
 148              	.LVL15:
 149 0070 E2E7     		b	.L5
 150              	.LVL16:
 151              	.L8:
 193:Src/main.c    ****       HAL_GPIO_TogglePin(GPIOD, RED_LED);
 152              		.loc 1 193 0
 153 0072 084D     		ldr	r5, .L12+8
 154              	.LVL17:
 155 0074 2846     		mov	r0, r5
 156              	.LVL18:
 157 0076 4FF48051 		mov	r1, #4096
 158 007a 0022     		movs	r2, #0
 159 007c FFF7FEFF 		bl	HAL_GPIO_WritePin
 160              	.LVL19:
 194:Src/main.c    ****       //unsigned char temparr[] = {"NOT WORKING"};
 161              		.loc 1 194 0
 162 0080 2846     		mov	r0, r5
 163 0082 4FF48041 		mov	r1, #16384
 164 0086 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 165              	.LVL20:
 166 008a D5E7     		b	.L5
 167              	.L13:
 168              		.align	2
 169              	.L12:
 170 008c 00000000 		.word	hcan1
 171 0090 00000000 		.word	.LANCHOR0
 172 0094 000C0240 		.word	1073875968
 173              		.cfi_endproc
 174              	.LFE130:
 176              		.section	.text.MX_GPIO_Init,"ax",%progbits
 177              		.align	2
 178              		.thumb
 179              		.thumb_func
 181              	MX_GPIO_Init:
 182              	.LFB139:
 494:Src/main.c    **** 
 183              		.loc 1 494 0
 184              		.cfi_startproc
 185              		@ args = 0, pretend = 0, frame = 32
ARM GAS  /tmp/cck8mfEh.s 			page 14


 186              		@ frame_needed = 0, uses_anonymous_args = 0
 187 0000 30B5     		push	{r4, r5, lr}
 188              	.LCFI3:
 189              		.cfi_def_cfa_offset 12
 190              		.cfi_offset 4, -12
 191              		.cfi_offset 5, -8
 192              		.cfi_offset 14, -4
 193 0002 89B0     		sub	sp, sp, #36
 194              	.LCFI4:
 195              		.cfi_def_cfa_offset 48
 196              	.LBB2:
 499:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 197              		.loc 1 499 0
 198 0004 0024     		movs	r4, #0
 199 0006 0094     		str	r4, [sp]
 200 0008 1E4B     		ldr	r3, .L16
 201 000a 1A6B     		ldr	r2, [r3, #48]
 202 000c 42F00102 		orr	r2, r2, #1
 203 0010 1A63     		str	r2, [r3, #48]
 204 0012 1A6B     		ldr	r2, [r3, #48]
 205 0014 02F00102 		and	r2, r2, #1
 206 0018 0092     		str	r2, [sp]
 207 001a 009A     		ldr	r2, [sp]
 208              	.LBE2:
 209              	.LBB3:
 500:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 210              		.loc 1 500 0
 211 001c 0194     		str	r4, [sp, #4]
 212 001e 1A6B     		ldr	r2, [r3, #48]
 213 0020 42F00802 		orr	r2, r2, #8
 214 0024 1A63     		str	r2, [r3, #48]
 215 0026 1A6B     		ldr	r2, [r3, #48]
 216 0028 02F00802 		and	r2, r2, #8
 217 002c 0192     		str	r2, [sp, #4]
 218 002e 019A     		ldr	r2, [sp, #4]
 219              	.LBE3:
 220              	.LBB4:
 501:Src/main.c    **** 
 221              		.loc 1 501 0
 222 0030 0294     		str	r4, [sp, #8]
 223 0032 1A6B     		ldr	r2, [r3, #48]
 224 0034 42F00202 		orr	r2, r2, #2
 225 0038 1A63     		str	r2, [r3, #48]
 226 003a 1B6B     		ldr	r3, [r3, #48]
 227 003c 03F00203 		and	r3, r3, #2
 228 0040 0293     		str	r3, [sp, #8]
 229 0042 029B     		ldr	r3, [sp, #8]
 230              	.LBE4:
 504:Src/main.c    **** 
 231              		.loc 1 504 0
 232 0044 104D     		ldr	r5, .L16+4
 233 0046 2846     		mov	r0, r5
 234 0048 4FF47041 		mov	r1, #61440
 235 004c 2246     		mov	r2, r4
 236 004e FFF7FEFF 		bl	HAL_GPIO_WritePin
 237              	.LVL21:
 507:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
ARM GAS  /tmp/cck8mfEh.s 			page 15


 238              		.loc 1 507 0
 239 0052 4FF47043 		mov	r3, #61440
 240 0056 0393     		str	r3, [sp, #12]
 508:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 241              		.loc 1 508 0
 242 0058 0123     		movs	r3, #1
 243 005a 0493     		str	r3, [sp, #16]
 509:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 244              		.loc 1 509 0
 245 005c 0594     		str	r4, [sp, #20]
 510:Src/main.c    ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 246              		.loc 1 510 0
 247 005e 0694     		str	r4, [sp, #24]
 511:Src/main.c    **** 
 248              		.loc 1 511 0
 249 0060 2846     		mov	r0, r5
 250 0062 03A9     		add	r1, sp, #12
 251 0064 FFF7FEFF 		bl	HAL_GPIO_Init
 252              	.LVL22:
 514:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 253              		.loc 1 514 0
 254 0068 4FF44073 		mov	r3, #768
 255 006c 0393     		str	r3, [sp, #12]
 515:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 256              		.loc 1 515 0
 257 006e 0223     		movs	r3, #2
 258 0070 0493     		str	r3, [sp, #16]
 516:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 259              		.loc 1 516 0
 260 0072 0594     		str	r4, [sp, #20]
 517:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 261              		.loc 1 517 0
 262 0074 0323     		movs	r3, #3
 263 0076 0693     		str	r3, [sp, #24]
 518:Src/main.c    **** 
 264              		.loc 1 518 0
 265 0078 0448     		ldr	r0, .L16+8
 266 007a 03A9     		add	r1, sp, #12
 267 007c FFF7FEFF 		bl	HAL_GPIO_Init
 268              	.LVL23:
 520:Src/main.c    **** 
 269              		.loc 1 520 0
 270 0080 09B0     		add	sp, sp, #36
 271              	.LCFI5:
 272              		.cfi_def_cfa_offset 12
 273              		@ sp needed
 274 0082 30BD     		pop	{r4, r5, pc}
 275              	.L17:
 276              		.align	2
 277              	.L16:
 278 0084 00380240 		.word	1073887232
 279 0088 000C0240 		.word	1073875968
 280 008c 00040240 		.word	1073873920
 281              		.cfi_endproc
 282              	.LFE139:
 284              		.section	.text.writei2c,"ax",%progbits
 285              		.align	2
ARM GAS  /tmp/cck8mfEh.s 			page 16


 286              		.global	writei2c
 287              		.thumb
 288              		.thumb_func
 290              	writei2c:
 291              	.LFB128:
 105:Src/main.c    ****   //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 292              		.loc 1 105 0
 293              		.cfi_startproc
 294              		@ args = 0, pretend = 0, frame = 0
 295              		@ frame_needed = 0, uses_anonymous_args = 0
 296              	.LVL24:
 112:Src/main.c    ****     i2c_tx_buff_accel[i] = addr++;
 297              		.loc 1 112 0
 298 0000 0023     		movs	r3, #0
 110:Src/main.c    ****   int i;
 299              		.loc 1 110 0
 300 0002 3B22     		movs	r2, #59
 112:Src/main.c    ****     i2c_tx_buff_accel[i] = addr++;
 301              		.loc 1 112 0
 302 0004 05E0     		b	.L19
 303              	.LVL25:
 304              	.L20:
 113:Src/main.c    ****     i2c_rx_buff_accel[i] = i;
 305              		.loc 1 113 0 discriminator 3
 306 0006 2549     		ldr	r1, .L27
 307 0008 CA54     		strb	r2, [r1, r3]
 114:Src/main.c    ****   }
 308              		.loc 1 114 0 discriminator 3
 309 000a 2549     		ldr	r1, .L27+4
 310 000c CB54     		strb	r3, [r1, r3]
 112:Src/main.c    ****     i2c_tx_buff_accel[i] = addr++;
 311              		.loc 1 112 0 discriminator 3
 312 000e 0133     		adds	r3, r3, #1
 313              	.LVL26:
 113:Src/main.c    ****     i2c_rx_buff_accel[i] = i;
 314              		.loc 1 113 0 discriminator 3
 315 0010 0132     		adds	r2, r2, #1
 316              	.LVL27:
 317              	.L19:
 112:Src/main.c    ****     i2c_tx_buff_accel[i] = addr++;
 318              		.loc 1 112 0 discriminator 1
 319 0012 052B     		cmp	r3, #5
 320 0014 F7DD     		ble	.L20
 105:Src/main.c    ****   //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 321              		.loc 1 105 0
 322 0016 30B5     		push	{r4, r5, lr}
 323              	.LCFI6:
 324              		.cfi_def_cfa_offset 12
 325              		.cfi_offset 4, -12
 326              		.cfi_offset 5, -8
 327              		.cfi_offset 14, -4
 328 0018 83B0     		sub	sp, sp, #12
 329              	.LCFI7:
 330              		.cfi_def_cfa_offset 24
 331              	.LVL28:
 332              	.L25:
 121:Src/main.c    ****     status = HAL_OK;
ARM GAS  /tmp/cck8mfEh.s 			page 17


 333              		.loc 1 121 0
 334 001a 40F6B830 		movw	r0, #3000
 335 001e FFF7FEFF 		bl	osDelay
 336              	.LVL29:
 123:Src/main.c    ****       status = HAL_I2C_Master_Transmit(&hi2c1,I2C_ADDRESS_IMU,i2c_tx_buff_accel+i,sizeof(uint8_t),1
 337              		.loc 1 123 0
 338 0022 0024     		movs	r4, #0
 339 0024 21E0     		b	.L21
 340              	.LVL30:
 341              	.L24:
 124:Src/main.c    **** 
 342              		.loc 1 124 0
 343 0026 2546     		mov	r5, r4
 344 0028 0A23     		movs	r3, #10
 345 002a 0093     		str	r3, [sp]
 346 002c 1D48     		ldr	r0, .L27+8
 347 002e D021     		movs	r1, #208
 348 0030 1A4A     		ldr	r2, .L27
 349 0032 2244     		add	r2, r2, r4
 350 0034 0123     		movs	r3, #1
 351 0036 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 352              	.LVL31:
 126:Src/main.c    ****         HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 353              		.loc 1 126 0
 354 003a 30B1     		cbz	r0, .L22
 127:Src/main.c    ****       }
 355              		.loc 1 127 0
 356 003c 1A48     		ldr	r0, .L27+12
 357              	.LVL32:
 358 003e 4FF40041 		mov	r1, #32768
 359 0042 0122     		movs	r2, #1
 360 0044 FFF7FEFF 		bl	HAL_GPIO_WritePin
 361              	.LVL33:
 362 0048 05E0     		b	.L23
 363              	.LVL34:
 364              	.L22:
 130:Src/main.c    ****       }
 365              		.loc 1 130 0
 366 004a 1748     		ldr	r0, .L27+12
 367              	.LVL35:
 368 004c 4FF40041 		mov	r1, #32768
 369 0050 0022     		movs	r2, #0
 370 0052 FFF7FEFF 		bl	HAL_GPIO_WritePin
 371              	.LVL36:
 372              	.L23:
 132:Src/main.c    ****     }
 373              		.loc 1 132 0 discriminator 2
 374 0056 0A23     		movs	r3, #10
 375 0058 0093     		str	r3, [sp]
 376 005a 1248     		ldr	r0, .L27+8
 377 005c D021     		movs	r1, #208
 378 005e 104A     		ldr	r2, .L27+4
 379 0060 2A44     		add	r2, r2, r5
 380 0062 0123     		movs	r3, #1
 381 0064 FFF7FEFF 		bl	HAL_I2C_Master_Receive
 382              	.LVL37:
 123:Src/main.c    ****       status = HAL_I2C_Master_Transmit(&hi2c1,I2C_ADDRESS_IMU,i2c_tx_buff_accel+i,sizeof(uint8_t),1
ARM GAS  /tmp/cck8mfEh.s 			page 18


 383              		.loc 1 123 0 discriminator 2
 384 0068 0134     		adds	r4, r4, #1
 385              	.LVL38:
 386              	.L21:
 123:Src/main.c    ****       status = HAL_I2C_Master_Transmit(&hi2c1,I2C_ADDRESS_IMU,i2c_tx_buff_accel+i,sizeof(uint8_t),1
 387              		.loc 1 123 0 is_stmt 0 discriminator 1
 388 006a 052C     		cmp	r4, #5
 389 006c DBDD     		ble	.L24
 136:Src/main.c    ****     i2c_accel[1] = (i2c_rx_buff_accel[2] << 8) + i2c_rx_buff_accel[3];
 390              		.loc 1 136 0 is_stmt 1
 391 006e 0C4B     		ldr	r3, .L27+4
 392 0070 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 393 0072 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
 394 0074 0D4A     		ldr	r2, .L27+16
 395 0076 01EB0021 		add	r1, r1, r0, lsl #8
 396 007a 1180     		strh	r1, [r2]	@ movhi
 137:Src/main.c    ****     i2c_accel[2] = (i2c_rx_buff_accel[4] << 8) + i2c_rx_buff_accel[5];
 397              		.loc 1 137 0
 398 007c 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 399 007e D978     		ldrb	r1, [r3, #3]	@ zero_extendqisi2
 400 0080 01EB0021 		add	r1, r1, r0, lsl #8
 401 0084 5180     		strh	r1, [r2, #2]	@ movhi
 138:Src/main.c    ****     //uart_debug(i2c_accel,sizeof(i2c_accel));
 402              		.loc 1 138 0
 403 0086 1979     		ldrb	r1, [r3, #4]	@ zero_extendqisi2
 404 0088 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 405 008a 03EB0123 		add	r3, r3, r1, lsl #8
 406 008e 9380     		strh	r3, [r2, #4]	@ movhi
 141:Src/main.c    ****   }
 407              		.loc 1 141 0
 408 0090 0548     		ldr	r0, .L27+12
 409 0092 4FF48051 		mov	r1, #4096
 410 0096 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 411              	.LVL39:
 142:Src/main.c    **** }
 412              		.loc 1 142 0
 413 009a BEE7     		b	.L25
 414              	.L28:
 415              		.align	2
 416              	.L27:
 417 009c 00000000 		.word	i2c_tx_buff_accel
 418 00a0 00000000 		.word	i2c_rx_buff_accel
 419 00a4 00000000 		.word	hi2c1
 420 00a8 000C0240 		.word	1073875968
 421 00ac 00000000 		.word	i2c_accel
 422              		.cfi_endproc
 423              	.LFE128:
 425              		.section	.text.uartTest,"ax",%progbits
 426              		.align	2
 427              		.global	uartTest
 428              		.thumb
 429              		.thumb_func
 431              	uartTest:
 432              	.LFB129:
 145:Src/main.c    ****   /*int i;
 433              		.loc 1 145 0
 434              		.cfi_startproc
ARM GAS  /tmp/cck8mfEh.s 			page 19


 435              		@ args = 0, pretend = 0, frame = 0
 436              		@ frame_needed = 0, uses_anonymous_args = 0
 437              		@ link register save eliminated.
 438              	.LVL40:
 439 0000 7047     		bx	lr
 440              		.cfi_endproc
 441              	.LFE129:
 443 0002 00BF     		.section	.text.uart_debug,"ax",%progbits
 444              		.align	2
 445              		.global	uart_debug
 446              		.thumb
 447              		.thumb_func
 449              	uart_debug:
 450              	.LFB131:
 203:Src/main.c    ****   HAL_StatusTypeDef status = HAL_OK;
 451              		.loc 1 203 0
 452              		.cfi_startproc
 453              		@ args = 0, pretend = 0, frame = 0
 454              		@ frame_needed = 0, uses_anonymous_args = 0
 455              	.LVL41:
 203:Src/main.c    ****   HAL_StatusTypeDef status = HAL_OK;
 456              		.loc 1 203 0
 457 0000 08B5     		push	{r3, lr}
 458              	.LCFI8:
 459              		.cfi_def_cfa_offset 8
 460              		.cfi_offset 3, -8
 461              		.cfi_offset 14, -4
 462 0002 0346     		mov	r3, r0
 463              	.LVL42:
 205:Src/main.c    ****   if (status != HAL_OK) {
 464              		.loc 1 205 0
 465 0004 0A46     		mov	r2, r1
 466 0006 0348     		ldr	r0, .L32
 467              	.LVL43:
 468 0008 1946     		mov	r1, r3
 469              	.LVL44:
 470 000a 4FF0FF33 		mov	r3, #-1
 471              	.LVL45:
 472 000e FFF7FEFF 		bl	HAL_UART_Transmit
 473              	.LVL46:
 474 0012 08BD     		pop	{r3, pc}
 475              	.L33:
 476              		.align	2
 477              	.L32:
 478 0014 00000000 		.word	huart4
 479              		.cfi_endproc
 480              	.LFE131:
 482              		.section	.text.Leds,"ax",%progbits
 483              		.align	2
 484              		.global	Leds
 485              		.thumb
 486              		.thumb_func
 488              	Leds:
 489              	.LFB132:
 214:Src/main.c    **** 
 490              		.loc 1 214 0
 491              		.cfi_startproc
ARM GAS  /tmp/cck8mfEh.s 			page 20


 492              		@ args = 0, pretend = 0, frame = 8
 493              		@ frame_needed = 0, uses_anonymous_args = 0
 494              	.LVL47:
 495 0000 10B5     		push	{r4, lr}
 496              	.LCFI9:
 497              		.cfi_def_cfa_offset 8
 498              		.cfi_offset 4, -8
 499              		.cfi_offset 14, -4
 500 0002 82B0     		sub	sp, sp, #8
 501              	.LCFI10:
 502              		.cfi_def_cfa_offset 16
 503              	.LVL48:
 504              	.L35:
 235:Src/main.c    ****     osDelay(100);
 505              		.loc 1 235 0 discriminator 1
 506 0004 274C     		ldr	r4, .L37
 507 0006 2046     		mov	r0, r4
 508 0008 4FF40041 		mov	r1, #32768
 509 000c 0122     		movs	r2, #1
 510 000e FFF7FEFF 		bl	HAL_GPIO_WritePin
 511              	.LVL49:
 236:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 512              		.loc 1 236 0 discriminator 1
 513 0012 6420     		movs	r0, #100
 514 0014 FFF7FEFF 		bl	osDelay
 515              	.LVL50:
 237:Src/main.c    ****     osDelay(100);
 516              		.loc 1 237 0 discriminator 1
 517 0018 2046     		mov	r0, r4
 518 001a 4FF40041 		mov	r1, #32768
 519 001e 0022     		movs	r2, #0
 520 0020 FFF7FEFF 		bl	HAL_GPIO_WritePin
 521              	.LVL51:
 238:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 522              		.loc 1 238 0 discriminator 1
 523 0024 6420     		movs	r0, #100
 524 0026 FFF7FEFF 		bl	osDelay
 525              	.LVL52:
 239:Src/main.c    ****     osDelay(100);
 526              		.loc 1 239 0 discriminator 1
 527 002a 2046     		mov	r0, r4
 528 002c 4FF48051 		mov	r1, #4096
 529 0030 0122     		movs	r2, #1
 530 0032 FFF7FEFF 		bl	HAL_GPIO_WritePin
 531              	.LVL53:
 240:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 532              		.loc 1 240 0 discriminator 1
 533 0036 6420     		movs	r0, #100
 534 0038 FFF7FEFF 		bl	osDelay
 535              	.LVL54:
 241:Src/main.c    ****     osDelay(100);
 536              		.loc 1 241 0 discriminator 1
 537 003c 2046     		mov	r0, r4
 538 003e 4FF48051 		mov	r1, #4096
 539 0042 0022     		movs	r2, #0
 540 0044 FFF7FEFF 		bl	HAL_GPIO_WritePin
 541              	.LVL55:
ARM GAS  /tmp/cck8mfEh.s 			page 21


 242:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 542              		.loc 1 242 0 discriminator 1
 543 0048 6420     		movs	r0, #100
 544 004a FFF7FEFF 		bl	osDelay
 545              	.LVL56:
 243:Src/main.c    ****     osDelay(100);
 546              		.loc 1 243 0 discriminator 1
 547 004e 2046     		mov	r0, r4
 548 0050 4FF40051 		mov	r1, #8192
 549 0054 0122     		movs	r2, #1
 550 0056 FFF7FEFF 		bl	HAL_GPIO_WritePin
 551              	.LVL57:
 244:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 552              		.loc 1 244 0 discriminator 1
 553 005a 6420     		movs	r0, #100
 554 005c FFF7FEFF 		bl	osDelay
 555              	.LVL58:
 245:Src/main.c    ****     osDelay(100);
 556              		.loc 1 245 0 discriminator 1
 557 0060 2046     		mov	r0, r4
 558 0062 4FF40051 		mov	r1, #8192
 559 0066 0022     		movs	r2, #0
 560 0068 FFF7FEFF 		bl	HAL_GPIO_WritePin
 561              	.LVL59:
 246:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 562              		.loc 1 246 0 discriminator 1
 563 006c 6420     		movs	r0, #100
 564 006e FFF7FEFF 		bl	osDelay
 565              	.LVL60:
 247:Src/main.c    ****     osDelay(100);
 566              		.loc 1 247 0 discriminator 1
 567 0072 2046     		mov	r0, r4
 568 0074 4FF48041 		mov	r1, #16384
 569 0078 0122     		movs	r2, #1
 570 007a FFF7FEFF 		bl	HAL_GPIO_WritePin
 571              	.LVL61:
 248:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 572              		.loc 1 248 0 discriminator 1
 573 007e 6420     		movs	r0, #100
 574 0080 FFF7FEFF 		bl	osDelay
 575              	.LVL62:
 249:Src/main.c    **** 
 576              		.loc 1 249 0 discriminator 1
 577 0084 2046     		mov	r0, r4
 578 0086 4FF48041 		mov	r1, #16384
 579 008a 0022     		movs	r2, #0
 580 008c FFF7FEFF 		bl	HAL_GPIO_WritePin
 581              	.LVL63:
 251:Src/main.c    ****     osDelayUntil(&prevWakeTime, 50);
 582              		.loc 1 251 0 discriminator 1
 583 0090 FFF7FEFF 		bl	osKernelSysTick
 584              	.LVL64:
 585 0094 02AB     		add	r3, sp, #8
 586 0096 43F8040D 		str	r0, [r3, #-4]!
 252:Src/main.c    ****   }
 587              		.loc 1 252 0 discriminator 1
 588 009a 1846     		mov	r0, r3
ARM GAS  /tmp/cck8mfEh.s 			page 22


 589 009c 3221     		movs	r1, #50
 590 009e FFF7FEFF 		bl	osDelayUntil
 591              	.LVL65:
 253:Src/main.c    **** }
 592              		.loc 1 253 0 discriminator 1
 593 00a2 AFE7     		b	.L35
 594              	.L38:
 595              		.align	2
 596              	.L37:
 597 00a4 000C0240 		.word	1073875968
 598              		.cfi_endproc
 599              	.LFE132:
 601              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 602              		.align	2
 603              		.global	HAL_TIM_PeriodElapsedCallback
 604              		.thumb
 605              		.thumb_func
 607              	HAL_TIM_PeriodElapsedCallback:
 608              	.LFB141:
 542:Src/main.c    ****   /* USER CODE END 5 */ 
 543:Src/main.c    **** }
 544:Src/main.c    **** 
 545:Src/main.c    **** /**
 546:Src/main.c    ****   * @brief  Period elapsed callback in non blocking mode
 547:Src/main.c    ****   * @note   This function is called  when TIM1 interrupt took place, inside
 548:Src/main.c    ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 549:Src/main.c    ****   * a global variable "uwTick" used as application time base.
 550:Src/main.c    ****   * @param  htim : TIM handle
 551:Src/main.c    ****   * @retval None
 552:Src/main.c    ****   */
 553:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 554:Src/main.c    **** {
 609              		.loc 1 554 0
 610              		.cfi_startproc
 611              		@ args = 0, pretend = 0, frame = 0
 612              		@ frame_needed = 0, uses_anonymous_args = 0
 613              	.LVL66:
 614 0000 08B5     		push	{r3, lr}
 615              	.LCFI11:
 616              		.cfi_def_cfa_offset 8
 617              		.cfi_offset 3, -8
 618              		.cfi_offset 14, -4
 555:Src/main.c    ****   /* USER CODE BEGIN Callback 0 */
 556:Src/main.c    **** 
 557:Src/main.c    ****   /* USER CODE END Callback 0 */
 558:Src/main.c    ****   if (htim->Instance == TIM1) {
 619              		.loc 1 558 0
 620 0002 0268     		ldr	r2, [r0]
 621 0004 024B     		ldr	r3, .L42
 622 0006 9A42     		cmp	r2, r3
 623 0008 01D1     		bne	.L39
 559:Src/main.c    ****     HAL_IncTick();
 624              		.loc 1 559 0
 625 000a FFF7FEFF 		bl	HAL_IncTick
 626              	.LVL67:
 627              	.L39:
 628 000e 08BD     		pop	{r3, pc}
ARM GAS  /tmp/cck8mfEh.s 			page 23


 629              	.L43:
 630              		.align	2
 631              	.L42:
 632 0010 00000140 		.word	1073807360
 633              		.cfi_endproc
 634              	.LFE141:
 636              		.section	.text._Error_Handler,"ax",%progbits
 637              		.align	2
 638              		.global	_Error_Handler
 639              		.thumb
 640              		.thumb_func
 642              	_Error_Handler:
 643              	.LFB142:
 560:Src/main.c    ****   }
 561:Src/main.c    ****   /* USER CODE BEGIN Callback 1 */
 562:Src/main.c    **** 
 563:Src/main.c    ****   /* USER CODE END Callback 1 */
 564:Src/main.c    **** }
 565:Src/main.c    **** 
 566:Src/main.c    **** /**
 567:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 568:Src/main.c    ****   * @param  file: The file name as string.
 569:Src/main.c    ****   * @param  line: The line in file as a number.
 570:Src/main.c    ****   * @retval None
 571:Src/main.c    ****   */
 572:Src/main.c    **** void _Error_Handler(char *file, int line)
 573:Src/main.c    **** {
 644              		.loc 1 573 0
 645              		.cfi_startproc
 646              		@ Volatile: function does not return.
 647              		@ args = 0, pretend = 0, frame = 0
 648              		@ frame_needed = 0, uses_anonymous_args = 0
 649              	.LVL68:
 650 0000 08B5     		push	{r3, lr}
 651              	.LCFI12:
 652              		.cfi_def_cfa_offset 8
 653              		.cfi_offset 3, -8
 654              		.cfi_offset 14, -4
 655              	.LVL69:
 656              	.L45:
 574:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 575:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 576:Src/main.c    ****   volatile int i;
 577:Src/main.c    ****   while(1)
 578:Src/main.c    ****   {
 579:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, BLUE_LED, GPIO_PIN_SET);
 657              		.loc 1 579 0 discriminator 1
 658 0002 0348     		ldr	r0, .L47
 659 0004 4FF40041 		mov	r1, #32768
 660 0008 0122     		movs	r2, #1
 661 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
 662              	.LVL70:
 580:Src/main.c    ****   }
 663              		.loc 1 580 0 discriminator 1
 664 000e F8E7     		b	.L45
 665              	.L48:
 666              		.align	2
ARM GAS  /tmp/cck8mfEh.s 			page 24


 667              	.L47:
 668 0010 000C0240 		.word	1073875968
 669              		.cfi_endproc
 670              	.LFE142:
 672              		.section	.text.MX_UART4_Init,"ax",%progbits
 673              		.align	2
 674              		.thumb
 675              		.thumb_func
 677              	MX_UART4_Init:
 678              	.LFB138:
 469:Src/main.c    **** 
 679              		.loc 1 469 0
 680              		.cfi_startproc
 681              		@ args = 0, pretend = 0, frame = 0
 682              		@ frame_needed = 0, uses_anonymous_args = 0
 683 0000 08B5     		push	{r3, lr}
 684              	.LCFI13:
 685              		.cfi_def_cfa_offset 8
 686              		.cfi_offset 3, -8
 687              		.cfi_offset 14, -4
 471:Src/main.c    ****   huart4.Init.BaudRate = 115200;
 688              		.loc 1 471 0
 689 0002 0B48     		ldr	r0, .L52
 690 0004 0B4B     		ldr	r3, .L52+4
 691 0006 0360     		str	r3, [r0]
 472:Src/main.c    ****   huart4.Init.WordLength = UART_WORDLENGTH_8B;
 692              		.loc 1 472 0
 693 0008 4FF4E133 		mov	r3, #115200
 694 000c 4360     		str	r3, [r0, #4]
 473:Src/main.c    ****   huart4.Init.StopBits = UART_STOPBITS_1;
 695              		.loc 1 473 0
 696 000e 0023     		movs	r3, #0
 697 0010 8360     		str	r3, [r0, #8]
 474:Src/main.c    ****   huart4.Init.Parity = UART_PARITY_NONE;
 698              		.loc 1 474 0
 699 0012 C360     		str	r3, [r0, #12]
 475:Src/main.c    ****   huart4.Init.Mode = UART_MODE_TX_RX;
 700              		.loc 1 475 0
 701 0014 0361     		str	r3, [r0, #16]
 476:Src/main.c    ****   huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 702              		.loc 1 476 0
 703 0016 0C22     		movs	r2, #12
 704 0018 4261     		str	r2, [r0, #20]
 477:Src/main.c    ****   huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 705              		.loc 1 477 0
 706 001a 8361     		str	r3, [r0, #24]
 478:Src/main.c    ****   if (HAL_UART_Init(&huart4) != HAL_OK)
 707              		.loc 1 478 0
 708 001c C361     		str	r3, [r0, #28]
 479:Src/main.c    ****   {
 709              		.loc 1 479 0
 710 001e FFF7FEFF 		bl	HAL_UART_Init
 711              	.LVL71:
 712 0022 20B1     		cbz	r0, .L49
 481:Src/main.c    ****   }
 713              		.loc 1 481 0
 714 0024 0448     		ldr	r0, .L52+8
ARM GAS  /tmp/cck8mfEh.s 			page 25


 715 0026 40F2E111 		movw	r1, #481
 716 002a FFF7FEFF 		bl	_Error_Handler
 717              	.LVL72:
 718              	.L49:
 719 002e 08BD     		pop	{r3, pc}
 720              	.L53:
 721              		.align	2
 722              	.L52:
 723 0030 00000000 		.word	huart4
 724 0034 004C0040 		.word	1073761280
 725 0038 00000000 		.word	.LC6
 726              		.cfi_endproc
 727              	.LFE138:
 729              		.section	.text.MX_SPI1_Init,"ax",%progbits
 730              		.align	2
 731              		.thumb
 732              		.thumb_func
 734              	MX_SPI1_Init:
 735              	.LFB137:
 445:Src/main.c    **** 
 736              		.loc 1 445 0
 737              		.cfi_startproc
 738              		@ args = 0, pretend = 0, frame = 0
 739              		@ frame_needed = 0, uses_anonymous_args = 0
 740 0000 08B5     		push	{r3, lr}
 741              	.LCFI14:
 742              		.cfi_def_cfa_offset 8
 743              		.cfi_offset 3, -8
 744              		.cfi_offset 14, -4
 448:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 745              		.loc 1 448 0
 746 0002 0E48     		ldr	r0, .L57
 747 0004 0E4B     		ldr	r3, .L57+4
 748 0006 0360     		str	r3, [r0]
 449:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 749              		.loc 1 449 0
 750 0008 4FF48273 		mov	r3, #260
 751 000c 4360     		str	r3, [r0, #4]
 450:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 752              		.loc 1 450 0
 753 000e 0023     		movs	r3, #0
 754 0010 8360     		str	r3, [r0, #8]
 451:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 755              		.loc 1 451 0
 756 0012 C360     		str	r3, [r0, #12]
 452:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 757              		.loc 1 452 0
 758 0014 0361     		str	r3, [r0, #16]
 453:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 759              		.loc 1 453 0
 760 0016 4361     		str	r3, [r0, #20]
 454:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 761              		.loc 1 454 0
 762 0018 4FF40072 		mov	r2, #512
 763 001c 8261     		str	r2, [r0, #24]
 455:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 764              		.loc 1 455 0
ARM GAS  /tmp/cck8mfEh.s 			page 26


 765 001e C361     		str	r3, [r0, #28]
 456:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 766              		.loc 1 456 0
 767 0020 0362     		str	r3, [r0, #32]
 457:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 768              		.loc 1 457 0
 769 0022 4362     		str	r3, [r0, #36]
 458:Src/main.c    ****   hspi1.Init.CRCPolynomial = 10;
 770              		.loc 1 458 0
 771 0024 8362     		str	r3, [r0, #40]
 459:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 772              		.loc 1 459 0
 773 0026 0A23     		movs	r3, #10
 774 0028 C362     		str	r3, [r0, #44]
 460:Src/main.c    ****   {
 775              		.loc 1 460 0
 776 002a FFF7FEFF 		bl	HAL_SPI_Init
 777              	.LVL73:
 778 002e 20B1     		cbz	r0, .L54
 462:Src/main.c    ****   }
 779              		.loc 1 462 0
 780 0030 0448     		ldr	r0, .L57+8
 781 0032 4FF4E771 		mov	r1, #462
 782 0036 FFF7FEFF 		bl	_Error_Handler
 783              	.LVL74:
 784              	.L54:
 785 003a 08BD     		pop	{r3, pc}
 786              	.L58:
 787              		.align	2
 788              	.L57:
 789 003c 00000000 		.word	hspi1
 790 0040 00300140 		.word	1073819648
 791 0044 00000000 		.word	.LC6
 792              		.cfi_endproc
 793              	.LFE137:
 795              		.section	.text.MX_I2C1_Init,"ax",%progbits
 796              		.align	2
 797              		.thumb
 798              		.thumb_func
 800              	MX_I2C1_Init:
 801              	.LFB136:
 425:Src/main.c    **** 
 802              		.loc 1 425 0
 803              		.cfi_startproc
 804              		@ args = 0, pretend = 0, frame = 0
 805              		@ frame_needed = 0, uses_anonymous_args = 0
 806 0000 08B5     		push	{r3, lr}
 807              	.LCFI15:
 808              		.cfi_def_cfa_offset 8
 809              		.cfi_offset 3, -8
 810              		.cfi_offset 14, -4
 427:Src/main.c    ****   hi2c1.Init.ClockSpeed = 100000;
 811              		.loc 1 427 0
 812 0002 0C48     		ldr	r0, .L62
 813 0004 0C4B     		ldr	r3, .L62+4
 814 0006 0360     		str	r3, [r0]
 428:Src/main.c    ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
ARM GAS  /tmp/cck8mfEh.s 			page 27


 815              		.loc 1 428 0
 816 0008 0C4B     		ldr	r3, .L62+8
 817 000a 4360     		str	r3, [r0, #4]
 429:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 0;
 818              		.loc 1 429 0
 819 000c 0023     		movs	r3, #0
 820 000e 8360     		str	r3, [r0, #8]
 430:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 821              		.loc 1 430 0
 822 0010 C360     		str	r3, [r0, #12]
 431:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 823              		.loc 1 431 0
 824 0012 4FF48042 		mov	r2, #16384
 825 0016 0261     		str	r2, [r0, #16]
 432:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 826              		.loc 1 432 0
 827 0018 4361     		str	r3, [r0, #20]
 433:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 828              		.loc 1 433 0
 829 001a 8361     		str	r3, [r0, #24]
 434:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 830              		.loc 1 434 0
 831 001c C361     		str	r3, [r0, #28]
 435:Src/main.c    ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 832              		.loc 1 435 0
 833 001e 0362     		str	r3, [r0, #32]
 436:Src/main.c    ****   {
 834              		.loc 1 436 0
 835 0020 FFF7FEFF 		bl	HAL_I2C_Init
 836              	.LVL75:
 837 0024 20B1     		cbz	r0, .L59
 438:Src/main.c    ****   }
 838              		.loc 1 438 0
 839 0026 0648     		ldr	r0, .L62+12
 840 0028 4FF4DB71 		mov	r1, #438
 841 002c FFF7FEFF 		bl	_Error_Handler
 842              	.LVL76:
 843              	.L59:
 844 0030 08BD     		pop	{r3, pc}
 845              	.L63:
 846 0032 00BF     		.align	2
 847              	.L62:
 848 0034 00000000 		.word	hi2c1
 849 0038 00540040 		.word	1073763328
 850 003c A0860100 		.word	100000
 851 0040 00000000 		.word	.LC6
 852              		.cfi_endproc
 853              	.LFE136:
 855              		.section	.text.MX_CAN1_Init,"ax",%progbits
 856              		.align	2
 857              		.thumb
 858              		.thumb_func
 860              	MX_CAN1_Init:
 861              	.LFB135:
 402:Src/main.c    **** 
 862              		.loc 1 402 0
 863              		.cfi_startproc
ARM GAS  /tmp/cck8mfEh.s 			page 28


 864              		@ args = 0, pretend = 0, frame = 0
 865              		@ frame_needed = 0, uses_anonymous_args = 0
 866 0000 08B5     		push	{r3, lr}
 867              	.LCFI16:
 868              		.cfi_def_cfa_offset 8
 869              		.cfi_offset 3, -8
 870              		.cfi_offset 14, -4
 404:Src/main.c    ****   hcan1.Init.Prescaler = 2;
 871              		.loc 1 404 0
 872 0002 1048     		ldr	r0, .L67
 873 0004 104B     		ldr	r3, .L67+4
 874 0006 0360     		str	r3, [r0]
 405:Src/main.c    ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 875              		.loc 1 405 0
 876 0008 0223     		movs	r3, #2
 877 000a 4360     		str	r3, [r0, #4]
 406:Src/main.c    ****   hcan1.Init.SyncJumpWidth = CAN_SJW_4TQ;
 878              		.loc 1 406 0
 879 000c 0023     		movs	r3, #0
 880 000e 8360     		str	r3, [r0, #8]
 407:Src/main.c    ****   hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 881              		.loc 1 407 0
 882 0010 4FF04072 		mov	r2, #50331648
 883 0014 C260     		str	r2, [r0, #12]
 408:Src/main.c    ****   hcan1.Init.TimeSeg2 = CAN_BS2_6TQ;
 884              		.loc 1 408 0
 885 0016 4FF40022 		mov	r2, #524288
 886 001a 0261     		str	r2, [r0, #16]
 409:Src/main.c    ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 887              		.loc 1 409 0
 888 001c 4FF4A002 		mov	r2, #5242880
 889 0020 4261     		str	r2, [r0, #20]
 410:Src/main.c    ****   hcan1.Init.AutoBusOff = ENABLE;
 890              		.loc 1 410 0
 891 0022 0376     		strb	r3, [r0, #24]
 411:Src/main.c    ****   hcan1.Init.AutoWakeUp = DISABLE;
 892              		.loc 1 411 0
 893 0024 0122     		movs	r2, #1
 894 0026 4276     		strb	r2, [r0, #25]
 412:Src/main.c    ****   hcan1.Init.AutoRetransmission = DISABLE;
 895              		.loc 1 412 0
 896 0028 8376     		strb	r3, [r0, #26]
 413:Src/main.c    ****   hcan1.Init.ReceiveFifoLocked = ENABLE;
 897              		.loc 1 413 0
 898 002a C376     		strb	r3, [r0, #27]
 414:Src/main.c    ****   hcan1.Init.TransmitFifoPriority = ENABLE;
 899              		.loc 1 414 0
 900 002c 0277     		strb	r2, [r0, #28]
 415:Src/main.c    ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 901              		.loc 1 415 0
 902 002e 4277     		strb	r2, [r0, #29]
 416:Src/main.c    ****   {
 903              		.loc 1 416 0
 904 0030 FFF7FEFF 		bl	HAL_CAN_Init
 905              	.LVL77:
 906 0034 20B1     		cbz	r0, .L64
 418:Src/main.c    ****   }
ARM GAS  /tmp/cck8mfEh.s 			page 29


 907              		.loc 1 418 0
 908 0036 0548     		ldr	r0, .L67+8
 909 0038 4FF4D171 		mov	r1, #418
 910 003c FFF7FEFF 		bl	_Error_Handler
 911              	.LVL78:
 912              	.L64:
 913 0040 08BD     		pop	{r3, pc}
 914              	.L68:
 915 0042 00BF     		.align	2
 916              	.L67:
 917 0044 00000000 		.word	hcan1
 918 0048 00640040 		.word	1073767424
 919 004c 00000000 		.word	.LC6
 920              		.cfi_endproc
 921              	.LFE135:
 923              		.section	.text.SystemClock_Config,"ax",%progbits
 924              		.align	2
 925              		.global	SystemClock_Config
 926              		.thumb
 927              		.thumb_func
 929              	SystemClock_Config:
 930              	.LFB134:
 352:Src/main.c    **** 
 931              		.loc 1 352 0
 932              		.cfi_startproc
 933              		@ args = 0, pretend = 0, frame = 80
 934              		@ frame_needed = 0, uses_anonymous_args = 0
 935 0000 00B5     		push	{lr}
 936              	.LCFI17:
 937              		.cfi_def_cfa_offset 4
 938              		.cfi_offset 14, -4
 939 0002 95B0     		sub	sp, sp, #84
 940              	.LCFI18:
 941              		.cfi_def_cfa_offset 88
 942              	.LBB5:
 359:Src/main.c    **** 
 943              		.loc 1 359 0
 944 0004 0023     		movs	r3, #0
 945 0006 0193     		str	r3, [sp, #4]
 946 0008 244A     		ldr	r2, .L73
 947 000a 116C     		ldr	r1, [r2, #64]
 948 000c 41F08051 		orr	r1, r1, #268435456
 949 0010 1164     		str	r1, [r2, #64]
 950 0012 126C     		ldr	r2, [r2, #64]
 951 0014 02F08052 		and	r2, r2, #268435456
 952 0018 0192     		str	r2, [sp, #4]
 953 001a 019A     		ldr	r2, [sp, #4]
 954              	.LBE5:
 955              	.LBB6:
 361:Src/main.c    **** 
 956              		.loc 1 361 0
 957 001c 0293     		str	r3, [sp, #8]
 958 001e 204A     		ldr	r2, .L73+4
 959 0020 1168     		ldr	r1, [r2]
 960 0022 41F48041 		orr	r1, r1, #16384
 961 0026 1160     		str	r1, [r2]
 962 0028 1268     		ldr	r2, [r2]
ARM GAS  /tmp/cck8mfEh.s 			page 30


 963 002a 02F48042 		and	r2, r2, #16384
 964 002e 0292     		str	r2, [sp, #8]
 965 0030 029A     		ldr	r2, [sp, #8]
 966              	.LBE6:
 365:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 967              		.loc 1 365 0
 968 0032 0222     		movs	r2, #2
 969 0034 0892     		str	r2, [sp, #32]
 366:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 970              		.loc 1 366 0
 971 0036 0122     		movs	r2, #1
 972 0038 0B92     		str	r2, [sp, #44]
 367:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 973              		.loc 1 367 0
 974 003a 1022     		movs	r2, #16
 975 003c 0C92     		str	r2, [sp, #48]
 368:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 976              		.loc 1 368 0
 977 003e 0E93     		str	r3, [sp, #56]
 369:Src/main.c    ****   {
 978              		.loc 1 369 0
 979 0040 08A8     		add	r0, sp, #32
 980 0042 FFF7FEFF 		bl	HAL_RCC_OscConfig
 981              	.LVL79:
 982 0046 20B1     		cbz	r0, .L70
 371:Src/main.c    ****   }
 983              		.loc 1 371 0
 984 0048 1648     		ldr	r0, .L73+8
 985 004a 40F27311 		movw	r1, #371
 986 004e FFF7FEFF 		bl	_Error_Handler
 987              	.LVL80:
 988              	.L70:
 376:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 989              		.loc 1 376 0
 990 0052 0F23     		movs	r3, #15
 991 0054 0393     		str	r3, [sp, #12]
 378:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 992              		.loc 1 378 0
 993 0056 0021     		movs	r1, #0
 994 0058 0491     		str	r1, [sp, #16]
 379:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 995              		.loc 1 379 0
 996 005a 0591     		str	r1, [sp, #20]
 380:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 997              		.loc 1 380 0
 998 005c 0691     		str	r1, [sp, #24]
 381:Src/main.c    **** 
 999              		.loc 1 381 0
 1000 005e 0791     		str	r1, [sp, #28]
 383:Src/main.c    ****   {
 1001              		.loc 1 383 0
 1002 0060 03A8     		add	r0, sp, #12
 1003 0062 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1004              	.LVL81:
 1005 0066 20B1     		cbz	r0, .L71
 385:Src/main.c    ****   }
 1006              		.loc 1 385 0
ARM GAS  /tmp/cck8mfEh.s 			page 31


 1007 0068 0E48     		ldr	r0, .L73+8
 1008 006a 40F28111 		movw	r1, #385
 1009 006e FFF7FEFF 		bl	_Error_Handler
 1010              	.LVL82:
 1011              	.L71:
 390:Src/main.c    **** 
 1012              		.loc 1 390 0
 1013 0072 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1014              	.LVL83:
 1015 0076 0C4B     		ldr	r3, .L73+12
 1016 0078 A3FB0030 		umull	r3, r0, r3, r0
 1017 007c 8009     		lsrs	r0, r0, #6
 1018 007e FFF7FEFF 		bl	HAL_SYSTICK_Config
 1019              	.LVL84:
 394:Src/main.c    **** 
 1020              		.loc 1 394 0
 1021 0082 0420     		movs	r0, #4
 1022 0084 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 1023              	.LVL85:
 397:Src/main.c    **** }
 1024              		.loc 1 397 0
 1025 0088 4FF0FF30 		mov	r0, #-1
 1026 008c 0F21     		movs	r1, #15
 1027 008e 0022     		movs	r2, #0
 1028 0090 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 1029              	.LVL86:
 398:Src/main.c    **** 
 1030              		.loc 1 398 0
 1031 0094 15B0     		add	sp, sp, #84
 1032              	.LCFI19:
 1033              		.cfi_def_cfa_offset 4
 1034              		@ sp needed
 1035 0096 5DF804FB 		ldr	pc, [sp], #4
 1036              	.L74:
 1037 009a 00BF     		.align	2
 1038              	.L73:
 1039 009c 00380240 		.word	1073887232
 1040 00a0 00700040 		.word	1073770496
 1041 00a4 00000000 		.word	.LC6
 1042 00a8 D34D6210 		.word	274877907
 1043              		.cfi_endproc
 1044              	.LFE134:
 1046              		.section	.text.main,"ax",%progbits
 1047              		.align	2
 1048              		.global	main
 1049              		.thumb
 1050              		.thumb_func
 1052              	main:
 1053              	.LFB133:
 263:Src/main.c    ****   /* USER CODE BEGIN 1 */
 1054              		.loc 1 263 0
 1055              		.cfi_startproc
 1056              		@ args = 0, pretend = 0, frame = 40
 1057              		@ frame_needed = 0, uses_anonymous_args = 0
 1058 0000 70B5     		push	{r4, r5, r6, lr}
 1059              	.LCFI20:
 1060              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/cck8mfEh.s 			page 32


 1061              		.cfi_offset 4, -16
 1062              		.cfi_offset 5, -12
 1063              		.cfi_offset 6, -8
 1064              		.cfi_offset 14, -4
 1065 0002 8AB0     		sub	sp, sp, #40
 1066              	.LCFI21:
 1067              		.cfi_def_cfa_offset 56
 271:Src/main.c    **** 
 1068              		.loc 1 271 0
 1069 0004 FFF7FEFF 		bl	HAL_Init
 1070              	.LVL87:
 278:Src/main.c    **** 
 1071              		.loc 1 278 0
 1072 0008 FFF7FEFF 		bl	SystemClock_Config
 1073              	.LVL88:
 285:Src/main.c    ****   MX_GPIO_Init();
 1074              		.loc 1 285 0
 1075 000c FFF7FEFF 		bl	MX_UART4_Init
 1076              	.LVL89:
 286:Src/main.c    ****   MX_SPI1_Init();
 1077              		.loc 1 286 0
 1078 0010 FFF7FEFF 		bl	MX_GPIO_Init
 1079              	.LVL90:
 287:Src/main.c    ****   MX_I2C1_Init();
 1080              		.loc 1 287 0
 1081 0014 FFF7FEFF 		bl	MX_SPI1_Init
 1082              	.LVL91:
 288:Src/main.c    ****   MX_CAN1_Init();
 1083              		.loc 1 288 0
 1084 0018 FFF7FEFF 		bl	MX_I2C1_Init
 1085              	.LVL92:
 289:Src/main.c    ****   /* USER CODE BEGIN 2 */
 1086              		.loc 1 289 0
 1087 001c FFF7FEFF 		bl	MX_CAN1_Init
 1088              	.LVL93:
 308:Src/main.c    ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 1089              		.loc 1 308 0
 1090 0020 0E4C     		ldr	r4, .L78
 1091 0022 05AD     		add	r5, sp, #20
 1092 0024 04F11006 		add	r6, r4, #16
 1093 0028 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 1094 002a 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 1095 002c 3368     		ldr	r3, [r6]
 1096 002e 2B60     		str	r3, [r5]
 309:Src/main.c    **** 
 1097              		.loc 1 309 0
 1098 0030 05A8     		add	r0, sp, #20
 1099 0032 0021     		movs	r1, #0
 1100 0034 FFF7FEFF 		bl	osThreadCreate
 1101              	.LVL94:
 1102 0038 094B     		ldr	r3, .L78+4
 1103 003a 1860     		str	r0, [r3]
 314:Src/main.c    ****   canTaskHandle = osThreadCreate(osThread(canTask),NULL);
 1104              		.loc 1 314 0
 1105 003c 6D46     		mov	r5, sp
 1106 003e 2434     		adds	r4, r4, #36
 1107 0040 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
ARM GAS  /tmp/cck8mfEh.s 			page 33


 1108 0042 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 1109 0044 2368     		ldr	r3, [r4]
 1110 0046 2B60     		str	r3, [r5]
 315:Src/main.c    ****   //uartTaskHandle = osThreadCreate(osThread(uartTask), NULL);
 1111              		.loc 1 315 0
 1112 0048 6846     		mov	r0, sp
 1113 004a 0021     		movs	r1, #0
 1114 004c FFF7FEFF 		bl	osThreadCreate
 1115              	.LVL95:
 1116 0050 044B     		ldr	r3, .L78+8
 1117 0052 1860     		str	r0, [r3]
 329:Src/main.c    ****   
 1118              		.loc 1 329 0
 1119 0054 FFF7FEFF 		bl	osKernelStart
 1120              	.LVL96:
 1121              	.L76:
 342:Src/main.c    ****   /* USER CODE END 3 */
 1122              		.loc 1 342 0 discriminator 1
 1123 0058 FEE7     		b	.L76
 1124              	.L79:
 1125 005a 00BF     		.align	2
 1126              	.L78:
 1127 005c 00000000 		.word	.LANCHOR0
 1128 0060 00000000 		.word	defaultTaskHandle
 1129 0064 00000000 		.word	canTaskHandle
 1130              		.cfi_endproc
 1131              	.LFE133:
 1133              		.comm	i2c_accel,6,4
 1134              		.comm	i2c_rx_buff_gyro,6,4
 1135              		.comm	i2c_tx_buff_gyro,6,4
 1136              		.comm	i2c_tx_buff_accel,6,4
 1137              		.comm	i2c_rx_buff_accel,6,4
 1138              		.comm	canTaskHandle,4,4
 1139              		.comm	uartTaskHandle,4,4
 1140              		.comm	i2cTaskHandle,4,4
 1141              		.comm	defaultTaskHandle,4,4
 1142              		.comm	huart4,64,4
 1143              		.comm	hspi1,88,4
 1144              		.comm	hi2c1,84,4
 1145              		.comm	hcan1,40,4
 1146              		.section	.rodata
 1147              		.align	2
 1148              		.set	.LANCHOR0,. + 0
 1149              	.LC0:
 1150 0000 FF       		.byte	-1
 1151 0001 FF       		.byte	-1
 1152 0002 FF       		.byte	-1
 1153 0003 FF       		.byte	-1
 1154 0004 FF       		.byte	-1
 1155 0005 FF       		.byte	-1
 1156 0006 FF       		.byte	-1
 1157 0007 FF       		.byte	-1
 1158              	.LC1:
 1159 0008 AA       		.byte	-86
 1160 0009 AA       		.byte	-86
 1161 000a AA       		.byte	-86
 1162 000b AA       		.byte	-86
ARM GAS  /tmp/cck8mfEh.s 			page 34


 1163 000c AA       		.byte	-86
 1164 000d AA       		.byte	-86
 1165 000e AA       		.byte	-86
 1166 000f AA       		.byte	-86
 1167              	.LC7:
 1168 0010 14000000 		.word	.LC2
 1169 0014 00000000 		.word	StartDefaultTask
 1170 0018 0000     		.short	0
 1171 001a 0000     		.space	2
 1172 001c 00000000 		.word	0
 1173 0020 80000000 		.word	128
 1174              	.LC8:
 1175 0024 0C000000 		.word	.LC4
 1176 0028 00000000 		.word	canTest
 1177 002c 0100     		.short	1
 1178 002e 0000     		.space	2
 1179 0030 01000000 		.word	1
 1180 0034 80000000 		.word	128
 1181              		.section	.rodata.str1.4,"aMS",%progbits,1
 1182              		.align	2
 1183              	.LC6:
 1184 0000 5372632F 		.ascii	"Src/main.c\000"
 1184      6D61696E 
 1184      2E6300
 1185 000b 00       		.space	1
 1186              	.LC4:
 1187 000c 63616E54 		.ascii	"canTask\000"
 1187      61736B00 
 1188              	.LC2:
 1189 0014 64656661 		.ascii	"defaultTask\000"
 1189      756C7454 
 1189      61736B00 
 1190              		.text
 1191              	.Letext0:
 1192              		.file 2 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 1193              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 1194              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 1195              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1196              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1197              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1198              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1199              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1200              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1201              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 1202              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 1203              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_spi.h"
 1204              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1205              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1206              		.file 16 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 1207              		.file 17 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 1208              		.file 18 "Drivers/CMSIS/Include/core_cm4.h"
 1209              		.file 19 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1210              		.file 20 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
ARM GAS  /tmp/cck8mfEh.s 			page 35


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cck8mfEh.s:21     .text.StartDefaultTask:0000000000000000 $t
     /tmp/cck8mfEh.s:26     .text.StartDefaultTask:0000000000000000 StartDefaultTask
     /tmp/cck8mfEh.s:52     .text.canTest:0000000000000000 $t
     /tmp/cck8mfEh.s:57     .text.canTest:0000000000000000 canTest
     /tmp/cck8mfEh.s:170    .text.canTest:000000000000008c $d
                            *COM*:0000000000000028 hcan1
     /tmp/cck8mfEh.s:177    .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cck8mfEh.s:181    .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cck8mfEh.s:278    .text.MX_GPIO_Init:0000000000000084 $d
     /tmp/cck8mfEh.s:285    .text.writei2c:0000000000000000 $t
     /tmp/cck8mfEh.s:290    .text.writei2c:0000000000000000 writei2c
     /tmp/cck8mfEh.s:417    .text.writei2c:000000000000009c $d
                            *COM*:0000000000000006 i2c_tx_buff_accel
                            *COM*:0000000000000006 i2c_rx_buff_accel
                            *COM*:0000000000000054 hi2c1
                            *COM*:0000000000000006 i2c_accel
     /tmp/cck8mfEh.s:426    .text.uartTest:0000000000000000 $t
     /tmp/cck8mfEh.s:431    .text.uartTest:0000000000000000 uartTest
     /tmp/cck8mfEh.s:444    .text.uart_debug:0000000000000000 $t
     /tmp/cck8mfEh.s:449    .text.uart_debug:0000000000000000 uart_debug
     /tmp/cck8mfEh.s:478    .text.uart_debug:0000000000000014 $d
                            *COM*:0000000000000040 huart4
     /tmp/cck8mfEh.s:483    .text.Leds:0000000000000000 $t
     /tmp/cck8mfEh.s:488    .text.Leds:0000000000000000 Leds
     /tmp/cck8mfEh.s:597    .text.Leds:00000000000000a4 $d
     /tmp/cck8mfEh.s:602    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/cck8mfEh.s:607    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/cck8mfEh.s:632    .text.HAL_TIM_PeriodElapsedCallback:0000000000000010 $d
     /tmp/cck8mfEh.s:637    .text._Error_Handler:0000000000000000 $t
     /tmp/cck8mfEh.s:642    .text._Error_Handler:0000000000000000 _Error_Handler
     /tmp/cck8mfEh.s:668    .text._Error_Handler:0000000000000010 $d
     /tmp/cck8mfEh.s:673    .text.MX_UART4_Init:0000000000000000 $t
     /tmp/cck8mfEh.s:677    .text.MX_UART4_Init:0000000000000000 MX_UART4_Init
     /tmp/cck8mfEh.s:723    .text.MX_UART4_Init:0000000000000030 $d
     /tmp/cck8mfEh.s:730    .text.MX_SPI1_Init:0000000000000000 $t
     /tmp/cck8mfEh.s:734    .text.MX_SPI1_Init:0000000000000000 MX_SPI1_Init
     /tmp/cck8mfEh.s:789    .text.MX_SPI1_Init:000000000000003c $d
                            *COM*:0000000000000058 hspi1
     /tmp/cck8mfEh.s:796    .text.MX_I2C1_Init:0000000000000000 $t
     /tmp/cck8mfEh.s:800    .text.MX_I2C1_Init:0000000000000000 MX_I2C1_Init
     /tmp/cck8mfEh.s:848    .text.MX_I2C1_Init:0000000000000034 $d
     /tmp/cck8mfEh.s:856    .text.MX_CAN1_Init:0000000000000000 $t
     /tmp/cck8mfEh.s:860    .text.MX_CAN1_Init:0000000000000000 MX_CAN1_Init
     /tmp/cck8mfEh.s:917    .text.MX_CAN1_Init:0000000000000044 $d
     /tmp/cck8mfEh.s:924    .text.SystemClock_Config:0000000000000000 $t
     /tmp/cck8mfEh.s:929    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cck8mfEh.s:1039   .text.SystemClock_Config:000000000000009c $d
     /tmp/cck8mfEh.s:1047   .text.main:0000000000000000 $t
     /tmp/cck8mfEh.s:1052   .text.main:0000000000000000 main
     /tmp/cck8mfEh.s:1127   .text.main:000000000000005c $d
                            *COM*:0000000000000004 defaultTaskHandle
                            *COM*:0000000000000004 canTaskHandle
                            *COM*:0000000000000006 i2c_rx_buff_gyro
                            *COM*:0000000000000006 i2c_tx_buff_gyro
                            *COM*:0000000000000004 uartTaskHandle
ARM GAS  /tmp/cck8mfEh.s 			page 36


                            *COM*:0000000000000004 i2cTaskHandle
     /tmp/cck8mfEh.s:1147   .rodata:0000000000000000 $d
     /tmp/cck8mfEh.s:1182   .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
osDelay
HAL_CAN_Start
HAL_CAN_WakeUp
HAL_CAN_IsTxMessagePending
HAL_CAN_AddTxMessage
HAL_GPIO_WritePin
HAL_GPIO_TogglePin
HAL_GPIO_Init
HAL_I2C_Master_Transmit
HAL_I2C_Master_Receive
HAL_UART_Transmit
osKernelSysTick
osDelayUntil
HAL_IncTick
HAL_UART_Init
HAL_SPI_Init
HAL_I2C_Init
HAL_CAN_Init
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
osThreadCreate
osKernelStart
