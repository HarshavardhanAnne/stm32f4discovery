ARM GAS  /tmp/cc2tcWM6.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.StartDefaultTask,"ax",%progbits
  21              		.align	2
  22              		.global	StartDefaultTask
  23              		.thumb
  24              		.thumb_func
  26              	StartDefaultTask:
  27              	.LFB141:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * Copyright (c) 2018 STMicroelectronics International N.V. 
  14:Src/main.c    ****   * All rights reserved.
  15:Src/main.c    ****   *
  16:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without 
  17:Src/main.c    ****   * modification, are permitted, provided that the following conditions are met:
  18:Src/main.c    ****   *
  19:Src/main.c    ****   * 1. Redistribution of source code must retain the above copyright notice, 
  20:Src/main.c    ****   *    this list of conditions and the following disclaimer.
  21:Src/main.c    ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  22:Src/main.c    ****   *    this list of conditions and the following disclaimer in the documentation
  23:Src/main.c    ****   *    and/or other materials provided with the distribution.
  24:Src/main.c    ****   * 3. Neither the name of STMicroelectronics nor the names of other 
  25:Src/main.c    ****   *    contributors to this software may be used to endorse or promote products 
  26:Src/main.c    ****   *    derived from this software without specific written permission.
  27:Src/main.c    ****   * 4. This software, including modifications and/or derivative works of this 
  28:Src/main.c    ****   *    software, must execute solely and exclusively on microcontroller or
  29:Src/main.c    ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  30:Src/main.c    ****   * 5. Redistribution and use of this software other than as permitted under 
ARM GAS  /tmp/cc2tcWM6.s 			page 2


  31:Src/main.c    ****   *    this license is void and will automatically terminate your rights under 
  32:Src/main.c    ****   *    this license. 
  33:Src/main.c    ****   *
  34:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  35:Src/main.c    ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  36:Src/main.c    ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  37:Src/main.c    ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  38:Src/main.c    ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  39:Src/main.c    ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  40:Src/main.c    ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  41:Src/main.c    ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  42:Src/main.c    ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  43:Src/main.c    ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  44:Src/main.c    ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  45:Src/main.c    ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  46:Src/main.c    ****   *
  47:Src/main.c    ****   ******************************************************************************
  48:Src/main.c    ****   */
  49:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  50:Src/main.c    **** #include "main.h"
  51:Src/main.c    **** #include "stm32f4xx_hal.h"
  52:Src/main.c    **** #include "cmsis_os.h"
  53:Src/main.c    **** 
  54:Src/main.c    **** /* USER CODE BEGIN Includes */
  55:Src/main.c    **** 
  56:Src/main.c    **** /* USER CODE END Includes */
  57:Src/main.c    **** 
  58:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  59:Src/main.c    **** CAN_HandleTypeDef hcan1;
  60:Src/main.c    **** 
  61:Src/main.c    **** I2C_HandleTypeDef hi2c1;
  62:Src/main.c    **** 
  63:Src/main.c    **** SPI_HandleTypeDef hspi1;
  64:Src/main.c    **** 
  65:Src/main.c    **** UART_HandleTypeDef huart4;
  66:Src/main.c    **** 
  67:Src/main.c    **** osThreadId defaultTaskHandle;
  68:Src/main.c    **** 
  69:Src/main.c    **** /* USER CODE BEGIN PV */
  70:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  71:Src/main.c    **** osThreadId i2cTaskHandle;
  72:Src/main.c    **** osThreadId uartTaskHandle;
  73:Src/main.c    **** osThreadId canTaskHandle;
  74:Src/main.c    **** osThreadId spiTaskHandle;
  75:Src/main.c    **** //osThreadId ledTaskHandle;
  76:Src/main.c    **** #define MY_I2C_SPEED 400000
  77:Src/main.c    **** #define I2C_ADDRESS_IMU (uint16_t)(0b1101000 << 1)
  78:Src/main.c    **** #define RED_LED GPIO_PIN_14
  79:Src/main.c    **** #define GREEN_LED GPIO_PIN_12
  80:Src/main.c    **** #define BLUE_LED GPIO_PIN_15
  81:Src/main.c    **** #define ORANGE_LED GPIO_PIN_13
  82:Src/main.c    **** uint8_t i2c_rx_buff_accel[6];
  83:Src/main.c    **** uint8_t i2c_tx_buff_accel[6];
  84:Src/main.c    **** uint8_t i2c_tx_buff_gyro[6];
  85:Src/main.c    **** uint8_t i2c_rx_buff_gyro[6];
  86:Src/main.c    **** int16_t i2c_accel[3];
  87:Src/main.c    **** uint8_t spi_address[2] = {0b10000100,0b00000000};
ARM GAS  /tmp/cc2tcWM6.s 			page 3


  88:Src/main.c    **** uint8_t spi_rx_buff[2];
  89:Src/main.c    **** uint8_t arr[9];
  90:Src/main.c    **** //CANTX - PB9
  91:Src/main.c    **** //CANRX - PB8
  92:Src/main.c    **** //I2CSDA - PB7
  93:Src/main.c    **** //I2CSCL - PB6
  94:Src/main.c    **** //UARTtx - PA0
  95:Src/main.c    **** //UARTrx - PA1
  96:Src/main.c    **** //SPISCK - PA5
  97:Src/main.c    **** //SPIMISO - PA6
  98:Src/main.c    **** //SPIMOSI - PA7
  99:Src/main.c    **** //SPICS - PA4 //This is NSS pin
 100:Src/main.c    **** /* USER CODE END PV */
 101:Src/main.c    **** 
 102:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
 103:Src/main.c    **** void SystemClock_Config(void);
 104:Src/main.c    **** static void MX_GPIO_Init(void);
 105:Src/main.c    **** static void MX_UART4_Init(void);
 106:Src/main.c    **** static void MX_SPI1_Init(void);
 107:Src/main.c    **** static void MX_I2C1_Init(void);
 108:Src/main.c    **** static void MX_CAN1_Init(void);
 109:Src/main.c    **** void StartDefaultTask(void const * argument);
 110:Src/main.c    **** 
 111:Src/main.c    **** /* USER CODE BEGIN PFP */
 112:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
 113:Src/main.c    **** void write_i2c(void const *argument);
 114:Src/main.c    **** void uart_debug(uint8_t* arr, uint8_t buffsize);
 115:Src/main.c    **** void canTest(void const *argument);
 116:Src/main.c    **** void uartTest(void const *argument);
 117:Src/main.c    **** /* USER CODE END PFP */
 118:Src/main.c    **** 
 119:Src/main.c    **** /* USER CODE BEGIN 0 */
 120:Src/main.c    **** void writei2c(void const *argument) {
 121:Src/main.c    ****   //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 122:Src/main.c    ****   HAL_StatusTypeDef status = HAL_OK;
 123:Src/main.c    ****   uint32_t prevWakeTime;
 124:Src/main.c    ****   uint32_t nextWakeTime;
 125:Src/main.c    ****   int addr = 59;
 126:Src/main.c    ****   int i;
 127:Src/main.c    ****   for (i = 0; i < 6; i++) {
 128:Src/main.c    ****     i2c_tx_buff_accel[i] = addr++;
 129:Src/main.c    ****     i2c_rx_buff_accel[i] = i;
 130:Src/main.c    ****   }
 131:Src/main.c    ****   //ACCEL_XOUT_H , ACCEL_XOUT_L
 132:Src/main.c    ****   while (1) {
 133:Src/main.c    ****     //prevWakeTime = osKernelSysTick();
 134:Src/main.c    ****     //nextWakeTime += (1000 * osKernelSysTick())
 135:Src/main.c    ****     //osDelayUntil(&prevWakeTime,5000);
 136:Src/main.c    ****     osDelay(3000);
 137:Src/main.c    ****     status = HAL_OK;
 138:Src/main.c    ****     for (i = 0; i < 6; i++) {
 139:Src/main.c    ****       status = HAL_I2C_Master_Transmit(&hi2c1,I2C_ADDRESS_IMU,i2c_tx_buff_accel+i,sizeof(uint8_t),1
 140:Src/main.c    **** 
 141:Src/main.c    ****       if (status != HAL_OK) {
 142:Src/main.c    ****         HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 143:Src/main.c    ****       }
 144:Src/main.c    ****       else {
ARM GAS  /tmp/cc2tcWM6.s 			page 4


 145:Src/main.c    ****         HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15, GPIO_PIN_RESET);
 146:Src/main.c    ****       }
 147:Src/main.c    ****       status = HAL_I2C_Master_Receive(&hi2c1,I2C_ADDRESS_IMU,i2c_rx_buff_accel+i,sizeof(uint8_t),10
 148:Src/main.c    ****     }
 149:Src/main.c    ****     //itoa
 150:Src/main.c    ****     //debug();
 151:Src/main.c    ****     i2c_accel[0] = (i2c_rx_buff_accel[0] << 8) + i2c_rx_buff_accel[1];
 152:Src/main.c    ****     i2c_accel[1] = (i2c_rx_buff_accel[2] << 8) + i2c_rx_buff_accel[3];
 153:Src/main.c    ****     i2c_accel[2] = (i2c_rx_buff_accel[4] << 8) + i2c_rx_buff_accel[5];
 154:Src/main.c    ****     //uart_debug(i2c_accel,sizeof(i2c_accel));
 155:Src/main.c    ****     //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 156:Src/main.c    ****     HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12); //GPIOD12 is green
 157:Src/main.c    ****   }
 158:Src/main.c    **** }
 159:Src/main.c    **** 
 160:Src/main.c    **** void uartTest(void const *argument) {
 161:Src/main.c    ****   int i = 0;
 162:Src/main.c    ****   for (i = 0; i < 9; i++) {
 163:Src/main.c    ****     arr[i] = i;
 164:Src/main.c    ****   }
 165:Src/main.c    ****   while (1) {
 166:Src/main.c    ****     HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 167:Src/main.c    ****     //HAL_UART_Transmit(&huart4,ptr,size_,HAL_MAX_DELAY);
 168:Src/main.c    ****     uart_debug(arr, sizeof(arr));
 169:Src/main.c    ****     osDelay(100);
 170:Src/main.c    ****   }
 171:Src/main.c    **** }
 172:Src/main.c    **** 
 173:Src/main.c    **** void spiTest(void const *argument) {
 174:Src/main.c    ****   HAL_StatusTypeDef status;
 175:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 176:Src/main.c    ****   while (1) {
 177:Src/main.c    ****     osDelay(1000);
 178:Src/main.c    ****     status = HAL_OK;
 179:Src/main.c    ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,GPIO_PIN_RESET);
 180:Src/main.c    ****     HAL_Delay(1);
 181:Src/main.c    ****     //status = HAL_SPI_Transmit(&hspi1, spi_address,1,HAL_MAX_DELAY);
 182:Src/main.c    ****     //status = HAL_SPI_Receive(&hspi1, spi_rx_buff,1,HAL_MAX_DELAY);
 183:Src/main.c    ****     //status = HAL_SPI_Transmit(&hspi1, spi_address+1,1,HAL_MAX_DELAY);
 184:Src/main.c    ****     //status = HAL_SPI_Receive(&hspi1, spi_rx_buff+1,1,HAL_MAX_DELAY);
 185:Src/main.c    ****     status = HAL_SPI_TransmitReceive(&hspi1,spi_address,spi_rx_buff,1,HAL_MAX_DELAY);
 186:Src/main.c    ****     //HAL_Delay(1);
 187:Src/main.c    ****     if (status != HAL_OK) {
 188:Src/main.c    ****       HAL_GPIO_WritePin(GPIOD, GREEN_LED, GPIO_PIN_SET);
 189:Src/main.c    ****     }
 190:Src/main.c    ****     else {
 191:Src/main.c    ****       HAL_GPIO_WritePin(GPIOD, GREEN_LED, GPIO_PIN_RESET);
 192:Src/main.c    ****     }
 193:Src/main.c    **** 
 194:Src/main.c    ****     status = HAL_SPI_TransmitReceive(&hspi1,spi_address+1,spi_rx_buff+1,1,HAL_MAX_DELAY);
 195:Src/main.c    ****     HAL_Delay(1);
 196:Src/main.c    ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 197:Src/main.c    ****     //spi_rx_buff[0] = 'A';
 198:Src/main.c    ****     //spi_rx_buff[1] = 'F';
 199:Src/main.c    ****     uart_debug(spi_rx_buff, sizeof(spi_rx_buff));
 200:Src/main.c    ****   }
 201:Src/main.c    **** }
ARM GAS  /tmp/cc2tcWM6.s 			page 5


 202:Src/main.c    **** 
 203:Src/main.c    **** //CANTX - PB9
 204:Src/main.c    **** //CANRX - PB8
 205:Src/main.c    **** void canTest(void const *argument) {
 206:Src/main.c    ****   HAL_CAN_Start(&hcan1);
 207:Src/main.c    ****   HAL_CAN_WakeUp(&hcan1);
 208:Src/main.c    ****   uint8_t data[8] = {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};
 209:Src/main.c    ****   uint8_t data2[8] = {0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA};
 210:Src/main.c    ****   uint8_t* data_ptr;
 211:Src/main.c    ****   uint8_t data_sel = 0;
 212:Src/main.c    ****   CAN_TxHeaderTypeDef tx_buffer;
 213:Src/main.c    ****   CAN_TxHeaderTypeDef* tx_buffer_ptr = &tx_buffer;
 214:Src/main.c    ****   tx_buffer.StdId = 0x500;
 215:Src/main.c    ****   tx_buffer.ExtId = 0x500;
 216:Src/main.c    ****   tx_buffer.IDE = CAN_ID_STD;
 217:Src/main.c    ****   tx_buffer.RTR = CAN_RTR_DATA;
 218:Src/main.c    ****   tx_buffer.DLC = sizeof(data);
 219:Src/main.c    ****   HAL_StatusTypeDef status = HAL_OK;
 220:Src/main.c    ****   while (1) {
 221:Src/main.c    ****     //osDelay(50); //20Hz 
 222:Src/main.c    ****     //osDelay(1); //1 kHz works for 8 bytes of data !THIS SOMETIMES FAILS
 223:Src/main.c    ****     osDelay(4); //250 Hz , this works with 8 bytes
 224:Src/main.c    ****     status = HAL_OK;
 225:Src/main.c    ****     data_ptr = (data_sel) ? data : data2;
 226:Src/main.c    ****     data_sel ^= 0b1;
 227:Src/main.c    ****     while (HAL_CAN_IsTxMessagePending(&hcan1, (uint32_t)CAN_TX_MAILBOX0)) {
 228:Src/main.c    ****       //HAL_GPIO_WritePin(GPIOD, ORANGE_LED, GPIO_PIN_SET);
 229:Src/main.c    ****       //osDelay(100);
 230:Src/main.c    ****       //HAL_GPIO_WritePin(GPIOD, ORANGE_LED, GPIO_PIN_RESET);
 231:Src/main.c    ****     }
 232:Src/main.c    ****     status = HAL_CAN_AddTxMessage(&hcan1, tx_buffer_ptr, data_ptr, (uint32_t *)CAN_TX_MAILBOX0);
 233:Src/main.c    **** 
 234:Src/main.c    ****     if (status == HAL_OK) {
 235:Src/main.c    ****       HAL_GPIO_WritePin(GPIOD, GREEN_LED, GPIO_PIN_SET);
 236:Src/main.c    ****     }
 237:Src/main.c    ****     else {
 238:Src/main.c    ****       HAL_GPIO_WritePin(GPIOD, GREEN_LED, GPIO_PIN_RESET);
 239:Src/main.c    ****       HAL_GPIO_TogglePin(GPIOD, RED_LED);
 240:Src/main.c    ****       //unsigned char temparr[] = {"NOT WORKING"};
 241:Src/main.c    ****       //uart_debug(temparr, sizeof(temparr));
 242:Src/main.c    ****     }
 243:Src/main.c    **** 
 244:Src/main.c    ****   }
 245:Src/main.c    **** 
 246:Src/main.c    **** }
 247:Src/main.c    **** 
 248:Src/main.c    **** void uart_debug(uint8_t* arr, uint8_t buffsize) {
 249:Src/main.c    ****   HAL_StatusTypeDef status = HAL_OK;
 250:Src/main.c    ****   
 251:Src/main.c    ****   status = HAL_UART_Transmit(&huart4, arr, buffsize, HAL_MAX_DELAY);
 252:Src/main.c    ****   if (status != HAL_OK) {
 253:Src/main.c    ****     //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 254:Src/main.c    ****   }
 255:Src/main.c    ****   else {
 256:Src/main.c    ****     HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_15);
 257:Src/main.c    ****     //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 258:Src/main.c    ****   }
ARM GAS  /tmp/cc2tcWM6.s 			page 6


 259:Src/main.c    **** }
 260:Src/main.c    **** 
 261:Src/main.c    **** void Leds(void const *argument) {
 262:Src/main.c    **** 
 263:Src/main.c    ****   /*GPIO_InitTypeDef GPIO_InitStruct;
 264:Src/main.c    **** 
 265:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 266:Src/main.c    ****   //HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 267:Src/main.c    **** 
 268:Src/main.c    ****   //Configure GPIO pin Output Level 
 269:Src/main.c    ****   //HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 270:Src/main.c    **** 
 271:Src/main.c    ****   //Configure GPIO pin Output Level
 272:Src/main.c    ****   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12, GPIO_PIN_RESET);
 273:Src/main.c    **** 
 274:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12;
 275:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 276:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 277:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 278:Src/main.c    ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);*/
 279:Src/main.c    ****   uint32_t prevWakeTime;
 280:Src/main.c    ****   while (1) {
 281:Src/main.c    ****     //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12);
 282:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 283:Src/main.c    ****     osDelay(100);
 284:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 285:Src/main.c    ****     osDelay(100);
 286:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 287:Src/main.c    ****     osDelay(100);
 288:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 289:Src/main.c    ****     osDelay(100);
 290:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 291:Src/main.c    ****     osDelay(100);
 292:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 293:Src/main.c    ****     osDelay(100);
 294:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 295:Src/main.c    ****     osDelay(100);
 296:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 297:Src/main.c    **** 
 298:Src/main.c    ****     prevWakeTime = osKernelSysTick();
 299:Src/main.c    ****     osDelayUntil(&prevWakeTime, 50);
 300:Src/main.c    ****   }
 301:Src/main.c    **** }
 302:Src/main.c    **** /* USER CODE END 0 */
 303:Src/main.c    **** 
 304:Src/main.c    **** /**
 305:Src/main.c    ****   * @brief  The application entry point.
 306:Src/main.c    ****   *
 307:Src/main.c    ****   * @retval None
 308:Src/main.c    ****   */
 309:Src/main.c    **** int main(void)
 310:Src/main.c    **** {
 311:Src/main.c    ****   /* USER CODE BEGIN 1 */
 312:Src/main.c    **** 
 313:Src/main.c    ****   /* USER CODE END 1 */
 314:Src/main.c    **** 
 315:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
ARM GAS  /tmp/cc2tcWM6.s 			page 7


 316:Src/main.c    **** 
 317:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 318:Src/main.c    ****   HAL_Init();
 319:Src/main.c    **** 
 320:Src/main.c    ****   /* USER CODE BEGIN Init */
 321:Src/main.c    **** 
 322:Src/main.c    ****   /* USER CODE END Init */
 323:Src/main.c    **** 
 324:Src/main.c    ****   /* Configure the system clock */
 325:Src/main.c    ****   SystemClock_Config();
 326:Src/main.c    **** 
 327:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 328:Src/main.c    **** 
 329:Src/main.c    ****   /* USER CODE END SysInit */
 330:Src/main.c    **** 
 331:Src/main.c    ****   /* Initialize all configured peripherals */
 332:Src/main.c    ****   MX_GPIO_Init();
 333:Src/main.c    ****   MX_UART4_Init();
 334:Src/main.c    ****   MX_SPI1_Init();
 335:Src/main.c    ****   MX_I2C1_Init();
 336:Src/main.c    ****   //MX_CAN1_Init();
 337:Src/main.c    ****   /* USER CODE BEGIN 2 */
 338:Src/main.c    **** 
 339:Src/main.c    ****   /* USER CODE END 2 */
 340:Src/main.c    **** 
 341:Src/main.c    ****   /* USER CODE BEGIN RTOS_MUTEX */
 342:Src/main.c    ****   /* add mutexes, ... */
 343:Src/main.c    ****   /* USER CODE END RTOS_MUTEX */
 344:Src/main.c    **** 
 345:Src/main.c    ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 346:Src/main.c    ****   /* add semaphores, ... */
 347:Src/main.c    ****   /* USER CODE END RTOS_SEMAPHORES */
 348:Src/main.c    **** 
 349:Src/main.c    ****   /* USER CODE BEGIN RTOS_TIMERS */
 350:Src/main.c    ****   /* start timers, add new ones, ... */
 351:Src/main.c    ****   /* USER CODE END RTOS_TIMERS */
 352:Src/main.c    **** 
 353:Src/main.c    ****   /* Create the thread(s) */
 354:Src/main.c    ****   /* definition and creation of defaultTask */
 355:Src/main.c    ****   osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 356:Src/main.c    ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 357:Src/main.c    **** 
 358:Src/main.c    ****   /* USER CODE BEGIN RTOS_THREADS */
 359:Src/main.c    ****   /* add threads, ... */
 360:Src/main.c    ****   //osThreadDef(uartTask, uartTest, osPriorityAboveNormal, 1, 128);
 361:Src/main.c    ****   //osThreadDef(canTask, canTest, osPriorityAboveNormal, 1, 128);
 362:Src/main.c    ****   //canTaskHandle = osThreadCreate(osThread(canTask),NULL);
 363:Src/main.c    ****   //uartTaskHandle = osThreadCreate(osThread(uartTask), NULL);
 364:Src/main.c    ****   //osThreadDef(i2cTask, writei2c, osPriorityAboveNormal,1,256);
 365:Src/main.c    ****   //i2cTaskHandle = osThreadCreate(osThread(i2cTask),NULL);
 366:Src/main.c    ****   //osThreadDef(ledTask, Leds, osPriorityAboveNormal, 1, 128);
 367:Src/main.c    ****   //ledTaskHandle = osThreadCreate(osThread(ledTask),NULL);
 368:Src/main.c    ****   osThreadDef(spiTask,spiTest,osPriorityAboveNormal,1,128);
 369:Src/main.c    ****   spiTaskHandle = osThreadCreate(osThread(spiTask),NULL);
 370:Src/main.c    ****   /* USER CODE END RTOS_THREADS */
 371:Src/main.c    **** 
 372:Src/main.c    ****   /* USER CODE BEGIN RTOS_QUEUES */
ARM GAS  /tmp/cc2tcWM6.s 			page 8


 373:Src/main.c    ****   /* add queues, ... */
 374:Src/main.c    ****   /* USER CODE END RTOS_QUEUES */
 375:Src/main.c    ****  
 376:Src/main.c    **** 
 377:Src/main.c    ****   /* Start scheduler */
 378:Src/main.c    ****   osKernelStart();
 379:Src/main.c    ****   
 380:Src/main.c    ****   /* We should never get here as control is now taken by the scheduler */
 381:Src/main.c    **** 
 382:Src/main.c    ****   /* Infinite loop */
 383:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 384:Src/main.c    ****   while (1)
 385:Src/main.c    ****   {
 386:Src/main.c    **** 
 387:Src/main.c    ****   /* USER CODE END WHILE */
 388:Src/main.c    **** 
 389:Src/main.c    ****   /* USER CODE BEGIN 3 */
 390:Src/main.c    **** 
 391:Src/main.c    ****   }
 392:Src/main.c    ****   /* USER CODE END 3 */
 393:Src/main.c    **** 
 394:Src/main.c    **** }
 395:Src/main.c    **** 
 396:Src/main.c    **** /**
 397:Src/main.c    ****   * @brief System Clock Configuration
 398:Src/main.c    ****   * @retval None
 399:Src/main.c    ****   */
 400:Src/main.c    **** void SystemClock_Config(void)
 401:Src/main.c    **** {
 402:Src/main.c    **** 
 403:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 404:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 405:Src/main.c    **** 
 406:Src/main.c    ****     /**Configure the main internal regulator output voltage 
 407:Src/main.c    ****     */
 408:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 409:Src/main.c    **** 
 410:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 411:Src/main.c    **** 
 412:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 413:Src/main.c    ****     */
 414:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 415:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 416:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 417:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 418:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 419:Src/main.c    ****   {
 420:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 421:Src/main.c    ****   }
 422:Src/main.c    **** 
 423:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 424:Src/main.c    ****     */
 425:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 426:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 427:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 428:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 429:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
ARM GAS  /tmp/cc2tcWM6.s 			page 9


 430:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 431:Src/main.c    **** 
 432:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 433:Src/main.c    ****   {
 434:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 435:Src/main.c    ****   }
 436:Src/main.c    **** 
 437:Src/main.c    ****     /**Configure the Systick interrupt time 
 438:Src/main.c    ****     */
 439:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 440:Src/main.c    **** 
 441:Src/main.c    ****     /**Configure the Systick 
 442:Src/main.c    ****     */
 443:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 444:Src/main.c    **** 
 445:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 446:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 447:Src/main.c    **** }
 448:Src/main.c    **** 
 449:Src/main.c    **** /* CAN1 init function */
 450:Src/main.c    **** static void MX_CAN1_Init(void)
 451:Src/main.c    **** {
 452:Src/main.c    **** 
 453:Src/main.c    ****   hcan1.Instance = CAN1;
 454:Src/main.c    ****   hcan1.Init.Prescaler = 2;
 455:Src/main.c    ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 456:Src/main.c    ****   hcan1.Init.SyncJumpWidth = CAN_SJW_4TQ;
 457:Src/main.c    ****   hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 458:Src/main.c    ****   hcan1.Init.TimeSeg2 = CAN_BS2_6TQ;
 459:Src/main.c    ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 460:Src/main.c    ****   hcan1.Init.AutoBusOff = ENABLE;
 461:Src/main.c    ****   hcan1.Init.AutoWakeUp = DISABLE;
 462:Src/main.c    ****   hcan1.Init.AutoRetransmission = DISABLE;
 463:Src/main.c    ****   hcan1.Init.ReceiveFifoLocked = ENABLE;
 464:Src/main.c    ****   hcan1.Init.TransmitFifoPriority = ENABLE;
 465:Src/main.c    ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 466:Src/main.c    ****   {
 467:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 468:Src/main.c    ****   }
 469:Src/main.c    **** 
 470:Src/main.c    **** }
 471:Src/main.c    **** 
 472:Src/main.c    **** /* I2C1 init function */
 473:Src/main.c    **** static void MX_I2C1_Init(void)
 474:Src/main.c    **** {
 475:Src/main.c    **** 
 476:Src/main.c    ****   hi2c1.Instance = I2C1;
 477:Src/main.c    ****   hi2c1.Init.ClockSpeed = 100000;
 478:Src/main.c    ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 479:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 0;
 480:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 481:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 482:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 483:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 484:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 485:Src/main.c    ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 486:Src/main.c    ****   {
ARM GAS  /tmp/cc2tcWM6.s 			page 10


 487:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 488:Src/main.c    ****   }
 489:Src/main.c    **** 
 490:Src/main.c    **** }
 491:Src/main.c    **** 
 492:Src/main.c    **** /* SPI1 init function */
 493:Src/main.c    **** static void MX_SPI1_Init(void)
 494:Src/main.c    **** {
 495:Src/main.c    **** 
 496:Src/main.c    ****   /* SPI1 parameter configuration*/
 497:Src/main.c    ****   hspi1.Instance = SPI1;
 498:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 499:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 500:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 501:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 502:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 503:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 504:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 505:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 506:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 507:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 508:Src/main.c    ****   hspi1.Init.CRCPolynomial = 10;
 509:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 510:Src/main.c    ****   {
 511:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 512:Src/main.c    ****   }
 513:Src/main.c    ****   
 514:Src/main.c    **** }
 515:Src/main.c    **** 
 516:Src/main.c    **** /* UART4 init function */
 517:Src/main.c    **** static void MX_UART4_Init(void)
 518:Src/main.c    **** {
 519:Src/main.c    **** 
 520:Src/main.c    ****   huart4.Instance = UART4;
 521:Src/main.c    ****   huart4.Init.BaudRate = 57600;
 522:Src/main.c    ****   huart4.Init.WordLength = UART_WORDLENGTH_8B;
 523:Src/main.c    ****   huart4.Init.StopBits = UART_STOPBITS_1;
 524:Src/main.c    ****   huart4.Init.Parity = UART_PARITY_NONE;
 525:Src/main.c    ****   huart4.Init.Mode = UART_MODE_TX_RX;
 526:Src/main.c    ****   huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 527:Src/main.c    ****   huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 528:Src/main.c    ****   if (HAL_UART_Init(&huart4) != HAL_OK)
 529:Src/main.c    ****   {
 530:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 531:Src/main.c    ****   }
 532:Src/main.c    **** 
 533:Src/main.c    **** }
 534:Src/main.c    **** 
 535:Src/main.c    **** /** Configure pins as 
 536:Src/main.c    ****         * Analog 
 537:Src/main.c    ****         * Input 
 538:Src/main.c    ****         * Output
 539:Src/main.c    ****         * EVENT_OUT
 540:Src/main.c    ****         * EXTI
 541:Src/main.c    **** */
 542:Src/main.c    **** static void MX_GPIO_Init(void)
 543:Src/main.c    **** {
ARM GAS  /tmp/cc2tcWM6.s 			page 11


 544:Src/main.c    **** 
 545:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct;
 546:Src/main.c    **** 
 547:Src/main.c    ****   /* GPIO Ports Clock Enable */
 548:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 549:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 550:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 551:Src/main.c    **** 
 552:Src/main.c    ****   /*Configure GPIO pin Output Level */
 553:Src/main.c    ****   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 554:Src/main.c    **** 
 555:Src/main.c    ****   /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
 556:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 557:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 558:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 559:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 560:Src/main.c    ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 561:Src/main.c    **** 
 562:Src/main.c    **** 
 563:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 564:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 565:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 566:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 567:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 568:Src/main.c    **** 
 569:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_4;
 570:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 571:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 572:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 573:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 574:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 575:Src/main.c    **** 
 576:Src/main.c    **** }
 577:Src/main.c    **** 
 578:Src/main.c    **** /* USER CODE BEGIN 4 */
 579:Src/main.c    **** 
 580:Src/main.c    **** /* USER CODE END 4 */
 581:Src/main.c    **** 
 582:Src/main.c    **** /* USER CODE BEGIN Header_StartDefaultTask */
 583:Src/main.c    **** /**
 584:Src/main.c    ****   * @brief  Function implementing the defaultTask thread.
 585:Src/main.c    ****   * @param  argument: Not used 
 586:Src/main.c    ****   * @retval None
 587:Src/main.c    ****   */
 588:Src/main.c    **** /* USER CODE END Header_StartDefaultTask */
 589:Src/main.c    **** void StartDefaultTask(void const * argument)
 590:Src/main.c    **** {
  29              		.loc 1 590 0
  30              		.cfi_startproc
  31              		@ Volatile: function does not return.
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              	.LVL0:
  35 0000 08B5     		push	{r3, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 3, -8
ARM GAS  /tmp/cc2tcWM6.s 			page 12


  39              		.cfi_offset 14, -4
  40              	.LVL1:
  41              	.L2:
 591:Src/main.c    **** 
 592:Src/main.c    ****   /* USER CODE BEGIN 5 */
 593:Src/main.c    ****   /* Infinite loop */
 594:Src/main.c    ****   for(;;)
 595:Src/main.c    ****   {
 596:Src/main.c    ****     osDelay(1);
  42              		.loc 1 596 0 discriminator 1
  43 0002 0120     		movs	r0, #1
  44 0004 FFF7FEFF 		bl	osDelay
  45              	.LVL2:
 597:Src/main.c    ****   }
  46              		.loc 1 597 0 discriminator 1
  47 0008 FBE7     		b	.L2
  48              		.cfi_endproc
  49              	.LFE141:
  51 000a 00BF     		.section	.text.MX_GPIO_Init,"ax",%progbits
  52              		.align	2
  53              		.thumb
  54              		.thumb_func
  56              	MX_GPIO_Init:
  57              	.LFB140:
 543:Src/main.c    **** 
  58              		.loc 1 543 0
  59              		.cfi_startproc
  60              		@ args = 0, pretend = 0, frame = 32
  61              		@ frame_needed = 0, uses_anonymous_args = 0
  62 0000 70B5     		push	{r4, r5, r6, lr}
  63              	.LCFI1:
  64              		.cfi_def_cfa_offset 16
  65              		.cfi_offset 4, -16
  66              		.cfi_offset 5, -12
  67              		.cfi_offset 6, -8
  68              		.cfi_offset 14, -4
  69 0002 88B0     		sub	sp, sp, #32
  70              	.LCFI2:
  71              		.cfi_def_cfa_offset 48
  72              	.LBB2:
 548:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  73              		.loc 1 548 0
  74 0004 0024     		movs	r4, #0
  75 0006 0094     		str	r4, [sp]
  76 0008 264B     		ldr	r3, .L6
  77 000a 1A6B     		ldr	r2, [r3, #48]
  78 000c 42F00102 		orr	r2, r2, #1
  79 0010 1A63     		str	r2, [r3, #48]
  80 0012 1A6B     		ldr	r2, [r3, #48]
  81 0014 02F00102 		and	r2, r2, #1
  82 0018 0092     		str	r2, [sp]
  83 001a 009A     		ldr	r2, [sp]
  84              	.LBE2:
  85              	.LBB3:
 549:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  86              		.loc 1 549 0
  87 001c 0194     		str	r4, [sp, #4]
ARM GAS  /tmp/cc2tcWM6.s 			page 13


  88 001e 1A6B     		ldr	r2, [r3, #48]
  89 0020 42F00802 		orr	r2, r2, #8
  90 0024 1A63     		str	r2, [r3, #48]
  91 0026 1A6B     		ldr	r2, [r3, #48]
  92 0028 02F00802 		and	r2, r2, #8
  93 002c 0192     		str	r2, [sp, #4]
  94 002e 019A     		ldr	r2, [sp, #4]
  95              	.LBE3:
  96              	.LBB4:
 550:Src/main.c    **** 
  97              		.loc 1 550 0
  98 0030 0294     		str	r4, [sp, #8]
  99 0032 1A6B     		ldr	r2, [r3, #48]
 100 0034 42F00202 		orr	r2, r2, #2
 101 0038 1A63     		str	r2, [r3, #48]
 102 003a 1B6B     		ldr	r3, [r3, #48]
 103 003c 03F00203 		and	r3, r3, #2
 104 0040 0293     		str	r3, [sp, #8]
 105 0042 029B     		ldr	r3, [sp, #8]
 106              	.LBE4:
 553:Src/main.c    **** 
 107              		.loc 1 553 0
 108 0044 184E     		ldr	r6, .L6+4
 109 0046 3046     		mov	r0, r6
 110 0048 4FF47041 		mov	r1, #61440
 111 004c 2246     		mov	r2, r4
 112 004e FFF7FEFF 		bl	HAL_GPIO_WritePin
 113              	.LVL3:
 556:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 114              		.loc 1 556 0
 115 0052 4FF47043 		mov	r3, #61440
 116 0056 0393     		str	r3, [sp, #12]
 557:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 117              		.loc 1 557 0
 118 0058 0125     		movs	r5, #1
 119 005a 0495     		str	r5, [sp, #16]
 558:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 120              		.loc 1 558 0
 121 005c 0594     		str	r4, [sp, #20]
 559:Src/main.c    ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 122              		.loc 1 559 0
 123 005e 0694     		str	r4, [sp, #24]
 560:Src/main.c    **** 
 124              		.loc 1 560 0
 125 0060 3046     		mov	r0, r6
 126 0062 03A9     		add	r1, sp, #12
 127 0064 FFF7FEFF 		bl	HAL_GPIO_Init
 128              	.LVL4:
 563:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 129              		.loc 1 563 0
 130 0068 4FF44073 		mov	r3, #768
 131 006c 0393     		str	r3, [sp, #12]
 564:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 132              		.loc 1 564 0
 133 006e 0223     		movs	r3, #2
 134 0070 0493     		str	r3, [sp, #16]
 565:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
ARM GAS  /tmp/cc2tcWM6.s 			page 14


 135              		.loc 1 565 0
 136 0072 0594     		str	r4, [sp, #20]
 566:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 137              		.loc 1 566 0
 138 0074 0323     		movs	r3, #3
 139 0076 0693     		str	r3, [sp, #24]
 567:Src/main.c    **** 
 140              		.loc 1 567 0
 141 0078 0C48     		ldr	r0, .L6+8
 142 007a 03A9     		add	r1, sp, #12
 143 007c FFF7FEFF 		bl	HAL_GPIO_Init
 144              	.LVL5:
 569:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 145              		.loc 1 569 0
 146 0080 1026     		movs	r6, #16
 147 0082 0396     		str	r6, [sp, #12]
 570:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 148              		.loc 1 570 0
 149 0084 0495     		str	r5, [sp, #16]
 571:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 150              		.loc 1 571 0
 151 0086 0594     		str	r4, [sp, #20]
 572:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 152              		.loc 1 572 0
 153 0088 0694     		str	r4, [sp, #24]
 573:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 154              		.loc 1 573 0
 155 008a 094C     		ldr	r4, .L6+12
 156 008c 2046     		mov	r0, r4
 157 008e 03A9     		add	r1, sp, #12
 158 0090 FFF7FEFF 		bl	HAL_GPIO_Init
 159              	.LVL6:
 574:Src/main.c    **** 
 160              		.loc 1 574 0
 161 0094 2046     		mov	r0, r4
 162 0096 3146     		mov	r1, r6
 163 0098 2A46     		mov	r2, r5
 164 009a FFF7FEFF 		bl	HAL_GPIO_WritePin
 165              	.LVL7:
 576:Src/main.c    **** 
 166              		.loc 1 576 0
 167 009e 08B0     		add	sp, sp, #32
 168              	.LCFI3:
 169              		.cfi_def_cfa_offset 16
 170              		@ sp needed
 171 00a0 70BD     		pop	{r4, r5, r6, pc}
 172              	.L7:
 173 00a2 00BF     		.align	2
 174              	.L6:
 175 00a4 00380240 		.word	1073887232
 176 00a8 000C0240 		.word	1073875968
 177 00ac 00040240 		.word	1073873920
 178 00b0 00000240 		.word	1073872896
 179              		.cfi_endproc
 180              	.LFE140:
 182              		.section	.text.writei2c,"ax",%progbits
 183              		.align	2
ARM GAS  /tmp/cc2tcWM6.s 			page 15


 184              		.global	writei2c
 185              		.thumb
 186              		.thumb_func
 188              	writei2c:
 189              	.LFB128:
 120:Src/main.c    ****   //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 190              		.loc 1 120 0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 0
 193              		@ frame_needed = 0, uses_anonymous_args = 0
 194              	.LVL8:
 127:Src/main.c    ****     i2c_tx_buff_accel[i] = addr++;
 195              		.loc 1 127 0
 196 0000 0023     		movs	r3, #0
 125:Src/main.c    ****   int i;
 197              		.loc 1 125 0
 198 0002 3B22     		movs	r2, #59
 127:Src/main.c    ****     i2c_tx_buff_accel[i] = addr++;
 199              		.loc 1 127 0
 200 0004 05E0     		b	.L9
 201              	.LVL9:
 202              	.L10:
 128:Src/main.c    ****     i2c_rx_buff_accel[i] = i;
 203              		.loc 1 128 0 discriminator 3
 204 0006 2549     		ldr	r1, .L17
 205 0008 CA54     		strb	r2, [r1, r3]
 129:Src/main.c    ****   }
 206              		.loc 1 129 0 discriminator 3
 207 000a 2549     		ldr	r1, .L17+4
 208 000c CB54     		strb	r3, [r1, r3]
 127:Src/main.c    ****     i2c_tx_buff_accel[i] = addr++;
 209              		.loc 1 127 0 discriminator 3
 210 000e 0133     		adds	r3, r3, #1
 211              	.LVL10:
 128:Src/main.c    ****     i2c_rx_buff_accel[i] = i;
 212              		.loc 1 128 0 discriminator 3
 213 0010 0132     		adds	r2, r2, #1
 214              	.LVL11:
 215              	.L9:
 127:Src/main.c    ****     i2c_tx_buff_accel[i] = addr++;
 216              		.loc 1 127 0 discriminator 1
 217 0012 052B     		cmp	r3, #5
 218 0014 F7DD     		ble	.L10
 120:Src/main.c    ****   //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 219              		.loc 1 120 0
 220 0016 30B5     		push	{r4, r5, lr}
 221              	.LCFI4:
 222              		.cfi_def_cfa_offset 12
 223              		.cfi_offset 4, -12
 224              		.cfi_offset 5, -8
 225              		.cfi_offset 14, -4
 226 0018 83B0     		sub	sp, sp, #12
 227              	.LCFI5:
 228              		.cfi_def_cfa_offset 24
 229              	.LVL12:
 230              	.L15:
 136:Src/main.c    ****     status = HAL_OK;
ARM GAS  /tmp/cc2tcWM6.s 			page 16


 231              		.loc 1 136 0
 232 001a 40F6B830 		movw	r0, #3000
 233 001e FFF7FEFF 		bl	osDelay
 234              	.LVL13:
 138:Src/main.c    ****       status = HAL_I2C_Master_Transmit(&hi2c1,I2C_ADDRESS_IMU,i2c_tx_buff_accel+i,sizeof(uint8_t),1
 235              		.loc 1 138 0
 236 0022 0024     		movs	r4, #0
 237 0024 21E0     		b	.L11
 238              	.LVL14:
 239              	.L14:
 139:Src/main.c    **** 
 240              		.loc 1 139 0
 241 0026 2546     		mov	r5, r4
 242 0028 0A23     		movs	r3, #10
 243 002a 0093     		str	r3, [sp]
 244 002c 1D48     		ldr	r0, .L17+8
 245 002e D021     		movs	r1, #208
 246 0030 1A4A     		ldr	r2, .L17
 247 0032 2244     		add	r2, r2, r4
 248 0034 0123     		movs	r3, #1
 249 0036 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 250              	.LVL15:
 141:Src/main.c    ****         HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 251              		.loc 1 141 0
 252 003a 30B1     		cbz	r0, .L12
 142:Src/main.c    ****       }
 253              		.loc 1 142 0
 254 003c 1A48     		ldr	r0, .L17+12
 255              	.LVL16:
 256 003e 4FF40041 		mov	r1, #32768
 257 0042 0122     		movs	r2, #1
 258 0044 FFF7FEFF 		bl	HAL_GPIO_WritePin
 259              	.LVL17:
 260 0048 05E0     		b	.L13
 261              	.LVL18:
 262              	.L12:
 145:Src/main.c    ****       }
 263              		.loc 1 145 0
 264 004a 1748     		ldr	r0, .L17+12
 265              	.LVL19:
 266 004c 4FF40041 		mov	r1, #32768
 267 0050 0022     		movs	r2, #0
 268 0052 FFF7FEFF 		bl	HAL_GPIO_WritePin
 269              	.LVL20:
 270              	.L13:
 147:Src/main.c    ****     }
 271              		.loc 1 147 0 discriminator 2
 272 0056 0A23     		movs	r3, #10
 273 0058 0093     		str	r3, [sp]
 274 005a 1248     		ldr	r0, .L17+8
 275 005c D021     		movs	r1, #208
 276 005e 104A     		ldr	r2, .L17+4
 277 0060 2A44     		add	r2, r2, r5
 278 0062 0123     		movs	r3, #1
 279 0064 FFF7FEFF 		bl	HAL_I2C_Master_Receive
 280              	.LVL21:
 138:Src/main.c    ****       status = HAL_I2C_Master_Transmit(&hi2c1,I2C_ADDRESS_IMU,i2c_tx_buff_accel+i,sizeof(uint8_t),1
ARM GAS  /tmp/cc2tcWM6.s 			page 17


 281              		.loc 1 138 0 discriminator 2
 282 0068 0134     		adds	r4, r4, #1
 283              	.LVL22:
 284              	.L11:
 138:Src/main.c    ****       status = HAL_I2C_Master_Transmit(&hi2c1,I2C_ADDRESS_IMU,i2c_tx_buff_accel+i,sizeof(uint8_t),1
 285              		.loc 1 138 0 is_stmt 0 discriminator 1
 286 006a 052C     		cmp	r4, #5
 287 006c DBDD     		ble	.L14
 151:Src/main.c    ****     i2c_accel[1] = (i2c_rx_buff_accel[2] << 8) + i2c_rx_buff_accel[3];
 288              		.loc 1 151 0 is_stmt 1
 289 006e 0C4B     		ldr	r3, .L17+4
 290 0070 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 291 0072 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
 292 0074 0D4A     		ldr	r2, .L17+16
 293 0076 01EB0021 		add	r1, r1, r0, lsl #8
 294 007a 1180     		strh	r1, [r2]	@ movhi
 152:Src/main.c    ****     i2c_accel[2] = (i2c_rx_buff_accel[4] << 8) + i2c_rx_buff_accel[5];
 295              		.loc 1 152 0
 296 007c 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 297 007e D978     		ldrb	r1, [r3, #3]	@ zero_extendqisi2
 298 0080 01EB0021 		add	r1, r1, r0, lsl #8
 299 0084 5180     		strh	r1, [r2, #2]	@ movhi
 153:Src/main.c    ****     //uart_debug(i2c_accel,sizeof(i2c_accel));
 300              		.loc 1 153 0
 301 0086 1979     		ldrb	r1, [r3, #4]	@ zero_extendqisi2
 302 0088 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 303 008a 03EB0123 		add	r3, r3, r1, lsl #8
 304 008e 9380     		strh	r3, [r2, #4]	@ movhi
 156:Src/main.c    ****   }
 305              		.loc 1 156 0
 306 0090 0548     		ldr	r0, .L17+12
 307 0092 4FF48051 		mov	r1, #4096
 308 0096 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 309              	.LVL23:
 157:Src/main.c    **** }
 310              		.loc 1 157 0
 311 009a BEE7     		b	.L15
 312              	.L18:
 313              		.align	2
 314              	.L17:
 315 009c 00000000 		.word	i2c_tx_buff_accel
 316 00a0 00000000 		.word	i2c_rx_buff_accel
 317 00a4 00000000 		.word	hi2c1
 318 00a8 000C0240 		.word	1073875968
 319 00ac 00000000 		.word	i2c_accel
 320              		.cfi_endproc
 321              	.LFE128:
 323              		.section	.text.canTest,"ax",%progbits
 324              		.align	2
 325              		.global	canTest
 326              		.thumb
 327              		.thumb_func
 329              	canTest:
 330              	.LFB131:
 205:Src/main.c    ****   HAL_CAN_Start(&hcan1);
 331              		.loc 1 205 0
 332              		.cfi_startproc
ARM GAS  /tmp/cc2tcWM6.s 			page 18


 333              		@ args = 0, pretend = 0, frame = 40
 334              		@ frame_needed = 0, uses_anonymous_args = 0
 335              	.LVL24:
 336 0000 30B5     		push	{r4, r5, lr}
 337              	.LCFI6:
 338              		.cfi_def_cfa_offset 12
 339              		.cfi_offset 4, -12
 340              		.cfi_offset 5, -8
 341              		.cfi_offset 14, -4
 342 0002 8BB0     		sub	sp, sp, #44
 343              	.LCFI7:
 344              		.cfi_def_cfa_offset 56
 206:Src/main.c    ****   HAL_CAN_WakeUp(&hcan1);
 345              		.loc 1 206 0
 346 0004 214C     		ldr	r4, .L27
 347 0006 2046     		mov	r0, r4
 348              	.LVL25:
 349 0008 FFF7FEFF 		bl	HAL_CAN_Start
 350              	.LVL26:
 207:Src/main.c    ****   uint8_t data[8] = {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};
 351              		.loc 1 207 0
 352 000c 2046     		mov	r0, r4
 353 000e FFF7FEFF 		bl	HAL_CAN_WakeUp
 354              	.LVL27:
 208:Src/main.c    ****   uint8_t data2[8] = {0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA};
 355              		.loc 1 208 0
 356 0012 1F4B     		ldr	r3, .L27+4
 357 0014 08AA     		add	r2, sp, #32
 358 0016 1868     		ldr	r0, [r3]	@ unaligned
 359 0018 5968     		ldr	r1, [r3, #4]	@ unaligned
 360 001a 03C2     		stmia	r2!, {r0, r1}
 209:Src/main.c    ****   uint8_t* data_ptr;
 361              		.loc 1 209 0
 362 001c 06AA     		add	r2, sp, #24
 363 001e 53F8080F 		ldr	r0, [r3, #8]!	@ unaligned
 364 0022 5968     		ldr	r1, [r3, #4]	@ unaligned
 365 0024 03C2     		stmia	r2!, {r0, r1}
 366              	.LVL28:
 214:Src/main.c    ****   tx_buffer.ExtId = 0x500;
 367              		.loc 1 214 0
 368 0026 4FF4A063 		mov	r3, #1280
 369 002a 0093     		str	r3, [sp]
 215:Src/main.c    ****   tx_buffer.IDE = CAN_ID_STD;
 370              		.loc 1 215 0
 371 002c 0193     		str	r3, [sp, #4]
 216:Src/main.c    ****   tx_buffer.RTR = CAN_RTR_DATA;
 372              		.loc 1 216 0
 373 002e 0024     		movs	r4, #0
 374 0030 0294     		str	r4, [sp, #8]
 217:Src/main.c    ****   tx_buffer.DLC = sizeof(data);
 375              		.loc 1 217 0
 376 0032 0394     		str	r4, [sp, #12]
 218:Src/main.c    ****   HAL_StatusTypeDef status = HAL_OK;
 377              		.loc 1 218 0
 378 0034 0823     		movs	r3, #8
 379 0036 0493     		str	r3, [sp, #16]
 380              	.LVL29:
ARM GAS  /tmp/cc2tcWM6.s 			page 19


 381              	.L20:
 223:Src/main.c    ****     status = HAL_OK;
 382              		.loc 1 223 0
 383 0038 0420     		movs	r0, #4
 384 003a FFF7FEFF 		bl	osDelay
 385              	.LVL30:
 225:Src/main.c    ****     data_sel ^= 0b1;
 386              		.loc 1 225 0
 387 003e 0CB1     		cbz	r4, .L25
 388 0040 08AD     		add	r5, sp, #32
 389 0042 00E0     		b	.L21
 390              	.L25:
 391 0044 06AD     		add	r5, sp, #24
 392              	.L21:
 393              	.LVL31:
 226:Src/main.c    ****     while (HAL_CAN_IsTxMessagePending(&hcan1, (uint32_t)CAN_TX_MAILBOX0)) {
 394              		.loc 1 226 0 discriminator 4
 395 0046 84F00104 		eor	r4, r4, #1
 396              	.LVL32:
 397              	.L22:
 227:Src/main.c    ****       //HAL_GPIO_WritePin(GPIOD, ORANGE_LED, GPIO_PIN_SET);
 398              		.loc 1 227 0 discriminator 1
 399 004a 1048     		ldr	r0, .L27
 400 004c 0121     		movs	r1, #1
 401 004e FFF7FEFF 		bl	HAL_CAN_IsTxMessagePending
 402              	.LVL33:
 403 0052 0028     		cmp	r0, #0
 404 0054 F9D1     		bne	.L22
 232:Src/main.c    **** 
 405              		.loc 1 232 0
 406 0056 0D48     		ldr	r0, .L27
 407 0058 6946     		mov	r1, sp
 408 005a 2A46     		mov	r2, r5
 409 005c 0123     		movs	r3, #1
 410 005e FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 411              	.LVL34:
 234:Src/main.c    ****       HAL_GPIO_WritePin(GPIOD, GREEN_LED, GPIO_PIN_SET);
 412              		.loc 1 234 0
 413 0062 30B9     		cbnz	r0, .L23
 235:Src/main.c    ****     }
 414              		.loc 1 235 0
 415 0064 0B48     		ldr	r0, .L27+8
 416              	.LVL35:
 417 0066 4FF48051 		mov	r1, #4096
 418 006a 0122     		movs	r2, #1
 419 006c FFF7FEFF 		bl	HAL_GPIO_WritePin
 420              	.LVL36:
 421 0070 E2E7     		b	.L20
 422              	.LVL37:
 423              	.L23:
 238:Src/main.c    ****       HAL_GPIO_TogglePin(GPIOD, RED_LED);
 424              		.loc 1 238 0
 425 0072 084D     		ldr	r5, .L27+8
 426              	.LVL38:
 427 0074 2846     		mov	r0, r5
 428              	.LVL39:
 429 0076 4FF48051 		mov	r1, #4096
ARM GAS  /tmp/cc2tcWM6.s 			page 20


 430 007a 0022     		movs	r2, #0
 431 007c FFF7FEFF 		bl	HAL_GPIO_WritePin
 432              	.LVL40:
 239:Src/main.c    ****       //unsigned char temparr[] = {"NOT WORKING"};
 433              		.loc 1 239 0
 434 0080 2846     		mov	r0, r5
 435 0082 4FF48041 		mov	r1, #16384
 436 0086 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 437              	.LVL41:
 438 008a D5E7     		b	.L20
 439              	.L28:
 440              		.align	2
 441              	.L27:
 442 008c 00000000 		.word	hcan1
 443 0090 00000000 		.word	.LANCHOR0
 444 0094 000C0240 		.word	1073875968
 445              		.cfi_endproc
 446              	.LFE131:
 448              		.section	.text.uart_debug,"ax",%progbits
 449              		.align	2
 450              		.global	uart_debug
 451              		.thumb
 452              		.thumb_func
 454              	uart_debug:
 455              	.LFB132:
 248:Src/main.c    ****   HAL_StatusTypeDef status = HAL_OK;
 456              		.loc 1 248 0
 457              		.cfi_startproc
 458              		@ args = 0, pretend = 0, frame = 0
 459              		@ frame_needed = 0, uses_anonymous_args = 0
 460              	.LVL42:
 461 0000 08B5     		push	{r3, lr}
 462              	.LCFI8:
 463              		.cfi_def_cfa_offset 8
 464              		.cfi_offset 3, -8
 465              		.cfi_offset 14, -4
 466 0002 0346     		mov	r3, r0
 467              	.LVL43:
 251:Src/main.c    ****   if (status != HAL_OK) {
 468              		.loc 1 251 0
 469 0004 0A46     		mov	r2, r1
 470 0006 0648     		ldr	r0, .L32
 471              	.LVL44:
 472 0008 1946     		mov	r1, r3
 473              	.LVL45:
 474 000a 4FF0FF33 		mov	r3, #-1
 475              	.LVL46:
 476 000e FFF7FEFF 		bl	HAL_UART_Transmit
 477              	.LVL47:
 252:Src/main.c    ****     //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 478              		.loc 1 252 0
 479 0012 20B9     		cbnz	r0, .L29
 256:Src/main.c    ****     //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 480              		.loc 1 256 0
 481 0014 0348     		ldr	r0, .L32+4
 482              	.LVL48:
 483 0016 4FF40041 		mov	r1, #32768
ARM GAS  /tmp/cc2tcWM6.s 			page 21


 484 001a FFF7FEFF 		bl	HAL_GPIO_TogglePin
 485              	.LVL49:
 486              	.L29:
 487 001e 08BD     		pop	{r3, pc}
 488              	.L33:
 489              		.align	2
 490              	.L32:
 491 0020 00000000 		.word	huart4
 492 0024 000C0240 		.word	1073875968
 493              		.cfi_endproc
 494              	.LFE132:
 496              		.section	.text.uartTest,"ax",%progbits
 497              		.align	2
 498              		.global	uartTest
 499              		.thumb
 500              		.thumb_func
 502              	uartTest:
 503              	.LFB129:
 160:Src/main.c    ****   int i = 0;
 504              		.loc 1 160 0
 505              		.cfi_startproc
 506              		@ args = 0, pretend = 0, frame = 0
 507              		@ frame_needed = 0, uses_anonymous_args = 0
 508              	.LVL50:
 509 0000 08B5     		push	{r3, lr}
 510              	.LCFI9:
 511              		.cfi_def_cfa_offset 8
 512              		.cfi_offset 3, -8
 513              		.cfi_offset 14, -4
 514              	.LVL51:
 162:Src/main.c    ****     arr[i] = i;
 515              		.loc 1 162 0
 516 0002 0023     		movs	r3, #0
 517 0004 02E0     		b	.L35
 518              	.LVL52:
 519              	.L36:
 163:Src/main.c    ****   }
 520              		.loc 1 163 0 discriminator 3
 521 0006 094A     		ldr	r2, .L39
 522 0008 D354     		strb	r3, [r2, r3]
 162:Src/main.c    ****     arr[i] = i;
 523              		.loc 1 162 0 discriminator 3
 524 000a 0133     		adds	r3, r3, #1
 525              	.LVL53:
 526              	.L35:
 162:Src/main.c    ****     arr[i] = i;
 527              		.loc 1 162 0 is_stmt 0 discriminator 1
 528 000c 082B     		cmp	r3, #8
 529 000e FADD     		ble	.L36
 530              	.LVL54:
 531              	.L37:
 166:Src/main.c    ****     //HAL_UART_Transmit(&huart4,ptr,size_,HAL_MAX_DELAY);
 532              		.loc 1 166 0 is_stmt 1 discriminator 1
 533 0010 0748     		ldr	r0, .L39+4
 534 0012 4FF48051 		mov	r1, #4096
 535 0016 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 536              	.LVL55:
ARM GAS  /tmp/cc2tcWM6.s 			page 22


 168:Src/main.c    ****     osDelay(100);
 537              		.loc 1 168 0 discriminator 1
 538 001a 0448     		ldr	r0, .L39
 539 001c 0921     		movs	r1, #9
 540 001e FFF7FEFF 		bl	uart_debug
 541              	.LVL56:
 169:Src/main.c    ****   }
 542              		.loc 1 169 0 discriminator 1
 543 0022 6420     		movs	r0, #100
 544 0024 FFF7FEFF 		bl	osDelay
 545              	.LVL57:
 170:Src/main.c    **** }
 546              		.loc 1 170 0 discriminator 1
 547 0028 F2E7     		b	.L37
 548              	.L40:
 549 002a 00BF     		.align	2
 550              	.L39:
 551 002c 00000000 		.word	arr
 552 0030 000C0240 		.word	1073875968
 553              		.cfi_endproc
 554              	.LFE129:
 556              		.section	.text.spiTest,"ax",%progbits
 557              		.align	2
 558              		.global	spiTest
 559              		.thumb
 560              		.thumb_func
 562              	spiTest:
 563              	.LFB130:
 173:Src/main.c    ****   HAL_StatusTypeDef status;
 564              		.loc 1 173 0
 565              		.cfi_startproc
 566              		@ args = 0, pretend = 0, frame = 0
 567              		@ frame_needed = 0, uses_anonymous_args = 0
 568              	.LVL58:
 569 0000 10B5     		push	{r4, lr}
 570              	.LCFI10:
 571              		.cfi_def_cfa_offset 8
 572              		.cfi_offset 4, -8
 573              		.cfi_offset 14, -4
 574 0002 82B0     		sub	sp, sp, #8
 575              	.LCFI11:
 576              		.cfi_def_cfa_offset 16
 175:Src/main.c    ****   while (1) {
 577              		.loc 1 175 0
 578 0004 1F48     		ldr	r0, .L46
 579              	.LVL59:
 580 0006 1021     		movs	r1, #16
 581 0008 0122     		movs	r2, #1
 582 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
 583              	.LVL60:
 584              	.L44:
 177:Src/main.c    ****     status = HAL_OK;
 585              		.loc 1 177 0
 586 000e 4FF47A70 		mov	r0, #1000
 587 0012 FFF7FEFF 		bl	osDelay
 588              	.LVL61:
 179:Src/main.c    ****     HAL_Delay(1);
ARM GAS  /tmp/cc2tcWM6.s 			page 23


 589              		.loc 1 179 0
 590 0016 1B48     		ldr	r0, .L46
 591 0018 1021     		movs	r1, #16
 592 001a 0022     		movs	r2, #0
 593 001c FFF7FEFF 		bl	HAL_GPIO_WritePin
 594              	.LVL62:
 180:Src/main.c    ****     //status = HAL_SPI_Transmit(&hspi1, spi_address,1,HAL_MAX_DELAY);
 595              		.loc 1 180 0
 596 0020 0120     		movs	r0, #1
 597 0022 FFF7FEFF 		bl	HAL_Delay
 598              	.LVL63:
 185:Src/main.c    ****     //HAL_Delay(1);
 599              		.loc 1 185 0
 600 0026 4FF0FF33 		mov	r3, #-1
 601 002a 0093     		str	r3, [sp]
 602 002c 1648     		ldr	r0, .L46+4
 603 002e 1749     		ldr	r1, .L46+8
 604 0030 174A     		ldr	r2, .L46+12
 605 0032 0123     		movs	r3, #1
 606 0034 FFF7FEFF 		bl	HAL_SPI_TransmitReceive
 607              	.LVL64:
 187:Src/main.c    ****       HAL_GPIO_WritePin(GPIOD, GREEN_LED, GPIO_PIN_SET);
 608              		.loc 1 187 0
 609 0038 30B1     		cbz	r0, .L42
 188:Src/main.c    ****     }
 610              		.loc 1 188 0
 611 003a 1648     		ldr	r0, .L46+16
 612              	.LVL65:
 613 003c 4FF48051 		mov	r1, #4096
 614 0040 0122     		movs	r2, #1
 615 0042 FFF7FEFF 		bl	HAL_GPIO_WritePin
 616              	.LVL66:
 617 0046 05E0     		b	.L43
 618              	.LVL67:
 619              	.L42:
 191:Src/main.c    ****     }
 620              		.loc 1 191 0
 621 0048 1248     		ldr	r0, .L46+16
 622              	.LVL68:
 623 004a 4FF48051 		mov	r1, #4096
 624 004e 0022     		movs	r2, #0
 625 0050 FFF7FEFF 		bl	HAL_GPIO_WritePin
 626              	.LVL69:
 627              	.L43:
 194:Src/main.c    ****     HAL_Delay(1);
 628              		.loc 1 194 0
 629 0054 104C     		ldr	r4, .L46+20
 630 0056 4FF0FF33 		mov	r3, #-1
 631 005a 0093     		str	r3, [sp]
 632 005c 0A48     		ldr	r0, .L46+4
 633 005e 0F49     		ldr	r1, .L46+24
 634 0060 2246     		mov	r2, r4
 635 0062 0123     		movs	r3, #1
 636 0064 FFF7FEFF 		bl	HAL_SPI_TransmitReceive
 637              	.LVL70:
 195:Src/main.c    ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 638              		.loc 1 195 0
ARM GAS  /tmp/cc2tcWM6.s 			page 24


 639 0068 0120     		movs	r0, #1
 640 006a FFF7FEFF 		bl	HAL_Delay
 641              	.LVL71:
 196:Src/main.c    ****     //spi_rx_buff[0] = 'A';
 642              		.loc 1 196 0
 643 006e 0548     		ldr	r0, .L46
 644 0070 1021     		movs	r1, #16
 645 0072 0122     		movs	r2, #1
 646 0074 FFF7FEFF 		bl	HAL_GPIO_WritePin
 647              	.LVL72:
 199:Src/main.c    ****   }
 648              		.loc 1 199 0
 649 0078 601E     		subs	r0, r4, #1
 650 007a 0221     		movs	r1, #2
 651 007c FFF7FEFF 		bl	uart_debug
 652              	.LVL73:
 200:Src/main.c    **** }
 653              		.loc 1 200 0
 654 0080 C5E7     		b	.L44
 655              	.L47:
 656 0082 00BF     		.align	2
 657              	.L46:
 658 0084 00000240 		.word	1073872896
 659 0088 00000000 		.word	hspi1
 660 008c 00000000 		.word	.LANCHOR1
 661 0090 00000000 		.word	spi_rx_buff
 662 0094 000C0240 		.word	1073875968
 663 0098 01000000 		.word	spi_rx_buff+1
 664 009c 01000000 		.word	.LANCHOR1+1
 665              		.cfi_endproc
 666              	.LFE130:
 668              		.section	.text.Leds,"ax",%progbits
 669              		.align	2
 670              		.global	Leds
 671              		.thumb
 672              		.thumb_func
 674              	Leds:
 675              	.LFB133:
 261:Src/main.c    **** 
 676              		.loc 1 261 0
 677              		.cfi_startproc
 678              		@ args = 0, pretend = 0, frame = 8
 679              		@ frame_needed = 0, uses_anonymous_args = 0
 680              	.LVL74:
 681 0000 10B5     		push	{r4, lr}
 682              	.LCFI12:
 683              		.cfi_def_cfa_offset 8
 684              		.cfi_offset 4, -8
 685              		.cfi_offset 14, -4
 686 0002 82B0     		sub	sp, sp, #8
 687              	.LCFI13:
 688              		.cfi_def_cfa_offset 16
 689              	.LVL75:
 690              	.L49:
 282:Src/main.c    ****     osDelay(100);
 691              		.loc 1 282 0 discriminator 1
 692 0004 274C     		ldr	r4, .L51
ARM GAS  /tmp/cc2tcWM6.s 			page 25


 693 0006 2046     		mov	r0, r4
 694 0008 4FF40041 		mov	r1, #32768
 695 000c 0122     		movs	r2, #1
 696 000e FFF7FEFF 		bl	HAL_GPIO_WritePin
 697              	.LVL76:
 283:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 698              		.loc 1 283 0 discriminator 1
 699 0012 6420     		movs	r0, #100
 700 0014 FFF7FEFF 		bl	osDelay
 701              	.LVL77:
 284:Src/main.c    ****     osDelay(100);
 702              		.loc 1 284 0 discriminator 1
 703 0018 2046     		mov	r0, r4
 704 001a 4FF40041 		mov	r1, #32768
 705 001e 0022     		movs	r2, #0
 706 0020 FFF7FEFF 		bl	HAL_GPIO_WritePin
 707              	.LVL78:
 285:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 708              		.loc 1 285 0 discriminator 1
 709 0024 6420     		movs	r0, #100
 710 0026 FFF7FEFF 		bl	osDelay
 711              	.LVL79:
 286:Src/main.c    ****     osDelay(100);
 712              		.loc 1 286 0 discriminator 1
 713 002a 2046     		mov	r0, r4
 714 002c 4FF48051 		mov	r1, #4096
 715 0030 0122     		movs	r2, #1
 716 0032 FFF7FEFF 		bl	HAL_GPIO_WritePin
 717              	.LVL80:
 287:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 718              		.loc 1 287 0 discriminator 1
 719 0036 6420     		movs	r0, #100
 720 0038 FFF7FEFF 		bl	osDelay
 721              	.LVL81:
 288:Src/main.c    ****     osDelay(100);
 722              		.loc 1 288 0 discriminator 1
 723 003c 2046     		mov	r0, r4
 724 003e 4FF48051 		mov	r1, #4096
 725 0042 0022     		movs	r2, #0
 726 0044 FFF7FEFF 		bl	HAL_GPIO_WritePin
 727              	.LVL82:
 289:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 728              		.loc 1 289 0 discriminator 1
 729 0048 6420     		movs	r0, #100
 730 004a FFF7FEFF 		bl	osDelay
 731              	.LVL83:
 290:Src/main.c    ****     osDelay(100);
 732              		.loc 1 290 0 discriminator 1
 733 004e 2046     		mov	r0, r4
 734 0050 4FF40051 		mov	r1, #8192
 735 0054 0122     		movs	r2, #1
 736 0056 FFF7FEFF 		bl	HAL_GPIO_WritePin
 737              	.LVL84:
 291:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 738              		.loc 1 291 0 discriminator 1
 739 005a 6420     		movs	r0, #100
 740 005c FFF7FEFF 		bl	osDelay
ARM GAS  /tmp/cc2tcWM6.s 			page 26


 741              	.LVL85:
 292:Src/main.c    ****     osDelay(100);
 742              		.loc 1 292 0 discriminator 1
 743 0060 2046     		mov	r0, r4
 744 0062 4FF40051 		mov	r1, #8192
 745 0066 0022     		movs	r2, #0
 746 0068 FFF7FEFF 		bl	HAL_GPIO_WritePin
 747              	.LVL86:
 293:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 748              		.loc 1 293 0 discriminator 1
 749 006c 6420     		movs	r0, #100
 750 006e FFF7FEFF 		bl	osDelay
 751              	.LVL87:
 294:Src/main.c    ****     osDelay(100);
 752              		.loc 1 294 0 discriminator 1
 753 0072 2046     		mov	r0, r4
 754 0074 4FF48041 		mov	r1, #16384
 755 0078 0122     		movs	r2, #1
 756 007a FFF7FEFF 		bl	HAL_GPIO_WritePin
 757              	.LVL88:
 295:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 758              		.loc 1 295 0 discriminator 1
 759 007e 6420     		movs	r0, #100
 760 0080 FFF7FEFF 		bl	osDelay
 761              	.LVL89:
 296:Src/main.c    **** 
 762              		.loc 1 296 0 discriminator 1
 763 0084 2046     		mov	r0, r4
 764 0086 4FF48041 		mov	r1, #16384
 765 008a 0022     		movs	r2, #0
 766 008c FFF7FEFF 		bl	HAL_GPIO_WritePin
 767              	.LVL90:
 298:Src/main.c    ****     osDelayUntil(&prevWakeTime, 50);
 768              		.loc 1 298 0 discriminator 1
 769 0090 FFF7FEFF 		bl	osKernelSysTick
 770              	.LVL91:
 771 0094 02AB     		add	r3, sp, #8
 772 0096 43F8040D 		str	r0, [r3, #-4]!
 299:Src/main.c    ****   }
 773              		.loc 1 299 0 discriminator 1
 774 009a 1846     		mov	r0, r3
 775 009c 3221     		movs	r1, #50
 776 009e FFF7FEFF 		bl	osDelayUntil
 777              	.LVL92:
 300:Src/main.c    **** }
 778              		.loc 1 300 0 discriminator 1
 779 00a2 AFE7     		b	.L49
 780              	.L52:
 781              		.align	2
 782              	.L51:
 783 00a4 000C0240 		.word	1073875968
 784              		.cfi_endproc
 785              	.LFE133:
 787              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 788              		.align	2
 789              		.global	HAL_TIM_PeriodElapsedCallback
 790              		.thumb
ARM GAS  /tmp/cc2tcWM6.s 			page 27


 791              		.thumb_func
 793              	HAL_TIM_PeriodElapsedCallback:
 794              	.LFB142:
 598:Src/main.c    ****   /* USER CODE END 5 */ 
 599:Src/main.c    **** }
 600:Src/main.c    **** 
 601:Src/main.c    **** /**
 602:Src/main.c    ****   * @brief  Period elapsed callback in non blocking mode
 603:Src/main.c    ****   * @note   This function is called  when TIM1 interrupt took place, inside
 604:Src/main.c    ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 605:Src/main.c    ****   * a global variable "uwTick" used as application time base.
 606:Src/main.c    ****   * @param  htim : TIM handle
 607:Src/main.c    ****   * @retval None
 608:Src/main.c    ****   */
 609:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 610:Src/main.c    **** {
 795              		.loc 1 610 0
 796              		.cfi_startproc
 797              		@ args = 0, pretend = 0, frame = 0
 798              		@ frame_needed = 0, uses_anonymous_args = 0
 799              	.LVL93:
 800 0000 08B5     		push	{r3, lr}
 801              	.LCFI14:
 802              		.cfi_def_cfa_offset 8
 803              		.cfi_offset 3, -8
 804              		.cfi_offset 14, -4
 611:Src/main.c    ****   /* USER CODE BEGIN Callback 0 */
 612:Src/main.c    **** 
 613:Src/main.c    ****   /* USER CODE END Callback 0 */
 614:Src/main.c    ****   if (htim->Instance == TIM1) {
 805              		.loc 1 614 0
 806 0002 0268     		ldr	r2, [r0]
 807 0004 024B     		ldr	r3, .L56
 808 0006 9A42     		cmp	r2, r3
 809 0008 01D1     		bne	.L53
 615:Src/main.c    ****     HAL_IncTick();
 810              		.loc 1 615 0
 811 000a FFF7FEFF 		bl	HAL_IncTick
 812              	.LVL94:
 813              	.L53:
 814 000e 08BD     		pop	{r3, pc}
 815              	.L57:
 816              		.align	2
 817              	.L56:
 818 0010 00000140 		.word	1073807360
 819              		.cfi_endproc
 820              	.LFE142:
 822              		.section	.text._Error_Handler,"ax",%progbits
 823              		.align	2
 824              		.global	_Error_Handler
 825              		.thumb
 826              		.thumb_func
 828              	_Error_Handler:
 829              	.LFB143:
 616:Src/main.c    ****   }
 617:Src/main.c    ****   /* USER CODE BEGIN Callback 1 */
 618:Src/main.c    **** 
ARM GAS  /tmp/cc2tcWM6.s 			page 28


 619:Src/main.c    ****   /* USER CODE END Callback 1 */
 620:Src/main.c    **** }
 621:Src/main.c    **** 
 622:Src/main.c    **** /**
 623:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 624:Src/main.c    ****   * @param  file: The file name as string.
 625:Src/main.c    ****   * @param  line: The line in file as a number.
 626:Src/main.c    ****   * @retval None
 627:Src/main.c    ****   */
 628:Src/main.c    **** void _Error_Handler(char *file, int line)
 629:Src/main.c    **** {
 830              		.loc 1 629 0
 831              		.cfi_startproc
 832              		@ Volatile: function does not return.
 833              		@ args = 0, pretend = 0, frame = 0
 834              		@ frame_needed = 0, uses_anonymous_args = 0
 835              	.LVL95:
 836 0000 08B5     		push	{r3, lr}
 837              	.LCFI15:
 838              		.cfi_def_cfa_offset 8
 839              		.cfi_offset 3, -8
 840              		.cfi_offset 14, -4
 841              	.LVL96:
 842              	.L59:
 630:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 631:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 632:Src/main.c    ****   volatile int i;
 633:Src/main.c    ****   while(1)
 634:Src/main.c    ****   {
 635:Src/main.c    ****     HAL_GPIO_WritePin(GPIOD, BLUE_LED, GPIO_PIN_SET);
 843              		.loc 1 635 0 discriminator 1
 844 0002 0348     		ldr	r0, .L61
 845 0004 4FF40041 		mov	r1, #32768
 846 0008 0122     		movs	r2, #1
 847 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
 848              	.LVL97:
 636:Src/main.c    ****   }
 849              		.loc 1 636 0 discriminator 1
 850 000e F8E7     		b	.L59
 851              	.L62:
 852              		.align	2
 853              	.L61:
 854 0010 000C0240 		.word	1073875968
 855              		.cfi_endproc
 856              	.LFE143:
 858              		.section	.text.MX_UART4_Init,"ax",%progbits
 859              		.align	2
 860              		.thumb
 861              		.thumb_func
 863              	MX_UART4_Init:
 864              	.LFB139:
 518:Src/main.c    **** 
 865              		.loc 1 518 0
 866              		.cfi_startproc
 867              		@ args = 0, pretend = 0, frame = 0
 868              		@ frame_needed = 0, uses_anonymous_args = 0
 869 0000 08B5     		push	{r3, lr}
ARM GAS  /tmp/cc2tcWM6.s 			page 29


 870              	.LCFI16:
 871              		.cfi_def_cfa_offset 8
 872              		.cfi_offset 3, -8
 873              		.cfi_offset 14, -4
 520:Src/main.c    ****   huart4.Init.BaudRate = 57600;
 874              		.loc 1 520 0
 875 0002 0B48     		ldr	r0, .L66
 876 0004 0B4B     		ldr	r3, .L66+4
 877 0006 0360     		str	r3, [r0]
 521:Src/main.c    ****   huart4.Init.WordLength = UART_WORDLENGTH_8B;
 878              		.loc 1 521 0
 879 0008 4FF46143 		mov	r3, #57600
 880 000c 4360     		str	r3, [r0, #4]
 522:Src/main.c    ****   huart4.Init.StopBits = UART_STOPBITS_1;
 881              		.loc 1 522 0
 882 000e 0023     		movs	r3, #0
 883 0010 8360     		str	r3, [r0, #8]
 523:Src/main.c    ****   huart4.Init.Parity = UART_PARITY_NONE;
 884              		.loc 1 523 0
 885 0012 C360     		str	r3, [r0, #12]
 524:Src/main.c    ****   huart4.Init.Mode = UART_MODE_TX_RX;
 886              		.loc 1 524 0
 887 0014 0361     		str	r3, [r0, #16]
 525:Src/main.c    ****   huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 888              		.loc 1 525 0
 889 0016 0C22     		movs	r2, #12
 890 0018 4261     		str	r2, [r0, #20]
 526:Src/main.c    ****   huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 891              		.loc 1 526 0
 892 001a 8361     		str	r3, [r0, #24]
 527:Src/main.c    ****   if (HAL_UART_Init(&huart4) != HAL_OK)
 893              		.loc 1 527 0
 894 001c C361     		str	r3, [r0, #28]
 528:Src/main.c    ****   {
 895              		.loc 1 528 0
 896 001e FFF7FEFF 		bl	HAL_UART_Init
 897              	.LVL98:
 898 0022 20B1     		cbz	r0, .L63
 530:Src/main.c    ****   }
 899              		.loc 1 530 0
 900 0024 0448     		ldr	r0, .L66+8
 901 0026 40F21221 		movw	r1, #530
 902 002a FFF7FEFF 		bl	_Error_Handler
 903              	.LVL99:
 904              	.L63:
 905 002e 08BD     		pop	{r3, pc}
 906              	.L67:
 907              		.align	2
 908              	.L66:
 909 0030 00000000 		.word	huart4
 910 0034 004C0040 		.word	1073761280
 911 0038 00000000 		.word	.LC6
 912              		.cfi_endproc
 913              	.LFE139:
 915              		.section	.text.MX_SPI1_Init,"ax",%progbits
 916              		.align	2
 917              		.thumb
ARM GAS  /tmp/cc2tcWM6.s 			page 30


 918              		.thumb_func
 920              	MX_SPI1_Init:
 921              	.LFB138:
 494:Src/main.c    **** 
 922              		.loc 1 494 0
 923              		.cfi_startproc
 924              		@ args = 0, pretend = 0, frame = 0
 925              		@ frame_needed = 0, uses_anonymous_args = 0
 926 0000 08B5     		push	{r3, lr}
 927              	.LCFI17:
 928              		.cfi_def_cfa_offset 8
 929              		.cfi_offset 3, -8
 930              		.cfi_offset 14, -4
 497:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 931              		.loc 1 497 0
 932 0002 0E48     		ldr	r0, .L71
 933 0004 0E4B     		ldr	r3, .L71+4
 934 0006 0360     		str	r3, [r0]
 498:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 935              		.loc 1 498 0
 936 0008 4FF48273 		mov	r3, #260
 937 000c 4360     		str	r3, [r0, #4]
 499:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 938              		.loc 1 499 0
 939 000e 0023     		movs	r3, #0
 940 0010 8360     		str	r3, [r0, #8]
 500:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 941              		.loc 1 500 0
 942 0012 C360     		str	r3, [r0, #12]
 501:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 943              		.loc 1 501 0
 944 0014 0361     		str	r3, [r0, #16]
 502:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 945              		.loc 1 502 0
 946 0016 4361     		str	r3, [r0, #20]
 503:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 947              		.loc 1 503 0
 948 0018 4FF40072 		mov	r2, #512
 949 001c 8261     		str	r2, [r0, #24]
 504:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 950              		.loc 1 504 0
 951 001e C361     		str	r3, [r0, #28]
 505:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 952              		.loc 1 505 0
 953 0020 0362     		str	r3, [r0, #32]
 506:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 954              		.loc 1 506 0
 955 0022 4362     		str	r3, [r0, #36]
 507:Src/main.c    ****   hspi1.Init.CRCPolynomial = 10;
 956              		.loc 1 507 0
 957 0024 8362     		str	r3, [r0, #40]
 508:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 958              		.loc 1 508 0
 959 0026 0A23     		movs	r3, #10
 960 0028 C362     		str	r3, [r0, #44]
 509:Src/main.c    ****   {
 961              		.loc 1 509 0
ARM GAS  /tmp/cc2tcWM6.s 			page 31


 962 002a FFF7FEFF 		bl	HAL_SPI_Init
 963              	.LVL100:
 964 002e 20B1     		cbz	r0, .L68
 511:Src/main.c    ****   }
 965              		.loc 1 511 0
 966 0030 0448     		ldr	r0, .L71+8
 967 0032 40F2FF11 		movw	r1, #511
 968 0036 FFF7FEFF 		bl	_Error_Handler
 969              	.LVL101:
 970              	.L68:
 971 003a 08BD     		pop	{r3, pc}
 972              	.L72:
 973              		.align	2
 974              	.L71:
 975 003c 00000000 		.word	hspi1
 976 0040 00300140 		.word	1073819648
 977 0044 00000000 		.word	.LC6
 978              		.cfi_endproc
 979              	.LFE138:
 981              		.section	.text.MX_I2C1_Init,"ax",%progbits
 982              		.align	2
 983              		.thumb
 984              		.thumb_func
 986              	MX_I2C1_Init:
 987              	.LFB137:
 474:Src/main.c    **** 
 988              		.loc 1 474 0
 989              		.cfi_startproc
 990              		@ args = 0, pretend = 0, frame = 0
 991              		@ frame_needed = 0, uses_anonymous_args = 0
 992 0000 08B5     		push	{r3, lr}
 993              	.LCFI18:
 994              		.cfi_def_cfa_offset 8
 995              		.cfi_offset 3, -8
 996              		.cfi_offset 14, -4
 476:Src/main.c    ****   hi2c1.Init.ClockSpeed = 100000;
 997              		.loc 1 476 0
 998 0002 0C48     		ldr	r0, .L76
 999 0004 0C4B     		ldr	r3, .L76+4
 1000 0006 0360     		str	r3, [r0]
 477:Src/main.c    ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 1001              		.loc 1 477 0
 1002 0008 0C4B     		ldr	r3, .L76+8
 1003 000a 4360     		str	r3, [r0, #4]
 478:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 0;
 1004              		.loc 1 478 0
 1005 000c 0023     		movs	r3, #0
 1006 000e 8360     		str	r3, [r0, #8]
 479:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1007              		.loc 1 479 0
 1008 0010 C360     		str	r3, [r0, #12]
 480:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1009              		.loc 1 480 0
 1010 0012 4FF48042 		mov	r2, #16384
 1011 0016 0261     		str	r2, [r0, #16]
 481:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 1012              		.loc 1 481 0
ARM GAS  /tmp/cc2tcWM6.s 			page 32


 1013 0018 4361     		str	r3, [r0, #20]
 482:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1014              		.loc 1 482 0
 1015 001a 8361     		str	r3, [r0, #24]
 483:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 1016              		.loc 1 483 0
 1017 001c C361     		str	r3, [r0, #28]
 484:Src/main.c    ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 1018              		.loc 1 484 0
 1019 001e 0362     		str	r3, [r0, #32]
 485:Src/main.c    ****   {
 1020              		.loc 1 485 0
 1021 0020 FFF7FEFF 		bl	HAL_I2C_Init
 1022              	.LVL102:
 1023 0024 20B1     		cbz	r0, .L73
 487:Src/main.c    ****   }
 1024              		.loc 1 487 0
 1025 0026 0648     		ldr	r0, .L76+12
 1026 0028 40F2E711 		movw	r1, #487
 1027 002c FFF7FEFF 		bl	_Error_Handler
 1028              	.LVL103:
 1029              	.L73:
 1030 0030 08BD     		pop	{r3, pc}
 1031              	.L77:
 1032 0032 00BF     		.align	2
 1033              	.L76:
 1034 0034 00000000 		.word	hi2c1
 1035 0038 00540040 		.word	1073763328
 1036 003c A0860100 		.word	100000
 1037 0040 00000000 		.word	.LC6
 1038              		.cfi_endproc
 1039              	.LFE137:
 1041              		.section	.text.SystemClock_Config,"ax",%progbits
 1042              		.align	2
 1043              		.global	SystemClock_Config
 1044              		.thumb
 1045              		.thumb_func
 1047              	SystemClock_Config:
 1048              	.LFB135:
 401:Src/main.c    **** 
 1049              		.loc 1 401 0
 1050              		.cfi_startproc
 1051              		@ args = 0, pretend = 0, frame = 80
 1052              		@ frame_needed = 0, uses_anonymous_args = 0
 1053 0000 00B5     		push	{lr}
 1054              	.LCFI19:
 1055              		.cfi_def_cfa_offset 4
 1056              		.cfi_offset 14, -4
 1057 0002 95B0     		sub	sp, sp, #84
 1058              	.LCFI20:
 1059              		.cfi_def_cfa_offset 88
 1060              	.LBB5:
 408:Src/main.c    **** 
 1061              		.loc 1 408 0
 1062 0004 0023     		movs	r3, #0
 1063 0006 0193     		str	r3, [sp, #4]
 1064 0008 244A     		ldr	r2, .L82
ARM GAS  /tmp/cc2tcWM6.s 			page 33


 1065 000a 116C     		ldr	r1, [r2, #64]
 1066 000c 41F08051 		orr	r1, r1, #268435456
 1067 0010 1164     		str	r1, [r2, #64]
 1068 0012 126C     		ldr	r2, [r2, #64]
 1069 0014 02F08052 		and	r2, r2, #268435456
 1070 0018 0192     		str	r2, [sp, #4]
 1071 001a 019A     		ldr	r2, [sp, #4]
 1072              	.LBE5:
 1073              	.LBB6:
 410:Src/main.c    **** 
 1074              		.loc 1 410 0
 1075 001c 0293     		str	r3, [sp, #8]
 1076 001e 204A     		ldr	r2, .L82+4
 1077 0020 1168     		ldr	r1, [r2]
 1078 0022 41F48041 		orr	r1, r1, #16384
 1079 0026 1160     		str	r1, [r2]
 1080 0028 1268     		ldr	r2, [r2]
 1081 002a 02F48042 		and	r2, r2, #16384
 1082 002e 0292     		str	r2, [sp, #8]
 1083 0030 029A     		ldr	r2, [sp, #8]
 1084              	.LBE6:
 414:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1085              		.loc 1 414 0
 1086 0032 0222     		movs	r2, #2
 1087 0034 0892     		str	r2, [sp, #32]
 415:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 1088              		.loc 1 415 0
 1089 0036 0122     		movs	r2, #1
 1090 0038 0B92     		str	r2, [sp, #44]
 416:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1091              		.loc 1 416 0
 1092 003a 1022     		movs	r2, #16
 1093 003c 0C92     		str	r2, [sp, #48]
 417:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1094              		.loc 1 417 0
 1095 003e 0E93     		str	r3, [sp, #56]
 418:Src/main.c    ****   {
 1096              		.loc 1 418 0
 1097 0040 08A8     		add	r0, sp, #32
 1098 0042 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1099              	.LVL104:
 1100 0046 20B1     		cbz	r0, .L79
 420:Src/main.c    ****   }
 1101              		.loc 1 420 0
 1102 0048 1648     		ldr	r0, .L82+8
 1103 004a 4FF4D271 		mov	r1, #420
 1104 004e FFF7FEFF 		bl	_Error_Handler
 1105              	.LVL105:
 1106              	.L79:
 425:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1107              		.loc 1 425 0
 1108 0052 0F23     		movs	r3, #15
 1109 0054 0393     		str	r3, [sp, #12]
 427:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1110              		.loc 1 427 0
 1111 0056 0021     		movs	r1, #0
 1112 0058 0491     		str	r1, [sp, #16]
ARM GAS  /tmp/cc2tcWM6.s 			page 34


 428:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1113              		.loc 1 428 0
 1114 005a 0591     		str	r1, [sp, #20]
 429:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1115              		.loc 1 429 0
 1116 005c 0691     		str	r1, [sp, #24]
 430:Src/main.c    **** 
 1117              		.loc 1 430 0
 1118 005e 0791     		str	r1, [sp, #28]
 432:Src/main.c    ****   {
 1119              		.loc 1 432 0
 1120 0060 03A8     		add	r0, sp, #12
 1121 0062 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1122              	.LVL106:
 1123 0066 20B1     		cbz	r0, .L80
 434:Src/main.c    ****   }
 1124              		.loc 1 434 0
 1125 0068 0E48     		ldr	r0, .L82+8
 1126 006a 4FF4D971 		mov	r1, #434
 1127 006e FFF7FEFF 		bl	_Error_Handler
 1128              	.LVL107:
 1129              	.L80:
 439:Src/main.c    **** 
 1130              		.loc 1 439 0
 1131 0072 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1132              	.LVL108:
 1133 0076 0C4B     		ldr	r3, .L82+12
 1134 0078 A3FB0030 		umull	r3, r0, r3, r0
 1135 007c 8009     		lsrs	r0, r0, #6
 1136 007e FFF7FEFF 		bl	HAL_SYSTICK_Config
 1137              	.LVL109:
 443:Src/main.c    **** 
 1138              		.loc 1 443 0
 1139 0082 0420     		movs	r0, #4
 1140 0084 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 1141              	.LVL110:
 446:Src/main.c    **** }
 1142              		.loc 1 446 0
 1143 0088 4FF0FF30 		mov	r0, #-1
 1144 008c 0F21     		movs	r1, #15
 1145 008e 0022     		movs	r2, #0
 1146 0090 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 1147              	.LVL111:
 447:Src/main.c    **** 
 1148              		.loc 1 447 0
 1149 0094 15B0     		add	sp, sp, #84
 1150              	.LCFI21:
 1151              		.cfi_def_cfa_offset 4
 1152              		@ sp needed
 1153 0096 5DF804FB 		ldr	pc, [sp], #4
 1154              	.L83:
 1155 009a 00BF     		.align	2
 1156              	.L82:
 1157 009c 00380240 		.word	1073887232
 1158 00a0 00700040 		.word	1073770496
 1159 00a4 00000000 		.word	.LC6
 1160 00a8 D34D6210 		.word	274877907
ARM GAS  /tmp/cc2tcWM6.s 			page 35


 1161              		.cfi_endproc
 1162              	.LFE135:
 1164              		.section	.text.main,"ax",%progbits
 1165              		.align	2
 1166              		.global	main
 1167              		.thumb
 1168              		.thumb_func
 1170              	main:
 1171              	.LFB134:
 310:Src/main.c    ****   /* USER CODE BEGIN 1 */
 1172              		.loc 1 310 0
 1173              		.cfi_startproc
 1174              		@ args = 0, pretend = 0, frame = 40
 1175              		@ frame_needed = 0, uses_anonymous_args = 0
 1176 0000 70B5     		push	{r4, r5, r6, lr}
 1177              	.LCFI22:
 1178              		.cfi_def_cfa_offset 16
 1179              		.cfi_offset 4, -16
 1180              		.cfi_offset 5, -12
 1181              		.cfi_offset 6, -8
 1182              		.cfi_offset 14, -4
 1183 0002 8AB0     		sub	sp, sp, #40
 1184              	.LCFI23:
 1185              		.cfi_def_cfa_offset 56
 318:Src/main.c    **** 
 1186              		.loc 1 318 0
 1187 0004 FFF7FEFF 		bl	HAL_Init
 1188              	.LVL112:
 325:Src/main.c    **** 
 1189              		.loc 1 325 0
 1190 0008 FFF7FEFF 		bl	SystemClock_Config
 1191              	.LVL113:
 332:Src/main.c    ****   MX_UART4_Init();
 1192              		.loc 1 332 0
 1193 000c FFF7FEFF 		bl	MX_GPIO_Init
 1194              	.LVL114:
 333:Src/main.c    ****   MX_SPI1_Init();
 1195              		.loc 1 333 0
 1196 0010 FFF7FEFF 		bl	MX_UART4_Init
 1197              	.LVL115:
 334:Src/main.c    ****   MX_I2C1_Init();
 1198              		.loc 1 334 0
 1199 0014 FFF7FEFF 		bl	MX_SPI1_Init
 1200              	.LVL116:
 335:Src/main.c    ****   //MX_CAN1_Init();
 1201              		.loc 1 335 0
 1202 0018 FFF7FEFF 		bl	MX_I2C1_Init
 1203              	.LVL117:
 355:Src/main.c    ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 1204              		.loc 1 355 0
 1205 001c 0E4C     		ldr	r4, .L87
 1206 001e 05AD     		add	r5, sp, #20
 1207 0020 04F11006 		add	r6, r4, #16
 1208 0024 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 1209 0026 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 1210 0028 3368     		ldr	r3, [r6]
 1211 002a 2B60     		str	r3, [r5]
ARM GAS  /tmp/cc2tcWM6.s 			page 36


 356:Src/main.c    **** 
 1212              		.loc 1 356 0
 1213 002c 05A8     		add	r0, sp, #20
 1214 002e 0021     		movs	r1, #0
 1215 0030 FFF7FEFF 		bl	osThreadCreate
 1216              	.LVL118:
 1217 0034 094B     		ldr	r3, .L87+4
 1218 0036 1860     		str	r0, [r3]
 368:Src/main.c    ****   spiTaskHandle = osThreadCreate(osThread(spiTask),NULL);
 1219              		.loc 1 368 0
 1220 0038 6D46     		mov	r5, sp
 1221 003a 2434     		adds	r4, r4, #36
 1222 003c 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 1223 003e 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 1224 0040 2368     		ldr	r3, [r4]
 1225 0042 2B60     		str	r3, [r5]
 369:Src/main.c    ****   /* USER CODE END RTOS_THREADS */
 1226              		.loc 1 369 0
 1227 0044 6846     		mov	r0, sp
 1228 0046 0021     		movs	r1, #0
 1229 0048 FFF7FEFF 		bl	osThreadCreate
 1230              	.LVL119:
 1231 004c 044B     		ldr	r3, .L87+8
 1232 004e 1860     		str	r0, [r3]
 378:Src/main.c    ****   
 1233              		.loc 1 378 0
 1234 0050 FFF7FEFF 		bl	osKernelStart
 1235              	.LVL120:
 1236              	.L85:
 391:Src/main.c    ****   /* USER CODE END 3 */
 1237              		.loc 1 391 0 discriminator 1
 1238 0054 FEE7     		b	.L85
 1239              	.L88:
 1240 0056 00BF     		.align	2
 1241              	.L87:
 1242 0058 00000000 		.word	.LANCHOR0
 1243 005c 00000000 		.word	defaultTaskHandle
 1244 0060 00000000 		.word	spiTaskHandle
 1245              		.cfi_endproc
 1246              	.LFE134:
 1248              		.comm	arr,9,4
 1249              		.comm	spi_rx_buff,2,4
 1250              		.global	spi_address
 1251              		.comm	i2c_accel,6,4
 1252              		.comm	i2c_rx_buff_gyro,6,4
 1253              		.comm	i2c_tx_buff_gyro,6,4
 1254              		.comm	i2c_tx_buff_accel,6,4
 1255              		.comm	i2c_rx_buff_accel,6,4
 1256              		.comm	spiTaskHandle,4,4
 1257              		.comm	canTaskHandle,4,4
 1258              		.comm	uartTaskHandle,4,4
 1259              		.comm	i2cTaskHandle,4,4
 1260              		.comm	defaultTaskHandle,4,4
 1261              		.comm	huart4,64,4
 1262              		.comm	hspi1,88,4
 1263              		.comm	hi2c1,84,4
 1264              		.comm	hcan1,40,4
ARM GAS  /tmp/cc2tcWM6.s 			page 37


 1265              		.section	.rodata
 1266              		.align	2
 1267              		.set	.LANCHOR0,. + 0
 1268              	.LC0:
 1269 0000 FF       		.byte	-1
 1270 0001 FF       		.byte	-1
 1271 0002 FF       		.byte	-1
 1272 0003 FF       		.byte	-1
 1273 0004 FF       		.byte	-1
 1274 0005 FF       		.byte	-1
 1275 0006 FF       		.byte	-1
 1276 0007 FF       		.byte	-1
 1277              	.LC1:
 1278 0008 AA       		.byte	-86
 1279 0009 AA       		.byte	-86
 1280 000a AA       		.byte	-86
 1281 000b AA       		.byte	-86
 1282 000c AA       		.byte	-86
 1283 000d AA       		.byte	-86
 1284 000e AA       		.byte	-86
 1285 000f AA       		.byte	-86
 1286              	.LC7:
 1287 0010 14000000 		.word	.LC2
 1288 0014 00000000 		.word	StartDefaultTask
 1289 0018 0000     		.short	0
 1290 001a 0000     		.space	2
 1291 001c 00000000 		.word	0
 1292 0020 80000000 		.word	128
 1293              	.LC8:
 1294 0024 0C000000 		.word	.LC4
 1295 0028 00000000 		.word	spiTest
 1296 002c 0100     		.short	1
 1297 002e 0000     		.space	2
 1298 0030 01000000 		.word	1
 1299 0034 80000000 		.word	128
 1300              		.section	.data.spi_address,"aw",%progbits
 1301              		.align	2
 1302              		.set	.LANCHOR1,. + 0
 1305              	spi_address:
 1306 0000 84       		.byte	-124
 1307 0001 00       		.byte	0
 1308              		.section	.rodata.str1.4,"aMS",%progbits,1
 1309              		.align	2
 1310              	.LC6:
 1311 0000 5372632F 		.ascii	"Src/main.c\000"
 1311      6D61696E 
 1311      2E6300
 1312 000b 00       		.space	1
 1313              	.LC4:
 1314 000c 73706954 		.ascii	"spiTask\000"
 1314      61736B00 
 1315              	.LC2:
 1316 0014 64656661 		.ascii	"defaultTask\000"
 1316      756C7454 
 1316      61736B00 
 1317              		.text
 1318              	.Letext0:
ARM GAS  /tmp/cc2tcWM6.s 			page 38


 1319              		.file 2 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 1320              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 1321              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 1322              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1323              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1324              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1325              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1326              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1327              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1328              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 1329              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 1330              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_spi.h"
 1331              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1332              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1333              		.file 16 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 1334              		.file 17 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 1335              		.file 18 "Drivers/CMSIS/Include/core_cm4.h"
 1336              		.file 19 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1337              		.file 20 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
ARM GAS  /tmp/cc2tcWM6.s 			page 39


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc2tcWM6.s:21     .text.StartDefaultTask:0000000000000000 $t
     /tmp/cc2tcWM6.s:26     .text.StartDefaultTask:0000000000000000 StartDefaultTask
     /tmp/cc2tcWM6.s:52     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cc2tcWM6.s:56     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cc2tcWM6.s:175    .text.MX_GPIO_Init:00000000000000a4 $d
     /tmp/cc2tcWM6.s:183    .text.writei2c:0000000000000000 $t
     /tmp/cc2tcWM6.s:188    .text.writei2c:0000000000000000 writei2c
     /tmp/cc2tcWM6.s:315    .text.writei2c:000000000000009c $d
                            *COM*:0000000000000006 i2c_tx_buff_accel
                            *COM*:0000000000000006 i2c_rx_buff_accel
                            *COM*:0000000000000054 hi2c1
                            *COM*:0000000000000006 i2c_accel
     /tmp/cc2tcWM6.s:324    .text.canTest:0000000000000000 $t
     /tmp/cc2tcWM6.s:329    .text.canTest:0000000000000000 canTest
     /tmp/cc2tcWM6.s:442    .text.canTest:000000000000008c $d
                            *COM*:0000000000000028 hcan1
     /tmp/cc2tcWM6.s:449    .text.uart_debug:0000000000000000 $t
     /tmp/cc2tcWM6.s:454    .text.uart_debug:0000000000000000 uart_debug
     /tmp/cc2tcWM6.s:491    .text.uart_debug:0000000000000020 $d
                            *COM*:0000000000000040 huart4
     /tmp/cc2tcWM6.s:497    .text.uartTest:0000000000000000 $t
     /tmp/cc2tcWM6.s:502    .text.uartTest:0000000000000000 uartTest
     /tmp/cc2tcWM6.s:551    .text.uartTest:000000000000002c $d
                            *COM*:0000000000000009 arr
     /tmp/cc2tcWM6.s:557    .text.spiTest:0000000000000000 $t
     /tmp/cc2tcWM6.s:562    .text.spiTest:0000000000000000 spiTest
     /tmp/cc2tcWM6.s:658    .text.spiTest:0000000000000084 $d
                            *COM*:0000000000000058 hspi1
                            *COM*:0000000000000002 spi_rx_buff
     /tmp/cc2tcWM6.s:669    .text.Leds:0000000000000000 $t
     /tmp/cc2tcWM6.s:674    .text.Leds:0000000000000000 Leds
     /tmp/cc2tcWM6.s:783    .text.Leds:00000000000000a4 $d
     /tmp/cc2tcWM6.s:788    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/cc2tcWM6.s:793    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/cc2tcWM6.s:818    .text.HAL_TIM_PeriodElapsedCallback:0000000000000010 $d
     /tmp/cc2tcWM6.s:823    .text._Error_Handler:0000000000000000 $t
     /tmp/cc2tcWM6.s:828    .text._Error_Handler:0000000000000000 _Error_Handler
     /tmp/cc2tcWM6.s:854    .text._Error_Handler:0000000000000010 $d
     /tmp/cc2tcWM6.s:859    .text.MX_UART4_Init:0000000000000000 $t
     /tmp/cc2tcWM6.s:863    .text.MX_UART4_Init:0000000000000000 MX_UART4_Init
     /tmp/cc2tcWM6.s:909    .text.MX_UART4_Init:0000000000000030 $d
     /tmp/cc2tcWM6.s:916    .text.MX_SPI1_Init:0000000000000000 $t
     /tmp/cc2tcWM6.s:920    .text.MX_SPI1_Init:0000000000000000 MX_SPI1_Init
     /tmp/cc2tcWM6.s:975    .text.MX_SPI1_Init:000000000000003c $d
     /tmp/cc2tcWM6.s:982    .text.MX_I2C1_Init:0000000000000000 $t
     /tmp/cc2tcWM6.s:986    .text.MX_I2C1_Init:0000000000000000 MX_I2C1_Init
     /tmp/cc2tcWM6.s:1034   .text.MX_I2C1_Init:0000000000000034 $d
     /tmp/cc2tcWM6.s:1042   .text.SystemClock_Config:0000000000000000 $t
     /tmp/cc2tcWM6.s:1047   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cc2tcWM6.s:1157   .text.SystemClock_Config:000000000000009c $d
     /tmp/cc2tcWM6.s:1165   .text.main:0000000000000000 $t
     /tmp/cc2tcWM6.s:1170   .text.main:0000000000000000 main
     /tmp/cc2tcWM6.s:1242   .text.main:0000000000000058 $d
                            *COM*:0000000000000004 defaultTaskHandle
                            *COM*:0000000000000004 spiTaskHandle
ARM GAS  /tmp/cc2tcWM6.s 			page 40


     /tmp/cc2tcWM6.s:1305   .data.spi_address:0000000000000000 spi_address
                            *COM*:0000000000000006 i2c_rx_buff_gyro
                            *COM*:0000000000000006 i2c_tx_buff_gyro
                            *COM*:0000000000000004 canTaskHandle
                            *COM*:0000000000000004 uartTaskHandle
                            *COM*:0000000000000004 i2cTaskHandle
     /tmp/cc2tcWM6.s:1266   .rodata:0000000000000000 $d
     /tmp/cc2tcWM6.s:1301   .data.spi_address:0000000000000000 $d
     /tmp/cc2tcWM6.s:1309   .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
osDelay
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_I2C_Master_Transmit
HAL_I2C_Master_Receive
HAL_GPIO_TogglePin
HAL_CAN_Start
HAL_CAN_WakeUp
HAL_CAN_IsTxMessagePending
HAL_CAN_AddTxMessage
HAL_UART_Transmit
HAL_Delay
HAL_SPI_TransmitReceive
osKernelSysTick
osDelayUntil
HAL_IncTick
HAL_UART_Init
HAL_SPI_Init
HAL_I2C_Init
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
osThreadCreate
osKernelStart
